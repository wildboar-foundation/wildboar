:py:mod:`wildboar.explain`
==========================

.. py:module:: wildboar.explain

.. autoapi-nested-parse::

   Explanation methods for classifiers and regressors.



Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   counterfactual/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   wildboar.explain.AmplitudeImportance
   wildboar.explain.IntervalImportance
   wildboar.explain.ShapeletImportance



Functions
~~~~~~~~~

.. autoapisummary::

   wildboar.explain.plot_importances



.. py:class:: AmplitudeImportance(scoring=None, n_intervals='sqrt', window=None, binning='normal', n_bins=4, n_repeat=1, verbose=0, random_state=None)


   Bases: :py:obj:`wildboar.base.ExplainerMixin`, :py:obj:`PermuteImportance`

   Compute the importance of equi-probable amplitude intervals.

   The implementation uses
   :class:`transform.SAX` to discretize the time series and then for each bin permute
   the samples along that bin.

   Paramters
   ---------
   sax_ : SAX
       The SAX transformation.
   baseline_score_ : float or dict
       The baseline score.
   importances_ : float or dict
       The importances of each vertical bin.
   components_ : list
       List of binning identifiers.

   .. py:method:: explain(X, y=None)


   .. py:method:: fit(estimator, X, y, sample_weight=None)


   .. py:method:: plot(x=None, y=None, *, ax=None, n_samples=100, scoring=None, preprocess=True, k=None, show_bins=False, show_grid=True)

      Plot the importances.

      If x is given, the importances are plotted over the samples optionally
      labeling each sample using the supplied labels. If x is not give, the
      importances are plotted as one or more boxplots.

      :param x: The samples
      :type x: array-like of shape (n_samples, n_timesteps), optional
      :param y: The labels
      :type y: array-like of shape (n_samples, ), optional
      :param ax: Axes to plot. If ax is set, x is None and scoring is None, the number of
                 axes must be the same as the number of scorers.
      :type ax: Axes, optional
      :param scoring: The scoring to plot if multiple scorers were used when fitting.
      :type scoring: str, optional
      :param preprocess: Preprocess the time series to align with the bins, ignored if x is not None.
      :type preprocess: bool, optional
      :param k: The number of top bins to plot, ignored if x is not None.

                - if int, the specified number of bins are shown
                - if float, a fraction of the number of bins are shown
      :type k: int or float, optional
      :param show_bins: Annotate the plot with the index of the bin, ignored if x is not None.
      :type show_bins: bool, optional
      :param show_grid: Annotate the plot with the bin thresholds, ignored if x is not None.
      :type show_grid: bool, optional

      :returns: * **ax** (*Axis*) -- The axis
                * **mappable** (*ScalarMappable, optional*) -- Return the mappable used to plot the colorbar.
                  Only returned if ax is not None and x is not None.



.. py:class:: IntervalImportance(*, scoring=None, n_repeat=5, n_intervals='sqrt', window=None, verbose=0, random_state=None)


   Bases: :py:obj:`wildboar.base.ExplainerMixin`, :py:obj:`PermuteImportance`

   Interval importance for time series.

   .. attribute:: importances_

      The importance scores for each interval. If dict, one value per scoring
      function.

      :type: dict or Importance

   .. attribute:: components_

      The interval start and end positions.

      :type: ndarray of shape (n_intervals, 2)

   .. attribute:: Construct new interval importance estimator.



   .. attribute::



      :type: param scoring: The scoring function. By default the estimators score function is used.

   .. attribute::



      :type: type scoring: str, list, dict or callable, optional

   .. attribute::



      :type: param n_repeat: The number of repeated permutations

   .. attribute::



      :type: type n_repeat: int, optional

   .. attribute::



      - if "sqrt", the number of intervals is the square root of n_timestep.
      - if "log2", the number of intervals is the log2 of n_timestep.
      - if int, exact number of intervals.

      :type: param n_intervals: The number of intervals.

   .. attribute::



      :type: type n_intervals: str, optional

   .. attribute::

      intervals is computed such that each interval is (at least) of size window.

      :type: param window: The window size. If specicied, n_intervals is ignored and the number of

   .. attribute::



      :type: type window: int, optional

   .. attribute::



      :type: param domain: Compute the importance in the time or frequency domain.

   .. attribute::



      :type: type domain: {"time", "frequency"}, optional

   .. attribute::



      :type: param verbose: Show extra progress information.

   .. attribute::



      :type: type verbose: bool, optional

   .. attribute::



      - If `int`, `random_state` is the seed used by the random number generator
      - If `RandomState` instance, `random_state` is the random number generator
      - If `None`, the random number generator is the `RandomState` instance used
        by `np.random`.

      :type: param random_state:

   .. attribute::



      :type: type random_state: int or RandomState

   .. py:method:: explain(x, y=None)


   .. py:method:: fit(estimator, x, y, sample_weight=None)


   .. py:method:: plot(x=None, y=None, *, ax=None, scoring=None, k=None, n_samples=100, show_grid=True)

      Plot the explanation.

      :returns: **ax** -- The axes object
      :rtype: Axes



.. py:class:: ShapeletImportance(scoring=None, n_repeat=1, n_shapelets=10, min_shapelet_size=0.0, max_shapelet_size=1.0, metric='euclidean', metric_params=None, verbose=0, random_state=None)


   Bases: :py:obj:`wildboar.base.ExplainerMixin`, :py:obj:`PermuteImportance`

   Compute the importance of shapelets.

   The importance is given by permuting time series sections with
   the minimum distance to shapelets.

   .. attribute:: components

      The shapelets

      :type: ndarray

   .. py:method:: explain(X, y=None, kernel_scale=0.25)


   .. py:method:: fit(estimator, X, y, sample_weight=None)


   .. py:method:: plot(X=None, y=None, k=None, scoring=None, kernel_scale=0.25, ax=None)

      Plot the explanation.

      :returns: **ax** -- The axes object
      :rtype: Axes



.. py:function:: plot_importances(importances, ax=None, labels=None)

   Plot the importances as a boxplot.

   Paramters
   ---------
   importances : Importance or dict
       The importances
   ax : Axes, optional
       The axes to plot. If importances is dict, ax must contain at least
       len(importances) Axes objects.
   labels : array-like, optional
       The labels for the importances.

   :returns: **ax** -- The plotted Axes.
   :rtype: Axes


