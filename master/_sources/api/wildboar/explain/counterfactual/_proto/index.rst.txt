:orphan:


************************************************
:py:mod:`wildboar.explain.counterfactual._proto`
************************************************

.. py:module:: wildboar.explain.counterfactual._proto


Module Contents
---------------

Classes
-------

.. autoapisummary::

   wildboar.explain.counterfactual._proto.DynamicTimeWarpTransform
   wildboar.explain.counterfactual._proto.EuclideanTransform
   wildboar.explain.counterfactual._proto.KNearestPrototypeSampler
   wildboar.explain.counterfactual._proto.KNearestShapeletPrototypeSampler
   wildboar.explain.counterfactual._proto.MetricTransform
   wildboar.explain.counterfactual._proto.PredictEvaluator
   wildboar.explain.counterfactual._proto.ProbabilityEvaluator
   wildboar.explain.counterfactual._proto.PrototypeCounterfactual
   wildboar.explain.counterfactual._proto.PrototypeSampler
   wildboar.explain.counterfactual._proto.ShapeletPrototypeSampler
   wildboar.explain.counterfactual._proto.TargetEvaluator
   wildboar.explain.counterfactual._proto.UniformPrototypeSampler
   wildboar.explain.counterfactual._proto.WeightedDynamicTimeWarpTransform




.. py:class:: DynamicTimeWarpTransform(gamma, r=1.0)


   Bases: :py:obj:`MetricTransform`

   
   Transform a sample by moving it closer using the dtw alignment matrix.
















   ..
       !! processed by numpydoc !!
   .. py:method:: move(o, p)

      
      Move the sample o towards p.


      :Parameters:

          **o** : ndarray of shape (n_timestep,)
              An array, the time series to move

          **p** : ndarray of shape (n_timestep,)
              An array, the time series to move towards

      :Returns:

          **ndarray** : an array, the result of moving o closer to p
              ..













      ..
          !! processed by numpydoc !!


.. py:class:: EuclideanTransform(gamma)


   Bases: :py:obj:`MetricTransform`

   
   Transform a sample by moving it closer in euclidean space.
















   ..
       !! processed by numpydoc !!
   .. py:method:: move(o, p)

      
      Move the sample o towards p.


      :Parameters:

          **o** : ndarray of shape (n_timestep,)
              An array, the time series to move

          **p** : ndarray of shape (n_timestep,)
              An array, the time series to move towards

      :Returns:

          **ndarray** : an array, the result of moving o closer to p
              ..













      ..
          !! processed by numpydoc !!


.. py:class:: KNearestPrototypeSampler(x, y, prototype_indicies, metric_transform)


   Bases: :py:obj:`PrototypeSampler`

   
   Sample a prototype among the samples closest to the current counterfactual.
















   ..
       !! processed by numpydoc !!
   .. py:method:: nearest_index(o, random_state)

      
      Return the index of the closest sample.


      :Parameters:

          **o** : ndarray of shape (n_timestep,)
              The current counterfactual sample

      :Returns:

          **int** : an index
              ..













      ..
          !! processed by numpydoc !!

   .. py:method:: sample(o, random_state)

      
      Sample an example.


      :Parameters:

          **o** : ndarray of shape (n_timestep,)
              The current counterfactual sample

      :Returns:

          **prototype** : ndarray of shape (n_timestep,)
              A prototype of the counterfactual label













      ..
          !! processed by numpydoc !!


.. py:class:: KNearestShapeletPrototypeSampler(x, y, prototype_indicies, metric_transform, min_shapelet_size=0, max_shapelet_size=1)


   Bases: :py:obj:`PrototypeSampler`

   
   Combines the KNearestPrototypeSample and the ShapeletPrototypeSampler.

   The prototype samples are sampled among the nearest neighbors of the
   counterfactual.















   ..
       !! processed by numpydoc !!
   .. py:method:: move(o, p)

      
      Move the current counterfactual toward the prototype.


      :Parameters:

          **o** : ndarray of shape (n_timestep,)
              The current counterfactual sample

          **p** : ndarray of shape (n_timestep,)
              The prototype of the counterfactual label

      :Returns:

          **new_counterfactual** : ndarray of shape (n_timestep,)
              The new counterfactual moved towards the prototype













      ..
          !! processed by numpydoc !!

   .. py:method:: sample(o, random_state)

      
      Sample an example.


      :Parameters:

          **o** : ndarray of shape (n_timestep,)
              The current counterfactual sample

      :Returns:

          **prototype** : ndarray of shape (n_timestep,)
              A prototype of the counterfactual label













      ..
          !! processed by numpydoc !!


.. py:class:: MetricTransform(gamma)


   Bases: :py:obj:`abc.ABC`

   
   Move a time series towards a prototype.
















   ..
       !! processed by numpydoc !!
   .. py:method:: move(o, p)
      :abstractmethod:

      
      Move the sample o towards p.


      :Parameters:

          **o** : ndarray of shape (n_timestep,)
              An array, the time series to move

          **p** : ndarray of shape (n_timestep,)
              An array, the time series to move towards

      :Returns:

          **ndarray** : an array, the result of moving o closer to p
              ..













      ..
          !! processed by numpydoc !!


.. py:class:: PredictEvaluator(estimator)


   Bases: :py:obj:`TargetEvaluator`

   
   Evaluate if a counterfactual is predicted as y.
















   ..
       !! processed by numpydoc !!

.. py:class:: ProbabilityEvaluator(estimator, probability=0.5)


   Bases: :py:obj:`TargetEvaluator`

   
   Evaluate the probability threshold.
















   ..
       !! processed by numpydoc !!

.. py:class:: PrototypeCounterfactual(metric='euclidean', *, r=1.0, g=0.05, max_iter=100, step_size=0.1, n_prototypes='auto', target='auto', method='sample', min_shapelet_size=0.0, max_shapelet_size=1.0, random_state=None, verbose=False)


   Bases: :py:obj:`wildboar.base.CounterfactualMixin`, :py:obj:`wildboar.base.ExplainerMixin`, :py:obj:`wildboar.base.BaseEstimator`

   
   Model agnostic approach for constructing counterfactual explanations.












   .. rubric:: References

   Samsten, Isak (2020).
       Model agnostic time series counterfactuals

   .. only:: latex

      


   :Attributes:

       **estimator_** : object
           The estimator for which counterfactuals are computed

       **classes_** : ndarray
           The classes

       **partitions_** : dict
           Dictionary of classes and PrototypeSampler

       **target_** : TargetEvaluator
           The target evaluator


   ..
       !! processed by numpydoc !!
   .. py:method:: explain(x, y)


   .. py:method:: fit(estimator, x, y)



.. py:class:: PrototypeSampler(x, y, prototype_indices, metric_transform)


   Bases: :py:obj:`abc.ABC`

   
   Helper class that provides a standard way to create an ABC using
   inheritance.
















   ..
       !! processed by numpydoc !!
   .. py:method:: move(o, p)

      
      Move the current counterfactual toward the prototype.


      :Parameters:

          **o** : ndarray of shape (n_timestep,)
              The current counterfactual sample

          **p** : ndarray of shape (n_timestep,)
              The prototype of the counterfactual label

      :Returns:

          **new_counterfactual** : ndarray of shape (n_timestep,)
              The new counterfactual moved towards the prototype













      ..
          !! processed by numpydoc !!

   .. py:method:: sample(o, random_state)
      :abstractmethod:

      
      Sample an example.


      :Parameters:

          **o** : ndarray of shape (n_timestep,)
              The current counterfactual sample

      :Returns:

          **prototype** : ndarray of shape (n_timestep,)
              A prototype of the counterfactual label













      ..
          !! processed by numpydoc !!

   .. py:method:: sample_move(o, random_state)

      
      Sampla a prototype and move the counterfactual towards the prototype.


      :Parameters:

          **o** : ndarray of shape (n_timestep,)
              The current counterfactual sample

      :Returns:

          **new_counterfactual** : ndarray of shape (n_timestep,)
              The new counterfactual moved towards the prototype













      ..
          !! processed by numpydoc !!


.. py:class:: ShapeletPrototypeSampler(x, y, prototype_indicies, metric_transform, min_shapelet_size=0, max_shapelet_size=1)


   Bases: :py:obj:`PrototypeSampler`

   
   Sample shapelet prototypes.
















   ..
       !! processed by numpydoc !!
   .. py:method:: move(o, p)

      
      Move the best matching shapelet towards the shapelet prototype.


      :Parameters:

          **o** : ndarray of shape (n_timestep,)
              The counterfactual sample

          **p** : ndarray
              The prototype shapelet

      :Returns:

          **new_counterfactual** : ndarray of shape (n_timestep,)
              The new counterfactual moved towards the prototype













      ..
          !! processed by numpydoc !!

   .. py:method:: sample(_o, random_state)

      
      Sample an example.


      :Parameters:

          **o** : ndarray of shape (n_timestep,)
              The current counterfactual sample

      :Returns:

          **prototype** : ndarray of shape (n_timestep,)
              A prototype of the counterfactual label













      ..
          !! processed by numpydoc !!

   .. py:method:: sample_shapelet(p, random_state)

      
      Sample a shapelet from x.


      :Parameters:

          **p** : ndarray of shape (n_timestep,)
              The prototype sample

      :Returns:

          **shapelet** : ndarray
              A shapelet













      ..
          !! processed by numpydoc !!


.. py:class:: TargetEvaluator(estimator)


   Bases: :py:obj:`abc.ABC`

   
   Evaluate if a sample is a counterfactual.
















   ..
       !! processed by numpydoc !!
   .. py:method:: is_counterfactual(x, y)

      
      Return true if x is a counterfactual of label y.


      :Parameters:

          **x** : ndarray of shape (n_timestep,)
              The counterfactual sample

          **y** : object
              The counterfactual label

      :Returns:

          **bool** : true if counterfactual
              ..













      ..
          !! processed by numpydoc !!


.. py:class:: UniformPrototypeSampler(x, y, prototype_indices, metric_transform)


   Bases: :py:obj:`PrototypeSampler`

   
   Sample a prototype uniformly at random from the initial prototype sample.
















   ..
       !! processed by numpydoc !!
   .. py:method:: sample(_o, random_state)

      
      Sample an example.


      :Parameters:

          **o** : ndarray of shape (n_timestep,)
              The current counterfactual sample

      :Returns:

          **prototype** : ndarray of shape (n_timestep,)
              A prototype of the counterfactual label













      ..
          !! processed by numpydoc !!


.. py:class:: WeightedDynamicTimeWarpTransform(gamma, r=1, g=0.05)


   Bases: :py:obj:`DynamicTimeWarpTransform`

   
   Transform a sample by moving it closer using the dtw alignment matrix.
















   ..
       !! processed by numpydoc !!

