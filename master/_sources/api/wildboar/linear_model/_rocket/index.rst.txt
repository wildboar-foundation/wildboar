:orphan:


***************************************
:py:mod:`wildboar.linear_model._rocket`
***************************************

.. py:module:: wildboar.linear_model._rocket



Classes
-------

.. autoapisummary::

   wildboar.linear_model._rocket.RocketClassifier
   wildboar.linear_model._rocket.RocketRegressor





.. raw:: html

   <br />

.. py:class:: RocketClassifier(n_kernels=10000, *, sampling='normal', sampling_params=None, kernel_size=None, min_size=None, max_size=None, bias_prob=1.0, normalize_prob=1.0, padding_prob=0.5, alphas=(0.1, 1.0, 10.0), fit_intercept=True, scoring=None, cv=None, class_weight=None, normalize=True, random_state=None, n_jobs=None)




   
   A classifier using Rocket transform.


   :Parameters:

       **n_kernels** : int, optional
           The number of kernels to sample at each node.

       **sampling** : {"normal", "uniform", "shapelet"}, optional
           The sampling of convolutional filters.
           
           - if "normal", sample filter according to a normal distribution with
             ``mean`` and ``scale``.
           - if "uniform", sample filter according to a uniform distribution with
             ``lower`` and ``upper``.
           - if "shapelet", sample filters as subsequences in the training data.

       **sampling_params** : dict, optional
           Parameters for the sampling strategy.
           
           - if "normal", ``{"mean": float, "scale": float}``, defaults to
             ``{"mean": 0, "scale": 1}``.
           - if "uniform", ``{"lower": float, "upper": float}``, defaults to
             ``{"lower": -1, "upper": 1}``.

       **kernel_size** : array-like, optional
           The kernel size, by default ``[7, 11, 13]``.

       **min_size** : float, optional
           The minimum timestep size used for generating kernel sizes, If set,
           ``kernel_size`` is ignored.

       **max_size** : float, optional
           The maximum timestep size used for generating kernel sizes, If set,
           ``kernel_size`` is ignored.

       **bias_prob** : float, optional
           The probability of using the bias term.

       **normalize_prob** : float, optional
           The probability of performing normalization.

       **padding_prob** : float, optional
           The probability of padding with zeros.

       **alphas** : array-like of shape (n_alphas,), optional
           Array of alpha values to try.

       **fit_intercept** : bool, optional
           Whether to calculate the intercept for this model.

       **scoring** : str, callable, optional
           A string or a scorer callable object with signature
           `scorer(estimator, X, y)`.

       **cv** : int, cross-validation generator or an iterable, optional
           Determines the cross-validation splitting strategy.

       **class_weight** : dict or 'balanced', optional
           Weights associated with classes in the form `{class_label: weight}`.

       **normalize** : "sparse" or bool, optional
           Standardize before fitting. By default use
           :class:`datasets.preprocess.SparseScaler` to standardize the attributes. Set
           to `False` to disable or `True` to use `StandardScaler`.

       **random_state** : int or RandomState, optional
           Controls the random resampling of the original dataset.
           
           - If ``int``, ``random_state`` is the seed used by the random number
             generator.
           - If :class:`numpy.random.RandomState` instance, ``random_state`` is
             the random number generator.
           - If ``None``, the random number generator is the
             :class:`numpy.random.RandomState` instance used by
             :func:`numpy.random`.

       **n_jobs** : int, optional
           The number of jobs to run in parallel. A value of ``None`` means using
           a single core and a value of ``-1`` means using all cores. Positive
           integers mean the exact number of cores.














   ..
       !! processed by numpydoc !!
   .. py:method:: get_metadata_routing()

      
      Get metadata routing of this object.

      Please check :ref:`User Guide <metadata_routing>` on how the routing
      mechanism works.


      :Returns:

          **routing** : MetadataRequest
              A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating
              routing information.













      ..
          !! processed by numpydoc !!

   .. py:method:: get_params(deep=True)

      
      Get parameters for this estimator.


      :Parameters:

          **deep** : bool, default=True
              If True, will return the parameters for this estimator and
              contained subobjects that are estimators.

      :Returns:

          **params** : dict
              Parameter names mapped to their values.













      ..
          !! processed by numpydoc !!

   .. py:method:: score(X, y, sample_weight=None)

      
      Return the mean accuracy on the given test data and labels.

      In multi-label classification, this is the subset accuracy
      which is a harsh metric since you require for each sample that
      each label set be correctly predicted.

      :Parameters:

          **X** : array-like of shape (n_samples, n_features)
              Test samples.

          **y** : array-like of shape (n_samples,) or (n_samples, n_outputs)
              True labels for `X`.

          **sample_weight** : array-like of shape (n_samples,), default=None
              Sample weights.

      :Returns:

          **score** : float
              Mean accuracy of ``self.predict(X)`` w.r.t. `y`.













      ..
          !! processed by numpydoc !!

   .. py:method:: set_params(**params)

      
      Set the parameters of this estimator.

      The method works on simple estimators as well as on nested objects
      (such as :class:`~sklearn.pipeline.Pipeline`). The latter have
      parameters of the form ``<component>__<parameter>`` so that it's
      possible to update each component of a nested object.

      :Parameters:

          **\*\*params** : dict
              Estimator parameters.

      :Returns:

          **self** : estimator instance
              Estimator instance.













      ..
          !! processed by numpydoc !!


.. py:class:: RocketRegressor(n_kernels=10000, *, sampling='normal', sampling_params=None, kernel_size=None, min_size=None, max_size=None, bias_prob=1.0, normalize_prob=1.0, padding_prob=0.5, alphas=(0.1, 1.0, 10.0), fit_intercept=True, scoring=None, cv=None, gcv_mode=None, normalize=True, random_state=None, n_jobs=None)




   
   A regressor using Rocket transform.


   :Parameters:

       **n_kernels** : int, optional
           The number of kernels to sample at each node.

       **sampling** : {"normal", "uniform", "shapelet"}, optional
           The sampling of convolutional filters.
           
           - if "normal", sample filter according to a normal distribution with
             ``mean`` and ``scale``.
           - if "uniform", sample filter according to a uniform distribution with
             ``lower`` and ``upper``.
           - if "shapelet", sample filters as subsequences in the training data.

       **sampling_params** : dict, optional
           Parameters for the sampling strategy.
           
           - if "normal", ``{"mean": float, "scale": float}``, defaults to
             ``{"mean": 0, "scale": 1}``.
           - if "uniform", ``{"lower": float, "upper": float}``, defaults to
             ``{"lower": -1, "upper": 1}``.

       **kernel_size** : array-like, optional
           The kernel size, by default ``[7, 11, 13]``.

       **min_size** : float, optional
           The minimum timestep size used for generating kernel sizes, If set,
           ``kernel_size`` is ignored.

       **max_size** : float, optional
           The maximum timestep size used for generating kernel sizes, If set,
           ``kernel_size`` is ignored.

       **bias_prob** : float, optional
           The probability of using the bias term.

       **normalize_prob** : float, optional
           The probability of performing normalization.

       **padding_prob** : float, optional
           The probability of padding with zeros.

       **alphas** : array-like of shape (n_alphas,), optional
           Array of alpha values to try.

       **fit_intercept** : bool, optional
           Whether to calculate the intercept for this model.

       **scoring** : str, callable, optional
           A string or a scorer callable object with signature
           `scorer(estimator, X, y)`.

       **cv** : int, cross-validation generator or an iterable, optional
           Determines the cross-validation splitting strategy.

       **gcv_mode** : {'auto', 'svd', 'eigen'}, optional
           Flag indicating which strategy to use when performing
           Leave-One-Out Cross-Validation. Options are::
           
               'auto' : use 'svd' if n_samples > n_features, otherwise use 'eigen'
               'svd' : force use of singular value decomposition of X when X is
                   dense, eigenvalue decomposition of X^T.X when X is sparse.
               'eigen' : force computation via eigendecomposition of X.X^T
           
           The 'auto' mode is the default and is intended to pick the cheaper
           option of the two depending on the shape of the training data.

       **normalize** : "sparse" or bool, optional
           Standardize before fitting. By default use
           :class:`datasets.preprocess.SparseScaler` to standardize the attributes. Set
           to `False` to disable or `True` to use `StandardScaler`.

       **random_state** : int or RandomState, optional
           Controls the random resampling of the original dataset.
           
           - If ``int``, ``random_state`` is the seed used by the random number
             generator.
           - If :class:`numpy.random.RandomState` instance, ``random_state`` is
             the random number generator.
           - If ``None``, the random number generator is the
             :class:`numpy.random.RandomState` instance used by
             :func:`numpy.random`.

       **n_jobs** : int, optional
           The number of jobs to run in parallel. A value of ``None`` means using
           a single core and a value of ``-1`` means using all cores. Positive
           integers mean the exact number of cores.














   ..
       !! processed by numpydoc !!
   .. py:method:: get_metadata_routing()

      
      Get metadata routing of this object.

      Please check :ref:`User Guide <metadata_routing>` on how the routing
      mechanism works.


      :Returns:

          **routing** : MetadataRequest
              A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating
              routing information.













      ..
          !! processed by numpydoc !!

   .. py:method:: get_params(deep=True)

      
      Get parameters for this estimator.


      :Parameters:

          **deep** : bool, default=True
              If True, will return the parameters for this estimator and
              contained subobjects that are estimators.

      :Returns:

          **params** : dict
              Parameter names mapped to their values.













      ..
          !! processed by numpydoc !!

   .. py:method:: score(X, y, sample_weight=None)

      
      Return the coefficient of determination of the prediction.

      The coefficient of determination :math:`R^2` is defined as
      :math:`(1 - \frac{u}{v})`, where :math:`u` is the residual
      sum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`
      is the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.
      The best possible score is 1.0 and it can be negative (because the
      model can be arbitrarily worse). A constant model that always predicts
      the expected value of `y`, disregarding the input features, would get
      a :math:`R^2` score of 0.0.

      :Parameters:

          **X** : array-like of shape (n_samples, n_features)
              Test samples. For some estimators this may be a precomputed
              kernel matrix or a list of generic objects instead with shape
              ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``
              is the number of samples used in the fitting for the estimator.

          **y** : array-like of shape (n_samples,) or (n_samples, n_outputs)
              True values for `X`.

          **sample_weight** : array-like of shape (n_samples,), default=None
              Sample weights.

      :Returns:

          **score** : float
              :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.








      .. rubric:: Notes

      The :math:`R^2` score used when calling ``score`` on a regressor uses
      ``multioutput='uniform_average'`` from version 0.23 to keep consistent
      with default value of :func:`~sklearn.metrics.r2_score`.
      This influences the ``score`` method of all the multioutput
      regressors (except for
      :class:`~sklearn.multioutput.MultiOutputRegressor`).





      ..
          !! processed by numpydoc !!

   .. py:method:: set_params(**params)

      
      Set the parameters of this estimator.

      The method works on simple estimators as well as on nested objects
      (such as :class:`~sklearn.pipeline.Pipeline`). The latter have
      parameters of the form ``<component>__<parameter>`` so that it's
      possible to update each component of a nested object.

      :Parameters:

          **\*\*params** : dict
              Estimator parameters.

      :Returns:

          **self** : estimator instance
              Estimator instance.













      ..
          !! processed by numpydoc !!


