:orphan:


*****************************
:py:mod:`wildboar.tree._base`
*****************************

.. py:module:: wildboar.tree._base


Module Contents
---------------

Classes
-------

.. autoapisummary::

   wildboar.tree._base.BaseTree
   wildboar.tree._base.BaseTreeClassifier
   wildboar.tree._base.BaseTreeRegressor




.. py:class:: BaseTree(*, max_depth=None, min_samples_split=2, min_samples_leaf=1, min_impurity_decrease=0.0)


   Bases: :py:obj:`wildboar.base.BaseEstimator`

   
   Base class for tree based estimators.
















   ..
       !! processed by numpydoc !!
   .. py:method:: apply(x, check_input=True)


   .. py:method:: decision_path(x, check_input=True)



.. py:class:: BaseTreeClassifier(*, max_depth=None, min_samples_split=2, min_samples_leaf=1, min_impurity_decrease=0.0)


   Bases: :py:obj:`sklearn.base.ClassifierMixin`, :py:obj:`BaseTree`

   
   Mixin for classification trees.
















   ..
       !! processed by numpydoc !!
   .. py:method:: fit(x, y, sample_weight=None, check_input=True)

      
      Fit a classification tree.


      :Parameters:

          **x** : array-like of shape (n_samples, n_timesteps)
              The training time series.

          **y** : array-like of shape (n_samples,)
              The target values.

          **sample_weight** : array-like of shape (n_samples,)
              If `None`, then samples are equally weighted. Splits that would create child
              nodes with net zero or negative weight are ignored while searching for a
              split in each node. Splits are also ignored if they would result in any
              single class carrying a negative weight in either child node.

          **check_input** : bool, optional
              Allow to bypass several input checks.

      :Returns:

          self
              This instance.













      ..
          !! processed by numpydoc !!

   .. py:method:: predict(x, check_input=True)

      
      Predict the regression of the input samples x.


      :Parameters:

          **x** : array-like of shape (n_samples, n_timesteps)
              The input time series.

          **check_input** : bool, optional
              Allow to bypass several input checking. Don't use this parameter unless you
              know what you do.

      :Returns:

          ndarray of shape (n_samples,)
              The predicted classes.













      ..
          !! processed by numpydoc !!

   .. py:method:: predict_proba(x, check_input=True)

      
      Predict class probabilities of the input samples X.

      The predicted class probability is the fraction of samples of the same
      class in a leaf.

      :Parameters:

          **x** :  array-like of shape (n_samples, n_timesteps)
              The input time series.

          **check_input** : bool, optional
              Allow to bypass several input checking. Don't use this parameter unless you
              know what you do.

      :Returns:

          ndarray of shape (n_samples, n_classes)
              The class probabilities of the input samples. The order of the classes
              corresponds to that in the attribute `classes_`.













      ..
          !! processed by numpydoc !!


.. py:class:: BaseTreeRegressor(*, max_depth=None, min_samples_split=2, min_samples_leaf=1, min_impurity_decrease=0.0)


   Bases: :py:obj:`sklearn.base.RegressorMixin`, :py:obj:`BaseTree`

   
   Mixin class for all regression estimators in scikit-learn.
















   ..
       !! processed by numpydoc !!
   .. py:method:: fit(x, y, sample_weight=None, check_input=True)

      
      Fit the estimator.


      :Parameters:

          **x** : array-like of shape (n_samples, n_timesteps)
              The training time series.

          **y** : array-like of shape (n_samples,)
              Target values as floating point values.

          **sample_weight** : array-like of shape (n_samples,)
              If `None`, then samples are equally weighted. Splits that would create child
              nodes with net zero or negative weight are ignored while searching for a
              split in each node. Splits are also ignored if they would result in any
              single class carrying a negative weight in either child node.

          **check_input** : bool, optional
              Allow to bypass several input checks.

      :Returns:

          self
              This object.













      ..
          !! processed by numpydoc !!

   .. py:method:: predict(x, check_input=True)

      
      Predict the value of x.


      :Parameters:

          **x** : array-like of shape (n_samples, n_timesteps)
              The input time series.

          **check_input** : bool, optional
              Allow to bypass several input checking. Don't use this parameter unless you
              know what you do.

      :Returns:

          ndarray of shape (n_samples,)
              The predicted classes.













      ..
          !! processed by numpydoc !!


