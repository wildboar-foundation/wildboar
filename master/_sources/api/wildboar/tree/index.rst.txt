:py:mod:`wildboar.tree`
=======================

.. py:module:: wildboar.tree

.. autoapi-nested-parse::

   Tree-based estimators for classification and regression.



Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   wildboar.tree.ExtraShapeletTreeClassifier
   wildboar.tree.ExtraShapeletTreeRegressor
   wildboar.tree.IntervalTreeClassifier
   wildboar.tree.IntervalTreeRegressor
   wildboar.tree.PivotTreeClassifier
   wildboar.tree.ProximityTreeClassifier
   wildboar.tree.RocketTreeClassifier
   wildboar.tree.RocketTreeRegressor
   wildboar.tree.ShapeletTreeClassifier
   wildboar.tree.ShapeletTreeRegressor




.. py:class:: ExtraShapeletTreeClassifier(*, n_shapelets=1, max_depth=None, min_samples_leaf=1, min_impurity_decrease=0.0, min_samples_split=2, min_shapelet_size=0.0, max_shapelet_size=1.0, metric='euclidean', metric_params=None, criterion='entropy', class_weight=None, random_state=None)

   Bases: :py:obj:`ShapeletTreeClassifier`

   An extra shapelet tree classifier.

   Extra shapelet trees are constructed by sampling a distance threshold
   uniformly in the range ``[min(dist), max(dist)]``.

   .. attribute:: tree_

      The tree representation

      :type: Tree

   .. attribute:: Construct a new extra shapelet tree classifier.



   .. attribute::



      :type: param n_shapelets: The number of shapelets to sample at each node.

   .. attribute::



      :type: type n_shapelets: int, optional

   .. attribute::

      leaves are pure or until all leaves contain less than `min_samples_split`
      samples

      :type: param max_depth: The maximum depth of the tree. If `None` the tree is expanded until all

   .. attribute::



      :type: type max_depth: int, optional

   .. attribute::



      :type: param min_samples_split: The minimum number of samples to split an internal node

   .. attribute::



      :type: type min_samples_split: int, optional

   .. attribute::



      :type: param min_samples_leaf: The minimum number of samples in a leaf

   .. attribute::



      :type: type min_samples_leaf: int, optional

   .. attribute::



      :type: param criterion: The criterion used to evaluate the utility of a split

   .. attribute::



      :type: type criterion: {"entropy", "gini"}, optional

   .. attribute::

      equal to this value

      :type: param min_impurity_decrease: A split will be introduced only if the impurity decrease is larger than or

   .. attribute::



      :type: type min_impurity_decrease: float, optional

   .. attribute::

      as ``min(ceil(X.shape[-1] * min_shapelet_size), 2)``.

      :type: param min_shapelet_size: The minimum length of a sampled shapelet expressed as a fraction, computed

   .. attribute::



      :type: type min_shapelet_size: float, optional

   .. attribute::

      as ``ceil(X.shape[-1] * max_shapelet_size)``.

      :type: param max_shapelet_size: The maximum length of a sampled shapelet, expressed as a fraction, computed

   .. attribute::



      :type: type max_shapelet_size: float, optional

   .. attribute::



      :type: param metric: Distance metric used to identify the best shapelet.

   .. attribute::



      :type: type metric: {"euclidean", "scaled_euclidean", "dtw", "scaled_dtw"}, optional

   .. attribute::



      :type: param metric_params: Parameters for the distance measure

   .. attribute::



      :type: type metric_params: dict, optional

   .. attribute::



      - if dict, weights on the form {label: weight}
      - if "balanced" each class weight inversely proportional to the class
        frequency
      - if None, each class has equal weight

      :type: param class_weight: Weights associated with the labels

   .. attribute::



      :type: type class_weight: dict or "balanced", optional

   .. attribute::



      - If `int`, `random_state` is the seed used by the random number generator;
      - If `RandomState` instance, `random_state` is the random number generator;
      - If `None`, the random number generator is the `RandomState` instance used
        by `np.random`.

      :type: param random_state:

   .. attribute::



      :type: type random_state: int or RandomState


.. py:class:: ExtraShapeletTreeRegressor(*, n_shapelets=1, max_depth=None, min_samples_split=2, min_samples_leaf=1, min_impurity_decrease=0.0, min_shapelet_size=0.0, max_shapelet_size=1.0, metric='euclidean', metric_params=None, criterion='squared_error', random_state=None)

   Bases: :py:obj:`ShapeletTreeRegressor`

   An extra shapelet tree regressor.

   Extra shapelet trees are constructed by sampling a distance threshold
   uniformly in the range [min(dist), max(dist)].

   .. attribute:: tree_

      The internal tree representation

      :type: Tree

   .. attribute:: Construct a new extra ranodm shapelet tree regressor estimator.



   .. attribute::



      :type: param n_shapelets: The number of shapelets to sample at each node.

   .. attribute::



      :type: type n_shapelets: int, optional

   .. attribute::

      leaves are pure or until all leaves contain less than `min_samples_split`
      samples

      :type: param max_depth: The maximum depth of the tree. If `None` the tree is expanded until all

   .. attribute::



      :type: type max_depth: int, optional

   .. attribute::



      :type: param min_samples_split: The minimum number of samples to split an internal node

   .. attribute::



      :type: type min_samples_split: int, optional

   .. attribute::



      :type: param min_samples_leaf: The minimum number of samples in a leaf

   .. attribute::



      :type: type min_samples_leaf: int, optional

   .. attribute::



      .. deprecated:: 1.0
          Criterion "mse" was deprecated in v1.1 and will be removed in
          version 1.2. Use `criterion="squared_error"` which is equivalent.

      :type: param criterion: The criterion used to evaluate the utility of a split

   .. attribute::



      :type: type criterion: {"mse"}, optional

   .. attribute::

      equal to this value

      :type: param min_impurity_decrease: A split will be introduced only if the impurity decrease is larger than or

   .. attribute::



      :type: type min_impurity_decrease: float, optional

   .. attribute::



      :type: param n_shapelets: The number of shapelets to sample at each node.

   .. attribute::



      :type: type n_shapelets: int, optional

   .. attribute::

      as `min(ceil(X.shape[-1] * min_shapelet_size), 2)`.

      :type: param min_shapelet_size: The minimum length of a sampled shapelet expressed as a fraction, computed

   .. attribute::



      :type: type min_shapelet_size: float, optional

   .. attribute::

      as `ceil(X.shape[-1] * max_shapelet_size)`.

      :type: param max_shapelet_size: The maximum length of a sampled shapelet, expressed as a fraction, computed

   .. attribute::



      :type: type max_shapelet_size: float, optional

   .. attribute::



      :type: param metric: Distance metric used to identify the best shapelet.

   .. attribute::



      :type: type metric: {'euclidean', 'scaled_euclidean', 'scaled_dtw'}, optional

   .. attribute::



      :type: param metric_params: Parameters for the distance measure

   .. attribute::



      :type: type metric_params: dict, optional

   .. attribute::



      - If `int`, `random_state` is the seed used by the random number generator;
      - If `RandomState` instance, `random_state` is the random number generator;
      - If `None`, the random number generator is the `RandomState` instance used
        by `np.random`.

      :type: param random_state:

   .. attribute::



      :type: type random_state: int or RandomState


.. py:class:: IntervalTreeClassifier(n_intervals='sqrt', *, max_depth=None, min_samples_split=2, min_samples_leaf=1, min_impurity_decrease=0.0, criterion='entropy', intervals='fixed', sample_size=0.5, min_size=0.0, max_size=1.0, summarizer='mean_var_slope', class_weight=None, random_state=None)

   Bases: :py:obj:`wildboar.transform._interval.IntervalMixin`, :py:obj:`BaseFeatureTreeClassifier`

   An interval based tree classifier.

   .. attribute:: tree_

      The internal tree structure.

      :type: Tree

   .. attribute:: Construct a new interval tree classifier.



   .. attribute::



      - if "log", the number of intervals is ``log2(n_timestep)``.
      - if "sqrt", the number of intervals is ``sqrt(n_timestep)``.
      - if int, the number of intervals is ``n_intervals``.
      - if float, the number of intervals is ``n_intervals * n_timestep``, with
        ``0 < n_intervals < 1``.

      :type: param n_intervals: The number of intervals to partition the time series into.

   .. attribute::



      :type: type n_intervals: {"log", "sqrt"}, int or float, optional

   .. attribute::

      leaves are pure or until all leaves contain less than `min_samples_split`
      samples.

      :type: param max_depth: The maximum depth of the tree. If `None` the tree is expanded until all

   .. attribute::



      :type: type max_depth: int, optional

   .. attribute::



      :type: param min_samples_split: The minimum number of samples to split an internal node.

   .. attribute::



      :type: type min_samples_split: int, optional

   .. attribute::



      :type: param min_samples_leaf: The minimum number of samples in a leaf.

   .. attribute::



      :type: type min_samples_leaf: int, optional

   .. attribute::

      equal to this value.

      :type: param min_impurity_decrease: A split will be introduced only if the impurity decrease is larger than or

   .. attribute::



      :type: type min_impurity_decrease: float, optional

   .. attribute::



      :type: param criterion: The criterion used to evaluate the utility of a split.

   .. attribute::



      :type: type criterion: {"entropy", "gini"}, optional

   .. attribute::



      - if "fixed", `n_intervals` non-overlapping intervals.
      - if "sample", ``n_intervals * sample_size`` non-overlapping intervals.
      - if "random", `n_intervals` possibly overlapping intervals of randomly
        sampled in ``[min_size * n_timestep, max_size * n_timestep]``

      :type: param intervals:

   .. attribute::



      :type: type intervals: {"fixed", "sample", "random"}, optional

   .. attribute::

      ``intervals="sample"``.

      :type: param sample_size: The fraction of intervals to sample at each node. Ignored unless

   .. attribute::



      :type: type sample_size: float, optional

   .. attribute::



      :type: param min_size: The minmum interval size. Ignored unless ``intervals="random"``.

   .. attribute::



      :type: type min_size: float, optional

   .. attribute::



      :type: param max_size: The maximum interval size. Ignored unless ``intervals="random"``.

   .. attribute::



      :type: type max_size: float, optional

   .. attribute::



      - if list, a list of callables accepting a numpy array returing a float.
      - if str, a predified summarized. See
        :mod:`wildboar.transform._interval._INTERVALS.keys()` for all supported
        summarizers.

      :type: param summarizer: The summarization of each interval.

   .. attribute::



      :type: type summarizer: list or str, optional

   .. attribute::



      - if dict, weights on the form {label: weight}
      - if "balanced" each class weight inversely proportional to the class
        frequency
      - if None, each class has equal weight

      :type: param class_weight: Weights associated with the labels

   .. attribute::



      :type: type class_weight: dict or "balanced", optional

   .. attribute::



      - If `int`, `random_state` is the seed used by the random number generator
      - If `RandomState` instance, `random_state` is the random number generator
      - If `None`, the random number generator is the `RandomState` instance used
        by `np.random`.

      :type: param random_state:

   .. attribute::



      :type: type random_state: int or RandomState


.. py:class:: IntervalTreeRegressor(n_intervals='sqrt', *, max_depth=None, min_samples_split=2, min_samples_leaf=1, min_impurity_decrease=0.0, criterion='squared_error', intervals='fixed', sample_size=0.5, min_size=0.0, max_size=1.0, summarizer='mean_var_slope', random_state=None)

   Bases: :py:obj:`wildboar.transform._interval.IntervalMixin`, :py:obj:`BaseFeatureTreeRegressor`

   An interval based tree regressor.

   .. attribute:: tree_

      The internal tree structure.

      :type: Tree

   .. attribute:: Construct a new interval tree regressor.



   .. attribute::



      - if "log", the number of intervals is ``log2(n_timestep)``.
      - if "sqrt", the number of intervals is ``sqrt(n_timestep)``.
      - if int, the number of intervals is ``n_intervals``.
      - if float, the number of intervals is ``n_intervals * n_timestep``, with
        ``0 < n_intervals < 1``.

      :type: param n_intervals: The number of intervals to partition the time series into.

   .. attribute::



      :type: type n_intervals: {"log", "sqrt"}, int or float, optional

   .. attribute::

      leaves are pure or until all leaves contain less than `min_samples_split`
      samples.

      :type: param max_depth: The maximum depth of the tree. If `None` the tree is expanded until all

   .. attribute::



      :type: type max_depth: int, optional

   .. attribute::



      :type: param min_samples_split: The minimum number of samples to split an internal node.

   .. attribute::



      :type: type min_samples_split: int, optional

   .. attribute::



      :type: param min_samples_leaf: The minimum number of samples in a leaf.

   .. attribute::



      :type: type min_samples_leaf: int, optional

   .. attribute::

      equal to this value.

      :type: param min_impurity_decrease: A split will be introduced only if the impurity decrease is larger than or

   .. attribute::



      :type: type min_impurity_decrease: float, optional

   .. attribute::



      .. deprecated:: 1.0
          Criterion "mse" was deprecated in v1.1 and will be removed in
          version 1.2. Use `criterion="squared_error"` which is equivalent.

      :type: param criterion: The criterion used to evaluate the utility of a split.

   .. attribute::



      :type: type criterion: {"squared_error"}, optional

   .. attribute::



      - if "fixed", `n_intervals` non-overlapping intervals.
      - if "sample", ``n_intervals * sample_size`` non-overlapping intervals.
      - if "random", `n_intervals` possibly overlapping intervals of randomly
        sampled in ``[min_size * n_timestep, max_size * n_timestep]``

      :type: param intervals:

   .. attribute::



      :type: type intervals: {"fixed", "sample", "random"}, optional

   .. attribute::

      ``intervals="sample"``.

      :type: param sample_size: The fraction of intervals to sample at each node. Ignored unless

   .. attribute::



      :type: type sample_size: float, optional

   .. attribute::



      :type: param min_size: The minmum interval size. Ignored unless ``intervals="random"``.

   .. attribute::



      :type: type min_size: float, optional

   .. attribute::



      :type: param max_size: The maximum interval size. Ignored unless ``intervals="random"``.

   .. attribute::



      :type: type max_size: float, optional

   .. attribute::



      - if list, a list of callables accepting a numpy array returing a float.
      - if str, a predified summarized. See
        :mod:`wildboar.transform._interval._INTERVALS.keys()` for all supported
        summarizers.

      :type: param summarizer: The summarization of each interval.

   .. attribute::



      :type: type summarizer: list or str, optional

   .. attribute::



      - If `int`, `random_state` is the seed used by the random number generator
      - If `RandomState` instance, `random_state` is the random number generator
      - If `None`, the random number generator is the `RandomState` instance used
        by `np.random`.

      :type: param random_state:

   .. attribute::



      :type: type random_state: int or RandomState


.. py:class:: PivotTreeClassifier(n_pivot='sqrt', *, metrics='all', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_impurity_decrease=0.0, criterion='entropy', class_weight=None, random_state=None)

   Bases: :py:obj:`wildboar.transform._pivot.PivotMixin`, :py:obj:`BaseFeatureTreeClassifier`

   A tree classifier that uses pivot time series.

   .. attribute:: tree_

      The internal tree representation

      :type: Tree

   .. attribute:: Construct a new pivot tree classifier.



   .. attribute::



      :type: param n_pivot: The number of pivot time series to sample at each node.

   .. attribute::



      :type: type n_pivot: str or int, optional

   .. attribute::



      :type: param metrics: The metrics to sample from. Currently, we only support "all".

   .. attribute::



      :type: type metrics: str, optional

   .. attribute::

      leaves are pure or until all leaves contain less than `min_samples_split`
      samples.

      :type: param max_depth: The maximum depth of the tree. If `None` the tree is expanded until all

   .. attribute::



      :type: type max_depth: int, optional

   .. attribute::



      :type: param min_samples_split: The minimum number of samples to split an internal node.

   .. attribute::



      :type: type min_samples_split: int, optional

   .. attribute::



      :type: param min_samples_leaf: The minimum number of samples in a leaf.

   .. attribute::



      :type: type min_samples_leaf: int, optional

   .. attribute::

      equal to this value.

      :type: param min_impurity_decrease: A split will be introduced only if the impurity decrease is larger than or

   .. attribute::



      :type: type min_impurity_decrease: float, optional

   .. attribute::



      :type: param criterion: The criterion used to evaluate the utility of a split.

   .. attribute::



      :type: type criterion: {"entropy", "gini"}, optional

   .. attribute::



      - if dict, weights on the form {label: weight}.
      - if "balanced" each class weight inversely proportional to the class
        frequency.
      - if None, each class has equal weight.

      :type: param class_weight: Weights associated with the labels.

   .. attribute::



      :type: type class_weight: dict or "balanced", optional

   .. attribute::



      - If `int`, `random_state` is the seed used by the random number generator
      - If `RandomState` instance, `random_state` is the random number generator
      - If `None`, the random number generator is the `RandomState` instance used
        by `np.random`.

      :type: param random_state:

   .. attribute::



      :type: type random_state: int or RandomState


.. py:class:: ProximityTreeClassifier(n_pivot=1, *, criterion='entropy', pivot_sample='label', metric_sample='weighted', metric='auto', metric_params=None, metric_factories=None, max_depth=None, min_samples_split=2, min_samples_leaf=1, min_impurity_decrease=0.0, class_weight=None, random_state=None)

   Bases: :py:obj:`wildboar.tree._base.BaseTreeClassifier`

   A classifier that uses a k-branching tree based on pivot-time series.

   .. rubric:: Examples

   >>> from wildboar.datasets import load_dataset
   >>> from wildboar.tree import ProximityTreeClassifier
   >>> x, y = load_dataset("GunPoint")
   >>> f = ProximityTreeClassifier(
   ...     n_pivot=10,
   ...     metrics=[
   ...         ("dtw", {"min_r": 0.1, "max_r": 0.25}),
   ...         ("msm", {"min_c": 0.1, "max_c": 100, "num_c": 20})
   ...     ],
   ...     criterion="gini"
   ... )
   >>> f.fit(x, y)

   .. rubric:: References

   Lucas, Benjamin, Ahmed Shifaz, Charlotte Pelletier, Lachlan O'Neill, Nayyar Zaidi,     Bart Goethals, François Petitjean, and Geoffrey I. Webb. (2019)
       Proximity forest: an effective and scalable distance-based classifier for time
       series. Data Mining and Knowledge Discovery

   Construct a new proximity tree estimator.

   :param n_pivot: The number of pivots to sample at each node.
   :type n_pivot: int, optional
   :param criterion: The impurity criterion.
   :type criterion: {"entropy", "gini"}, optional
   :param pivot_sample: The pivot sampling method.
   :type pivot_sample: {"label", "uniform"}, optional
   :param metric_sample: The metric sampling method.
   :type metric_sample: {"uniform", "weighted"}, optional
   :param metric: The distance metrics. By default, we use the parameterization suggested by
                  Lucas et.al (2019).

                  - If str, use a single metric or default metric specification.
                  - If list A custom metric specification can be given as a list of tuples,
                    where the first element of the tuple is a metric name and the second
                    element a dictionary with a parameter grid specification. A parameter grid
                    specification is a dict with two mandatory and one optional key-value
                    pairs defining the lower and upper bound on the values as well as the
                    number of values in the grid. For example, to specifiy a grid over the
                    argument 'r' with 10 values in the range 0 to 1, we would give the
                    following specification: ``dict(min_r=0, max_r=1, num_r=10)``.

                  Read more about the metrics and their parameters in the
                  :ref:`User guide <list_of_metrics>`.
   :type metric: str or list, optional
   :param metric_params: Parameters for the distance measure. Ignored unless metric is a string.

                         Read more about the parameters in the :ref:`User guide
                         <list_of_metrics>`.
   :type metric_params: dict, optional
   :param max_depth: The maximum tree depth.
   :type max_depth: int, optional
   :param min_samples_split: The minimum number of samples to consider a split.
   :type min_samples_split: int, optional
   :param min_samples_leaf: The minimum number of samples in a leaf.
   :type min_samples_leaf: int, optional
   :param min_impurity_decrease: The minimum impurity decrease to build a sub-tree.
   :type min_impurity_decrease: float, optional
   :param class_weight: Weights associated with the labels.

                        - if dict, weights on the form {label: weight}.
                        - if "balanced" each class weight inversely proportional to the class
                          frequency.
                        - if None, each class has equal weight.
   :type class_weight: dict or "balanced", optional
   :param random_state:
                        - If `int`, `random_state` is the seed used by the random number generator
                        - If `RandomState` instance, `random_state` is the random number generator
                        - If `None`, the random number generator is the `RandomState` instance used
                          by `np.random`.
   :type random_state: int or RandomState


.. py:class:: RocketTreeClassifier(n_kernels=10, *, max_depth=None, min_samples_split=2, min_samples_leaf=1, min_impurity_decrease=0.0, criterion='entropy', sampling='normal', sampling_params=None, kernel_size=None, min_size=None, max_size=None, bias_prob=1.0, normalize_prob=1.0, padding_prob=0.5, class_weight=None, random_state=None)

   Bases: :py:obj:`wildboar.transform._rocket.RocketMixin`, :py:obj:`BaseFeatureTreeClassifier`

   A tree classifier that uses random convolutions as features.

   .. attribute:: tree_

      The internal tree representation.

      :type: Tree

   .. attribute:: Construct a new rocket tree classifier.



   .. attribute::



      :type: param n_kernels: The number of kernels to sample at each node.

   .. attribute::



      :type: type n_kernels: int, optional

   .. attribute::

      leaves are pure or until all leaves contain less than `min_samples_split`
      samples.

      :type: param max_depth: The maximum depth of the tree. If `None` the tree is expanded until all

   .. attribute::



      :type: type max_depth: int, optional

   .. attribute::



      :type: param min_samples_split: The minimum number of samples to split an internal node.

   .. attribute::



      :type: type min_samples_split: int, optional

   .. attribute::



      :type: param min_samples_leaf: The minimum number of samples in a leaf.

   .. attribute::



      :type: type min_samples_leaf: int, optional

   .. attribute::

      equal to this value.

      :type: param min_impurity_decrease: A split will be introduced only if the impurity decrease is larger than or

   .. attribute::



      :type: type min_impurity_decrease: float, optional

   .. attribute::



      :type: param criterion: The criterion used to evaluate the utility of a split.

   .. attribute::



      :type: type criterion: {"entropy", "gini"}, optional

   .. attribute::



      - if "normal", sample filter according to a normal distribution with
        ``mean`` and ``scale``.
      - if "uniform", sample filter according to a uniform distribution with
        ``lower`` and ``upper``.
      - if "shapelet", sample filters as subsequences in the training data.

      :type: param sampling: The sampling of convolutional filters.

   .. attribute::



      :type: type sampling: {"normal", "uniform", "shapelet"}, optional

   .. attribute::



      - if "normal", ``{"mean": float, "scale": float}``, defaults to
         ``{"mean": 0, "scale": 1}``.
      - if "uniform", ``{"lower": float, "upper": float}``, defaults to
         ``{"lower": -1, "upper": 1}``.

      :type: param sampling_params: The parameters for the sampling.

   .. attribute::



      :type: type sampling_params: dict, optional

   .. attribute::



      :type: param kernel_size: The kernel size, by default ``[7, 11, 13]``.

   .. attribute::



      :type: type kernel_size: array-like, optional

   .. attribute::

      ``kernel_size`` cannot be set.

      :type: param min_size: The minimum timestep fraction to generate kernel sizes. If set,

   .. attribute::



      :type: type min_size: float, optional

   .. attribute::

      ``kernel_size`` cannot be set.

      :type: param max_size: The maximum timestep fractio to generate kernel sizes, If set,

   .. attribute::



      :type: type max_size: float, optional

   .. attribute::



      :type: param bias_prob: The probability of using a bias term.

   .. attribute::



      :type: type bias_prob: float, optional

   .. attribute::



      :type: param normalize_prob: The probability of performing normalization.

   .. attribute::



      :type: type normalize_prob: float, optional

   .. attribute::



      :type: param padding_prob: The probability of padding with zeros.

   .. attribute::



      :type: type padding_prob: float, optional

   .. attribute::



      - if dict, weights on the form {label: weight}
      - if "balanced" each class weight inversely proportional to the class
        frequency
      - if None, each class has equal weight

      :type: param class_weight: Weights associated with the labels

   .. attribute::



      :type: type class_weight: dict or "balanced", optional

   .. attribute::



      - If `int`, `random_state` is the seed used by the random number generator
      - If `RandomState` instance, `random_state` is the random number generator
      - If `None`, the random number generator is the `RandomState` instance used
        by `np.random`.

      :type: param random_state:

   .. attribute::



      :type: type random_state: int or RandomState


.. py:class:: RocketTreeRegressor(n_kernels=10, *, max_depth=None, min_samples_split=2, min_samples_leaf=1, min_impurity_decrease=0.0, criterion='squared_error', sampling='normal', sampling_params=None, kernel_size=None, bias_prob=1.0, normalize_prob=1.0, padding_prob=0.5, random_state=None)

   Bases: :py:obj:`wildboar.transform._rocket.RocketMixin`, :py:obj:`BaseFeatureTreeRegressor`

   A tree regressor that uses random convolutions as features.

   .. attribute:: tree_

      The internal tree representation.

      :type: Tree

   .. attribute:: Construct a new rocket tree regressor.



   .. attribute::



      :type: param n_kernels: The number of kernels to sample at each node.

   .. attribute::



      :type: type n_kernels: int, optional

   .. attribute::

      leaves are pure or until all leaves contain less than `min_samples_split`
      samples.

      :type: param max_depth: The maximum depth of the tree. If `None` the tree is expanded until all

   .. attribute::



      :type: type max_depth: int, optional

   .. attribute::



      :type: param min_samples_split: The minimum number of samples to split an internal node.

   .. attribute::



      :type: type min_samples_split: int, optional

   .. attribute::



      :type: param min_samples_leaf: The minimum number of samples in a leaf.

   .. attribute::



      :type: type min_samples_leaf: int, optional

   .. attribute::

      equal to this value.

      :type: param min_impurity_decrease: A split will be introduced only if the impurity decrease is larger than or

   .. attribute::



      :type: type min_impurity_decrease: float, optional

   .. attribute::



      :type: param criterion: The criterion used to evaluate the utility of a split.

   .. attribute::



      :type: type criterion: {"entropy", "gini"}, optional

   .. attribute::



      - if "normal", sample filter according to a normal distribution with
        ``mean`` and ``scale``.
      - if "uniform", sample filter according to a uniform distribution with
        ``lower`` and ``upper``.
      - if "shapelet", sample filters as subsequences in the training data.

      :type: param sampling: The sampling of convolutional filters.

   .. attribute::



      :type: type sampling: {"normal", "uniform", "shapelet"}, optional

   .. attribute::



      - if "normal", ``{"mean": float, "scale": float}``, defaults to
         ``{"mean": 0, "scale": 1}``.
      - if "uniform", ``{"lower": float, "upper": float}``, defaults to
         ``{"lower": -1, "upper": 1}``.

      :type: param sampling_params: The parameters for the sampling.

   .. attribute::



      :type: type sampling_params: dict, optional

   .. attribute::



      :type: param kernel_size: The kernel size, by default ``[7, 11, 13]``.

   .. attribute::



      :type: type kernel_size: array-like, optional

   .. attribute::

      ``kernel_size`` cannot be set.

      :type: param min_size: The minimum timestep fraction to generate kernel sizes. If set,

   .. attribute::



      :type: type min_size: float, optional

   .. attribute::

      ``kernel_size`` cannot be set.

      :type: param max_size: The maximum timestep fractio to generate kernel sizes, If set,

   .. attribute::



      :type: type max_size: float, optional

   .. attribute::



      :type: param bias_prob: The probability of using a bias term.

   .. attribute::



      :type: type bias_prob: float, optional

   .. attribute::



      :type: param normalize_prob: The probability of performing normalization.

   .. attribute::



      :type: type normalize_prob: float, optional

   .. attribute::



      :type: param padding_prob: The probability of padding with zeros.

   .. attribute::



      :type: type padding_prob: float, optional

   .. attribute::



      - If `int`, `random_state` is the seed used by the random number generator
      - If `RandomState` instance, `random_state` is the random number generator
      - If `None`, the random number generator is the `RandomState` instance used
        by `np.random`.

      :type: param random_state:

   .. attribute::



      :type: type random_state: int or RandomState


.. py:class:: ShapeletTreeClassifier(*, n_shapelets='warn', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_impurity_decrease=0.0, min_shapelet_size=0.0, max_shapelet_size=1.0, alpha=None, metric='euclidean', metric_params=None, criterion='entropy', class_weight=None, random_state=None)

   Bases: :py:obj:`DynamicTreeMixin`, :py:obj:`wildboar.transform._shapelet.ShapeletMixin`, :py:obj:`BaseFeatureTreeClassifier`

   A shapelet tree classifier.

   .. attribute:: tree_

      The tree data structure used internally

      :type: Tree

   .. attribute:: classes_

      The class labels

      :type: ndarray of shape (n_classes,)

   .. attribute:: n_classes_

      The number of class labels

      :type: int

   .. seealso::

      ShapeletTreeRegressor : A shapelet tree regressor.
      ExtraShapeletTreeClassifier : An extra random shapelet tree classifier.

      Construct a new shapelet tree classifier.

      :param max_depth: The maximum depth of the tree. If `None` the tree is expanded until all
                        leaves are pure or until all leaves contain less than `min_samples_split`
                        samples
      :type max_depth: int, optional
      :param min_samples_split: The minimum number of samples to split an internal node
      :type min_samples_split: int, optional
      :param min_samples_leaf: The minimum number of samples in a leaf
      :type min_samples_leaf: int, optional
      :param criterion: The criterion used to evaluate the utility of a split
      :type criterion: {"entropy", "gini"}, optional
      :param min_impurity_decrease: A split will be introduced only if the impurity decrease is larger than or
                                    equal to this value
      :type min_impurity_decrease: float, optional
      :param n_shapelets: The number of shapelets to sample at each node.
      :type n_shapelets: int, optional
      :param min_shapelet_size: The minimum length of a sampled shapelet expressed as a fraction, computed
                                as ``min(ceil(X.shape[-1] * min_shapelet_size), 2)``.
      :type min_shapelet_size: float, optional
      :param max_shapelet_size: The maximum length of a sampled shapelet, expressed as a fraction, computed
                                as ``ceil(X.shape[-1] * max_shapelet_size)``.
      :type max_shapelet_size: float, optional
      :param alpha: Dynamically decrease the number of sampled shapelets at each node according
                    to the current depth.

                    .. math:`w = 1 - e^{-|alpha| * depth})`

                    - if :math:`alpha < 0`, the number of sampled shapelets decrease from
                      ``n_shapelets`` towards 1 with increased depth.

                      .. math:`n_shapelets * (1 - w)`
                    - if :math:`alpha > 0`, the number of sampled shapelets increase from ``1``
                      towards ``n_shapelets`` with increased depth.

                      .. math:`n_shapelets * w`
                    - if ``None``, the number of sampled shapelets are the same independeth of
                      depth.
      :type alpha: float, optional
      :param metric: Distance metric used to identify the best shapelet.
      :type metric: {"euclidean", "scaled_euclidean", "dtw", "scaled_dtw"}, optional
      :param metric_params: Parameters for the distance measure
      :type metric_params: dict, optional
      :param class_weight: Weights associated with the labels

                           - if dict, weights on the form {label: weight}
                           - if "balanced" each class weight inversely proportional to the class
                             frequency
                           - if None, each class has equal weight
      :type class_weight: dict or "balanced", optional
      :param random_state:
                           - If `int`, `random_state` is the seed used by the random number generator;
                           - If `RandomState` instance, `random_state` is the random number generator;
                           - If `None`, the random number generator is the `RandomState` instance used
                             by `np.random`.
      :type random_state: int or RandomState


.. py:class:: ShapeletTreeRegressor(*, max_depth=None, min_samples_split=2, min_samples_leaf=1, min_impurity_decrease=0.0, n_shapelets='warn', min_shapelet_size=0, max_shapelet_size=1, alpha=None, metric='euclidean', metric_params=None, criterion='squared_error', random_state=None)

   Bases: :py:obj:`DynamicTreeMixin`, :py:obj:`wildboar.transform._shapelet.ShapeletMixin`, :py:obj:`BaseFeatureTreeRegressor`

   A shapelet tree regressor.

   .. attribute:: tree_

      The internal tree representation

      :type: Tree

   .. attribute:: Construct a new shapelet tree regressor estimator.



   .. attribute::

      leaves are pure or until all leaves contain less than `min_samples_split`
      samples.

      :type: param max_depth: The maximum depth of the tree. If `None` the tree is expanded until all

   .. attribute::



      :type: type max_depth: int, optional

   .. attribute::



      :type: param min_samples_split: The minimum number of samples to split an internal node

   .. attribute::



      :type: type min_samples_split: int, optional

   .. attribute::



      :type: param min_samples_leaf: The minimum number of samples in a leaf

   .. attribute::



      :type: type min_samples_leaf: int, optional

   .. attribute::



      .. deprecated:: 1.0
          Criterion "mse" was deprecated in v1.1 and will be removed in
          version 1.2. Use `criterion="squared_error"` which is equivalent.

      :type: param criterion: The criterion used to evaluate the utility of a split

   .. attribute::



      :type: type criterion: {"squared_error"}, optional

   .. attribute::

      equal to this value

      :type: param min_impurity_decrease: A split will be introduced only if the impurity decrease is larger than or

   .. attribute::



      :type: type min_impurity_decrease: float, optional

   .. attribute::



      :type: param n_shapelets: The number of shapelets to sample at each node.

   .. attribute::



      :type: type n_shapelets: int, optional

   .. attribute::

      as `min(ceil(X.shape[-1] * min_shapelet_size), 2)`.

      :type: param min_shapelet_size: The minimum length of a sampled shapelet expressed as a fraction, computed

   .. attribute::



      :type: type min_shapelet_size: float, optional

   .. attribute::

      as `ceil(X.shape[-1] * max_shapelet_size)`.

      :type: param max_shapelet_size: The maximum length of a sampled shapelet, expressed as a fraction, computed

   .. attribute::



      :type: type max_shapelet_size: float, optional

   .. attribute::

      to the current depth.

      .. math:: w = 1 - e^{-|alpha| * depth}

      - if :math:`alpha < 0`, the number of sampled shapelets decrease from
        ``n_shapelets`` towards 1 with increased depth.

        .. math:: n_shapelets * (1 - w)

      - if :math:`alpha > 0`, the number of sampled shapelets increase from ``1``
        towards ``n_shapelets`` with increased depth.

        .. math:: n_shapelets * w

      - if ``None``, the number of sampled shapelets are the same independeth of
        depth.

      :type: param alpha: Dynamically decrease the number of sampled shapelets at each node according

   .. attribute::



      :type: type alpha: float, optional

   .. attribute::



      - If str, the distance metric used to identify the best shapelet.
      - If list, multiple metrics specified as a list of tuples, where the first
        element of the tuple is a metric name and the second element a dictionary
        with a parameter grid specification. A parameter grid specification is a
        dict with two mandatory and one optional key-value pairs defining the
        lower and upper bound on the values and number of values in the grid. For
        example, to specifiy a grid over the argument 'r' with 10 values in the
        range 0 to 1, we would give the following specification: ``dict(min_r=0,
        max_r=1, num_r=10)``.

      Read more about the metrics and their parameters in the
      :ref:`User guide <list_of_subsequence_metrics>`.

      .. versionchanged:: 1.2
          Added support for multi-metric shapelet transform

      :type: param metric:

   .. attribute::



      :type: type metric: str or list, optional

   .. attribute::

      Read more about the parameters in the :ref:`User guide
      <list_of_subsequence_metrics>`.

      :type: param metric_params: Parameters for the distance measure. Ignored unless metric is a string.

   .. attribute::



      :type: type metric_params: dict, optional

   .. attribute::



      - If `int`, `random_state` is the seed used by the random number generator
      - If `RandomState` instance, `random_state` is the random number generator
      - If `None`, the random number generator is the `RandomState` instance used
        by `np.random`.

      :type: param random_state:

   .. attribute::



      :type: type random_state: int or RandomState


