:orphan:


********************************************
:py:mod:`wildboar.dimension_selection._base`
********************************************

.. py:module:: wildboar.dimension_selection._base


Module Contents
---------------

Classes
-------

.. autoapisummary::

   wildboar.dimension_selection._base.BaseDistanceSelector
   wildboar.dimension_selection._base.DimensionSelectorMixin




.. py:class:: BaseDistanceSelector(*, sample=None, metric='euclidean', metric_params=None, n_jobs=None, random_state=None)




   
   Mixin for dimension selector.
















   ..
       !! processed by numpydoc !!
   .. py:method:: fit(X, y=None)

      
      Learn the dimensions to select.


      :Parameters:

          **X** : array-like of shape (n_samples, n_dims, n_timestep)
              The training samples.

          **y** : array-like of shape (n_samples, ), optional
              Ignored.

      :Returns:

          object
              The instance itself.













      ..
          !! processed by numpydoc !!

   .. py:method:: fit_transform(X, y=None, **fit_params)

      
      Fit to data, then transform it.

      Fits transformer to `X` and `y` with optional parameters `fit_params`
      and returns a transformed version of `X`.

      :Parameters:

          **X** : array-like of shape (n_samples, n_features)
              Input samples.

          **y** :  array-like of shape (n_samples,) or (n_samples, n_outputs),                 default=None
              Target values (None for unsupervised transformations).

          **\*\*fit_params** : dict
              Additional fit parameters.

      :Returns:

          **X_new** : ndarray array of shape (n_samples, n_features_new)
              Transformed array.













      ..
          !! processed by numpydoc !!

   .. py:method:: get_dimensions(indices=False)

      
      Get a boolean mask with the selected dimensions.


      :Parameters:

          **indices** : bool, optional
              If True, return the indices instead of a boolean mask.

      :Returns:

          ndarray of shape (n_selected_dims, )
              An index that selects the retained dimensions.













      ..
          !! processed by numpydoc !!

   .. py:method:: get_metadata_routing()

      
      Get metadata routing of this object.

      Please check :ref:`User Guide <metadata_routing>` on how the routing
      mechanism works.


      :Returns:

          **routing** : MetadataRequest
              A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating
              routing information.













      ..
          !! processed by numpydoc !!

   .. py:method:: get_params(deep=True)

      
      Get parameters for this estimator.


      :Parameters:

          **deep** : bool, default=True
              If True, will return the parameters for this estimator and
              contained subobjects that are estimators.

      :Returns:

          **params** : dict
              Parameter names mapped to their values.













      ..
          !! processed by numpydoc !!

   .. py:method:: inverse_transform(X)

      
      Reverse the transformation.


      :Parameters:

          **X** : array-like of shape (n_samples, n_selected_dims, n_timestep)
              The samples.

      :Returns:

          ndarray of shape (n_samples, n_dims, n_timestep)
              The samples with zeros inserted where dimensions
              would have been removed by :meth:`transform`.













      ..
          !! processed by numpydoc !!

   .. py:method:: set_output(*, transform=None)

      
      Set output container.

      See :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`
      for an example on how to use the API.

      :Parameters:

          **transform** : {"default", "pandas"}, default=None
              Configure output of `transform` and `fit_transform`.
              
              - `"default"`: Default output format of a transformer
              - `"pandas"`: DataFrame output
              - `"polars"`: Polars output
              - `None`: Transform configuration is unchanged
              
              .. versionadded:: 1.4
                  `"polars"` option was added.

      :Returns:

          **self** : estimator instance
              Estimator instance.













      ..
          !! processed by numpydoc !!

   .. py:method:: set_params(**params)

      
      Set the parameters of this estimator.

      The method works on simple estimators as well as on nested objects
      (such as :class:`~sklearn.pipeline.Pipeline`). The latter have
      parameters of the form ``<component>__<parameter>`` so that it's
      possible to update each component of a nested object.

      :Parameters:

          **\*\*params** : dict
              Estimator parameters.

      :Returns:

          **self** : estimator instance
              Estimator instance.













      ..
          !! processed by numpydoc !!

   .. py:method:: transform(X)

      
      Reduce X to the selected dimensions.


      :Parameters:

          **X** : array-like of shape (n_samples, n_dims, n_timestep)
              The samples.

      :Returns:

          ndarray of shape (n_samples, n_selected_dims, n_timestep)
              The samples with only the selected dimensions.













      ..
          !! processed by numpydoc !!


.. py:class:: DimensionSelectorMixin




   
   Mixin for dimension selector.
















   ..
       !! processed by numpydoc !!
   .. py:method:: fit_transform(X, y=None, **fit_params)

      
      Fit to data, then transform it.

      Fits transformer to `X` and `y` with optional parameters `fit_params`
      and returns a transformed version of `X`.

      :Parameters:

          **X** : array-like of shape (n_samples, n_features)
              Input samples.

          **y** :  array-like of shape (n_samples,) or (n_samples, n_outputs),                 default=None
              Target values (None for unsupervised transformations).

          **\*\*fit_params** : dict
              Additional fit parameters.

      :Returns:

          **X_new** : ndarray array of shape (n_samples, n_features_new)
              Transformed array.













      ..
          !! processed by numpydoc !!

   .. py:method:: get_dimensions(indices=False)

      
      Get a boolean mask with the selected dimensions.


      :Parameters:

          **indices** : bool, optional
              If True, return the indices instead of a boolean mask.

      :Returns:

          ndarray of shape (n_selected_dims, )
              An index that selects the retained dimensions.













      ..
          !! processed by numpydoc !!

   .. py:method:: inverse_transform(X)

      
      Reverse the transformation.


      :Parameters:

          **X** : array-like of shape (n_samples, n_selected_dims, n_timestep)
              The samples.

      :Returns:

          ndarray of shape (n_samples, n_dims, n_timestep)
              The samples with zeros inserted where dimensions
              would have been removed by :meth:`transform`.













      ..
          !! processed by numpydoc !!

   .. py:method:: set_output(*, transform=None)

      
      Set output container.

      See :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`
      for an example on how to use the API.

      :Parameters:

          **transform** : {"default", "pandas"}, default=None
              Configure output of `transform` and `fit_transform`.
              
              - `"default"`: Default output format of a transformer
              - `"pandas"`: DataFrame output
              - `"polars"`: Polars output
              - `None`: Transform configuration is unchanged
              
              .. versionadded:: 1.4
                  `"polars"` option was added.

      :Returns:

          **self** : estimator instance
              Estimator instance.













      ..
          !! processed by numpydoc !!

   .. py:method:: transform(X)

      
      Reduce X to the selected dimensions.


      :Parameters:

          **X** : array-like of shape (n_samples, n_dims, n_timestep)
              The samples.

      :Returns:

          ndarray of shape (n_samples, n_selected_dims, n_timestep)
              The samples with only the selected dimensions.













      ..
          !! processed by numpydoc !!


