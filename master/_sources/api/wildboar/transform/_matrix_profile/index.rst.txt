:orphan:


********************************************
:py:mod:`wildboar.transform._matrix_profile`
********************************************

.. py:module:: wildboar.transform._matrix_profile



Classes
-------

.. autoapisummary::

   wildboar.transform._matrix_profile.MatrixProfileTransform




.. py:class:: MatrixProfileTransform(window=0.1, exclude=None, n_jobs=None)




   
   Matrix profile transform.

   Transform each time series in a dataset to its MatrixProfile similarity
   self-join.

   :Parameters:

       **window** : int or float, optional
           The subsequence size, by default 0.1.
           
           - if float, a fraction of n_timestep.
           - if int, the exact subsequence size.

       **exclude** : int or float, optional
           The size of the exclusion zone. The default exclusion zone is 0.2.
           
           - if float, expressed as a fraction of the windows size.
           - if int, exact size (0 < exclude).

       **n_jobs** : int, optional
           The number of jobs to use when computing the profile.











   .. rubric:: Examples

   >>> from wildboar.datasets import load_two_lead_ecg()
   >>> from wildboar.transform import MatrixProfileTransform
   >>> x, y = load_two_lead_ecg()
   >>> t = MatrixProfileTransform()
   >>> t.fit_transform(x)



   ..
       !! processed by numpydoc !!
   .. py:method:: fit(x, y=None)

      
      Fit the matrix profile.

      Sets the expected input dimensions.

      :Parameters:

          **x** : array-like of shape (n_samples, n_timesteps)         or (n_samples, n_dims, n_timesteps)
              The samples.

          **y** : ignored
              The optional labels.

      :Returns:

          self
              A fitted instance.













      ..
          !! processed by numpydoc !!

   .. py:method:: fit_transform(X, y=None, **fit_params)

      
      Fit to data, then transform it.

      Fits transformer to `X` and `y` with optional parameters `fit_params`
      and returns a transformed version of `X`.

      :Parameters:

          **X** : array-like of shape (n_samples, n_features)
              Input samples.

          **y** :  array-like of shape (n_samples,) or (n_samples, n_outputs),                 default=None
              Target values (None for unsupervised transformations).

          **\*\*fit_params** : dict
              Additional fit parameters.

      :Returns:

          **X_new** : ndarray array of shape (n_samples, n_features_new)
              Transformed array.













      ..
          !! processed by numpydoc !!

   .. py:method:: get_metadata_routing()

      
      Get metadata routing of this object.

      Please check :ref:`User Guide <metadata_routing>` on how the routing
      mechanism works.


      :Returns:

          **routing** : MetadataRequest
              A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating
              routing information.













      ..
          !! processed by numpydoc !!

   .. py:method:: get_params(deep=True)

      
      Get parameters for this estimator.


      :Parameters:

          **deep** : bool, default=True
              If True, will return the parameters for this estimator and
              contained subobjects that are estimators.

      :Returns:

          **params** : dict
              Parameter names mapped to their values.













      ..
          !! processed by numpydoc !!

   .. py:method:: set_output(*, transform=None)

      
      Set output container.

      See :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`
      for an example on how to use the API.

      :Parameters:

          **transform** : {"default", "pandas"}, default=None
              Configure output of `transform` and `fit_transform`.
              
              - `"default"`: Default output format of a transformer
              - `"pandas"`: DataFrame output
              - `"polars"`: Polars output
              - `None`: Transform configuration is unchanged
              
              .. versionadded:: 1.4
                  `"polars"` option was added.

      :Returns:

          **self** : estimator instance
              Estimator instance.













      ..
          !! processed by numpydoc !!

   .. py:method:: set_params(**params)

      
      Set the parameters of this estimator.

      The method works on simple estimators as well as on nested objects
      (such as :class:`~sklearn.pipeline.Pipeline`). The latter have
      parameters of the form ``<component>__<parameter>`` so that it's
      possible to update each component of a nested object.

      :Parameters:

          **\*\*params** : dict
              Estimator parameters.

      :Returns:

          **self** : estimator instance
              Estimator instance.













      ..
          !! processed by numpydoc !!

   .. py:method:: transform(x)

      
      Transform the samples to their MatrixProfile self-join.


      :Parameters:

          **x** : array-like of shape (n_samples, n_timesteps)         or (n_samples, n_dims, n_timesteps)
              The samples.

      :Returns:

          ndarray of shape (n_samples, n_timestep) or (n_samples, n_dims, n_timesteps)
              The matrix matrix profile of each sample.













      ..
          !! processed by numpydoc !!


