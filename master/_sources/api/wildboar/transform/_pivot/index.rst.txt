:orphan:


***********************************
:py:mod:`wildboar.transform._pivot`
***********************************

.. py:module:: wildboar.transform._pivot


Module Contents
---------------

Classes
-------

.. autoapisummary::

   wildboar.transform._pivot.PivotMixin
   wildboar.transform._pivot.PivotTransform
   wildboar.transform._pivot.ProximityTransform




.. py:class:: PivotMixin


   
   Mixin for Pivot based estimators.
















   ..
       !! processed by numpydoc !!

.. py:class:: PivotTransform(n_pivots=100, *, metric='auto', metric_params=None, metric_sample=None, random_state=None, n_jobs=None)




   
   A transform using pivot time series and sampled distance metrics.


   :Parameters:

       **n_pivots** : int, optional
           The number of pivot time series.

       **metric** : {'auto'} or list, optional
           - If str, the metric to compute the distance.
           - If list, multiple metrics specified as a list of tuples, where the first
               element of the tuple is a metric name and the second element a dictionary
               with a parameter grid specification. A parameter grid specification is a
               dict with two mandatory and one optional key-value pairs defining the
               lower and upper bound on the values and number of values in the grid. For
               example, to specifiy a grid over the argument 'r' with 10 values in the
               range 0 to 1, we would give the following specification: `dict(min_r=0,
               max_r=1, num_r=10)`.
           
           Read more about the metrics and their parameters in the :ref:`User guide
           <list_of_subsequence_metrics>`.

       **metric_params** : dict, optional
           Parameters for the distance measure. Ignored unless metric is a string.
           
           Read more about the parameters in the :ref:`User guide <list_of_metrics>`.

       **metric_sample** : {"uniform", "weighted"}, optional
           If multiple metrics are specified this parameter controls how they are
           sampled. "uniform" samples each metric configuration with equal probability
           and "weighted" samples each metric with equal probability. By default,
           metric configurations are sampled with equal probability.

       **random_state** : int or np.RandomState, optional
           The random state.

       **n_jobs** : int, optional
           The number of cores to use.














   ..
       !! processed by numpydoc !!
   .. py:method:: fit(x, y=None)

      
      Fit the transform.


      :Parameters:

          **x** : array-like of shape (n_samples, n_timestep) or                (n_samples, n_dimensions, n_timestep)
              The time series dataset.

          **y** : None, optional
              For compatibility.

      :Returns:

          BaseAttributeTransform
              This object.













      ..
          !! processed by numpydoc !!

   .. py:method:: fit_transform(x, y=None)

      
      Fit the embedding and return the transform of x.


      :Parameters:

          **x** : array-like of shape (n_samples, n_timestep) or                (n_samples, n_dimensions, n_timestep)
              The time series dataset.

          **y** : None, optional
              For compatibility.

      :Returns:

          ndarray of shape (n_samples, n_outputs)
              The embedding.













      ..
          !! processed by numpydoc !!

   .. py:method:: get_metadata_routing()

      
      Get metadata routing of this object.

      Please check :ref:`User Guide <metadata_routing>` on how the routing
      mechanism works.


      :Returns:

          **routing** : MetadataRequest
              A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating
              routing information.













      ..
          !! processed by numpydoc !!

   .. py:method:: get_params(deep=True)

      
      Get parameters for this estimator.


      :Parameters:

          **deep** : bool, default=True
              If True, will return the parameters for this estimator and
              contained subobjects that are estimators.

      :Returns:

          **params** : dict
              Parameter names mapped to their values.













      ..
          !! processed by numpydoc !!

   .. py:method:: set_output(*, transform=None)

      
      Set output container.

      See :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`
      for an example on how to use the API.

      :Parameters:

          **transform** : {"default", "pandas"}, default=None
              Configure output of `transform` and `fit_transform`.
              
              - `"default"`: Default output format of a transformer
              - `"pandas"`: DataFrame output
              - `None`: Transform configuration is unchanged

      :Returns:

          **self** : estimator instance
              Estimator instance.













      ..
          !! processed by numpydoc !!

   .. py:method:: set_params(**params)

      
      Set the parameters of this estimator.

      The method works on simple estimators as well as on nested objects
      (such as :class:`~sklearn.pipeline.Pipeline`). The latter have
      parameters of the form ``<component>__<parameter>`` so that it's
      possible to update each component of a nested object.

      :Parameters:

          **\*\*params** : dict
              Estimator parameters.

      :Returns:

          **self** : estimator instance
              Estimator instance.













      ..
          !! processed by numpydoc !!

   .. py:method:: transform(x)

      
      Transform the dataset.


      :Parameters:

          **x** : array-like of shape (n_samples, n_timestep) or                (n_samples, n_dimensions, n_timestep)
              The time series dataset.

      :Returns:

          ndarray of shape (n_samples, n_outputs)
              The transformation.













      ..
          !! processed by numpydoc !!


.. py:class:: ProximityTransform(n_pivots=100, metric='auto', metric_params=None, metric_sample='weighted', random_state=None, n_jobs=None)




   
   Transform time series based on class conditional pivots.


   :Parameters:

       **n_pivots** : int, optional
           The number of pivot time series per class.

       **metric** : {'auto'} or list, optional
           - If str, the metric to compute the distance.
           - If list, multiple metrics specified as a list of tuples, where the first
               element of the tuple is a metric name and the second element a dictionary
               with a parameter grid specification. A parameter grid specification is a
               dict with two mandatory and one optional key-value pairs defining the
               lower and upper bound on the values and number of values in the grid. For
               example, to specifiy a grid over the argument 'r' with 10 values in the
               range 0 to 1, we would give the following specification: `dict(min_r=0,
               max_r=1, num_r=10)`.
           
           Read more about the metrics and their parameters in the :ref:`User guide
           <list_of_subsequence_metrics>`.

       **metric_params** : dict, optional
           Parameters for the distance measure. Ignored unless metric is a string.
           
           Read more about the parameters in the :ref:`User guide <list_of_metrics>`.

       **metric_sample** : {"uniform", "weighted"}, optional
           If multiple metrics are specified this parameter controls how they are
           sampled. "uniform" samples each metric configuration with equal probability
           and "weighted" samples each metric with equal probability. By default,
           metric configurations are sampled with equal probability.

       **random_state** : int or np.RandomState, optional
           The random state.

       **n_jobs** : int, optional
           The number of cores to use.














   ..
       !! processed by numpydoc !!
   .. py:method:: fit_transform(X, y=None, **fit_params)

      
      Fit to data, then transform it.

      Fits transformer to `X` and `y` with optional parameters `fit_params`
      and returns a transformed version of `X`.

      :Parameters:

          **X** : array-like of shape (n_samples, n_features)
              Input samples.

          **y** :  array-like of shape (n_samples,) or (n_samples, n_outputs),                 default=None
              Target values (None for unsupervised transformations).

          **\*\*fit_params** : dict
              Additional fit parameters.

      :Returns:

          **X_new** : ndarray array of shape (n_samples, n_features_new)
              Transformed array.













      ..
          !! processed by numpydoc !!

   .. py:method:: get_metadata_routing()

      
      Get metadata routing of this object.

      Please check :ref:`User Guide <metadata_routing>` on how the routing
      mechanism works.


      :Returns:

          **routing** : MetadataRequest
              A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating
              routing information.













      ..
          !! processed by numpydoc !!

   .. py:method:: get_params(deep=True)

      
      Get parameters for this estimator.


      :Parameters:

          **deep** : bool, default=True
              If True, will return the parameters for this estimator and
              contained subobjects that are estimators.

      :Returns:

          **params** : dict
              Parameter names mapped to their values.













      ..
          !! processed by numpydoc !!

   .. py:method:: set_output(*, transform=None)

      
      Set output container.

      See :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`
      for an example on how to use the API.

      :Parameters:

          **transform** : {"default", "pandas"}, default=None
              Configure output of `transform` and `fit_transform`.
              
              - `"default"`: Default output format of a transformer
              - `"pandas"`: DataFrame output
              - `None`: Transform configuration is unchanged

      :Returns:

          **self** : estimator instance
              Estimator instance.













      ..
          !! processed by numpydoc !!

   .. py:method:: set_params(**params)

      
      Set the parameters of this estimator.

      The method works on simple estimators as well as on nested objects
      (such as :class:`~sklearn.pipeline.Pipeline`). The latter have
      parameters of the form ``<component>__<parameter>`` so that it's
      possible to update each component of a nested object.

      :Parameters:

          **\*\*params** : dict
              Estimator parameters.

      :Returns:

          **self** : estimator instance
              Estimator instance.













      ..
          !! processed by numpydoc !!


