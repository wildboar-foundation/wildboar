:orphan:


*********************************
:py:mod:`wildboar.transform._sax`
*********************************

.. py:module:: wildboar.transform._sax

.. autoapi-nested-parse::

   Symbolic aggregate approximation and piecewice aggregate approximation.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

Classes
-------

.. autoapisummary::

   wildboar.transform._sax.Binning
   wildboar.transform._sax.NormalBinning
   wildboar.transform._sax.PAA
   wildboar.transform._sax.SAX
   wildboar.transform._sax.UniformBinning



Functions
---------

.. autoapisummary::

   wildboar.transform._sax.piecewice_aggregate_approximation
   wildboar.transform._sax.symbolic_aggregate_approximation



.. py:class:: Binning(n_bins)


   
   Abstract base class for binning strategies.


   :Parameters:

       **n_bins** : int
           The number of bins.














   ..
       !! processed by numpydoc !!
   .. py:method:: get_thresholds(x=None, estimate=False)

      
      Get thresholds for binning.


      :Parameters:

          **x** : array-like of shape (n_samples, n_timestep), optional
              The samples.

          **estimate** : bool, optional
              Calculate the thresholds from the samples.

      :Returns:

          ndarray of shape (n_bins - 1, )
              The thresholds.













      ..
          !! processed by numpydoc !!

   .. py:method:: scale(x)
      :abstractmethod:

      
      Scale the input such that it is suitable for binning.


      :Parameters:

          **x** : array-like of shape (n_samples, n_timesteps)
              The samples.














      ..
          !! processed by numpydoc !!


.. py:class:: NormalBinning(n_bins)


   Bases: :py:obj:`Binning`

   
   Bin using a normal distribution.
















   ..
       !! processed by numpydoc !!
   .. py:method:: scale(x)

      
      Scale the input such that it is suitable for binning.


      :Parameters:

          **x** : array-like of shape (n_samples, n_timesteps)
              The samples.














      ..
          !! processed by numpydoc !!


.. py:class:: PAA(n_intervals='sqrt', window=None)


   Bases: :py:obj:`sklearn.base.TransformerMixin`, :py:obj:`wildboar.base.BaseEstimator`

   
   Peicewise aggregate approximation.


   :Parameters:

       **n_intervals** : {"sqrt", "log2"}, int or float, optional
           The number of intervals.

       **window** : int, optional
           The size of an interval. If `window`, is given then `n_intervals` is ignored.














   ..
       !! processed by numpydoc !!
   .. py:property:: intervals


   .. py:method:: fit(x, y=None)


   .. py:method:: inverse_transform(x)


   .. py:method:: transform(x)



.. py:class:: SAX(*, n_intervals='sqrt', window=None, n_bins=4, binning='normal', estimate=True)


   Bases: :py:obj:`sklearn.base.TransformerMixin`, :py:obj:`wildboar.base.BaseEstimator`

   
   Symbolic aggregate approximation.


   :Parameters:

       **n_intervals** : str, optional
           The number of intervals to use for the transform.
           
           - if "log", the number of intervals is `log2(n_timestep)`.
           - if "sqrt", the number of intervals is `sqrt(n_timestep)`.
           - if int, the number of intervals is `n_intervals`.
           - if float, the number of intervals is `n_intervals * n_timestep`, with
               `0 < n_intervals < 1`.

       **window** : int, optional
           The window size. If `window` is set, the value of `n_intervals` has no
           effect.

       **n_bins** : int, optional
           The number of bins.

       **binning** : str, optional
           The bin construction. By default the bins are defined according to the
           normal distribution. Possible values are "normal" for normally
           distributed bins or "uniform" for uniformly distributed bins.

       **estimate** : bool, optional
           Estimate the distribution parameters for the binning from data.
           
           If `estimate=False`, it is assumed that each time series are:
           
           - preprocessed using :func:`datasets.preprocess.normalize` when
               `binning="normal"`.
           - preprocessed using :func:`datasets.preprocess.minmax_scale`. when
               `binning="uniform"`














   ..
       !! processed by numpydoc !!
   .. py:property:: intervals


   .. py:method:: fit(x, y=None)


   .. py:method:: inverse_transform(x)


   .. py:method:: transform(x)



.. py:class:: UniformBinning(n_bins)


   Bases: :py:obj:`Binning`

   
   Bin using a uniform distribution.
















   ..
       !! processed by numpydoc !!
   .. py:method:: scale(x)

      
      Scale the input such that it is suitable for binning.


      :Parameters:

          **x** : array-like of shape (n_samples, n_timesteps)
              The samples.














      ..
          !! processed by numpydoc !!


.. py:function:: piecewice_aggregate_approximation(x, *, n_intervals='sqrt', window=None)

   
   Peicewise aggregate approximation.


   :Parameters:

       **x** : array-like of shape (n_samples, n_timestep)
           The input data.

       **n_intervals** : str, optional
           The number of intervals to use for the transform.
           
           - if "log2", the number of intervals is ``log2(n_timestep)``.
           - if "sqrt", the number of intervals is ``sqrt(n_timestep)``.
           - if int, the number of intervals is ``n_intervals``.
           - if float, the number of intervals is ``n_intervals * n_timestep``, with
               ``0 < n_intervals < 1``.

       **window** : int, optional
           The window size. If ``window`` is set, the value of ``n_intervals`` has no
           effect.

   :Returns:

       ndarray of shape (n_samples, n_intervals)
           The symbolic aggregate approximation.













   ..
       !! processed by numpydoc !!

.. py:function:: symbolic_aggregate_approximation(x, *, n_intervals='sqrt', window=None, n_bins=4, binning='normal')

   
   Symbolic aggregate approximation.


   :Parameters:

       **x** : array-like of shape (n_samples, n_timestep)
           The input data.

       **n_intervals** : str, optional
           The number of intervals to use for the transform.
           
           - if "log2", the number of intervals is ``log2(n_timestep)``.
           - if "sqrt", the number of intervals is ``sqrt(n_timestep)``.
           - if int, the number of intervals is ``n_intervals``.
           - if float, the number of intervals is ``n_intervals * n_timestep``, with
               ``0 < n_intervals < 1``.

       **window** : int, optional
           The window size. If ``window`` is set, the value of ``n_intervals`` has no
           effect.

       **n_bins** : int, optional
           The number of bins.

       **binning** : str, optional
           The bin construction. By default the bins are defined according to the
           normal distribution. Possible values are ``"normal"`` for normally
           distributed bins or ``"uniform"`` for uniformly distributed bins.

   :Returns:

       ndarray of shape (n_samples, n_intervals)
           The symbolic aggregate approximation.













   ..
       !! processed by numpydoc !!

