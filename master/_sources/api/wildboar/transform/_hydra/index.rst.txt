:orphan:


***********************************
:py:mod:`wildboar.transform._hydra`
***********************************

.. py:module:: wildboar.transform._hydra


Module Contents
---------------

Classes
-------

.. autoapisummary::

   wildboar.transform._hydra.HydraTransform




.. py:class:: HydraTransform(*, n_groups=64, n_kernels=8, kernel_size=9, sampling='normal', sampling_params=None, n_jobs=None, random_state=None)




   
   A Dictionary based method using convolutional kernels.


   :Parameters:

       **n_groups** : int, optional
           The number of groups of kernels.

       **n_kernels** : int, optional
           The number of kernels per group.

       **kernel_size** : int, optional
           The size of the kernel.

       **sampling** : {"normal"}, optional
           The strategy for sampling kernels. By default kernel weights
           are sampled from a normal distribution with zero mean and unit
           standard deviation.

       **sampling_params** : dict, optional
           Parameters to the sampling approach. The "normal" sampler
           accepts two parameters: `mean` and `scale`.

       **n_jobs** : int, optional
           The number of jobs to run in parallel. A value of `None` means using
           a single core and a value of `-1` means using all cores. Positive
           integers mean the exact number of cores.

       **random_state** : int or RandomState, optional
           Controls the random sampling of kernels.
           
           - If `int`, `random_state` is the seed used by the random number
             generator.
           - If :class:`numpy.random.RandomState` instance, `random_state` is
             the random number generator.
           - If `None`, the random number generator is the
             :class:`numpy.random.RandomState` instance used by
             :func:`numpy.random`.








   .. seealso::

       
       :obj:`HydraClassifier`
           A classifier using hydra transform.
       
       
   .. rubric:: Notes

   The implementation does not implement the first order descrete differences
   described by Dempster et. al. (2023). If this is desired, one can use
   native scikit-learn functionalities and the
   :class:`~wildboar.transform.DiffTransform`:

   >>> from sklearn.pipeline import make_pipeline, make_union
   >>> from wildboar.transform import DiffTransform, HydraTransform
   >>> dempster_hydra = make_union(
   ...     HydraTransform(n_groups=32),
   ...     make_pipeline(
   ...         DiffTransform(),
   ...         HydraTransform(n_groups=32)
   ...     )
   ... )

   .. rubric:: References

   Dempster, A., Schmidt, D. F., & Webb, G. I. (2023).
       Hydra: competing convolutional kernels for fast and accurate
       time series classification. Data Mining and Knowledge Discovery

   .. only:: latex

      

   .. rubric:: Examples

   >>> from wildboar.datasets import load_gun_point
   >>> from wildboar.transform import HydraTransform
   >>> X, y = load_gun_point()
   >>> t = HydraTransform(n_groups=8, n_kernels=4, random_state=1)
   >>> t.fit_transform(X)

   :Attributes:

       **embedding_** : Embedding
           The underlying embedding


   ..
       !! processed by numpydoc !!
   .. py:method:: fit(x, y=None)

      
      Fit the transform.


      :Parameters:

          **x** : array-like of shape (n_samples, n_timestep) or                (n_samples, n_dimensions, n_timestep)
              The time series dataset.

          **y** : None, optional
              For compatibility.

      :Returns:

          BaseAttributeTransform
              This object.













      ..
          !! processed by numpydoc !!

   .. py:method:: fit_transform(x, y=None)

      
      Fit the embedding and return the transform of x.


      :Parameters:

          **x** : array-like of shape (n_samples, n_timestep) or                (n_samples, n_dimensions, n_timestep)
              The time series dataset.

          **y** : None, optional
              For compatibility.

      :Returns:

          ndarray of shape (n_samples, n_outputs)
              The embedding.













      ..
          !! processed by numpydoc !!

   .. py:method:: get_metadata_routing()

      
      Get metadata routing of this object.

      Please check :ref:`User Guide <metadata_routing>` on how the routing
      mechanism works.


      :Returns:

          **routing** : MetadataRequest
              A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating
              routing information.













      ..
          !! processed by numpydoc !!

   .. py:method:: get_params(deep=True)

      
      Get parameters for this estimator.


      :Parameters:

          **deep** : bool, default=True
              If True, will return the parameters for this estimator and
              contained subobjects that are estimators.

      :Returns:

          **params** : dict
              Parameter names mapped to their values.













      ..
          !! processed by numpydoc !!

   .. py:method:: set_output(*, transform=None)

      
      Set output container.

      See :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`
      for an example on how to use the API.

      :Parameters:

          **transform** : {"default", "pandas"}, default=None
              Configure output of `transform` and `fit_transform`.
              
              - `"default"`: Default output format of a transformer
              - `"pandas"`: DataFrame output
              - `"polars"`: Polars output
              - `None`: Transform configuration is unchanged
              
              .. versionadded:: 1.4
                  `"polars"` option was added.

      :Returns:

          **self** : estimator instance
              Estimator instance.













      ..
          !! processed by numpydoc !!

   .. py:method:: set_params(**params)

      
      Set the parameters of this estimator.

      The method works on simple estimators as well as on nested objects
      (such as :class:`~sklearn.pipeline.Pipeline`). The latter have
      parameters of the form ``<component>__<parameter>`` so that it's
      possible to update each component of a nested object.

      :Parameters:

          **\*\*params** : dict
              Estimator parameters.

      :Returns:

          **self** : estimator instance
              Estimator instance.













      ..
          !! processed by numpydoc !!

   .. py:method:: transform(x)

      
      Transform the dataset.


      :Parameters:

          **x** : array-like of shape (n_samples, n_timestep) or                (n_samples, n_dimensions, n_timestep)
              The time series dataset.

      :Returns:

          ndarray of shape (n_samples, n_outputs)
              The transformation.













      ..
          !! processed by numpydoc !!


