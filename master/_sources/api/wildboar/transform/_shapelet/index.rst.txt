:orphan:


**************************************
:py:mod:`wildboar.transform._shapelet`
**************************************

.. py:module:: wildboar.transform._shapelet


Module Contents
---------------

Classes
-------

.. autoapisummary::

   wildboar.transform._shapelet.DilatedShapeletTransform
   wildboar.transform._shapelet.RandomShapeletTransform
   wildboar.transform._shapelet.ShapeletMixin




.. py:class:: DilatedShapeletTransform(n_shapelets=1000, *, metric='euclidean', metric_params=None, normalize_prob=0.5, min_shapelet_size=None, max_shapelet_size=None, shapelet_size=None, lower=0.05, upper=0.1, random_state=None, n_jobs=None)




   
   Dilated shapelet transform.

   Transform time series to a representation consisting of three
   values per shapelet: minimum dilated distance, the index of
   the timestep that minimizes the distance and number of subsequences
   that are below a distance threshold.

   :Parameters:

       **n_shapelets** : int, optional
           The number of dilated shapelets.

       **metric** : str or callable, optional
           The distance metric
           
           See ``_METRICS.keys()`` for a list of supported metrics.

       **metric_params** : dict, optional
           Parameters to the metric.
           
           Read more about the parameters in the
           :ref:`User guide <list_of_metrics>`.

       **normalize_prob** : float, optional
           The probability of standardizing a shapelet with zero mean and unit
           standard deviation.

       **min_shapelet_size** : float, optional
           The minimum shapelet size. If None, use the discrete sizes
           in `shapelet_size`.

       **max_shapelet_size** : float, optional
           The maximum shapelet size. If None, use the discrete sizes
           in `shapelet_size`.

       **shapelet_size** : array-like, optional
           The size of shapelets.

       **lower** : float, optional
           The lower percentile to draw distance thresholds above.

       **upper** : float, optional
           The upper percentile to draw distance thresholds below.

       **random_state** : int or RandomState, optional
           Controls the random sampling of kernels.
           
           - If `int`, `random_state` is the seed used by the random number
             generator.
           - If :class:`numpy.random.RandomState` instance, `random_state` is
             the random number generator.
           - If `None`, the random number generator is the
             :class:`numpy.random.RandomState` instance used by
             :func:`numpy.random`.

       **n_jobs** : int, optional
           The number of parallel jobs.










   .. rubric:: References

   Antoine Guillaume, Christel Vrain, Elloumi Wael
       Random Dilated Shapelet Transform: A New Approach for Time Series Shapelets
       Pattern Recognition and Artificial Intelligence, 2022

   .. only:: latex

      




   ..
       !! processed by numpydoc !!
   .. py:method:: fit(x, y=None)

      
      Fit the transform.


      :Parameters:

          **x** : array-like of shape (n_samples, n_timestep) or                (n_samples, n_dimensions, n_timestep)
              The time series dataset.

          **y** : None, optional
              For compatibility.

      :Returns:

          BaseAttributeTransform
              This object.













      ..
          !! processed by numpydoc !!

   .. py:method:: fit_transform(x, y=None)

      
      Fit the embedding and return the transform of x.


      :Parameters:

          **x** : array-like of shape (n_samples, n_timestep) or                (n_samples, n_dimensions, n_timestep)
              The time series dataset.

          **y** : None, optional
              For compatibility.

      :Returns:

          ndarray of shape (n_samples, n_outputs)
              The embedding.













      ..
          !! processed by numpydoc !!

   .. py:method:: get_metadata_routing()

      
      Get metadata routing of this object.

      Please check :ref:`User Guide <metadata_routing>` on how the routing
      mechanism works.


      :Returns:

          **routing** : MetadataRequest
              A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating
              routing information.













      ..
          !! processed by numpydoc !!

   .. py:method:: get_params(deep=True)

      
      Get parameters for this estimator.


      :Parameters:

          **deep** : bool, default=True
              If True, will return the parameters for this estimator and
              contained subobjects that are estimators.

      :Returns:

          **params** : dict
              Parameter names mapped to their values.













      ..
          !! processed by numpydoc !!

   .. py:method:: set_output(*, transform=None)

      
      Set output container.

      See :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`
      for an example on how to use the API.

      :Parameters:

          **transform** : {"default", "pandas"}, default=None
              Configure output of `transform` and `fit_transform`.
              
              - `"default"`: Default output format of a transformer
              - `"pandas"`: DataFrame output
              - `None`: Transform configuration is unchanged

      :Returns:

          **self** : estimator instance
              Estimator instance.













      ..
          !! processed by numpydoc !!

   .. py:method:: set_params(**params)

      
      Set the parameters of this estimator.

      The method works on simple estimators as well as on nested objects
      (such as :class:`~sklearn.pipeline.Pipeline`). The latter have
      parameters of the form ``<component>__<parameter>`` so that it's
      possible to update each component of a nested object.

      :Parameters:

          **\*\*params** : dict
              Estimator parameters.

      :Returns:

          **self** : estimator instance
              Estimator instance.













      ..
          !! processed by numpydoc !!

   .. py:method:: transform(x)

      
      Transform the dataset.


      :Parameters:

          **x** : array-like of shape (n_samples, n_timestep) or                (n_samples, n_dimensions, n_timestep)
              The time series dataset.

      :Returns:

          ndarray of shape (n_samples, n_outputs)
              The transformation.













      ..
          !! processed by numpydoc !!


.. py:class:: RandomShapeletTransform(n_shapelets=1000, *, metric='euclidean', metric_params=None, min_shapelet_size=0.0, max_shapelet_size=1.0, n_jobs=None, random_state=None)




   
   Random shapelet tranform.

   Transform a time series to the distances to a selection of random
   shapelets.

   :Parameters:

       **n_shapelets** : int, optional
           The number of shapelets in the resulting transform.

       **metric** : str or list, optional
           - If str, the distance metric used to identify the best shapelet.
           - If list, multiple metrics specified as a list of tuples, where the first
               element of the tuple is a metric name and the second element a dictionary
               with a parameter grid specification. A parameter grid specification is a
               dict with two mandatory and one optional key-value pairs defining the
               lower and upper bound on the values and number of values in the grid. For
               example, to specifiy a grid over the argument 'r' with 10 values in the
               range 0 to 1, we would give the following specification: ``dict(min_r=0,
               max_r=1, num_r=10)``.
           
           Read more about the metrics and their parameters in the
           :ref:`User guide <list_of_subsequence_metrics>`.

       **metric_params** : dict, optional
           Parameters for the distance measure. Ignored unless metric is a string.
           
           Read more about the parameters in the :ref:`User guide
           <list_of_subsequence_metrics>`.

       **min_shapelet_size** : float, optional
           Minimum shapelet size.

       **max_shapelet_size** : float, optional
           Maximum shapelet size.

       **n_jobs** : int, optional
           The number of jobs to run in parallel. None means 1 and -1 means using all
           processors.

       **random_state** : int or RandomState, optional
           - If `int`, `random_state` is the seed used by the random number generator
           - If `RandomState` instance, `random_state` is the random number generator
           - If `None`, the random number generator is the `RandomState` instance used
               by `np.random`.










   .. rubric:: References

   Wistuba, Martin, Josif Grabocka, and Lars Schmidt-Thieme.
       Ultra-fast shapelets for time series classification. arXiv preprint
       arXiv:1503.05018 (2015).

   .. only:: latex

      

   .. rubric:: Examples

   Transform each time series to the minimum DTW distance to each shapelet

   >>> from wildboar.dataset import load_gunpoint()
   >>> from wildboar.transform import RandomShapeletTransform
   >>> t = RandomShapeletTransform(metric="dtw")
   >>> t.fit_transform(X)

   Transform each time series to the either the minimum DTW distance, with r randomly
   set set between 0 and 1 or ERP distance with g between 0 and 1.

   >>> t = RandomShapeletTransform(
   ...     metric=[
   ...         ("dtw", dict(min_r=0.0, max_r=1.0)),
   ...         ("erp", dict(min_g=0.0, max_g=1.0)),
   ...     ]
   ... )
   >>> t.fit_transform(X)

   :Attributes:

       **embedding_** : Embedding
           The underlying embedding object.


   ..
       !! processed by numpydoc !!
   .. py:method:: fit(x, y=None)

      
      Fit the transform.


      :Parameters:

          **x** : array-like of shape (n_samples, n_timestep) or                (n_samples, n_dimensions, n_timestep)
              The time series dataset.

          **y** : None, optional
              For compatibility.

      :Returns:

          BaseAttributeTransform
              This object.













      ..
          !! processed by numpydoc !!

   .. py:method:: fit_transform(x, y=None)

      
      Fit the embedding and return the transform of x.


      :Parameters:

          **x** : array-like of shape (n_samples, n_timestep) or                (n_samples, n_dimensions, n_timestep)
              The time series dataset.

          **y** : None, optional
              For compatibility.

      :Returns:

          ndarray of shape (n_samples, n_outputs)
              The embedding.













      ..
          !! processed by numpydoc !!

   .. py:method:: get_metadata_routing()

      
      Get metadata routing of this object.

      Please check :ref:`User Guide <metadata_routing>` on how the routing
      mechanism works.


      :Returns:

          **routing** : MetadataRequest
              A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating
              routing information.













      ..
          !! processed by numpydoc !!

   .. py:method:: get_params(deep=True)

      
      Get parameters for this estimator.


      :Parameters:

          **deep** : bool, default=True
              If True, will return the parameters for this estimator and
              contained subobjects that are estimators.

      :Returns:

          **params** : dict
              Parameter names mapped to their values.













      ..
          !! processed by numpydoc !!

   .. py:method:: set_output(*, transform=None)

      
      Set output container.

      See :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`
      for an example on how to use the API.

      :Parameters:

          **transform** : {"default", "pandas"}, default=None
              Configure output of `transform` and `fit_transform`.
              
              - `"default"`: Default output format of a transformer
              - `"pandas"`: DataFrame output
              - `None`: Transform configuration is unchanged

      :Returns:

          **self** : estimator instance
              Estimator instance.













      ..
          !! processed by numpydoc !!

   .. py:method:: set_params(**params)

      
      Set the parameters of this estimator.

      The method works on simple estimators as well as on nested objects
      (such as :class:`~sklearn.pipeline.Pipeline`). The latter have
      parameters of the form ``<component>__<parameter>`` so that it's
      possible to update each component of a nested object.

      :Parameters:

          **\*\*params** : dict
              Estimator parameters.

      :Returns:

          **self** : estimator instance
              Estimator instance.













      ..
          !! processed by numpydoc !!

   .. py:method:: transform(x)

      
      Transform the dataset.


      :Parameters:

          **x** : array-like of shape (n_samples, n_timestep) or                (n_samples, n_dimensions, n_timestep)
              The time series dataset.

      :Returns:

          ndarray of shape (n_samples, n_outputs)
              The transformation.













      ..
          !! processed by numpydoc !!


.. py:class:: ShapeletMixin


   
   Mixin for shapelet based estiomators.
















   ..
       !! processed by numpydoc !!

