:orphan:


***************************************
:py:mod:`wildboar.datasets._repository`
***************************************

.. py:module:: wildboar.datasets._repository



Classes
-------

.. autoapisummary::

   wildboar.datasets._repository.Bundle
   wildboar.datasets._repository.JSONRepository
   wildboar.datasets._repository.NpBundle
   wildboar.datasets._repository.Repository




.. py:class:: Bundle(*, key, version, name, tag=None, arrays=None, description=None, collections=None)


   
   Base class for handling dataset bundles.


   :Parameters:

       **key** : str
           A unique key of the bundle.

       **version** : str
           The version of the bundle.

       **name** : str
           Human-readable name of the bundle.

       **tag** : str, optional
           A bundle tag.

       **arrays** : list
           The arrays of the dataset.

       **description** : str
           Description of the bundle.

       **collections** : dict, optional
           A list of collections.














   ..
       !! processed by numpydoc !!
   .. py:method:: get_collection(collection)

      
      Get a dataset collection.


      :Parameters:

          **collection** : str, optional
              The name of the collection.

      :Returns:

          list
              List of datasets in the collection.













      ..
          !! processed by numpydoc !!

   .. py:method:: get_filename(version=None, tag=None, ext=None)

      
      Get the cache name of the bundle.


      :Parameters:

          **version** : str, optional
              The bundle version.

          **tag** : str, optional
              The tag.

          **ext** : str, optional
              The extension of the file.

      :Returns:

          str
              The filename.













      ..
          !! processed by numpydoc !!

   .. py:method:: list(archive, collection=None)

      
      List all datasets in this bundle.


      :Parameters:

          **archive** : ZipFile
              The bundle file.

          **collection** : str, optional
              The collection name.

      :Returns:

          list
              A sorted list of datasets in the bundle.













      ..
          !! processed by numpydoc !!

   .. py:method:: load(name, archive)

      
      Load a dataset from the bundle.


      :Parameters:

          **name** : str
              Name of the dataset.

          **archive** : ZipFile
              The zip-file bundle.

      :Returns:

          **x** : ndarray
              Data samples.

          **y** : ndarray
              Data labels.

          **n_training_samples** : int
              Number of samples that are for training. The value is <= x.shape[0].

          **extras** : dict, optional
              Extra numpy arrays.













      ..
          !! processed by numpydoc !!


.. py:class:: JSONRepository(url)




   
   A repository is a collection of bundles.
















   ..
       !! processed by numpydoc !!
   .. py:property:: download_url

      
      The url template for downloading bundles.



      :Returns:

          str
              The download url.













      ..
          !! processed by numpydoc !!

   .. py:property:: name

      
      Name of the repository.



      :Returns:

          str
              The name of the repository.













      ..
          !! processed by numpydoc !!

   .. py:property:: version

      
      The repository version.



      :Returns:

          str
              The version of the repository.













      ..
          !! processed by numpydoc !!

   .. py:property:: wildboar_requires

      
      The minimum required wildboar version.



      :Returns:

          str
              The min version.













      ..
          !! processed by numpydoc !!

   .. py:method:: get_bundle(key)

      
      Get a bundle with the specified key.


      :Parameters:

          **key** : str
              Key of the bundle.

      :Returns:

          Bundle, optional
              A bundle or None.













      ..
          !! processed by numpydoc !!

   .. py:method:: get_bundles()

      
      Get all bundles.



      :Returns:

          dict
              A dictionary of key and bundle.













      ..
          !! processed by numpydoc !!

   .. py:method:: refresh(timeout=None)

      
      Refresh the repository.
















      ..
          !! processed by numpydoc !!


.. py:class:: NpBundle(*, key, version, name, tag=None, arrays=None, description=None, collections=None)




   
   Bundle of numpy binary files.
















   ..
       !! processed by numpydoc !!
   .. py:method:: get_collection(collection)

      
      Get a dataset collection.


      :Parameters:

          **collection** : str, optional
              The name of the collection.

      :Returns:

          list
              List of datasets in the collection.













      ..
          !! processed by numpydoc !!

   .. py:method:: get_filename(version=None, tag=None, ext=None)

      
      Get the cache name of the bundle.


      :Parameters:

          **version** : str, optional
              The bundle version.

          **tag** : str, optional
              The tag.

          **ext** : str, optional
              The extension of the file.

      :Returns:

          str
              The filename.













      ..
          !! processed by numpydoc !!

   .. py:method:: list(archive, collection=None)

      
      List all datasets in this bundle.


      :Parameters:

          **archive** : ZipFile
              The bundle file.

          **collection** : str, optional
              The collection name.

      :Returns:

          list
              A sorted list of datasets in the bundle.













      ..
          !! processed by numpydoc !!

   .. py:method:: load(name, archive)

      
      Load a dataset from the bundle.


      :Parameters:

          **name** : str
              Name of the dataset.

          **archive** : ZipFile
              The zip-file bundle.

      :Returns:

          **x** : ndarray
              Data samples.

          **y** : ndarray
              Data labels.

          **n_training_samples** : int
              Number of samples that are for training. The value is <= x.shape[0].

          **extras** : dict, optional
              Extra numpy arrays.













      ..
          !! processed by numpydoc !!


.. py:class:: Repository


   
   A repository is a collection of bundles.
















   ..
       !! processed by numpydoc !!
   .. py:property:: download_url
      :abstractmethod:

      
      The url template for downloading bundles.



      :Returns:

          str
              The download url.













      ..
          !! processed by numpydoc !!

   .. py:property:: name
      :abstractmethod:

      
      Name of the repository.



      :Returns:

          str
              The name of the repository.













      ..
          !! processed by numpydoc !!

   .. py:property:: version
      :abstractmethod:

      
      The repository version.



      :Returns:

          str
              The version of the repository.













      ..
          !! processed by numpydoc !!

   .. py:property:: wildboar_requires
      :abstractmethod:

      
      The minimum required wildboar version.



      :Returns:

          str
              The min version.













      ..
          !! processed by numpydoc !!

   .. py:method:: get_bundle(key)

      
      Get a bundle with the specified key.


      :Parameters:

          **key** : str
              Key of the bundle.

      :Returns:

          Bundle, optional
              A bundle or None.













      ..
          !! processed by numpydoc !!

   .. py:method:: get_bundles()
      :abstractmethod:

      
      Get all bundles.



      :Returns:

          dict
              A dictionary of key and bundle.













      ..
          !! processed by numpydoc !!

   .. py:method:: refresh(timeout=None)

      
      Refresh the repository.
















      ..
          !! processed by numpydoc !!


