:orphan:


*************************************
:py:mod:`wildboar.distance._manifold`
*************************************

.. py:module:: wildboar.distance._manifold



Classes
-------

.. autoapisummary::

   wildboar.distance._manifold.MDS




.. py:class:: MDS(n_components=2, *, metric=True, n_init=4, max_iter=300, verbose=0, eps=0.001, n_jobs=None, random_state=None, dissimilarity='euclidean', dissimilarity_params=None, normalized_stress='warn')




   
   Multidimensional scaling.


   :Parameters:

       **n_components** : int, optional
           Number of dimensions in which to immerse the dissimilarities.

       **metric** : bool, optional
           If `True`, perform metric MDS; otherwise, perform nonmetric MDS.
           When `False` (i.e. non-metric MDS), dissimilarities with 0 are considered as
           missing values.

       **n_init** : int, optional
           Number of times the SMACOF algorithm will be run with different
           initializations. The final results will be the best output of the runs,
           determined by the run with the smallest final stress.

       **max_iter** : int, optional
           Maximum number of iterations of the SMACOF algorithm for a single run.

       **verbose** : int, optional
           Level of verbosity.

       **eps** : float, optional
           Relative tolerance with respect to stress at which to declare
           convergence. The value of `eps` should be tuned separately depending
           on whether or not `normalized_stress` is being used.

       **n_jobs** : int, optional
           The number of jobs to use for the computation. If multiple
           initializations are used (``n_init``), each run of the algorithm is
           computed in parallel.

       **random_state** : int, RandomState instance or None, optional
           Determines the random number generator used to initialize the centers.
           Pass an int for reproducible results across multiple function calls.

       **dissimilarity** : str, optional
           The dissimilarity measure.
           
           See `_METRICS.keys()` for a list of supported metrics.

       **dissimilarity_params** : dict, optional
           Parameters to the dissimilarity measue.
           
           Read more about the parameters in the
           :ref:`User guide <list_of_metrics>`.

       **normalized_stress** : bool or "auto", optional
           Whether use and return normed stress value (Stress-1) instead of raw
           stress calculated by default. Only supported in non-metric MDS.









   .. rubric:: Notes

   This implementation is a convenience wrapper around
   :class:`sklearn.manifold.MDS` to when using Wildboar metrics.





   ..
       !! processed by numpydoc !!
   .. py:method:: get_metadata_routing()

      
      Get metadata routing of this object.

      Please check :ref:`User Guide <metadata_routing>` on how the routing
      mechanism works.


      :Returns:

          **routing** : MetadataRequest
              A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating
              routing information.













      ..
          !! processed by numpydoc !!

   .. py:method:: get_params(deep=True)

      
      Get parameters for this estimator.


      :Parameters:

          **deep** : bool, default=True
              If True, will return the parameters for this estimator and
              contained subobjects that are estimators.

      :Returns:

          **params** : dict
              Parameter names mapped to their values.













      ..
          !! processed by numpydoc !!

   .. py:method:: set_params(**params)

      
      Set the parameters of this estimator.

      The method works on simple estimators as well as on nested objects
      (such as :class:`~sklearn.pipeline.Pipeline`). The latter have
      parameters of the form ``<component>__<parameter>`` so that it's
      possible to update each component of a nested object.

      :Parameters:

          **\*\*params** : dict
              Estimator parameters.

      :Returns:

          **self** : estimator instance
              Estimator instance.













      ..
          !! processed by numpydoc !!


