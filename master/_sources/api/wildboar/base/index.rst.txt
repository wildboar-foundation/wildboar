
***********************
:py:mod:`wildboar.base`
***********************

.. py:module:: wildboar.base

.. autoapi-nested-parse::

   Base classes for all estimators.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

Classes
-------

.. autoapisummary::

   wildboar.base.BaseEstimator
   wildboar.base.CounterfactualMixin
   wildboar.base.ExplainerMixin



Functions
---------

.. autoapisummary::

   wildboar.base.is_counterfactual
   wildboar.base.is_explainer



.. py:class:: BaseEstimator


   Bases: :py:obj:`sklearn.base.BaseEstimator`

   
   Base estimator for all Wildboar estimators.
















   ..
       !! processed by numpydoc !!

.. py:class:: CounterfactualMixin


   
   Mixin class for counterfactual explainer.
















   ..
       !! processed by numpydoc !!
   .. py:method:: score(x, y)

      
      Score the counterfactual explainer in terms of closeness of fit.


      :Parameters:

          **x** : array-like of shape (n_samples, n_timestep)
              The samples.

          **y** : array-like of shape (n_samples, )
              The desired counterfactal label.

      :Returns:

          **score** : float
              The closensess of fit.













      ..
          !! processed by numpydoc !!

   .. py:method:: transform(x, y)



.. py:class:: ExplainerMixin


   
   Mixin class for all explainers in wildboar.
















   ..
       !! processed by numpydoc !!
   .. py:method:: fit_explain(estimator, x=None, y=None, **kwargs)

      
      Fit and return the explanation.


      :Parameters:

          **estimator** : Estimator
              The estimator to explain.

          **x** : time-series, optional
              The input time series.

          **y** : array-like of shape (n_samples, ), optional
              The labels.

          **\*\*kwargs**
              Optional extra arguments.

      :Returns:

          ndarray
              The explanation.













      ..
          !! processed by numpydoc !!

   .. py:method:: plot(x=None, y=None, ax=None)

      
      Plot the explanation.



      :Returns:

          **ax** : Axes
              The axes object













      ..
          !! processed by numpydoc !!


.. py:function:: is_counterfactual(estimator)

   
   Check if estimator is a counterfactual explainer.


   :Parameters:

       **estimator** : object
           The estimator

   :Returns:

       bool
           True if the estimator probably is a counterfactual explainer













   ..
       !! processed by numpydoc !!

.. py:function:: is_explainer(estimator)

   
   Check if estimator is an explainer.


   :Parameters:

       **estimator** : object
           The estimator

   :Returns:

       bool
           True if the estimator probably is an explainer













   ..
       !! processed by numpydoc !!

