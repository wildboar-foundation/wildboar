:py:mod:`wildboar.explain`
==========================

.. py:module:: wildboar.explain


Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   counterfactual/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   wildboar.explain.IntervalImportance




.. py:class:: IntervalImportance(*, scoring=None, n_repeat=5, n_intervals='sqrt', domain='time', verbose=False, random_state=None)

   Bases: :py:obj:`wildboar.base.ExplainerMixin`, :py:obj:`wildboar.base.BaseEstimator`

   Compute a model agnostic importance score for non-overlapping intervals in
   the time or frequency domain by permuting the intervals among samples.

   .. attribute:: importances_

      The importance scores for each interval. If dict, one value per scoring
      function.

      :type: dict or Importance

   :param scoring: The scoring function. By default the estimators score function is used.
   :type scoring: str, list, dict or callable, optional
   :param n_repeat: The number of repeated permutations
   :type n_repeat: int, optional
   :param n_intervals: The number of intervals.

                       - if "sqrt", the number of intervals is the square root of n_timestep.

                       - if "log", the number of intervals is the log2 of n_timestep.

                       - if int, exact number of intervals.
   :type n_intervals: str, optional
   :param domain: Compute the importance in the time or frequency domain.
   :type domain: {"time", "frequency"}, optional
   :param verbose: Show extra progress information.
   :type verbose: bool, optional
   :param random_state:
                        - If `int`, `random_state` is the seed used by the random number generator
                        - If `RandomState` instance, `random_state` is the random number generator
                        - If `None`, the random number generator is the `RandomState` instance used
                          by `np.random`.
   :type random_state: int or RandomState

   .. py:method:: explain(x, y=None)


   .. py:method:: fit(estimator, x, y, sample_weight=None)


   .. py:method:: plot(x=None, y=None, *, ax=None, scoring=None, top_k=None, n_samples=None, **kwargs)

      Plot the explanation

      :returns: **ax** -- The axes object
      :rtype: Axes



