:orphan:

:py:mod:`wildboar.explain._importance`
======================================

.. py:module:: wildboar.explain._importance


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   wildboar.explain._importance.AmplitudeImportance
   wildboar.explain._importance.Domain
   wildboar.explain._importance.FrequencyDomain
   wildboar.explain._importance.IntervalImportance
   wildboar.explain._importance.TimeDomain



Functions
~~~~~~~~~

.. autoapisummary::

   wildboar.explain._importance.plot_importances



Attributes
~~~~~~~~~~

.. autoapisummary::

   wildboar.explain._importance.Importance
   wildboar.explain._importance.matplotlib_missing


.. py:class:: AmplitudeImportance(scoring=None, n_intervals='sqrt', window=None, binning='normal', n_bins=4, n_repeat=1, random_state=None)

   Bases: :py:obj:`wildboar.base.ExplainerMixin`, :py:obj:`wildboar.base.BaseEstimator`

   Compute the importance of equi-probable horizontal time series intervals by
   permuting the values between each horizontal interval. The implementation uses
   :class:`transform.SAX` to discretize the time series and then for each bin permute
   the samples along that bin.

   Paramters
   ---------

   sax_ : SAX
       The SAX transformation.

   baseline_score_ : float or dict
       The baseline score.

   importances_ : float or dict
       The importances of each vertical bin.


   .. py:method:: fit(estimator, x, y, sample_weight=None)


   .. py:method:: plot(x=None, y=None, *, ax=None, n_samples=100, scoring=None, preprocess=True, k=None, show_bins=False, show_grid=True)

      Plot the importances. If x is given, the importances are plotted over the
      samples optionally labeling each sample using the supplied labels. If x is
      not give, the importances are plotted as one or more boxplots.

      :param x: The samples
      :type x: array-like of shape (n_samples, n_timesteps), optional
      :param y: The labels
      :type y: array-like of shape (n_samples, ), optional
      :param ax: Axes to plot. If ax is set, x is None and scoring is None, the number of
                 axes must be the same as the number of scorers.
      :type ax: Axes, optional
      :param scoring: The scoring to plot if multiple scorers were used when fitting.
      :type scoring: str, optional
      :param preprocess: Preprocess the time series to align with the bins, ignored if x is not None.
      :type preprocess: bool, optional
      :param k: The number of top bins to plot, ignored if x is not None.

                - if int, the specified number of bins are shown
                - if float, a fraction of the number of bins are shown
      :type k: int or float, optional
      :param show_bins: Annotate the plot with the index of the bin, ignored if x is not None.
      :type show_bins: bool, optional
      :param show_grid: Annotate the plot with the bin thresholds, ignored if x is not None.
      :type show_grid: bool, optional

      :returns: * **ax** (*Axis*) -- The axis
                * **mappable** (*ScalarMappable, optional*) -- Return the mappable used to plot the colorbar.
                  Only returned if ax is not None and x is not None.



.. py:class:: Domain

   .. py:method:: intervals(n, n_intervals)


   .. py:method:: inverse_transform(x)
      :abstractmethod:


   .. py:method:: plot_samples(x, y=None, ax=None, n_samples=None, **kwargs)
      :abstractmethod:


   .. py:method:: randomize(x, start, end, random_state=None)
      :abstractmethod:


   .. py:method:: transform(x)
      :abstractmethod:



.. py:class:: FrequencyDomain

   Bases: :py:obj:`Domain`

   .. py:method:: intervals(n, n_intervals)


   .. py:method:: inverse_transform(x)


   .. py:method:: plot_samples(x, y=None, ax=None, n_samples=None, **kwargs)


   .. py:method:: randomize(x, start, end, random_state=None)


   .. py:method:: transform(x)



.. py:class:: IntervalImportance(*, scoring=None, n_repeat=5, n_intervals='sqrt', window=None, domain='time', verbose=False, random_state=None)

   Bases: :py:obj:`wildboar.base.ExplainerMixin`, :py:obj:`wildboar.base.BaseEstimator`

   Compute a model agnostic importance score for non-overlapping intervals in
   the time or frequency domain by permuting the intervals among samples.

   .. attribute:: importances_

      The importance scores for each interval. If dict, one value per scoring
      function.

      :type: dict or Importance

   :param scoring: The scoring function. By default the estimators score function is used.
   :type scoring: str, list, dict or callable, optional
   :param n_repeat: The number of repeated permutations
   :type n_repeat: int, optional
   :param n_intervals: The number of intervals.

                       - if "sqrt", the number of intervals is the square root of n_timestep.

                       - if "log", the number of intervals is the log2 of n_timestep.

                       - if int, exact number of intervals.
   :type n_intervals: str, optional
   :param window: The window size. If specicied, n_intervals is ignored and the number of
                  intervals is computed such that each interval is (at least) of size window.
   :type window: int, optional
   :param domain: Compute the importance in the time or frequency domain.
   :type domain: {"time", "frequency"}, optional
   :param verbose: Show extra progress information.
   :type verbose: bool, optional
   :param random_state:
                        - If `int`, `random_state` is the seed used by the random number generator
                        - If `RandomState` instance, `random_state` is the random number generator
                        - If `None`, the random number generator is the `RandomState` instance used
                          by `np.random`.
   :type random_state: int or RandomState

   .. py:method:: explain(x, y=None)


   .. py:method:: fit(estimator, x, y, sample_weight=None)


   .. py:method:: plot(x=None, y=None, *, ax=None, scoring=None, k=None, n_samples=100, show_grid=True, domain_args=None)

      Plot the explanation.

      :returns: **ax** -- The axes object
      :rtype: Axes



.. py:class:: TimeDomain

   Bases: :py:obj:`Domain`

   .. py:method:: inverse_transform(x)


   .. py:method:: plot_samples(x, y=None, ax=None, n_samples=None, **kwargs)


   .. py:method:: randomize(x, start, end, random_state=None)


   .. py:method:: transform(x)



.. py:function:: plot_importances(importances, ax=None, labels=None)


.. py:data:: Importance
   

   

.. py:data:: matplotlib_missing
   

   

