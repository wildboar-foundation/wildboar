:orphan:

:py:mod:`wildboar.datasets._repository`
=======================================

.. py:module:: wildboar.datasets._repository


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   wildboar.datasets._repository.Bundle
   wildboar.datasets._repository.JSONRepository
   wildboar.datasets._repository.NpBundle
   wildboar.datasets._repository.Repository
   wildboar.datasets._repository.RepositoryCollection




Attributes
~~~~~~~~~~

.. autoapisummary::

   wildboar.datasets._repository.DEFAULT_TAG


.. py:data:: DEFAULT_TAG
   :annotation: = default

   

.. py:class:: Bundle(*, key, version, name, tag=None, arrays=None, description=None, collections=None)

   Base class for handling dataset bundles

   .. attribute:: name

      Human-readable name of the bundle

      :type: str

   .. attribute:: description

      Description of the bundle

      :type: str

   .. attribute:: label_index

      Index of the class label(s)

      :type: int or array-like

   .. attribute:: Construct a bundle



   .. attribute::



      :type: param key: A unique key of the bundle

   .. attribute::



      :type: type key: str

   .. attribute::



      :type: param version: The version of the bundle

   .. attribute::



      :type: type version: str

   .. attribute::



      :type: param name: Human-readable name of the bundle

   .. attribute::



      :type: type name: str

   .. attribute::



      :type: param description: Description of the bundle

   .. attribute::



      :type: type description: str

   .. attribute::



      :type: param arrays: The arrays of the dataset

   .. attribute::



      :type: type arrays: list

   .. py:method:: get_collection(self, collection)


   .. py:method:: get_filename(self, version=None, tag=None, ext=None)


   .. py:method:: list(self, archive, collection=None)

      List all datasets in this bundle

      :param archive: The bundle file
      :type archive: ZipFile
      :param collection: The collection name
      :type collection: str, optional

      :returns: **dataset_names** -- A sorted list of datasets in the bundle
      :rtype: list


   .. py:method:: load(self, name, archive)

      Load a dataset from the bundle

      :param name: Name of the dataset
      :type name: str
      :param archive: The zip-file bundle
      :type archive: ZipFile

      :returns: * **x** (*ndarray*) -- Data samples
                * **y** (*ndarray*) -- Data labels
                * **n_training_samples** (*int*) -- Number of samples that are for training. The value is <= x.shape[0]
                * **extras** (*dict, optional*) -- Extra numpy arrays



.. py:class:: JSONRepository(url)

   Bases: :py:obj:`Repository`

   A repository is a collection of bundles

   .. py:attribute:: supported_version
      :annotation: = 1.1

      

   .. py:method:: download_url(self)
      :property:

      The url template for downloading bundles

      :returns: **str**
      :rtype: the download url


   .. py:method:: get_bundles(self)

      Get all bundles

      :returns: **dict**
      :rtype: a dictionary of key and bundle


   .. py:method:: identifier(self)
      :property:


   .. py:method:: name(self)
      :property:

      Name of the repository

      :returns: **str**
      :rtype: the name of the repository


   .. py:method:: version(self)
      :property:

      The repository version

      :returns: **str**
      :rtype: the version of the repository


   .. py:method:: wildboar_requires(self)
      :property:

      The minimum required wildboar version

      :returns: **str**
      :rtype: the min version



.. py:class:: NpBundle(*, key, version, name, tag=None, arrays=None, description=None, collections=None)

   Bases: :py:obj:`Bundle`

   bundle of numpy binary files

   Construct a bundle

   :param key: A unique key of the bundle
   :type key: str
   :param version: The version of the bundle
   :type version: str
   :param name: Human-readable name of the bundle
   :type name: str
   :param description: Description of the bundle
   :type description: str
   :param arrays: The arrays of the dataset
   :type arrays: list


.. py:class:: Repository

   A repository is a collection of bundles

   .. py:method:: __eq__(self, o)

      Return self==value.


   .. py:method:: __hash__(self) -> int

      Return hash(self).


   .. py:method:: active(self)
      :property:


   .. py:method:: clear_cache(self, cache_dir, keep_last_version=True)


   .. py:method:: download_url(self)
      :property:

      The url template for downloading bundles

      :returns: **str**
      :rtype: the download url


   .. py:method:: get_bundle(self, key)

      Get a bundle with the specified key

      :param key: Key of the bundle
      :type key: str

      :returns: **bundle** -- A bundle or None
      :rtype: Bundle, optional


   .. py:method:: get_bundles(self)
      :abstractmethod:

      Get all bundles

      :returns: **dict**
      :rtype: a dictionary of key and bundle


   .. py:method:: identifier(self)
      :property:


   .. py:method:: list_datasets(self, bundle, *, cache_dir, collection=None, version=None, tag=None, create_cache_dir=True, progress=True, force=False)


   .. py:method:: load_dataset(self, bundle, dataset, *, cache_dir, version=None, tag=None, create_cache_dir=True, progress=True, force=False)


   .. py:method:: name(self)
      :property:

      Name of the repository

      :returns: **str**
      :rtype: the name of the repository


   .. py:method:: refresh(self, timeout=None)

      Refresh the repository


   .. py:method:: version(self)
      :property:

      The repository version

      :returns: **str**
      :rtype: the version of the repository


   .. py:method:: wildboar_requires(self)
      :property:

      The minimum required wildboar version

      :returns: **str**
      :rtype: the min version



.. py:class:: RepositoryCollection

   .. py:method:: __contains__(self, item)


   .. py:method:: __delitem__(self, key)


   .. py:method:: __getitem__(self, key)


   .. py:method:: __iter__(self)


   .. py:method:: __len__(self)


   .. py:method:: install(self, repository, refresh=True, timeout=None, cache_dir=None)


   .. py:method:: load_repository(self, repository, cache_dir=None)


   .. py:method:: refresh(self, repository=None, timeout=None, cache_dir=None)


   .. py:method:: save_repository(self, repository, cache_dir=None)



