:py:mod:`wildboar.datasets.preprocess`
======================================

.. py:module:: wildboar.datasets.preprocess


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   wildboar.datasets.preprocess.maxabs_scale
   wildboar.datasets.preprocess.minmax_scale
   wildboar.datasets.preprocess.named_preprocess
   wildboar.datasets.preprocess.standardize
   wildboar.datasets.preprocess.truncate



Attributes
~~~~~~~~~~

.. autoapisummary::

   wildboar.datasets.preprocess.__doc__
   wildboar.datasets.preprocess.normalize


.. py:data:: __doc__
   

   

.. py:data:: normalize
   

   

.. py:function:: maxabs_scale(x)

   Scale each time series by its maximum absolute value.

   :param x: The dataset
   :type x: ndarray of shape (n_samples, n_timestep) or (n_samples, n_dims, n_timestep)

   :returns: **x** -- The transformed dataset
   :rtype: ndarray of shape (n_samples, n_timestep) or (n_samples, n_dims, n_timestep)


.. py:function:: minmax_scale(x, min=0, max=1)

   Scale x along the time dimension so that each value is between min and max

   :param x: The dataset
   :type x: ndarray of shape (n_samples, n_timestep) or (n_samples, n_dims, n_timestep)
   :param min: The minimum value
   :type min: float, optional
   :param max: The maximum value
   :type max: float, optional

   :returns: **x** -- The transformed dataset
   :rtype: ndarray of shape (n_samples, n_timestep) or (n_samples, n_dims, n_timestep)


.. py:function:: named_preprocess(name)


.. py:function:: standardize(x)

   Scale x along the time dimension to have zero mean and unit standard deviation

   :param x: The dataset
   :type x: ndarray of shape (n_samples, n_timestep) or (n_samples, n_dims, n_timestep)

   :returns: **x** -- The standardized dataset
   :rtype: ndarray of shape (n_samples, n_timestep) or (n_samples, n_dims, n_timestep)


.. py:function:: truncate(x, n_shortest=None)

   Truncate x to the shortest sequence.

   :param x: The dataset
   :type x: ndarray of shape (n_samples, n_timestep) or (n_samples, n_dims, n_timestep)

   :returns: **x** -- The truncated dataset
   :rtype: ndarray of shape (n_samples, n_shortest) or (n_samples, n_dims, n_shortest)


