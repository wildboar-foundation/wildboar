:py:mod:`wildboar.embed`
========================

.. py:module:: wildboar.embed


Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   catch22/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   base/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   wildboar.embed.BaseEmbedding
   wildboar.embed.IntervalEmbedding
   wildboar.embed.PivotEmbedding
   wildboar.embed.RandomShapeletEmbedding
   wildboar.embed.RocketEmbedding




.. py:class:: BaseEmbedding(*, random_state=None, n_jobs=None)

   Bases: :py:obj:`sklearn.base.TransformerMixin`, :py:obj:`sklearn.base.BaseEstimator`

   Base embedding

   .. attribute:: embedding_

      The underlying embedding.

      :type: Embedding

   :param n_jobs: The number of jobs to run in parallel. None means 1 and
                  -1 means using all processors.
   :type n_jobs: int, optional

   .. py:method:: fit(x, y=None)

      Fit the embedding.

      :param x:
      :type x: array-like of shape [n_samples, n_timestep] or
      :param [n_samples: The time series dataset.
      :param n_dimensions: The time series dataset.
      :param n_timestep]: The time series dataset.
      :param y: For compatibility.
      :type y: None, optional

      :returns: **embedding**
      :rtype: self


   .. py:method:: fit_transform(x, y=None)

      Fit the embedding and return the transform of x.

      :param x:
      :type x: array-like of shape [n_samples, n_timestep] or
      :param [n_samples: The time series dataset.
      :param n_dimensions: The time series dataset.
      :param n_timestep]: The time series dataset.
      :param y: For compatibility.
      :type y: None, optional

      :returns: **x_embedding** -- The embedding.
      :rtype: ndarray of shape [n_samples, n_outputs]


   .. py:method:: transform(x)

      Transform the dataset.

      :param x:
      :type x: array-like of shape [n_samples, n_timestep] or
      :param [n_samples: The time series dataset.
      :param n_dimensions: The time series dataset.
      :param n_timestep]: The time series dataset.

      :returns: **x_embedding** -- The embedding.
      :rtype: ndarray of shape [n_samples, n_outputs]



.. py:class:: IntervalEmbedding(n_intervals='sqrt', *, intervals='fixed', sample_size=0.5, min_size=0.0, max_size=1.0, summarizer='auto', n_jobs=None, random_state=None)

   Bases: :py:obj:`wildboar.embed.base.BaseEmbedding`

   Embed a time series as a collection of features per interval.

   .. rubric:: Examples

   >>> from wildboar.datasets import load_dataset
   >>> x, y = load_dataset("GunPoint")
   >>> embedding = IntervalEmbedding(n_intervals=10, summarizer="mean")
   >>> embedding.fit_transform(x)

   Each interval (15 timepoints) are embedded as its mean.

   >>> embedding = IntervalEmbedding(n_intervals="sqrt", summarizer=[np.mean, np.std])
   >>> embedding.fit_transform(x)

   Each interval (150 // 12 timepoints) are embedded as two features. The mean
   and the standard deviation.

   :param n_intervals: The number of intervals to use for the embedding.

                       - if "log", the number of intervals is ``log2(n_timestep)``.
                       - if "sqrt", the number of intervals is ``sqrt(n_timestep)``.
                       - if int, the number of intervals is ``n_intervals``.
                       - if float, the number of intervals is ``n_intervals * n_timestep``, with
                         ``0 < n_intervals < 1``.
   :type n_intervals: str, int or float, optional
   :param intervals: The method for selecting intervals

                     - if "fixed", `n_intervals` non-overlapping intervals.
                     - if "sample", ``n_intervals * sample_size`` non-overlapping intervals.
                     - if "random", `n_intervals` possibly overlapping intervals of randomly
                       sampled in ``[min_size * n_timestep, max_size * n_timestep]``
   :type intervals: str, optional
   :param sample_size: The sample size of fixed intervals if ``intervals="sample"``
   :type sample_size: float, optional
   :param min_size: The minimum interval size if ``intervals="random"``
   :type min_size: float, optional
   :param max_size: The maximum interval size if ``intervals="random"``
   :type max_size: float, optional
   :param summarizer: The method to summarize each interval.

                      - if str, the summarizer is determined by ``_SUMMARIZERS.keys()``.
                      - if list, the summarizer is a list of functions ``f(x) -> float``, where
                        x is a numpy array.

                      The default summarizer summarizes each interval as its mean, standard
                      deviation and slope.
   :type summarizer: str or list, optional
   :param n_jobs: The number of cores to use on multi-core.
   :type n_jobs: int, optional
   :param random_state:
                        - If `int`, `random_state` is the seed used by the random number generator
                        - If `RandomState` instance, `random_state` is the random number generator
                        - If `None`, the random number generator is the `RandomState` instance used
                          by `np.random`.
   :type random_state: int or RandomState


.. py:class:: PivotEmbedding(n_pivot=1, *, metrics='all', random_state=None, n_jobs=None)

   Bases: :py:obj:`wildboar.embed.base.BaseEmbedding`

   An embedding using pivot time series and sampled distance metrics.

   :param n_jobs: The number of jobs to run in parallel. None means 1 and
                  -1 means using all processors.
   :type n_jobs: int, optional


.. py:class:: RandomShapeletEmbedding(n_shapelets=1000, *, metric='euclidean', metric_params=None, min_shapelet_size=0, max_shapelet_size=1.0, n_jobs=None, random_state=None)

   Bases: :py:obj:`wildboar.embed.base.BaseEmbedding`

   Embed a time series as the distances to a selection of random shapelets.

   .. attribute:: embedding_

      The underlying embedding object.

      :type: Embedding

   .. rubric:: References

   Wistuba, Martin, Josif Grabocka, and Lars Schmidt-Thieme.
       Ultra-fast shapelets for time series classification.
       arXiv preprint arXiv:1503.05018 (2015).

   :param n_shapelets: The number of shapelets in the resulting embedding
   :type n_shapelets: int, optional
   :param metric: The distance metric

                  - if str use optimized implementations of the named distance measure
                  - if callable a function taking two arrays as input
   :type metric: str, optional
   :param metric_params: Parameters to the metric

                         - 'euclidean' and 'scaled_euclidean' take no parameters
                         - 'dtw' and 'scaled_dtw' take a single paramater 'r'. If 'r' <= 1 it
                           is interpreted as a fraction of the time series length. If > 1 it
                           is interpreted as an exact time warping window. Use 'r' == 0 for
                           a widow size of exactly 1.
   :type metric_params: dict, optional
   :param min_shapelet_size: Minimum shapelet size.
   :type min_shapelet_size: float, optional
   :param max_shapelet_size: Maximum shapelet size.
   :type max_shapelet_size: float, optional
   :param n_jobs: The number of jobs to run in parallel. None means 1 and
                  -1 means using all processors.
   :type n_jobs: int, optional
   :param random_state: The psudo-random number generator.
   :type random_state: int or RandomState, optional


.. py:class:: RocketEmbedding(n_kernels=1000, *, sampling='auto', sampling_params=None, kernel_size=None, bias_prob=1.0, normalize_prob=1.0, padding_prob=0.5, n_jobs=None, random_state=None)

   Bases: :py:obj:`wildboar.embed.base.BaseEmbedding`

   Embedd a time series using random convolution features

   .. attribute:: embedding_

      The underlying embedding

      :type: Embedding

   .. rubric:: References

   Dempster, Angus, Fran√ßois Petitjean, and Geoffrey I. Webb.
       ROCKET: exceptionally fast and accurate time series classification using
       random convolutional kernels.
       Data Mining and Knowledge Discovery 34.5 (2020): 1454-1495.

   :param n_kernels: The number of kernels.
   :type n_kernels: int, optional
   :param n_jobs: The number of jobs to run in parallel. None means 1 and
                  -1 means using all processors.
   :type n_jobs: int, optional
   :param random_state: The psuodo-random number generator.
   :type random_state: int or RandomState, optional


