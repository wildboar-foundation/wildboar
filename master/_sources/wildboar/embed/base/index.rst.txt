:mod:`wildboar.embed.base`
==========================

.. py:module:: wildboar.embed.base


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   wildboar.embed.base.BaseEmbedding



.. class:: BaseEmbedding(*, random_state=None, n_jobs=None)


   Bases: :class:`sklearn.base.TransformerMixin`, :class:`sklearn.base.BaseEstimator`

   Base embedding

   .. attribute:: embedding_

      The underlying embedding.

      :type: Embedding

   :param n_jobs: The number of jobs to run in parallel. None means 1 and
                  -1 means using all processors.
   :type n_jobs: int, optional

   .. method:: fit(self, x, y=None)

      Fit the embedding.

      :param x: The time series dataset.
      :type x: array-like of shape [n_samples, n_timestep] or [n_samples, n_dimensions, n_timestep]
      :param y: For compatibility.
      :type y: None, optional

      :returns: **embedding**
      :rtype: self


   .. method:: fit_transform(self, x, y=None)

      Fit the embedding and return the transform of x.

      :param x: The time series dataset.
      :type x: array-like of shape [n_samples, n_timestep] or [n_samples, n_dimensions, n_timestep]
      :param y: For compatibility.
      :type y: None, optional

      :returns: **x_embedding** -- The embedding.
      :rtype: ndarray of shape [n_samples, n_outputs]


   .. method:: transform(self, x)

      Transform the dataset.

      :param x: The time series dataset.
      :type x: array-like of shape [n_samples, n_timestep] or [n_samples, n_dimensions, n_timestep]

      :returns: **x_embedding** -- The embedding.
      :rtype: ndarray of shape [n_samples, n_outputs]



