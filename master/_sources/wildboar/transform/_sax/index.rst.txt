:orphan:

:py:mod:`wildboar.transform._sax`
=================================

.. py:module:: wildboar.transform._sax


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   wildboar.transform._sax.PAA
   wildboar.transform._sax.SAX



Functions
~~~~~~~~~

.. autoapisummary::

   wildboar.transform._sax.piecewice_aggregate_approximation
   wildboar.transform._sax.symbolic_aggregate_approximation



.. py:class:: PAA(n_intervals='sqrt', window=None)

   Bases: :py:obj:`sklearn.base.TransformerMixin`, :py:obj:`wildboar.base.BaseEstimator`

   Peicewise aggregate approximation

   .. py:property:: intervals_


   .. py:method:: fit(x, y=None)


   .. py:method:: inverse_transform(x)


   .. py:method:: transform(x)



.. py:class:: SAX(*, n_intervals='sqrt', window=None, n_bins=4, binning='normal', estimate=True)

   Bases: :py:obj:`sklearn.base.TransformerMixin`, :py:obj:`wildboar.base.BaseEstimator`

   Symbolic aggregate approximation

   :param x: The input data.
   :type x: array-like of shape (n_samples, n_timestep)
   :param n_intervals: The number of intervals to use for the transform.

                       - if "log", the number of intervals is ``log2(n_timestep)``.
                       - if "sqrt", the number of intervals is ``sqrt(n_timestep)``.
                       - if int, the number of intervals is ``n_intervals``.
                       - if float, the number of intervals is ``n_intervals * n_timestep``, with
                           ``0 < n_intervals < 1``.
   :type n_intervals: str, optional
   :param window: The window size. If ``window`` is set, the value of ``n_intervals`` has no
                  effect.
   :type window: int, optional
   :param n_bins: The number of bins.
   :type n_bins: int, optional
   :param binning: The bin construction. By default the bins are defined according to the
                   normal distribution. Possible values are ``"normal"`` for normally
                   distributed bins or ``"uniform"`` for uniformly distributed bins.
   :type binning: str, optional
   :param estimate: Estimate the distribution parameters for the binning from data.

                    If ``estimate=False``, it is assumed that each time series are:

                    - preprocessed using :func:`datasets.preprocess.normalize` when
                      ``binning="normal"``.

                    - preprocessed using :func:`datasets.preprocess.minmax_scale`. when
                      ``binning="uniform"``
   :type estimate: bool, optional

   .. py:property:: intervals_


   .. py:method:: fit(x, y=None)


   .. py:method:: inverse_transform(x)


   .. py:method:: transform(x)



.. py:function:: piecewice_aggregate_approximation(x, *, n_intervals='sqrt', window=None)

   Peicewise aggregate approximation

   :param x: The input data.
   :type x: array-like of shape (n_samples, n_timestep)
   :param n_intervals: The number of intervals to use for the transform.

                       - if "log", the number of intervals is ``log2(n_timestep)``.
                       - if "sqrt", the number of intervals is ``sqrt(n_timestep)``.
                       - if int, the number of intervals is ``n_intervals``.
                       - if float, the number of intervals is ``n_intervals * n_timestep``, with
                           ``0 < n_intervals < 1``.
   :type n_intervals: str, optional
   :param window: The window size. If ``window`` is set, the value of ``n_intervals`` has no
                  effect.
   :type window: int, optional

   :returns: **paa** -- The symbolic aggregate approximation
   :rtype: ndarray of shape (n_samples, n_intervals)


.. py:function:: symbolic_aggregate_approximation(x, *, n_intervals='sqrt', window=None, n_bins=4, binning='normal')

   Symbolic aggregate approximation

   :param x: The input data.
   :type x: array-like of shape (n_samples, n_timestep)
   :param n_intervals: The number of intervals to use for the transform.

                       - if "log", the number of intervals is ``log2(n_timestep)``.
                       - if "sqrt", the number of intervals is ``sqrt(n_timestep)``.
                       - if int, the number of intervals is ``n_intervals``.
                       - if float, the number of intervals is ``n_intervals * n_timestep``, with
                           ``0 < n_intervals < 1``.
   :type n_intervals: str, optional
   :param window: The window size. If ``window`` is set, the value of ``n_intervals`` has no
                  effect.
   :type window: int, optional
   :param n_bins: The number of bins.
   :type n_bins: int, optional
   :param binning: The bin construction. By default the bins are defined according to the
                   normal distribution. Possible values are ``"normal"`` for normally
                   distributed bins or ``"uniform"`` for uniformly distributed bins.
   :type binning: str, optional

   :returns: **sax** -- The symbolic aggregate approximation
   :rtype: ndarray of shape (n_samples, n_intervals)


