:py:mod:`wildboar.metrics`
==========================

.. py:module:: wildboar.metrics


Package Contents
----------------


Functions
~~~~~~~~~

.. autoapisummary::

   wildboar.metrics.compactness_score
   wildboar.metrics.plausability_score
   wildboar.metrics.proximity_score
   wildboar.metrics.relative_proximity_score
   wildboar.metrics.validity_score



.. py:function:: compactness_score(x_true, x_counterfactuals, *, rtol=1e-05, atol=1e-08)

   Return the compactness of the counterfactuals as measured by the
   fraction of changed timesteps. The fewer timesteps have changed between the original
   and the counterfactual, the lower the score.

   :param x_true: The true samples
   :type x_true: array-like of shape (n_samples, n_timesteps)     or (n_samples, n_dims, n_timeteps)
   :param x_counterfactuals: The counterfactual samples
   :type x_counterfactuals: array-like of shape (n_samples, n_timesteps)     or (n_samples, n_dims, n_timeteps)
   :param rtol: Parameter to `np.isclose`.
   :type rtol: float, optional
   :param atol: Parameter to `np.isclose`.
   :type atol: float, optional

   :returns: **score** -- The compactness score. Lower score indicates more compact counterfactuals.
   :rtype: float

   .. rubric:: References

   Karlsson, I., Rebane, J., Papapetrou, P., & Gionis, A. (2020).
       Locally and globally explainable time series tweaking.
       Knowledge and Information Systems, 62(5), 1671-1700.


.. py:function:: plausability_score(X_plausible, X_counterfactuals, estimator=None, method='accuracy')

   Compute the plausibility of the generated counterfactuals.

   :param X_plausible: The plausible time series, typically the training or testing samples.
   :type X_plausible: array-like of shape (n_samples, n_timesteps)
   :param X_counterfactuals: The counterfactuals generated
   :type X_counterfactuals: array-like of shape (m_samples, n_timesteps)
   :param estimator: The outlier estimator.
   :type estimator: Estimator, optional
   :param method: The score function.
   :type method: {'average', 'accuracy'}, optional

   :returns: **score** -- The plausability.

             - if method='average', the mean score is returned, with larger score incicating
               better performance.

             - if method='accuracy', the fraction of plausible counterfactuals are returned.
   :rtype: float

   .. rubric:: References

   Delaney, E., Greene, D., & Keane, M. T. (2020).
       Instance-based Counterfactual Explanations for Time Series Classification.
       arXiv, 2009.13211v2.


.. py:function:: proximity_score(x_true, x_counterfactuals, metric='normalized_euclidean', metric_params=None)

   Compute the proximity score of the counterfactuals using the provided metric.

   The closer the counterfactual is to the original, the lower the score.

   :param x_true: The true samples
   :type x_true: array-like of shape (n_samples, n_timestep)
   :param x_counterfactuals: The counterfactual samples
   :type x_counterfactuals: array-like of shape (n_samples, n_timestep)
   :param metric: The distance metric

                  See ``_DISTANCE_MEASURE.keys()`` for a list of supported metrics.
   :type metric: str or callable, optional
   :param metric_params: Parameters to the metric.

                         Read more about the parameters in the
                         :ref:`User guide <list_of_metrics>`.
   :type metric_params: dict, optional

   :returns: **score** -- The mean proximity.
   :rtype: float

   .. rubric:: References

   Delaney, E., Greene, D., & Keane, M. T. (2020).
       Instance-based Counterfactual Explanations for Time Series Classification.
       arXiv, 2009.13211v2.

   Karlsson, I., Rebane, J., Papapetrou, P., & Gionis, A. (2020).
       Locally and globally explainable time series tweaking.
       Knowledge and Information Systems, 62(5), 1671-1700.


.. py:function:: relative_proximity_score(X_native, X_test, X_counterfactual, *, y_native=None, y_counterfactual=None, metric='euclidean', metric_params=None)

   Relative proximity score captures the mean proximity of counterfactual and
   test sample pairs over mean proximity of the closest native counterfactual. The
   lower the score, the better.

   :param X_native: The native counterfactual candidates. If y_counterfactual is None, the full
                    array is considered as possible native counterfactuals.
   :type X_native: array-like of shape (n_natives, n_timesteps)
   :param X_test: The test samples.
   :type X_test: array-like of shape (n_counterfactuals, n_timesteps)
   :param X_counterfactuals: The counterfactual samples.
   :type X_counterfactuals: array-like of shape (n_counterfactuals, n_timesteps)
   :param y_native: The label of the native counterfactual candidates.
   :type y_native: array-like of shape (n_natives, ), optional
   :param y_counterfactual: The desired counterfactual label.
   :type y_counterfactual: array-like of shape (n_counterfactuals, )
   :param metric: The distance metric

                  See ``_DISTANCE_MEASURE.keys()`` for a list of supported metrics.
   :type metric: str or callable, optional
   :param metric_params: Parameters to the metric.

                         Read more about the parameters in the
                         :ref:`User guide <list_of_metrics>`.
   :type metric_params: dict, optional

   :returns: **score** -- The relative proximity.
   :rtype: float

   .. rubric:: References

   Smyth, B., & Keane, M. T. (2021).
       A Few Good Counterfactuals: Generating Interpretable, Plausible and Diverse
       Counterfactual Explanations. arXiv, 2101.09056v1.


.. py:function:: validity_score(y_pred, y_counterfactual, sample_weight=None)

   Compute the number counterfactuals that have the desired label.

   :param y_pred: The desired label
   :type y_pred: array-like of shape (n_samples, )
   :param y_counterfactual: The predicted label
   :type y_counterfactual: array-like of shape (n_samples, )
   :param sample_weight: The sample weight
   :type sample_weight: array-like of shape (n_samples, ), optional

   :returns: **score** -- The fraction of counterfactuals with the correct label. Larger is better.
   :rtype: float

   .. rubric:: References

   Delaney, E., Greene, D., & Keane, M. T. (2020).
       Instance-based Counterfactual Explanations for Time Series Classification.
       arXiv, 2009.13211v2.

   Karlsson, I., Rebane, J., Papapetrou, P., & Gionis, A. (2020).
       Locally and globally explainable time series tweaking.
       Knowledge and Information Systems, 62(5), 1671-1700.


