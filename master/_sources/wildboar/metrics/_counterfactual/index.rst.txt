:orphan:

:py:mod:`wildboar.metrics._counterfactual`
==========================================

.. py:module:: wildboar.metrics._counterfactual


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   wildboar.metrics._counterfactual.compactness_score
   wildboar.metrics._counterfactual.plausability_score
   wildboar.metrics._counterfactual.proximity_score
   wildboar.metrics._counterfactual.validity_score



.. py:function:: compactness_score(x_true, x_counterfactuals, *, rtol=1e-05, atol=1e-08)

   Return the compactness of the counterfactuals as measured by the
   fraction of changed timesteps. The fewer timesteps have changed between the original
   and the counterfactual, the lower the score.

   :param x_true: The true samples
   :type x_true: array-like of shape (n_samples, n_timesteps)     or (n_samples, n_dims, n_timeteps)
   :param x_counterfactuals: The counterfactual samples
   :type x_counterfactuals: array-like of shape (n_samples, n_timesteps)     or (n_samples, n_dims, n_timeteps)
   :param rtol: Parameter to `np.isclose`.
   :type rtol: float, optional
   :param atol: Parameter to `np.isclose`.
   :type atol: float, optional

   :returns: **score** -- The compactness score. Lower score indicates more compact counterfactuals.
   :rtype: float


.. py:function:: plausability_score(X_plausible, X_counterfactuals, estimator=None, method='average')

   Compute the plausibility of the generated counterfactuals.

   :param X_plausible: The plausible time series, typically the training or testing samples.
   :type X_plausible: array-like of shape (n_samples, n_timesteps)
   :param X_counterfactuals: The counterfactuals generated
   :type X_counterfactuals: array-like of shape (m_samples, n_timesteps)
   :param estimator: The outlier estimator.
   :type estimator: Estimator, optional
   :param method: The score function.
   :type method: {'average', 'accuracy'}, optional

   :returns: **score** -- The plausability.

             - if method='average', the mean score is returned, with larger score incicating
               better performance.

             - if method='accuracy', the fraction of correctly predicted inliers is returned.
   :rtype: float


.. py:function:: proximity_score(x_true, x_counterfactuals, normalize=False, kernel_scale=0.75, metric='euclidean', metric_params=None)

   Compute the proximity score of the counterfactuals using the provided metric.

   The closer the counterfactual is to the original, the lower the score.

   :param x_true: The true samples
   :type x_true: array-like of shape (n_samples, n_timestep)
   :param x_counterfactuals: The counterfactual samples
   :type x_counterfactuals: array-like of shape (n_samples, n_timestep)
   :param normalize: Normalize the score in [0, 1], with 1 indicating perfect proximity.
   :type normalize: bool, optional
   :param metric: The scoring metric

                  - if str use metrics from scikit-learn or wildboar
   :type metric: str or callable, optional

   :returns: **score** -- The mean proximity.

             - if normalize=True, higher score is better.
             - if normalize=False, lower score is better.
   :rtype: float


.. py:function:: validity_score(y_pred, y_counterfactual, sample_weight=None)

   Compute the number counterfactuals that have the desired label.

   :param y_pred: The desired label
   :type y_pred: array-like of shape (n_samples, )
   :param y_counterfactual: The predicted label
   :type y_counterfactual: array-like of shape (n_samples, )
   :param sample_weight: The sample weight
   :type sample_weight: array-like of shape (n_samples, ), optional

   :returns: **score** -- The fraction of counterfactuals with the correct label. Larger is better.
   :rtype: float


