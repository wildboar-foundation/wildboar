:py:mod:`wildboar.distance`
===========================

.. py:module:: wildboar.distance


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   dtw/index.rst


Package Contents
----------------


Functions
~~~~~~~~~

.. autoapisummary::

   wildboar.distance.matrix_profile
   wildboar.distance.paired_distance
   wildboar.distance.paired_subsequence_distance
   wildboar.distance.paired_subsequence_match
   wildboar.distance.pairwise_distance
   wildboar.distance.pairwise_subsequence_distance
   wildboar.distance.subsequence_match



.. py:function:: matrix_profile(x, y=None, *, window=5, dim=0, exclude=None, n_jobs=-1, return_index=False)

   Compute the matrix profile.

   - If only ``x`` is given, compute the similarity self-join of every subsequence in
     ``x`` of size ``window`` to its nearest neighbor in `x` excluding trivial matches
     according to the ``exclude`` parameter.
   - If both ``x`` and ``y`` are given, compute the similarity join of every
     subsequenec in ``y`` of size ``window`` to its nearest neighbor in ``x`` excluding
     matches according to the ``exclude`` parameter.

   :param x: The first time series
   :type x: array-like of shape (n_timestep, ), (n_samples, xn_timestep) or         (n_samples, n_dim, xn_timestep)
   :param y: The optional second time series. y is broadcast to the shape of x if possible.
   :type y: array-like of shape (n_timestep, ), (n_samples, yn_timestep) or         (n_samples, n_dim, yn_timestep), optional
   :param window: The subsequence size, by default 5

                  - if float, a fraction of `y.shape[-1]`
                  - if int, the exact subsequence size
   :type window: int or float, optional
   :param dim: The dim to compute the matrix profile for, by default 0
   :type dim: int, optional
   :param exclude: The size of the exclusion zone. The default exclusion zone is  0.2 for
                   similarity self-join and 0.0 for similarity join.

                   - if float, expressed as a fraction of the windows size
                   - if int, exact size (0 >= exclude < window)
   :type exclude: int or float, optional
   :param n_jobs: The number of jobs to use when computing the
   :type n_jobs: int, optional
   :param return_index: Return the matrix profile index
   :type return_index: bool, optional

   :returns: * **mp** (*ndarray of shape (profile_size, ) or (n_samples, profile_size)*) -- The matrix profile
             * **mpi** (*ndarray of shape (profile_size, ) or (n_samples, profile_size), optional*) -- The matrix profile index

   .. rubric:: Notes

   The `profile_size` depends on the input.

   - If `y` is `NoneÂ´, `profile_size` is  ``x.shape[-1] - window + 1``
   - If `y` is not `None`, `profile_size` is ``y.shape[-1] - window + 1``

   .. rubric:: References

   Yeh, C. C. M. et al. (2016).
       Matrix profile I: All pairs similarity joins for time series: a unifying view
       that includes motifs, discords and shapelets. In 2016 IEEE 16th international
       conference on data mining (ICDM)


.. py:function:: paired_distance(x, y, *, dim='warn', metric='euclidean', metric_params=None, n_jobs=None)

   Compute the distance between the i:th time series

   :param x: The input data. y will be broadcast to the shape of x if possible.
   :type x: ndarray of shape (n_samples, n_timestep) or (n_samples, n_dims, n_timestep)
   :param y: The input data
   :type y: : ndarray of shape (n_samples, n_timestep) or (n_samples, n_dims, n_timestep)
   :param dim:    The dim to compute distance

               metric : str or callable, optional
                  The distance metric

                  See ``_DISTANCE_MEASURE.keys()`` for a list of supported metrics.
   :type dim: int or {'mean', 'full'} optional
   :param metric_params: Parameters to the metric.

                         Read more about the parameters in the
                         :ref:`User guide <list_of_metrics>`.
   :type metric_params: dict, optional
   :param n_jobs: The number of parallel jobs.
   :type n_jobs: int, optional

   :returns: **distance** -- The distances. Return depends on input:

             - if x.ndim == 1, return scalar
             - if dim='full', return ndarray of shape (n_samples, n_dims)
             - if x.ndim > 1, return an ndarray of shape (n_samples, )
   :rtype: ndarray


.. py:function:: paired_subsequence_distance(y, x, *, dim=0, metric='euclidean', metric_params=None, return_index=False, n_jobs=None)

   Compute the minimum subsequence distance between the i:th subsequence and time
   series

   :param y: Input time series.

             - if list, a list of array-like of shape (m_timestep, )
   :type y: list or ndarray of shape (n_samples, m_timestep)
   :param x: The input data
   :type x: ndarray of shape (n_timestep, ), (n_samples, n_timestep)    or (n_samples, n_dims, n_timestep)
   :param dim: The dim to search for shapelets
   :type dim: int, optional
   :param metric: The distance metric

                  See ``_SUBSEQUENCE_DISTANCE_MEASURE.keys()`` for a list of supported metrics.
   :type metric: str or callable, optional
   :param metric_params: Parameters to the metric.

                         Read more about the parameters in the
                         :ref:`User guide <list_of_subsequence_metrics>`.
   :type metric_params: dict, optional
   :param return_index:
                        - if True return the index of the best match. If there are many equally good
                          matches, the first match is returned.
   :type return_index: bool, optional
   :param n_jobs: The number of parallel jobs to run. Ignored
   :type n_jobs: int, optional

   :returns: * **dist** (*float, ndarray*) -- An array of shape (n_samples, ) with the minumum distance between the i:th
               subsequence and the i:th sample
             * **indices** (*int, ndarray, optional*) -- An array of shape (n_samples, ) with the index of the best matching position
               of the i:th subsequence and the i:th sample


.. py:function:: paired_subsequence_match(y, x, threshold=None, *, dim=0, metric='euclidean', metric_params=None, max_matches=None, return_distance=False, n_jobs=None)

   Compute the minimum subsequence distance between the i:th subsequence and time
   series

   :param y: Input time series.

             - if list, a list of array-like of shape (n_timestep, ) with length n_samples
   :type y: list or ndarray of shape (n_samples, n_timestep)
   :param x: The input data
   :type x: ndarray of shape (n_samples, n_timestep) or (n_samples, n_dims, n_timestep)
   :param threshold: The distance threshold used to consider a subsequence matching. If no threshold
                     is selected, `max_matches` defaults to 10.
   :type threshold: float
   :param dim: The dim to search for shapelets
   :type dim: int, optional
   :param metric: The distance metric

                  See ``_SUBSEQUENCE_DISTANCE_MEASURE.keys()`` for a list of supported metrics.
   :type metric: str or callable, optional
   :param metric_params: Parameters to the metric.

                         Read more about the parameters in the
                         :ref:`User guide <list_of_subsequence_metrics>`.
   :type metric_params: dict, optional
   :param max_matches: Return the top `max_matches` matches below `threshold`.

                       - If a `threshold` is given, the default behaviour is to return all matching
                         indices in the order of occurrence .
                       - If no `threshold` is given, the default behaviour is to return the top 10
                         matching indicies ordered by distance
                       - If both `threshold` and `max_matches` are given the top matches are returned
                         ordered by distance.
   :type max_matches: int, optional
   :param return_distance:
                           - if True, return the distance of the match
   :type return_distance: bool, optional
   :param n_jobs: The number of parallel jobs to run. Ignored
   :type n_jobs: int, optional

   :returns: * **indicies** (*ndarray*) -- The start index of matching subsequences. Return depends on input:

               - if x.ndim > 1, return an ndarray of shape (n_samples, )
               - if x.ndim == 1, return ndarray of shape (n_matches, ) or None

               For each sample, the ndarray contains the .
             * **distance** (*ndarray, optional*) -- The distances of matching subsequences. Return depends on input:

               - if x.ndim > 1, return an ndarray of shape (n_samples, )
               - if x.ndim == 1, return ndarray of shape (n_matches, ) or None


.. py:function:: pairwise_distance(x, y=None, *, dim='warn', metric='euclidean', metric_params=None, n_jobs=None)

   Compute the distance between subsequences and time series

   :param x: The input data
   :type x: ndarray of shape (n_timestep, ), (x_samples, n_timestep) or             (x_samples, n_dims, n_timestep)
   :param y: The input data
   :type y: ndarray of shape (n_timestep, ), (y_samples, n_timestep) or             (y_samples, n_dims, n_timestep), optional
   :param dim:    The dim to compute distance

               metric : str or callable, optional
                  The distance metric

                  See ``_DISTANCE_MEASURE.keys()`` for a list of supported metrics.
   :type dim: int or {'mean', 'full'} optional
   :param metric_params: Parameters to the metric.

                         Read more about the parameters in the
                         :ref:`User guide <list_of_metrics>`.
   :type metric_params: dict, optional
   :param n_jobs: The number of parallel jobs.
   :type n_jobs: int, optional

   :returns: **dist** -- The distances. Return depends on input.

             - if x.ndim == 1 and y.ndim == 1, scalar
             - if dim="full", array of shape (n_dims, x_samples, y_samples)
             - if dim="full" and y is None, array of shape (n_dims, x_samples, x_samples)
             - if x.ndim > 1 and y is None, array of shape (x_samples, x_samples)
             - if x.ndim > 1 and y.ndim > 1, array of shape (x_samples, y_samples)
             - if x.ndim == 1 and y.ndim > 1, array of shape (y_samples, )
             - if y.ndim == 1 and x.ndim > 1, array of shape (x_samples, )
   :rtype: float or ndarray


.. py:function:: pairwise_subsequence_distance(y, x, *, dim=0, metric='euclidean', metric_params=None, return_index=False, n_jobs=None)

   Compute the minimum subsequence distance between subsequences and time series

   :param y: Input time series.

             - if list, a list of array-like of shape (n_timestep, )
   :type y: list or ndarray of shape (n_subsequences, n_timestep)
   :param x: The input data
   :type x: ndarray of shape (n_timestep, ), (n_samples, n_timestep)    or (n_samples, n_dims, n_timestep)
   :param dim:    The dim to search for subsequence

               metric : str or callable, optional
                  The distance metric

                  See ``_SUBSEQUENCE_DISTANCE_MEASURE.keys()`` for a list of supported metrics.
   :type dim: int, optional
   :param metric_params: Parameters to the metric.

                         Read more about the parameters in the
                         :ref:`User guide <list_of_subsequence_metrics>`.
   :type metric_params: dict, optional
   :param return_index:
                        - if True return the index of the best match. If there are many equally good
                          matches, the first match is returned.
   :type return_index: bool, optional

   :returns: * **dist** (*float, ndarray*) -- The minumum distance. Return depends on input:

               - if len(y) > 1 and x.ndim > 1, return an array of shape
                 (n_samples, n_subsequences).
               - if len(y) == 1, return an array of shape (n_samples, ).
               - if x.ndim == 1, return an array of shape (n_subsequences, ).
               - if x.ndim == 1 and len(y) == 1, return scalar.
             * **indices** (*int, ndarray, optional*) --  The start index of the minumum distance. Return dependes on input:

               - if len(y) > 1 and x.ndim > 1, return an array of shape
                 (n_samples, n_subsequences).
               - if len(y) == 1, return an array of shape (n_samples, ).
               - if x.ndim == 1, return an array of shape (n_subsequences, ).
               - if x.ndim == 1 and len(y) == 1, return scalar.


.. py:function:: subsequence_match(y, x, threshold=None, *, dim=0, metric='euclidean', metric_params=None, max_matches=None, exclude=None, return_distance=False, n_jobs=None)

   Find the positions where the distance is less than the threshold between the
   subsequence and all time series.

   - If a `threshold` is given, the default behaviour is to return all matching
     indices in the order of occurrence
   - If no `threshold` is given, the default behaviour is to return the top 10
     matching indicies ordered by distance
   - If both `threshold` and `max_matches` are given, the top matches are returned
     ordered by distance.

   :param y: The subsequence
   :type y: array-like of shape (yn_timestep, )
   :param x: The input data
   :type x: ndarray of shape (n_timestep, ), (n_samples, n_timestep)    or (n_samples, n_dims, n_timestep)
   :param threshold: The distance threshold used to consider a subsequence matching. If no threshold
                     is selected, `max_matches` defaults to 10.

                     - if float, return all matches closer than threshold
                     - if callable, return all matches closer than the treshold computed by the
                       threshold function, given all distances to the subsequence
                     - if str, return all matches according to the named threshold.
   :type threshold: str, float or callable, optional
   :param dim: The dim to search for shapelets
   :type dim: int, optional
   :param metric: The distance metric

                  See ``_SUBSEQUENCE_DISTANCE_MEASURE.keys()`` for a list of supported metrics.
   :type metric: str or callable, optional
   :param metric_params: Parameters to the metric.

                         Read more about the parameters in the
                         :ref:`User guide <list_of_subsequence_metrics>`.
   :type metric_params: dict, optional
   :param max_matches: Return the top `max_matches` matches below `threshold`.
   :type max_matches: int, optional
   :param exclude: Exclude trivial matches in the vicinity of the match.

                   - if float, the exclusion zone is computed as ``math.ceil(exclude * y.size)``
                   - if int, the exclusion zone is exact

                   A match is considered trivial if a match with lower distance is within `exclude`
                   timesteps of another match with higher distance.
   :type exclude: float or int, optional
   :param return_distance:
                           - if True, return the distance of the match
   :type return_distance: bool, optional
   :param n_jobs: The number of parallel jobs to run. Ignored
   :type n_jobs: int, optional

   :returns: * **indicies** (*ndarray*) -- The start index of matching subsequences. Return depends on input:

               - if x.ndim > 1, return an ndarray of shape (n_samples, )
               - if x.ndim == 1, return ndarray of shape (n_matches, ) or None

               For each sample, the ndarray contains the .
             * **distance** (*ndarray, optional*) -- The distances of matching subsequences. Return depends on input:

               - if x.ndim > 1, return an ndarray of shape (n_samples, )
               - if x.ndim == 1, return ndarray of shape (n_matches, ) or None


