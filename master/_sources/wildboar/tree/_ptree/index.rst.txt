:orphan:

:py:mod:`wildboar.tree._ptree`
==============================

.. py:module:: wildboar.tree._ptree


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   wildboar.tree._ptree.ProximityTreeClassifier



Functions
~~~~~~~~~

.. autoapisummary::

   wildboar.tree._ptree.ddtw_factory
   wildboar.tree._ptree.dtw_factory
   wildboar.tree._ptree.euclidean_factory
   wildboar.tree._ptree.make_metrics
   wildboar.tree._ptree.wdtw_factory



.. py:class:: ProximityTreeClassifier(n_pivot=1, *, criterion='entropy', pivot_sample='label', metric_sample='weighted', metric_factories=None, force_dim=None, max_depth=None, min_samples_split=2, min_samples_leaf=1, min_impurity_decrease=0.0, class_weight=None, random_state=None)

   Bases: :py:obj:`wildboar.tree.base.TreeClassifierMixin`, :py:obj:`wildboar.tree.base.BaseTree`

   A classifier that uses a k-branching tree based on pivot-time series.

   .. rubric:: Examples

   >>> from wildboar.datasets import load_dataset
   >>> from wildboar.tree import ProximityTreeClassifier
   >>> x, y = load_dataset("GunPoint")
   >>> f = ProximityTreeClassifier(n_pivot=10, criterion="gini")
   >>> f.fit(x, y)

   .. rubric:: References

   Lucas, Benjamin, Ahmed Shifaz, Charlotte Pelletier, Lachlan O'Neill, Nayyar Zaidi,     Bart Goethals, Fran√ßois Petitjean, and Geoffrey I. Webb. (2019)
       Proximity forest: an effective and scalable distance-based classifier for time
       series. Data Mining and Knowledge Discovery

   :param n_pivot: The number of pivots to sample at each node.
   :type n_pivot: int, optional
   :param criterion: The impurity criterion.
   :type criterion: {"entropy", "gini"}, optional
   :param pivot_sample: The pivot sampling method.
   :type pivot_sample: {"label", "uniform"}, optional
   :param metric_sample: The metric sampling method.
   :type metric_sample: {"uniform", "weighted"}, optional
   :param metric_factories: The distance metrics. A dictionary where key is:

                            - if str, a named distance factory (See ``_DISTANCE_FACTORIES.keys()``)
                            - if callable, a function returning a list of ``DistanceMeasure``-objects

                            and where value is a dict of parameters to the factory.
   :type metric_factories: dict, optional
   :param max_depth: The maximum tree depth.
   :type max_depth: int, optional
   :param min_samples_split: The minimum number of samples to consider a split.
   :type min_samples_split: int, optional
   :param min_samples_leaf: The minimum number of samples in a leaf.
   :type min_samples_leaf: int, optional
   :param min_impurity_decrease: The minimum impurity decrease to build a sub-tree.
   :type min_impurity_decrease: float, optional
   :param class_weight: Weights associated with the labels.

                        - if dict, weights on the form {label: weight}.
                        - if "balanced" each class weight inversely proportional to the class
                          frequency.
                        - if None, each class has equal weight.
   :type class_weight: dict or "balanced", optional
   :param random_state:
                        - If `int`, `random_state` is the seed used by the random number generator
                        - If `RandomState` instance, `random_state` is the random number generator
                        - If `None`, the random number generator is the `RandomState` instance used
                          by `np.random`.
   :type random_state: int or RandomState


.. py:function:: ddtw_factory(min_r=0, max_r=0.25, n=10)


.. py:function:: dtw_factory(min_r=0, max_r=0.25, n=10)


.. py:function:: euclidean_factory()


.. py:function:: make_metrics(metric_factories=None)


.. py:function:: wdtw_factory(min_g=0.05, max_g=0.2, n=10)


