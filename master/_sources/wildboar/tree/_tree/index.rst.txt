:orphan:

:mod:`wildboar.tree._tree`
==========================

.. py:module:: wildboar.tree._tree


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   wildboar.tree._tree.BaseShapeletTree
   wildboar.tree._tree.BaseTree
   wildboar.tree._tree.ClassifierTreeMixin
   wildboar.tree._tree.ExtraShapeletTreeClassifier
   wildboar.tree._tree.ExtraShapeletTreeRegressor
   wildboar.tree._tree.RegressorTreeMixin
   wildboar.tree._tree.RocketTreeClassifier
   wildboar.tree._tree.RocketTreeRegressor
   wildboar.tree._tree.ShapeletTreeClassifier
   wildboar.tree._tree.ShapeletTreeRegressor



.. class:: BaseShapeletTree(*, max_depth=None, min_samples_split=2, n_shapelets=10, min_shapelet_size=0, max_shapelet_size=1, metric='euclidean', metric_params=None, force_dim=None, random_state=None)


   Bases: :class:`wildboar.tree._tree.BaseTree`

   Base class for all estimators in scikit-learn.

   .. rubric:: Notes

   All estimators should specify all the parameters that can be set
   at the class level in their ``__init__`` as explicit keyword
   arguments (no ``*args`` or ``**kwargs``).


.. class:: BaseTree(*, max_depth=None, min_samples_split=2)


   Bases: :class:`sklearn.base.BaseEstimator`

   Base class for all estimators in scikit-learn.

   .. rubric:: Notes

   All estimators should specify all the parameters that can be set
   at the class level in their ``__init__`` as explicit keyword
   arguments (no ``*args`` or ``**kwargs``).

   .. method:: apply(self, x, check_input=True)


   .. method:: decision_path(self, x, check_input=True)



.. class:: ClassifierTreeMixin

   .. method:: fit(self, x, y, sample_weight=None, check_input=True)

      Fit a shapelet tree regressor from the training set

      :param X: The training time series.
      :type X: array-like of shape (n_samples, n_timesteps) or (n_samples, n_dimensions, n_timesteps)
      :param y: The target values (class labels) as integers
      :type y: array-like of shape (n_samples,) or (n_samples, n_classes)
      :param sample_weight: If `None`, then samples are equally weighted. Splits that would create child
                            nodes with net zero or negative weight are ignored while searching for a split
                            in each node. Splits are also ignored if they would result in any single class
                            carrying a negative weight in either child node.
      :type sample_weight: array-like of shape (n_samples,)
      :param check_input: Allow to bypass several input checking. Don't use this parameter unless you know what you do.
      :type check_input: bool, optional

      :returns: **self**
      :rtype: object


   .. method:: predict(self, x, check_input=True)

      Predict the regression of the input samples x.

      :param x: The input time series
      :type x: array-like of shape (n_samples, n_timesteps) or (n_samples, n_dimensions, n_timesteps])
      :param check_input: Allow to bypass several input checking. Don't use this parameter unless you know what you do.
      :type check_input: bool, optional

      :returns: **y** -- The predicted classes.
      :rtype: ndarray of shape (n_samples,)


   .. method:: predict_proba(self, x, check_input=True)

      Predict class probabilities of the input samples X.  The predicted
      class probability is the fraction of samples of the same class
      in a leaf.

      :param x: The input time series
      :type x: array-like of shape (n_samples, n_timesteps) or (n_samples, n_dimensions, n_timesteps])
      :param check_input: Allow to bypass several input checking. Don't use this parameter unless you know what you do.
      :type check_input: bool, optional

      :returns: **proba** -- The class probabilities of the input samples. The order of the classes corresponds to
                that in the attribute `classes_`
      :rtype: ndarray of shape (n_samples, n_classes)



.. class:: ExtraShapeletTreeClassifier(max_depth=None, n_shapelets=1, min_samples_split=2, min_shapelet_size=0, max_shapelet_size=1, metric='euclidean', metric_params=None, force_dim=None, random_state=None)


   Bases: :class:`wildboar.tree._tree.ShapeletTreeClassifier`

   An extra shapelet tree classifier.

   Extra shapelet trees are constructed by sampling a distance threshold
   uniformly in the range [min(dist), max(dist)].

   .. attribute:: tree_



      :type: Tree

   Construct a extra shapelet tree regressor

   :param max_depth: The maximum depth of the tree. If `None` the tree is expanded until all leaves
                     are pure or until all leaves contain less than `min_samples_split` samples
   :type max_depth: int, optional
   :param min_samples_split: The minimum number of samples to split an internal node
   :type min_samples_split: int, optional
   :param n_shapelets: The number of shapelets to sample at each node.
   :type n_shapelets: int, optional
   :param min_shapelet_size: The minimum length of a sampled shapelet expressed as a fraction, computed as
                             `min(ceil(X.shape[-1] * min_shapelet_size), 2)`.
   :type min_shapelet_size: float, optional
   :param max_shapelet_size: The maximum length of a sampled shapelet, expressed as a fraction, computed as
                             `ceil(X.shape[-1] * max_shapelet_size)`.
   :type max_shapelet_size: float, optional
   :param metric: Distance metric used to identify the best shapelet.
   :type metric: {'euclidean', 'scaled_euclidean', 'scaled_dtw'}, optional
   :param metric_params: Parameters for the distance measure
   :type metric_params: dict, optional
   :param force_dim: Force the number of dimensions.

                     - If int, force_dim reshapes the input to shape (n_samples, force_dim, -1)
                       or interoperability with `sklearn`.
   :type force_dim: int, optional
   :param random_state:
                        - If `int`, `random_state` is the seed used by the random number generator;
                        - If `RandomState` instance, `random_state` is the random number generator;
                        - If `None`, the random number generator is the `RandomState` instance used by `np.random`.
   :type random_state: int or RandomState


.. class:: ExtraShapeletTreeRegressor(*, max_depth=None, n_shapelets=1, min_samples_split=2, min_shapelet_size=0, max_shapelet_size=1, metric='euclidean', metric_params=None, force_dim=None, random_state=None)


   Bases: :class:`wildboar.tree._tree.ShapeletTreeRegressor`

   An extra shapelet tree regressor.

   Extra shapelet trees are constructed by sampling a distance threshold
   uniformly in the range [min(dist), max(dist)].

   .. attribute:: tree_



      :type: Tree

   Construct a extra shapelet tree regressor

   :param max_depth: The maximum depth of the tree. If `None` the tree is expanded until all leaves
                     are pure or until all leaves contain less than `min_samples_split` samples
   :type max_depth: int, optional
   :param min_samples_split: The minimum number of samples to split an internal node
   :type min_samples_split: int, optional
   :param n_shapelets: The number of shapelets to sample at each node.
   :type n_shapelets: int, optional
   :param min_shapelet_size: The minimum length of a sampled shapelet expressed as a fraction, computed as
                             `min(ceil(X.shape[-1] * min_shapelet_size), 2)`.
   :type min_shapelet_size: float, optional
   :param max_shapelet_size: The maximum length of a sampled shapelet, expressed as a fraction, computed as
                             `ceil(X.shape[-1] * max_shapelet_size)`.
   :type max_shapelet_size: float, optional
   :param metric: Distance metric used to identify the best shapelet.
   :type metric: {'euclidean', 'scaled_euclidean', 'scaled_dtw'}, optional
   :param metric_params: Parameters for the distance measure
   :type metric_params: dict, optional
   :param force_dim: Force the number of dimensions.

                     - If int, force_dim reshapes the input to shape (n_samples, force_dim, -1)
                       for interoperability with `sklearn`.
   :type force_dim: int, optional
   :param random_state:
                        - If `int`, `random_state` is the seed used by the random number generator;
                        - If `RandomState` instance, `random_state` is the random number generator;
                        - If `None`, the random number generator is the `RandomState` instance used by `np.random`.
   :type random_state: int or RandomState


.. class:: RegressorTreeMixin

   .. method:: fit(self, X, y, sample_weight=None, check_input=True)

      Fit a shapelet tree regressor from the training set

      :param X: The training time series.
      :type X: array-like of shape (n_samples, n_timesteps) or (n_samples, n_dimensions, n_timesteps)
      :param y: Target values as floating point values
      :type y: array-like of shape (n_samples,)
      :param sample_weight: If `None`, then samples are equally weighted. Splits that would create child
                            nodes with net zero or negative weight are ignored while searching for a split
                            in each node. Splits are also ignored if they would result in any single class
                            carrying a negative weight in either child node.
      :type sample_weight: array-like of shape (n_samples,)
      :param check_input: Allow to bypass several input checking. Don't use this parameter unless you know what you do.
      :type check_input: bool, optional

      :returns: **self**
      :rtype: object


   .. method:: predict(self, x, check_input=True)

      Predict the regression of the input samples x.

      :param x: The input time series
      :type x: array-like of shape (n_samples, n_timesteps) or (n_samples, n_dimensions, n_timesteps])
      :param check_input: Allow to bypass several input checking. Don't use this parameter unless you know what you do.
      :type check_input: bool, optional

      :returns: **y** -- The predicted classes.
      :rtype: ndarray of shape (n_samples,)



.. class:: RocketTreeClassifier(*, n_kernels=10, precompute_kernels=None, max_depth=None, min_samples_split=2, force_dim=None, random_state=None)


   Bases: :class:`sklearn.base.ClassifierMixin`, :class:`wildboar.tree._tree.ClassifierTreeMixin`, :class:`wildboar.tree._tree.BaseTree`

   Mixin class for all classifiers in scikit-learn.

   :param n_kernels: The number of kernels to inspect at each node.
   :type n_kernels: int, optional
   :param precompute_kernels:
                              - if int, precompute n kernels to sample from
                              - if None, randomly sample at each node
   :type precompute_kernels: int, optional
   :param max_depth: The maxium depth.
   :type max_depth: int, optional
   :param min_samples_split: The minimum number of samples required to split.
   :type min_samples_split: int, optional
   :param force_dim: Force reshaping of input data.
   :type force_dim: int, optional
   :param random_state: The psudo-random number generator.
   :type random_state: int or RandomState, optional


.. class:: RocketTreeRegressor(*, n_kernels=10, precompute_kernels=None, max_depth=None, min_samples_split=2, force_dim=None, random_state=None)


   Bases: :class:`sklearn.base.RegressorMixin`, :class:`wildboar.tree._tree.RegressorTreeMixin`, :class:`wildboar.tree._tree.BaseTree`

   Mixin class for all regression estimators in scikit-learn.

   :param n_kernels: The number of kernels to inspect at each node.
   :type n_kernels: int, optional
   :param precompute_kernels:
                              - if int, precompute n kernels to sample from
                              - if None, randomly sample at each node
   :type precompute_kernels: int, optional
   :param max_depth: The maxium depth.
   :type max_depth: int, optional
   :param min_samples_split: The minimum number of samples required to split.
   :type min_samples_split: int, optional
   :param force_dim: Force reshaping of input data.
   :type force_dim: int, optional
   :param random_state: The psudo-random number generator.
   :type random_state: int or RandomState, optional


.. class:: ShapeletTreeClassifier(max_depth=None, min_samples_split=2, n_shapelets=10, min_shapelet_size=0, max_shapelet_size=1, metric='euclidean', metric_params=None, force_dim=None, random_state=None)


   Bases: :class:`sklearn.base.ClassifierMixin`, :class:`wildboar.tree._tree.ClassifierTreeMixin`, :class:`wildboar.tree._tree.BaseShapeletTree`

   A shapelet tree classifier.

   .. attribute:: tree_

      The tree data structure used internally

      :type: Tree

   .. attribute:: classes_

      The class labels

      :type: ndarray of shape (n_classes,)

   .. attribute:: n_classes_

      The number of class labels

      :type: int

   .. seealso::

      :obj:`ShapeletTreeRegressor`
          A shapelet tree regressor.

      :obj:`ExtraShapeletTreeClassifier`
          An extra random shapelet tree classifier.

   Construct a shapelet tree classifier

   :param max_depth: The maximum depth of the tree. If `None` the tree is expanded until all leaves
                     are pure or until all leaves contain less than `min_samples_split` samples
   :type max_depth: int, optional
   :param min_samples_split: The minimum number of samples to split an internal node
   :type min_samples_split: int, optional
   :param n_shapelets: The number of shapelets to sample at each node.
   :type n_shapelets: int, optional
   :param min_shapelet_size: The minimum length of a sampled shapelet expressed as a fraction, computed as
                             `min(ceil(X.shape[-1] * min_shapelet_size), 2)`.
   :type min_shapelet_size: float, optional
   :param max_shapelet_size: The maximum length of a sampled shapelet, expressed as a fraction, computed as
                             `ceil(X.shape[-1] * max_shapelet_size)`.
   :type max_shapelet_size: float, optional
   :param metric: Distance metric used to identify the best shapelet.
   :type metric: {'euclidean', 'scaled_euclidean', 'scaled_dtw'}, optional
   :param metric_params: Parameters for the distance measure
   :type metric_params: dict, optional
   :param force_dim: Force the number of dimensions.

                     - If int, force_dim reshapes the input to shape (n_samples, force_dim, -1)
                       for interoperability with `sklearn`.
   :type force_dim: int, optional
   :param random_state:
                        - If `int`, `random_state` is the seed used by the random number generator;
                        - If `RandomState` instance, `random_state` is the random number generator;
                        - If `None`, the random number generator is the `RandomState` instance used by `np.random`.
   :type random_state: int or RandomState


.. class:: ShapeletTreeRegressor(*, max_depth=None, min_samples_split=2, n_shapelets=10, min_shapelet_size=0, max_shapelet_size=1, metric='euclidean', metric_params=None, force_dim=None, random_state=None)


   Bases: :class:`sklearn.base.RegressorMixin`, :class:`wildboar.tree._tree.RegressorTreeMixin`, :class:`wildboar.tree._tree.BaseShapeletTree`

   A shapelet tree regressor.

   .. attribute:: tree_



      :type: Tree

   Construct a shapelet tree regressor

   :param max_depth: The maximum depth of the tree. If `None` the tree is expanded until all leaves
                     are pure or until all leaves contain less than `min_samples_split` samples
   :type max_depth: int, optional
   :param min_samples_split: The minimum number of samples to split an internal node
   :type min_samples_split: int, optional
   :param n_shapelets: The number of shapelets to sample at each node.
   :type n_shapelets: int, optional
   :param min_shapelet_size: The minimum length of a sampled shapelet expressed as a fraction, computed as
                             `min(ceil(X.shape[-1] * min_shapelet_size), 2)`.
   :type min_shapelet_size: float, optional
   :param max_shapelet_size: The maximum length of a sampled shapelet, expressed as a fraction, computed as
                             `ceil(X.shape[-1] * max_shapelet_size)`.
   :type max_shapelet_size: float, optional
   :param metric: Distance metric used to identify the best shapelet.
   :type metric: {'euclidean', 'scaled_euclidean', 'scaled_dtw'}, optional
   :param metric_params: Parameters for the distance measure
   :type metric_params: dict, optional
   :param force_dim: Force the number of dimensions.

                     - If int, force_dim reshapes the input to shape (n_samples, force_dim, -1)
                       for interoperability with `sklearn`.
   :type force_dim: int, optional
   :param random_state:
                        - If `int`, `random_state` is the seed used by the random number generator;
                        - If `RandomState` instance, `random_state` is the random number generator;
                        - If `None`, the random number generator is the `RandomState` instance used by `np.random`.
   :type random_state: int or RandomState


