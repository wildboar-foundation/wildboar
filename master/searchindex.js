Search.setIndex({"docnames": ["api/index", "api/wildboar/annotate/_motifs/index", "api/wildboar/annotate/_segment/index", "api/wildboar/annotate/index", "api/wildboar/base/index", "api/wildboar/datasets/_filter/index", "api/wildboar/datasets/_repository/index", "api/wildboar/datasets/index", "api/wildboar/datasets/outlier/index", "api/wildboar/datasets/preprocess/index", "api/wildboar/dimension_selection/_base/index", "api/wildboar/dimension_selection/_distance/index", "api/wildboar/dimension_selection/_sequential/index", "api/wildboar/dimension_selection/_variance/index", "api/wildboar/dimension_selection/index", "api/wildboar/distance/_distance/index", "api/wildboar/distance/_manifold/index", "api/wildboar/distance/_matrix_profile/index", "api/wildboar/distance/_multi_metric/index", "api/wildboar/distance/_neighbors/index", "api/wildboar/distance/dtw/index", "api/wildboar/distance/index", "api/wildboar/ensemble/_elastic/index", "api/wildboar/ensemble/_ensemble/index", "api/wildboar/ensemble/index", "api/wildboar/explain/_importance/index", "api/wildboar/explain/counterfactual/_helper/index", "api/wildboar/explain/counterfactual/_nn/index", "api/wildboar/explain/counterfactual/_nun/index", "api/wildboar/explain/counterfactual/_proto/index", "api/wildboar/explain/counterfactual/_sf/index", "api/wildboar/explain/counterfactual/index", "api/wildboar/explain/index", "api/wildboar/index", "api/wildboar/linear_model/_hydra/index", "api/wildboar/linear_model/_rocket/index", "api/wildboar/linear_model/_shapelet/index", "api/wildboar/linear_model/_transform/index", "api/wildboar/linear_model/index", "api/wildboar/metrics/_cluster/index", "api/wildboar/metrics/_counterfactual/index", "api/wildboar/metrics/index", "api/wildboar/model_selection/_cv/index", "api/wildboar/model_selection/_outlier/index", "api/wildboar/model_selection/index", "api/wildboar/transform/_base/index", "api/wildboar/transform/_conv/index", "api/wildboar/transform/_diff/index", "api/wildboar/transform/_hydra/index", "api/wildboar/transform/_interval/index", "api/wildboar/transform/_matrix_profile/index", "api/wildboar/transform/_pivot/index", "api/wildboar/transform/_rocket/index", "api/wildboar/transform/_sax/index", "api/wildboar/transform/_shapelet/index", "api/wildboar/transform/index", "api/wildboar/tree/_base/index", "api/wildboar/tree/_ptree/index", "api/wildboar/tree/_tree/index", "api/wildboar/tree/index", "api/wildboar/utils/_parallel/index", "api/wildboar/utils/_testing/index", "api/wildboar/utils/decorators/index", "api/wildboar/utils/estimator_checks/index", "api/wildboar/utils/index", "api/wildboar/utils/plot/index", "api/wildboar/utils/validation/index", "api/wildboar/utils/variable_len/index", "api/wildboar/version/index", "examples", "examples/convolution_transform", "examples/counterfactuals", "guide", "guide/annotate", "guide/basics", "guide/datasets", "guide/datasets/preprocess", "guide/datasets/repositories", "guide/dimension_selection", "guide/glossary", "guide/metrics", "guide/metrics/distance", "guide/metrics/elastic", "guide/supervised", "guide/supervised/ensemble", "guide/supervised/transform", "guide/supervised/trees", "guide/unsupervised", "guide/unsupervised/outlier", "guide/unsupervised/outlier/generation", "index", "install", "install/build", "more/whatsnew"], "filenames": ["api/index.rst", "api/wildboar/annotate/_motifs/index.rst", "api/wildboar/annotate/_segment/index.rst", "api/wildboar/annotate/index.rst", "api/wildboar/base/index.rst", "api/wildboar/datasets/_filter/index.rst", "api/wildboar/datasets/_repository/index.rst", "api/wildboar/datasets/index.rst", "api/wildboar/datasets/outlier/index.rst", "api/wildboar/datasets/preprocess/index.rst", "api/wildboar/dimension_selection/_base/index.rst", "api/wildboar/dimension_selection/_distance/index.rst", "api/wildboar/dimension_selection/_sequential/index.rst", "api/wildboar/dimension_selection/_variance/index.rst", "api/wildboar/dimension_selection/index.rst", "api/wildboar/distance/_distance/index.rst", "api/wildboar/distance/_manifold/index.rst", "api/wildboar/distance/_matrix_profile/index.rst", "api/wildboar/distance/_multi_metric/index.rst", "api/wildboar/distance/_neighbors/index.rst", "api/wildboar/distance/dtw/index.rst", "api/wildboar/distance/index.rst", "api/wildboar/ensemble/_elastic/index.rst", "api/wildboar/ensemble/_ensemble/index.rst", "api/wildboar/ensemble/index.rst", "api/wildboar/explain/_importance/index.rst", "api/wildboar/explain/counterfactual/_helper/index.rst", "api/wildboar/explain/counterfactual/_nn/index.rst", "api/wildboar/explain/counterfactual/_nun/index.rst", "api/wildboar/explain/counterfactual/_proto/index.rst", "api/wildboar/explain/counterfactual/_sf/index.rst", "api/wildboar/explain/counterfactual/index.rst", "api/wildboar/explain/index.rst", "api/wildboar/index.rst", "api/wildboar/linear_model/_hydra/index.rst", "api/wildboar/linear_model/_rocket/index.rst", "api/wildboar/linear_model/_shapelet/index.rst", "api/wildboar/linear_model/_transform/index.rst", "api/wildboar/linear_model/index.rst", "api/wildboar/metrics/_cluster/index.rst", "api/wildboar/metrics/_counterfactual/index.rst", "api/wildboar/metrics/index.rst", "api/wildboar/model_selection/_cv/index.rst", "api/wildboar/model_selection/_outlier/index.rst", "api/wildboar/model_selection/index.rst", "api/wildboar/transform/_base/index.rst", "api/wildboar/transform/_conv/index.rst", "api/wildboar/transform/_diff/index.rst", "api/wildboar/transform/_hydra/index.rst", "api/wildboar/transform/_interval/index.rst", "api/wildboar/transform/_matrix_profile/index.rst", "api/wildboar/transform/_pivot/index.rst", "api/wildboar/transform/_rocket/index.rst", "api/wildboar/transform/_sax/index.rst", "api/wildboar/transform/_shapelet/index.rst", "api/wildboar/transform/index.rst", "api/wildboar/tree/_base/index.rst", "api/wildboar/tree/_ptree/index.rst", "api/wildboar/tree/_tree/index.rst", "api/wildboar/tree/index.rst", "api/wildboar/utils/_parallel/index.rst", "api/wildboar/utils/_testing/index.rst", "api/wildboar/utils/decorators/index.rst", "api/wildboar/utils/estimator_checks/index.rst", "api/wildboar/utils/index.rst", "api/wildboar/utils/plot/index.rst", "api/wildboar/utils/validation/index.rst", "api/wildboar/utils/variable_len/index.rst", "api/wildboar/version/index.rst", "examples.rst", "examples/convolution_transform.rst", "examples/counterfactuals.rst", "guide.rst", "guide/annotate.rst", "guide/basics.rst", "guide/datasets.rst", "guide/datasets/preprocess.rst", "guide/datasets/repositories.rst", "guide/dimension_selection.rst", "guide/glossary.rst", "guide/metrics.rst", "guide/metrics/distance.rst", "guide/metrics/elastic.rst", "guide/supervised.rst", "guide/supervised/ensemble.rst", "guide/supervised/transform.rst", "guide/supervised/trees.rst", "guide/unsupervised.rst", "guide/unsupervised/outlier.rst", "guide/unsupervised/outlier/generation.rst", "index.rst", "install.rst", "install/build.rst", "more/whatsnew.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.annotate._motifs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.annotate._segment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.annotate</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.datasets._filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.datasets._repository</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.datasets.outlier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.datasets.preprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.dimension_selection._base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.dimension_selection._distance</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.dimension_selection._sequential</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.dimension_selection._variance</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.dimension_selection</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.distance._distance</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.distance._manifold</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.distance._matrix_profile</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.distance._multi_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.distance._neighbors</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.distance.dtw</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.distance</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.ensemble._elastic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.ensemble._ensemble</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.ensemble</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.explain._importance</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.explain.counterfactual._helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.explain.counterfactual._nn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.explain.counterfactual._nun</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.explain.counterfactual._proto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.explain.counterfactual._sf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.explain.counterfactual</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.explain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.linear_model._hydra</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.linear_model._rocket</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.linear_model._shapelet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.linear_model._transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.linear_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.metrics._cluster</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.metrics._counterfactual</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.metrics</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.model_selection._cv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.model_selection._outlier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.model_selection</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.transform._base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.transform._conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.transform._diff</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.transform._hydra</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.transform._interval</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.transform._matrix_profile</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.transform._pivot</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.transform._rocket</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.transform._sax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.transform._shapelet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.tree._base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.tree._ptree</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.tree._tree</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.tree</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.utils._parallel</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.utils._testing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.utils.decorators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.utils.estimator_checks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.utils.plot</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.utils.validation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.utils.variable_len</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.version</span></code>", "Examples", "Convolution transform", "Counterfactual explanations", "User Guide", "Annotate", "Time series", "Datasets", "Pre-processing", "Repositories", "Dimension selection", "Glossary", "Metrics", "Distance", "Elastic metrics", "Supervised learning", "Ensemble estimators", "Transform-based estimators", "Tree-based estimators", "Unsupervised learning", "Outlier detection", "Outlier detection benchmarks", "&lt;no title&gt;", "Install wildboar", "Build from source", "What\u2019s new"], "terms": {"librari": [0, 33], "tempor": [0, 30, 31, 33, 71, 72, 74, 90], "machin": [0, 33, 72, 80, 90], "learn": [0, 10, 11, 12, 13, 14, 20, 33, 37, 47, 48, 55, 56, 58, 63, 64, 66, 70, 78, 79, 90, 93], "includ": [0, 1, 3, 8, 17, 21, 31, 33, 64, 66, 70, 72, 81, 84, 86], "numer": [0, 31, 33, 64, 66, 70, 72], "algorithm": [0, 8, 12, 14, 16, 19, 20, 21, 30, 31, 33, 70, 71, 74, 76, 78, 80, 93], "seamlessli": [0, 33, 72], "integr": [0, 33, 77, 81], "them": [0, 8, 33, 65, 74, 76, 77], "scikit": [0, 33, 37, 47, 48, 55, 56, 58, 63, 64, 66, 70, 72, 78, 79, 93], "time": [0, 1, 2, 3, 4, 9, 11, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 36, 38, 39, 40, 41, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 63, 64, 65, 66, 67, 70, 71, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 89, 93], "seri": [0, 1, 2, 3, 4, 9, 11, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 36, 38, 39, 40, 41, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 63, 64, 66, 67, 70, 71, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 89, 93], "see": [0, 3, 7, 8, 10, 11, 12, 13, 14, 15, 16, 19, 21, 26, 28, 31, 36, 38, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 81], "section": [0, 3, 7, 25, 32, 84], "user": [0, 3, 4, 7, 8, 10, 11, 12, 13, 14, 15, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 71, 77, 81, 89, 91], "guid": [0, 3, 4, 7, 8, 10, 11, 12, 13, 14, 15, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 90, 93], "more": [0, 3, 7, 8, 11, 13, 14, 15, 16, 19, 21, 23, 24, 25, 28, 31, 32, 36, 37, 38, 39, 40, 41, 51, 54, 55, 56, 57, 58, 59, 64, 66, 72, 77, 80, 81, 84, 89], "detail": [0, 3, 7, 8, 21, 47, 55, 81, 90], "exampl": [0, 3, 7, 8, 10, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 26, 28, 29, 31, 37, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 65, 67, 70, 71, 74, 75, 76, 77, 80, 81, 90], "motif": [0, 1, 3, 17, 21], "find": [0, 1, 2, 3, 15, 21, 75, 92], "segment": [0, 2, 3], "chang": [0, 2, 3, 7, 20, 23, 24, 26, 30, 31, 40, 41, 58, 59, 71, 74, 75, 77, 81], "regim": [0, 2, 3], "all": [0, 1, 3, 4, 6, 7, 8, 11, 13, 14, 15, 17, 19, 21, 22, 23, 24, 25, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 52, 54, 55, 56, 58, 59, 61, 63, 64, 65, 66, 71, 72, 75, 76, 77, 78, 80, 81, 84, 91, 92], "estim": [0, 4, 8, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63, 64, 66, 71, 72, 75, 78, 79, 80, 81, 83, 89], "baseestim": [0, 4, 37, 47, 55, 56, 58, 61], "counterfactualmixin": [0, 4], "mixin": [0, 4, 10, 23, 25, 32, 37, 47, 49, 51, 52, 54, 55, 56, 58], "explainermixin": [0, 4], "is_counterfactu": [0, 4, 26, 29], "check": [0, 4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63, 64, 66, 76, 79, 90], "i": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 89, 91, 92, 93], "is_explain": [0, 4], "an": [0, 4, 8, 10, 11, 12, 13, 14, 15, 16, 19, 21, 22, 23, 24, 28, 29, 31, 34, 36, 38, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 64, 66, 71, 74, 75, 77, 78, 79, 80, 81, 83, 84, 89, 90, 93], "load": [0, 6, 7, 70, 71, 77, 78, 80, 84], "from": [0, 1, 3, 6, 7, 8, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 34, 35, 36, 37, 38, 40, 41, 43, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 67, 70, 71, 72, 75, 76, 77, 78, 80, 81, 84, 89, 91], "import": [0, 7, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25, 28, 31, 32, 37, 43, 44, 47, 48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 65, 67, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 84, 89, 93], "load_dataset": [0, 7, 15, 21, 49, 55, 57, 59, 70, 71, 72, 75, 76, 77, 81], "x": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 64, 65, 66, 67, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 89], "y": [0, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 64, 65, 66, 70, 71, 72, 75, 76, 77, 78, 80, 81, 89], "gunpoint": [0, 7, 49, 55, 57, 59, 75, 76, 77], "shape": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 65, 72, 74, 75, 76, 78, 79, 80, 81], "200": [0, 7, 75], "60": [0, 7, 75, 81], "bundl": [0, 6, 7, 75, 77, 89], "handl": [0, 6, 7, 75], "jsonrepositori": [0, 6, 7, 77], "A": [0, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 71, 72, 74, 75, 76, 77, 79, 80, 81, 89], "repositori": [0, 6, 7, 72, 75], "collect": [0, 6, 7, 26, 31, 49, 55, 72, 77, 83, 89, 91], "npbundl": [0, 6, 7], "numpi": [0, 6, 7, 11, 13, 14, 15, 21, 23, 24, 25, 32, 34, 36, 37, 38, 45, 47, 48, 49, 52, 54, 55, 56, 58, 59, 72, 74, 76, 77, 79, 81, 93], "binari": [0, 6, 7, 8, 23, 24, 66, 71, 89, 91], "file": [0, 6, 7, 77, 92], "clear_cach": [0, 7], "clear": [0, 7], "cach": [0, 6, 7, 75], "delet": [0, 7], "get_bundl": [0, 6, 7], "get": [0, 4, 6, 7, 9, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 72, 76, 84, 90], "get_repositori": [0, 7], "name": [0, 4, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 64, 66, 72, 75, 76, 77, 80, 81], "install_repositori": [0, 7, 77], "instal": [0, 7, 75, 89, 90, 92], "list_bundl": [0, 7, 77], "list": [0, 1, 3, 5, 6, 7, 15, 16, 21, 23, 24, 25, 26, 28, 31, 32, 35, 36, 37, 38, 40, 41, 49, 51, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 75, 77, 81, 84, 89], "specifi": [0, 6, 7, 11, 13, 14, 23, 24, 25, 32, 40, 41, 51, 54, 55, 58, 59, 65, 71, 72, 75, 76, 77, 80, 81, 84, 89, 91, 93], "list_collect": [0, 7], "list_dataset": [0, 7, 77], "list_repositori": [0, 7, 77], "kei": [0, 6, 7, 15, 16, 21, 23, 24, 26, 28, 31, 36, 38, 40, 41, 49, 51, 54, 55, 57, 58, 59, 66, 77, 80], "load_articulary_word_recognit": [0, 7], "articularywordrecognit": [0, 7], "multivari": [0, 7, 15, 19, 21, 30, 31, 39, 41, 72, 74, 76, 79], "load_basic_mot": [0, 7, 11, 14], "basicmot": [0, 7], "gener": [0, 7, 8, 11, 12, 13, 14, 16, 19, 20, 21, 23, 24, 25, 26, 27, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 48, 49, 52, 54, 55, 56, 57, 58, 59, 63, 70, 71, 72, 75, 80, 89], "load_er": [0, 7, 11, 12, 13, 14, 78], "er": [0, 7], "load_gun_point": [0, 7, 22, 24, 28, 31, 48, 49, 52, 55, 56, 57, 58, 59, 65, 75, 84], "load_synthetic_control": [0, 7, 23, 24, 72], "synthetic_control": [0, 7, 72], "load_two_lead_ecg": [0, 7, 20, 23, 24, 43, 44, 50, 55, 72, 81], "twoleadecg": [0, 7, 72, 75, 77, 81], "refresh_repositori": [0, 7, 77], "refresh": [0, 6, 7, 77], "set_cache_dir": [0, 7, 77], "global": [0, 7, 27, 30, 31, 40, 41, 49, 55, 71, 77], "directori": [0, 7, 77, 91], "synthet": [0, 8, 89], "us": [0, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 64, 65, 66, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 89, 90, 91, 92], "density_outli": [0, 8], "densitii": [0, 8], "emmott_outli": [0, 8, 89], "difficulti": [0, 8, 89], "kmeans_outli": [0, 8], "k": [0, 8, 11, 14, 15, 19, 21, 23, 24, 25, 27, 31, 32, 57, 59, 71, 84, 89, 93], "mean": [0, 7, 8, 9, 15, 19, 20, 21, 22, 23, 24, 27, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 45, 48, 49, 52, 54, 55, 56, 57, 58, 59, 70, 71, 72, 76, 80, 81], "majority_outli": [0, 8], "label": [0, 4, 6, 7, 8, 12, 13, 14, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 50, 55, 56, 57, 58, 59, 64, 65, 66, 70, 71, 72, 75, 77, 83, 88], "major": [0, 8, 20, 88], "inlier": [0, 8, 23, 24, 42, 44, 89], "minority_outli": [0, 8, 89], "fraction": [0, 1, 2, 3, 8, 11, 13, 14, 17, 20, 21, 23, 24, 25, 30, 31, 32, 40, 41, 42, 44, 50, 55, 56, 57, 58, 59, 89, 93], "minor": [0, 8, 88, 93], "maxabs_scal": [0, 9, 76], "scale": [0, 8, 9, 15, 16, 21, 23, 24, 34, 38, 48, 52, 53, 55, 65, 76, 80, 89], "each": [0, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 67, 70, 71, 72, 74, 76, 77, 78, 79, 80, 81], "its": [0, 9, 17, 21, 49, 50, 55, 64, 65, 66, 75, 80, 91], "maximum": [0, 1, 3, 9, 16, 19, 20, 21, 23, 24, 25, 28, 29, 31, 32, 36, 38, 42, 44, 49, 52, 54, 55, 57, 58, 59, 65, 70, 76, 79, 81], "absolut": [0, 9, 40, 41, 76], "valu": [0, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 64, 65, 66, 70, 71, 72, 74, 75, 76, 77, 79, 80, 81, 84, 93], "minmax_scal": [0, 9, 53, 55, 75, 76], "along": [0, 9, 25, 32, 34, 36, 38, 76], "dimens": [0, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 34, 36, 38, 40, 41, 50, 55, 64, 66, 72, 74, 75, 76, 79, 81, 93], "named_preprocess": [0, 9], "preprocessor": [0, 9, 76], "standard": [0, 9, 23, 24, 34, 36, 38, 48, 49, 54, 55, 70, 72, 76], "truncat": [0, 9, 76], "shortest": [0, 9, 76], "sequenc": [0, 9, 64, 65, 66, 74, 76, 80], "select": [0, 8, 10, 11, 12, 13, 14, 15, 19, 21, 26, 28, 31, 39, 41, 44, 49, 54, 55, 71, 72, 75, 76, 89, 92], "subset": [0, 12, 14, 19, 21, 22, 23, 24, 34, 35, 36, 37, 38, 39, 41, 56, 57, 58, 59, 66, 78, 93], "distancevariancethreshold": [0, 13, 14, 78, 93], "selector": [0, 10, 13, 14, 93], "remov": [0, 10, 11, 12, 13, 14, 23, 24, 26, 31, 58, 59, 62, 66, 77, 78, 93], "low": [0, 13, 14, 78], "varianc": [0, 13, 14, 49, 55, 70, 72, 76, 80, 93], "selectdimensionpercentil": [0, 11, 14, 93], "largest": [0, 11, 14, 15, 21], "score": [0, 4, 8, 11, 12, 14, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 56, 57, 58, 59, 72, 78, 84, 89, 93], "selectdimensionsignific": [0, 11, 14], "p": [0, 11, 14, 23, 24, 27, 29, 30, 31, 40, 41, 71, 80, 81, 93], "below": [0, 11, 13, 14, 15, 21, 36, 38, 54, 55, 77, 93], "alpha": [0, 11, 14, 23, 24, 34, 35, 36, 37, 38, 58, 59, 65, 93], "selectdimensiontopk": [0, 11, 14, 93], "highest": [0, 11, 14, 23, 24, 70, 93], "sequentialdimensionselector": [0, 12, 14, 78, 93], "sequenti": [0, 12, 14, 93], "fast": [0, 19, 21, 34, 38, 48, 52, 54, 55, 80], "comput": [0, 1, 2, 3, 11, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 29, 31, 32, 39, 40, 41, 50, 51, 55, 56, 57, 58, 59, 71, 78, 80, 81, 85, 93], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 84, 89, 90, 91, 92, 93], "modul": [0, 21, 31, 71, 72, 75, 76, 78, 89, 93], "pair": [0, 1, 3, 7, 17, 21, 23, 24, 40, 41, 51, 54, 55, 57, 58, 59, 66], "pairwis": [0, 11, 13, 14, 21, 78, 93], "between": [0, 1, 3, 9, 11, 12, 13, 14, 15, 19, 20, 21, 23, 24, 26, 28, 30, 31, 39, 40, 41, 46, 54, 55, 58, 59, 71, 72, 76, 78, 80, 81, 89], "subsequ": [0, 1, 3, 15, 17, 21, 23, 24, 50, 52, 54, 55, 70, 71], "kmean": [0, 19, 21], "cluster": [0, 8, 19, 21, 71, 89], "support": [0, 8, 15, 16, 19, 21, 23, 24, 28, 30, 31, 36, 38, 40, 41, 49, 52, 54, 55, 58, 59, 72, 74, 75, 76, 77, 78, 80, 89], "weight": [0, 19, 20, 21, 22, 23, 24, 34, 35, 36, 37, 38, 40, 41, 48, 51, 55, 56, 57, 58, 59, 80], "kmedoid": [0, 19, 21], "kneighborsclassifi": [0, 12, 14, 19, 21, 22, 24, 28, 31, 71, 78], "classifi": [0, 8, 19, 21, 22, 23, 24, 27, 30, 31, 32, 35, 36, 37, 38, 48, 55, 57, 58, 59, 63, 70, 71, 72, 78, 84], "implement": [0, 16, 19, 20, 21, 23, 24, 25, 28, 30, 31, 32, 35, 38, 40, 41, 48, 49, 52, 55, 70, 71, 72, 76, 77, 78, 80, 81, 84, 89], "nearest": [0, 17, 19, 21, 27, 29, 31, 84], "neighbor": [0, 17, 19, 21, 22, 24, 27, 29, 31, 71, 84], "md": [0, 16, 21], "multidimension": [0, 16, 21], "argmin_dist": [0, 15, 21], "indici": [0, 1, 3, 15, 21, 42, 44], "sampl": [0, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 64, 65, 66, 70, 71, 72, 74, 75, 76, 77, 79, 81, 86, 89, 93], "lowest": [0, 11, 14, 15, 20, 21, 70], "argmin_subsequence_dist": [0, 15, 21], "th": [0, 15, 21, 23, 24, 40, 41], "closest": [0, 8, 15, 19, 21, 28, 29, 31, 40, 41], "distance_profil": [0, 15, 21], "profil": [0, 1, 2, 3, 15, 17, 21, 50, 55], "matrix_profil": [0, 1, 2, 3, 17, 21], "matrix": [0, 1, 2, 3, 17, 20, 21, 23, 24, 26, 29, 31, 35, 36, 37, 38, 50, 55, 56, 57, 58, 59, 72, 81], "paired_dist": [0, 15, 21, 81], "paired_subsequence_dist": [0, 15, 21, 81], "minimum": [0, 1, 3, 6, 7, 9, 15, 20, 21, 23, 24, 25, 26, 29, 32, 36, 38, 49, 52, 54, 55, 57, 58, 59, 64, 66, 71, 77, 80, 81], "paired_subsequence_match": [0, 15, 21], "match": [0, 1, 3, 15, 17, 21, 29, 71, 77, 80, 81], "subsequnc": [0, 15, 21], "pairwise_dist": [0, 15, 21, 80, 81], "pairwise_subsequence_dist": [0, 15, 21, 80, 81], "subsequence_match": [0, 1, 3, 15, 21, 81], "align": [0, 20, 25, 29, 32, 40, 41], "sever": [0, 20, 56, 57, 58, 59, 72, 80, 93], "ddtw_distanc": [0, 20], "deriv": [0, 20, 23, 40, 41, 80], "dynam": [0, 20, 23, 24, 57, 58, 59, 71, 80, 81], "warp": [0, 19, 20, 21, 57, 59, 71, 80, 81], "dtw_align": [0, 20], "dtw_averag": [0, 20], "barycent": [0, 19, 20, 21], "averag": [0, 20, 23, 24, 40, 41, 70, 71], "dba": [0, 20], "dtw_distanc": [0, 20], "dtw_envelop": [0, 20], "envelop": [0, 20], "lb_keogh": [0, 20], "dtw_lb_keogh": [0, 20], "lower": [0, 8, 15, 20, 21, 23, 24, 36, 38, 40, 41, 51, 52, 54, 55, 57, 58, 59, 65, 81], "bound": [0, 20, 23, 24, 42, 44, 51, 54, 55, 57, 58, 59, 81], "dtw_map": [0, 20], "optim": [0, 20, 22, 24, 81, 84, 92], "path": [0, 20, 30, 31, 56, 57, 58, 59, 71, 77, 92], "two": [0, 11, 12, 14, 19, 20, 21, 23, 24, 34, 38, 48, 49, 51, 54, 55, 57, 58, 59, 65, 70, 71, 72, 77, 80, 81, 86, 93], "given": [0, 2, 3, 8, 15, 17, 19, 20, 21, 22, 23, 24, 25, 32, 34, 35, 36, 37, 38, 46, 53, 55, 56, 57, 58, 59, 79, 83, 84], "jeong_weight": [0, 20], "describ": [0, 8, 20, 22, 24, 30, 31, 48, 55, 70, 71, 75, 77, 81, 84, 90], "jeong": [0, 20], "et": [0, 1, 2, 3, 8, 17, 20, 21, 23, 24, 48, 55, 57, 59, 70, 71, 89, 93], "al": [0, 1, 2, 3, 8, 17, 20, 21, 23, 24, 48, 55, 57, 59, 70, 71, 89, 93], "2011": [0, 20], "r4bf7d056babf": [0, 20], "1": [0, 1, 2, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 64, 65, 66, 67, 70, 71, 72, 74, 75, 76, 77, 79, 80, 81, 84, 89, 91, 92], "_": [0, 15, 20, 21], "wddtw_distanc": [0, 20], "wdtw_align": [0, 20], "wdtw_distanc": [0, 20], "method": [0, 4, 8, 10, 11, 12, 13, 14, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 63, 70, 71, 72, 84, 90], "classif": [0, 8, 19, 20, 21, 22, 23, 24, 28, 31, 34, 35, 36, 37, 38, 40, 41, 43, 44, 48, 52, 54, 55, 56, 57, 58, 59, 66, 71, 72, 84, 86, 89], "regress": [0, 8, 23, 24, 37, 38, 56, 57, 58, 59, 72, 85, 89], "detect": [0, 8, 24, 81], "baggingclassifi": [0, 23, 24], "bag": [0, 23, 24], "baggingregressor": [0, 23, 24], "regressor": [0, 23, 24, 32, 35, 36, 37, 38, 56, 58, 59, 63, 78, 84], "basebag": [0, 23, 24], "elasticensembleclassifi": [0, 22, 24, 84], "extrashapelettreesclassifi": [0, 23, 24], "extrem": [0, 23, 24], "random": [0, 8, 11, 13, 14, 16, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 38, 39, 41, 42, 43, 44, 45, 48, 49, 51, 52, 54, 55, 57, 58, 59, 70, 71, 72, 84, 85], "shapelet": [0, 1, 3, 15, 17, 21, 23, 24, 25, 29, 30, 31, 32, 36, 38, 52, 54, 55, 58, 59, 72, 86, 93], "extrashapelettreesregressor": [0, 23, 24], "intervalforestclassifi": [0, 23, 24], "interv": [0, 8, 23, 24, 25, 28, 31, 32, 40, 41, 49, 53, 55, 58, 59, 72, 89], "intervalforestregressor": [0, 23, 24], "isolationshapeletforest": [0, 23, 24], "isol": [0, 23, 24, 92], "forest": [0, 8, 23, 24, 30, 31, 57, 59, 72], "pivotforestclassifi": [0, 23, 24], "proximityforestclassifi": [0, 23, 24, 80, 84], "proxim": [0, 23, 24, 26, 31, 40, 41, 57, 59], "rocketforestclassifi": [0, 23, 24], "rocket": [0, 23, 24, 35, 38, 52, 55, 72, 78], "rocketforestregressor": [0, 23, 24], "shapeletforestclassifi": [0, 23, 24, 71, 72, 84], "shapeletforestembed": [0, 23, 24], "shapeletforestregressor": [0, 23, 24, 84], "explan": [0, 4, 25, 26, 27, 28, 29, 30, 31, 32, 40, 41], "amplitudeimport": [0, 25, 32], "equi": [0, 25, 32], "probabl": [0, 4, 8, 19, 21, 22, 23, 24, 25, 26, 28, 29, 31, 32, 36, 38, 51, 52, 54, 55, 56, 57, 58, 59], "amplitud": [0, 25, 32, 65], "frequencyimport": [0, 25, 32], "intervalimport": [0, 25, 28, 31, 32, 72], "shapeletimport": [0, 25, 32], "plot_import": [0, 25, 32], "plot": [0, 4, 25, 27, 28, 29, 30, 31, 32, 70, 71, 72, 76], "boxplot": [0, 25, 32], "kneighborscounterfactu": [0, 27, 31, 71], "fit": [0, 4, 8, 10, 11, 12, 13, 14, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 70, 71, 72, 75, 78, 84, 85], "nativeguidecounterfactu": [0, 28, 31, 93], "nativ": [0, 28, 31, 39, 40, 41, 48, 55, 93], "prototypecounterfactu": [0, 29, 31], "model": [0, 8, 12, 14, 23, 24, 28, 29, 31, 34, 35, 36, 37, 38, 44, 56, 58, 59, 71, 84, 85, 89], "agnost": [0, 2, 3, 29, 31], "approach": [0, 29, 31, 34, 36, 38, 48, 54, 55, 71, 72, 75, 78, 89, 91], "construct": [0, 8, 28, 29, 31, 40, 41, 53, 55, 58, 59, 64, 66, 70, 71, 84, 89], "shapeletforestcounterfactu": [0, 30, 31, 71], "singl": [0, 15, 16, 19, 21, 23, 24, 26, 31, 34, 38, 40, 41, 45, 48, 52, 55, 56, 57, 58, 59, 62, 70, 74, 77, 79, 81, 84], "linear": [0, 38], "both": [0, 8, 15, 17, 20, 21, 22, 24, 38, 46, 55, 64, 66, 70, 74, 76, 77, 80, 81, 86, 89], "castorclassifi": [0, 36, 38], "dictionari": [0, 6, 7, 23, 24, 29, 30, 31, 34, 36, 38, 48, 51, 54, 55, 57, 58, 59, 66, 77, 80], "dilat": [0, 15, 21, 36, 38, 46, 54, 55, 70], "compet": [0, 34, 36, 38, 48, 54, 55], "dilatedshapeletclassifi": [0, 36, 38], "hydraclassifi": [0, 34, 38, 48, 55, 85], "convolut": [0, 23, 24, 34, 38, 46, 48, 52, 55, 58, 59, 85], "kernel": [0, 8, 11, 13, 14, 23, 24, 34, 35, 36, 37, 38, 46, 48, 52, 54, 55, 56, 58, 59, 70, 85, 89], "randomshapeletclassifi": [0, 36, 38], "randomshapeletregressor": [0, 36, 38], "rocketclassifi": [0, 35, 38, 78, 85], "rocketregressor": [0, 35, 38, 85], "evalu": [0, 12, 14, 23, 24, 26, 28, 29, 30, 31, 40, 41, 58, 59, 63, 70, 72, 75], "compactness_scor": [0, 40, 41], "compact": [0, 40, 41], "plausability_scor": [0, 40, 41], "plausibl": [0, 40, 41], "proximity_scor": [0, 40, 41], "redudancy_scor": [0, 40, 41], "redud": [0, 40, 41], "relative_proximity_scor": [0, 40, 41], "rel": [0, 16, 19, 21, 40, 41, 81], "silhouette_sampl": [0, 39, 41], "silhouett": [0, 39, 41], "coeffici": [0, 23, 24, 35, 36, 37, 38, 39, 41, 56, 58, 59], "silhouette_scor": [0, 39, 41], "validity_scor": [0, 40, 41], "valid": [0, 7, 12, 14, 22, 24, 26, 29, 31, 34, 36, 38, 40, 41, 42, 44, 56, 57, 58, 59, 64, 74, 75, 77, 78, 84], "repeatedoutliersplit": [0, 42, 44], "repeat": [0, 25, 32, 42, 44], "cross": [0, 12, 14, 22, 24, 34, 36, 38, 42, 44, 78, 84], "outlier_train_test_split": [0, 23, 24, 43, 44], "train": [0, 6, 7, 10, 11, 12, 13, 14, 19, 21, 23, 24, 26, 31, 40, 41, 42, 43, 44, 52, 55, 56, 57, 58, 59, 72, 75, 76, 77], "test": [0, 7, 12, 14, 19, 21, 22, 23, 24, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 56, 57, 58, 59, 61, 63, 67, 72, 75, 76, 77, 81, 84], "split": [0, 7, 12, 14, 23, 24, 34, 36, 38, 42, 43, 44, 56, 57, 58, 59, 70, 72, 77, 80], "raw": [0, 16, 21, 55], "tabular": [0, 55], "represent": [0, 23, 24, 54, 55, 58, 59, 66, 70, 71, 72, 78, 80, 84, 85, 89], "castortransform": [0, 54, 55], "dialat": [0, 54, 55], "derivativetransform": [0, 47, 55], "difftransform": [0, 47, 48, 55], "dilatedshapelettransform": [0, 54, 55], "featuretransform": [0, 49, 55], "number": [0, 1, 2, 3, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 64, 65, 66, 70, 72, 75, 78, 79, 81, 84], "featur": [0, 23, 24, 35, 36, 37, 38, 45, 49, 52, 55, 56, 58, 59, 62, 70, 75, 76, 78, 85, 92, 93], "hydratransform": [0, 48, 55, 70], "intervaltransform": [0, 8, 49, 55, 89], "emb": [0, 49, 55], "per": [0, 8, 25, 30, 31, 32, 34, 36, 38, 48, 49, 51, 54, 55, 84], "matrixprofiletransform": [0, 50, 55], "paa": [0, 53, 55], "peicewis": [0, 53, 55], "aggreg": [0, 30, 31, 53, 55], "approxim": [0, 8, 53, 55], "pivottransform": [0, 51, 55], "pivot": [0, 8, 23, 24, 51, 55, 57, 58, 59, 84], "proximitytransform": [0, 51, 55], "condit": [0, 51, 55, 71], "randomshapelettransform": [0, 54, 55], "tranform": [0, 54, 55], "rockettransform": [0, 52, 55, 70, 72], "sax": [0, 25, 32, 40, 41, 53, 55], "symbol": [0, 53, 55], "convolv": [0, 34, 36, 38, 46, 55], "appli": [0, 7, 8, 11, 14, 15, 21, 46, 55, 56, 57, 58, 59, 70, 75], "1d": [0, 15, 21, 46, 55, 64, 66, 79, 81], "over": [0, 22, 23, 24, 25, 32, 40, 41, 46, 51, 54, 55, 57, 58, 59, 72, 80], "piecewice_aggregate_approxim": [0, 53, 55], "symbolic_aggregate_approxim": [0, 53, 55], "extrashapelettreeclassifi": [0, 58, 59, 86], "extra": [0, 4, 6, 7, 25, 27, 28, 29, 30, 31, 32, 58, 59, 77, 81], "extrashapelettreeregressor": [0, 58, 59, 86], "intervaltreeclassifi": [0, 58, 59], "intervaltreeregressor": [0, 58, 59], "pivottreeclassifi": [0, 58, 59], "proximitytreeclassifi": [0, 57, 59, 80], "branch": [0, 57, 59, 84], "rockettreeclassifi": [0, 58, 59], "rockettreeregressor": [0, 58, 59], "shapelettreeclassifi": [0, 56, 57, 58, 59, 86], "shapelettreeregressor": [0, 23, 24, 58, 59, 86], "check_arrai": [0, 64, 66], "input": [0, 4, 8, 10, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 41, 43, 44, 46, 47, 50, 51, 53, 55, 56, 57, 58, 59, 64, 65, 66, 67, 70, 71, 72, 79, 81], "check_x_i": [0, 64, 66], "mp": [1, 3, 17, 21], "none": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 77, 80, 81, 93], "window": [1, 2, 3, 17, 19, 20, 21, 25, 28, 31, 32, 40, 41, 50, 53, 55, 77, 80, 91, 92], "auto": [1, 3, 12, 14, 15, 16, 19, 21, 22, 23, 24, 27, 29, 31, 51, 55, 57, 59, 71], "exclud": [1, 2, 3, 15, 17, 21, 50, 55], "0": [1, 2, 3, 6, 7, 8, 9, 11, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 42, 43, 44, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 64, 65, 66, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 84, 89, 91], "2": [1, 2, 3, 8, 12, 14, 15, 16, 17, 20, 21, 23, 24, 25, 26, 27, 28, 31, 32, 35, 36, 37, 38, 42, 43, 44, 46, 47, 49, 50, 52, 55, 56, 57, 58, 59, 64, 66, 67, 70, 71, 72, 74, 75, 77, 78, 79, 80, 81, 84, 91, 93], "max_dist": [1, 3], "max_neighbour": [1, 3], "10": [1, 3, 11, 14, 15, 21, 23, 24, 25, 32, 34, 35, 36, 37, 38, 49, 51, 52, 54, 55, 57, 58, 59, 65, 70, 80, 81, 92], "min_neighbour": [1, 3], "max_motif": [1, 3], "return_dist": [1, 3, 15, 21], "fals": [1, 2, 3, 7, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 34, 36, 38, 40, 41, 53, 54, 55, 63, 64, 65, 66, 72, 74, 75, 77, 78, 84], "sourc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 91], "paramet": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 75, 76, 77, 80, 81, 84, 89, 90, 93], "arrai": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 64, 65, 66, 67, 70, 71, 72, 74, 76, 77, 78, 79, 81, 84], "like": [1, 2, 3, 4, 8, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 64, 65, 66, 79], "n_sampl": [1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 64, 65, 66, 72, 74, 75, 76, 79, 81], "n_timestep": [1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 64, 65, 66, 72, 74, 75, 76, 79, 81], "ndarrai": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 64, 66, 67, 72, 76], "profile_s": [1, 2, 3, 17, 21], "option": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 72, 75, 77, 80, 81, 89, 91, 92], "int": [1, 2, 3, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 64, 65, 66, 75, 81, 89], "float": [1, 2, 3, 4, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 64, 65, 66, 67, 74, 75, 80, 93], "size": [1, 2, 3, 9, 15, 17, 19, 20, 21, 23, 24, 25, 29, 30, 31, 32, 34, 36, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 52, 53, 54, 55, 70, 72, 75], "math": [1, 3, 15, 21, 81], "ceil": [1, 3, 15, 21, 58, 59], "exact": [1, 2, 3, 15, 17, 19, 20, 21, 23, 24, 25, 32, 34, 38, 45, 48, 50, 52, 55], "exclus": [1, 2, 3, 15, 17, 21, 50, 55, 71], "zone": [1, 3, 15, 17, 21, 50, 55], "str": [1, 3, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 21, 23, 24, 25, 26, 28, 31, 32, 34, 36, 38, 39, 40, 41, 49, 51, 53, 54, 55, 57, 58, 59, 62, 64, 65, 66, 75], "distanc": [1, 2, 3, 8, 11, 12, 13, 14, 22, 23, 24, 25, 28, 30, 31, 32, 33, 36, 38, 39, 40, 41, 51, 54, 55, 57, 58, 59, 71, 78, 80, 84, 86, 93], "neighbour": [1, 3], "return": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 71, 72, 75, 76, 77, 79, 81, 89], "bool": [1, 2, 3, 4, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67], "main": [1, 3, 72, 75, 90], "motif_indici": [1, 3], "motif_dist": [1, 3], "refer": [1, 2, 3, 8, 17, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 34, 36, 38, 40, 41, 48, 49, 52, 54, 55, 57, 59, 81, 90], "yeh": [1, 3, 17, 21], "c": [1, 3, 17, 21, 23, 24, 64, 66, 72, 80, 92], "m": [1, 3, 17, 20, 21, 28, 31, 40, 41, 80, 81, 91], "2016": [1, 3, 17, 21], "similar": [1, 3, 17, 21, 26, 31, 50, 55, 71, 72, 76, 80, 81, 84, 85], "join": [1, 2, 3, 17, 21, 50, 55], "unifi": [1, 3, 17, 21], "view": [1, 3, 17, 21], "discord": [1, 3, 17, 21], "In": [1, 2, 3, 8, 17, 19, 20, 21, 22, 23, 24, 30, 31, 34, 35, 36, 37, 38, 49, 55, 56, 57, 58, 59, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 83, 84, 89, 93], "ieee": [1, 3, 17, 21, 30, 31, 71, 80], "16th": [1, 3, 17, 21], "intern": [1, 2, 3, 17, 20, 21, 23, 24, 28, 30, 31, 58, 59, 71, 80, 81], "confer": [1, 2, 3, 17, 20, 21, 30, 31, 71, 80, 81], "data": [1, 2, 3, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 26, 29, 30, 31, 34, 35, 36, 37, 38, 39, 41, 43, 44, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 64, 66, 70, 71, 75, 76, 77, 80, 81, 84, 89], "mine": [1, 2, 3, 17, 21, 22, 23, 24, 30, 31, 34, 38, 48, 49, 52, 55, 57, 59, 71, 81, 84], "icdm": [1, 3, 17, 21, 30, 31, 71], "mpi": [2, 3, 17, 21], "n_segment": [2, 3], "boundri": [2, 3], "return_arc_curv": [2, 3], "If": [2, 3, 4, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 64, 65, 66, 75, 77, 81, 89, 91, 93], "index": [2, 3, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 23, 24, 25, 29, 32, 54, 55, 56, 57, 58, 59, 74, 79, 81], "must": [2, 3, 8, 20, 25, 28, 31, 32, 40, 41, 49, 52, 77, 80, 89, 91], "unless": [2, 3, 23, 24, 51, 54, 55, 56, 57, 58, 59, 64, 66, 77, 80], "identifi": [2, 3, 23, 24, 54, 55, 58, 59, 64, 66, 70, 71, 72, 74, 77, 81], "ignor": [2, 3, 10, 11, 13, 14, 15, 19, 20, 21, 23, 24, 25, 32, 40, 41, 42, 44, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 63, 74], "self": [2, 3, 4, 10, 11, 12, 13, 14, 16, 17, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 75], "region": [2, 3, 28, 31, 72], "around": [2, 3, 16, 19, 21, 39, 41], "express": [2, 3, 8, 17, 21, 23, 24, 40, 41, 50, 55, 58, 59, 75, 77], "arc": [2, 3], "curv": [2, 3], "start": [2, 3, 15, 21, 25, 32, 72, 90], "arc_curv": [2, 3], "gharghabi": [2, 3], "shaghayegh": [2, 3], "2017": [2, 3], "viii": [2, 3], "domain": [2, 3, 65], "onlin": [2, 3], "semant": [2, 3], "superhuman": [2, 3], "perform": [2, 3, 12, 14, 15, 16, 19, 21, 23, 24, 40, 41, 49, 52, 55, 63, 64, 66, 70, 75, 76, 78, 81, 85], "level": [2, 3, 16, 21, 28, 31, 93], "proceed": [2, 3, 8, 80, 81, 89], "get_metadata_rout": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "metadata": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "rout": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "thi": [4, 6, 7, 8, 10, 11, 12, 13, 14, 16, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 63, 64, 66, 70, 71, 72, 75, 76, 78, 80, 81, 84, 85, 91], "object": [4, 8, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 63, 64, 65, 66, 72, 75, 80, 81], "pleas": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 70, 71, 78, 80, 84], "how": [4, 10, 11, 12, 13, 14, 16, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 71, 72, 93], "mechan": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "work": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 72, 81, 91, 92, 93], "metadatarequest": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "encapsul": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "inform": [4, 10, 11, 12, 13, 14, 16, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 71, 72], "get_param": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "deep": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "true": [4, 7, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 66, 67, 74, 75, 78, 79, 80, 81], "default": [4, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 70, 72, 75, 76, 77, 80, 81, 84, 89, 93], "contain": [4, 7, 8, 10, 11, 12, 13, 14, 15, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 64, 66, 67, 70, 71, 74, 77, 78, 80, 81, 90, 93], "subobject": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "ar": [4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63, 64, 65, 66, 70, 71, 72, 74, 75, 76, 77, 80, 81, 83, 84, 86, 89, 91, 93], "param": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "dict": [4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 66, 75, 77, 80, 84], "map": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 83], "set_param": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "set": [4, 7, 8, 10, 11, 12, 13, 14, 16, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 64, 65, 66, 70, 71, 72, 75, 77, 78, 80, 81, 91, 92, 93], "simpl": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 89, 90, 92], "well": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "nest": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "pipelin": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 70, 72, 78], "latter": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 71], "have": [4, 9, 10, 11, 12, 13, 14, 15, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 64, 66, 71, 72, 74, 75, 76, 78, 79, 80, 91, 93], "form": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 72, 78], "compon": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 70, 77], "__": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "so": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 72, 75, 80], "": [4, 8, 10, 11, 12, 13, 14, 15, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 66, 71, 72, 80, 81, 89], "possibl": [4, 10, 11, 12, 13, 14, 16, 17, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 64, 65, 66, 83, 91], "updat": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "instanc": [4, 8, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 63, 64, 66, 70, 71, 77, 80], "counterfactu": [4, 32, 33, 40, 41, 72, 93], "explain": [4, 33, 40, 41, 70, 71, 72, 93], "term": [4, 23, 24, 27, 28, 29, 30, 31, 52, 55, 79, 80], "close": [4, 27, 28, 29, 30, 31, 64, 66, 71], "desir": [4, 8, 26, 27, 28, 29, 30, 31, 40, 41, 48, 55, 71, 81, 89], "counterfact": [4, 27, 28, 29, 30, 31], "closensess": [4, 27, 28, 29, 30, 31], "fit_explain": [4, 25, 27, 28, 29, 30, 31, 32], "kwarg": [4, 7, 19, 21, 23, 24, 25, 27, 28, 29, 30, 31, 32], "argument": [4, 7, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 51, 54, 55, 57, 58, 59, 62, 72, 77, 80, 81, 92], "ax": [4, 25, 27, 28, 29, 30, 31, 32, 65, 76], "make_dict_filt": 5, "filter": [5, 7, 23, 24, 52, 55, 72, 78], "make": [5, 64, 66, 71, 80], "new": [5, 7, 10, 11, 12, 13, 14, 15, 19, 21, 23, 24, 26, 27, 29, 30, 31, 36, 38, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 63, 71, 72, 76, 90, 92], "subject": 5, "op": 5, "verb": 5, "callabl": [5, 7, 9, 11, 12, 14, 15, 21, 25, 26, 28, 30, 31, 32, 34, 36, 38, 39, 40, 41, 54, 55, 62], "make_filt": 5, "creat": [5, 7, 8, 23, 24, 56, 57, 58, 59, 71, 74, 77, 91, 92], "make_list_filt": 5, "base": [5, 6, 7, 8, 12, 14, 20, 23, 24, 25, 26, 28, 31, 33, 34, 36, 37, 38, 40, 41, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 77, 78, 80, 84, 91, 92], "string": [5, 7, 23, 24, 34, 36, 38, 51, 54, 55, 57, 58, 59, 66, 75, 76, 77], "make_str_filt": 5, "version": [6, 7, 10, 11, 12, 13, 14, 15, 19, 21, 23, 24, 26, 27, 30, 31, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 72, 77, 89, 91, 92], "tag": [6, 7, 37, 56, 58, 63, 77], "descript": [6, 7, 8, 62, 77, 89, 90], "uniqu": [6, 7, 40, 41, 77], "human": [6, 7], "readabl": [6, 7], "get_collect": [6, 7], "get_filenam": [6, 7], "ext": [6, 7], "extens": [6, 7, 70, 77], "filenam": [6, 7], "archiv": [6, 7, 70], "zipfil": [6, 7], "sort": [6, 7, 15, 21, 23, 24], "zip": [6, 7, 75, 77], "n_training_sampl": [6, 7], "url": [6, 7, 77], "properti": [6, 7, 23, 24, 49, 52], "download_url": [6, 7], "templat": [6, 7], "download": [6, 7, 70, 71, 75, 77, 92], "wildboar_requir": [6, 7, 77], "requir": [6, 7, 8, 19, 20, 21, 22, 23, 24, 26, 31, 34, 35, 36, 37, 38, 56, 57, 58, 59, 64, 66, 71, 75, 77, 81, 89, 92, 93], "min": [6, 7, 9, 19, 20, 21, 58, 59, 65, 81], "timeout": [6, 7, 77], "abstract": [6, 7, 29, 53], "util": [7, 8, 9, 23, 24, 33, 58, 59, 70, 71, 76, 79, 81, 84], "outlier": [7, 23, 24, 33, 40, 41, 42, 43, 44, 77], "preprocess": [7, 25, 32, 33, 34, 36, 38, 53, 55, 70, 72, 75, 76], "cache_dir": [7, 77], "keep_last_vers": 7, "keep": [7, 23, 24, 35, 36, 37, 38, 56, 58, 59], "latest": [7, 91, 92], "json": 7, "request": [7, 8, 75, 77, 81, 89, 92], "ucr": [7, 70, 72, 75, 77, 81], "tini": [7, 75, 77], "format": [7, 10, 11, 12, 13, 14, 19, 21, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 77], "bake": [7, 72], "off": [7, 72], "create_cache_dir": 7, "progress": 7, "forc": [7, 64, 66, 75], "where": [7, 8, 10, 11, 12, 13, 14, 15, 20, 21, 23, 24, 28, 31, 35, 36, 37, 38, 40, 41, 43, 44, 46, 49, 51, 54, 55, 56, 57, 58, 59, 65, 70, 71, 72, 74, 77, 78, 80, 81, 91, 93], "wildboar_cach": 7, "miss": [7, 16, 21, 74, 79], "show": [7, 20, 65, 70, 71, 78, 80, 84], "bar": 7, "while": [7, 23, 24, 56, 57, 58, 59, 71, 72, 75, 77, 91], "re": [7, 19, 21, 23, 24, 75], "we": [7, 12, 14, 15, 21, 22, 23, 24, 40, 41, 49, 51, 54, 55, 57, 58, 59, 63, 64, 65, 66, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 83, 84, 89, 91, 93], "can": [7, 8, 12, 14, 23, 24, 35, 36, 37, 38, 48, 55, 56, 57, 58, 59, 62, 65, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 89, 90, 91, 92, 93], "also": [7, 40, 41, 56, 57, 58, 59, 63, 71, 72, 75, 79, 80, 81, 84, 86, 89, 91], "ani": [7, 8, 56, 57, 58, 59, 71, 77, 78, 79, 80], "newli": 7, "ad": [7, 10, 11, 12, 13, 14, 19, 21, 23, 24, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 78, 93], "still": [7, 91], "pend": 7, "merge_train_test": [7, 22, 24, 28, 31, 72, 75, 77, 78, 84], "merg": [7, 57, 59, 77, 80], "exist": [7, 42, 44, 72, 75, 80, 93], "partit": [7, 19, 21, 70, 72], "x_train": [7, 22, 23, 24, 28, 31, 43, 44, 70, 71, 72, 75, 77, 78, 84], "x_test": [7, 22, 23, 24, 28, 31, 43, 44, 70, 71, 72, 75, 77, 78, 84], "y_train": [7, 22, 23, 24, 28, 31, 43, 44, 70, 71, 72, 75, 77, 78, 84], "y_test": [7, 22, 23, 24, 28, 31, 43, 44, 70, 71, 72, 75, 77, 78, 84], "return_extra": 7, "dtype": [7, 19, 21, 28, 31, 64, 65, 66, 74, 75, 84], "contigu": [7, 64, 66, 72], "read": [7, 11, 13, 14, 15, 16, 19, 21, 23, 24, 28, 31, 36, 37, 38, 39, 40, 41, 51, 54, 55, 56, 57, 58, 59, 72, 81, 84], "type": [7, 47, 55, 64, 65, 66, 71, 72, 86], "_preprocess": 7, "take": [7, 11, 14, 49, 55, 56, 57, 58, 59, 77, 80], "np": [7, 8, 15, 19, 20, 21, 23, 24, 25, 27, 31, 32, 37, 40, 41, 47, 49, 51, 54, 55, 56, 57, 58, 59, 64, 65, 66, 67, 71, 74, 76, 81], "ensur": [7, 26, 31, 42, 44, 64, 66, 70, 71, 77], "memori": [7, 23, 24, 64, 66, 72, 81, 93], "alreadi": [7, 75, 91], "4": [7, 8, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 23, 24, 25, 32, 37, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 67, 71, 74, 80, 81, 89], "syntheticcontrol": [7, 75, 77], "600": [7, 75], "origin": [7, 23, 24, 25, 26, 28, 31, 32, 34, 38, 40, 41, 45, 52, 55, 64, 66, 71, 72, 84], "preserv": [7, 64, 65, 66, 72], "specif": [7, 22, 23, 24, 47, 51, 54, 55, 57, 58, 59, 63, 64, 66, 71, 75, 76, 77, 84, 91], "doe": [7, 8, 42, 44, 48, 55, 72, 80, 81], "indic": [7, 10, 11, 12, 13, 14, 15, 20, 21, 23, 24, 26, 31, 40, 41, 56, 57, 58, 59, 67, 71, 79], "shown": [7, 25, 32], "onli": [7, 10, 11, 12, 13, 14, 16, 17, 20, 21, 23, 24, 25, 26, 28, 30, 31, 32, 56, 57, 58, 59, 64, 66, 70, 72, 75, 76, 77, 78, 80, 81, 84, 92, 93], "yield": [7, 42, 44, 63, 76], "those": [7, 71, 78], "which": [7, 8, 16, 19, 20, 21, 22, 23, 24, 27, 29, 31, 34, 35, 36, 37, 38, 40, 41, 49, 54, 55, 56, 57, 58, 59, 70, 71, 72, 75, 77, 79, 80, 81, 84, 89, 90, 92, 93], "f": [7, 8, 23, 24, 28, 31, 34, 38, 48, 49, 55, 57, 59, 62, 64, 66, 72, 76, 80, 89], "attribut": [7, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 45, 48, 52, 54, 55, 56, 57, 58, 59, 61, 70, 72, 75, 77, 84], "comparison": [7, 75], "spec": 7, "conjunct": [7, 71], "part": [7, 28, 31, 70, 71, 75, 76, 77, 79, 81], "depend": [7, 8, 12, 14, 15, 16, 17, 21, 49, 55, 70, 72, 74, 81, 91, 92], "tupl": [7, 20, 22, 23, 24, 51, 54, 55, 57, 58, 59, 63, 66], "last": [7, 72, 76, 77, 81], "element": [7, 15, 21, 23, 24, 46, 51, 54, 55, 57, 58, 59, 62, 67], "print": [7, 19, 21, 30, 31, 72, 75], "beef": [7, 75, 77], "470": [7, 75], "coffe": [7, 75, 77], "56": [7, 75], "286": [7, 75], "150": [7, 49, 55, 71, 75], "1162": [7, 75], "82": [7, 75], "than": [7, 8, 12, 14, 15, 21, 23, 24, 27, 31, 58, 59, 65, 72, 75, 78, 79, 80, 81], "call": [7, 16, 21, 23, 24, 35, 36, 37, 38, 56, 58, 59, 63, 77], "without": [7, 62, 74, 77, 80], "reset": [7, 77], "root": [7, 25, 32], "n_outlier": [8, 42, 44, 89], "05": [8, 11, 14, 20, 23, 24, 29, 31, 36, 38, 42, 43, 44, 49, 54, 55, 58, 80, 89], "dbscan": 8, "ep": [8, 16, 21], "min_sampl": 8, "5": [8, 12, 14, 15, 17, 19, 20, 21, 23, 24, 25, 26, 27, 29, 30, 31, 32, 35, 38, 40, 41, 49, 52, 54, 55, 58, 59, 65, 71, 80, 81, 89], "metric": [8, 10, 11, 13, 14, 15, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 51, 54, 55, 56, 57, 58, 59, 71, 84], "euclidean": [8, 10, 11, 13, 14, 15, 16, 19, 21, 23, 24, 25, 27, 28, 29, 30, 31, 32, 36, 38, 39, 40, 41, 54, 55, 58, 59, 71, 80, 81, 84], "max_ep": 8, "inf": [8, 64, 66], "random_st": [8, 10, 11, 13, 14, 16, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 48, 49, 51, 52, 54, 55, 57, 58, 59, 70, 71, 78, 84], "densiti": 8, "fail": [8, 27, 31], "assign": [8, 19, 21, 28, 31, 70, 71, 72, 84, 89], "By": [8, 23, 24, 25, 32, 34, 36, 38, 48, 51, 53, 55, 57, 59, 64, 65, 66, 70, 72, 74, 77, 78, 81, 84, 89, 93], "class": [8, 43, 71, 72, 77, 84, 89, 90], "consid": [8, 13, 14, 15, 16, 21, 23, 24, 40, 41, 43, 44, 57, 58, 59, 72, 93], "optic": 8, "when": [8, 16, 17, 19, 21, 23, 24, 25, 30, 31, 32, 35, 36, 37, 38, 39, 41, 50, 53, 55, 56, 58, 59, 63, 64, 65, 66, 71, 72, 75, 77, 80, 81, 93], "cluter": 8, "randomst": [8, 11, 13, 14, 16, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 38, 39, 41, 42, 43, 44, 45, 48, 49, 51, 52, 54, 55, 57, 58, 59], "seed": [8, 11, 13, 14, 23, 24, 25, 27, 31, 32, 34, 36, 38, 45, 48, 49, 52, 54, 55, 57, 58, 59, 72], "x_outlier": [8, 89], "n_inlier": [8, 42, 44], "y_outlier": [8, 89], "labl": 8, "confusion_estim": 8, "difficulty_estim": 8, "transform": [8, 9, 10, 11, 12, 13, 14, 19, 21, 23, 24, 25, 26, 29, 30, 31, 32, 33, 36, 38, 40, 41, 58, 59, 63, 71, 78, 89], "simplest": [8, 75, 78, 89], "variat": [8, 78, 89, 93], "tight": [8, 89], "emmott": [8, 88], "2013": [8, 80, 89], "reliabl": [8, 72], "multiclass": [8, 66, 89], "For": [8, 11, 13, 14, 15, 21, 23, 24, 35, 36, 37, 38, 45, 48, 49, 51, 52, 54, 55, 56, 57, 58, 59, 70, 72, 75, 76, 77, 79, 80, 81, 84, 85, 86, 91, 92], "maxim": [8, 23, 24, 36, 38, 54, 55, 58, 59], "confus": [8, 89], "measur": [8, 16, 21, 22, 23, 24, 40, 41, 51, 54, 55, 57, 58, 59, 80, 84], "digit": 8, "rang": [8, 23, 24, 51, 54, 55, 56, 57, 58, 59, 76, 80, 81, 89], "accord": [8, 15, 17, 21, 23, 24, 52, 53, 55, 58, 59, 65, 77, 89], "final": [8, 16, 21, 23, 24, 63], "either": [8, 20, 43, 44, 54, 55, 56, 57, 58, 59, 66, 71, 72, 75, 77, 81, 89], "dispers": [8, 89], "guarante": [8, 72], "error": [8, 11, 14, 23, 24, 64, 66], "rais": [8, 64, 66], "ha": [8, 15, 21, 23, 24, 40, 41, 49, 53, 55, 57, 58, 59, 62, 64, 65, 66, 70, 71, 74, 77, 78, 80, 81, 84, 93], "few": [8, 40, 41, 78, 91], "n_class": [8, 19, 21, 22, 23, 24, 56, 57, 58, 59], "predict_proba": [8, 19, 21, 22, 23, 24, 56, 57, 58, 59, 84], "logist": [8, 89], "rbf": [8, 89], "befor": [8, 15, 19, 21, 34, 36, 38, 93], "otherwis": [8, 12, 14, 16, 21, 23, 24, 27, 31, 36, 38, 40, 41, 54, 55, 64, 66], "suppli": [8, 25, 26, 28, 31, 32], "hardest": [8, 89], "point": [8, 15, 20, 21, 28, 31, 56, 58, 59, 71, 72, 75, 77, 80, 89], "quantiz": [8, 89], "should": [8, 16, 21, 23, 37, 40, 41, 43, 44, 56, 58, 72, 76, 77, 80], "len": [8, 15, 19, 21, 25, 32, 47, 55], "denot": [8, 43, 44, 76, 80, 81], "simpler": 8, "multipl": [8, 16, 21, 23, 24, 25, 32, 51, 54, 55, 58, 59, 72, 74, 77, 80, 81, 89], "e": [8, 15, 16, 20, 21, 23, 24, 28, 30, 31, 40, 41, 58, 59, 64, 66, 72, 74, 75, 76, 77, 80, 81, 89, 91, 92], "g": [8, 19, 20, 21, 29, 31, 34, 38, 48, 54, 55, 72, 75, 76, 80, 81, 89, 91, 92], "would": [8, 10, 11, 12, 13, 14, 23, 24, 35, 36, 37, 38, 51, 54, 55, 56, 57, 58, 59, 71, 76], "mix": 8, "easi": [8, 65, 75], "difficult": [8, 89], "16": [8, 89], "3": [8, 15, 20, 21, 22, 23, 24, 28, 31, 37, 47, 49, 52, 55, 56, 58, 59, 64, 66, 67, 74, 76, 78, 79, 80, 81, 84, 89], "percentil": [8, 11, 14, 23, 24, 36, 38, 54, 55, 89], "procedur": [8, 11, 14], "effect": [8, 23, 24, 53, 55, 57, 59, 64, 66, 80, 84, 93], "facil": 8, "locat": [8, 77, 81, 91], "thei": [8, 23, 24, 51, 55, 56, 57, 58, 59, 71, 77, 81], "distribut": [8, 23, 24, 34, 38, 48, 52, 53, 55, 56, 57, 58, 59, 75, 91, 92], "among": [8, 29], "avail": [8, 77, 84, 86], "suffici": 8, "fewer": [8, 40, 41], "mai": [8, 23, 24, 35, 36, 37, 38, 56, 58, 59, 70, 93], "note": [8, 16, 17, 20, 21, 23, 24, 28, 30, 31, 35, 36, 37, 38, 39, 40, 41, 42, 44, 48, 49, 55, 56, 58, 59, 65, 70, 76, 80, 81], "packag": [8, 75, 89, 91, 92], "networkx": [8, 89], "da": [8, 80, 89], "dietterich": [8, 89], "t": [8, 19, 21, 22, 23, 24, 28, 31, 34, 35, 36, 37, 38, 40, 41, 48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 64, 66, 78, 80, 81, 89, 91, 93], "fern": [8, 89], "wong": [8, 89], "w": [8, 19, 20, 21, 22, 23, 24, 34, 35, 36, 37, 38, 56, 57, 58, 59, 75, 77, 89], "systemat": [8, 89], "anomali": [8, 43, 44, 71, 89], "benchmark": [8, 71, 75, 85, 88], "real": [8, 23, 24, 74, 80, 89], "acm": [8, 80, 81, 89], "sigkdd": [8, 81, 89], "workshop": [8, 89], "pp": [8, 28, 31, 71, 81, 89], "21": [8, 89], "n_cluster": [8, 19, 21], "farther": 8, "other": [8, 19, 21, 27, 31, 42, 44, 72, 75, 77, 81, 89], "satisfi": [8, 66, 80], "constraint": [8, 61, 66, 80], "allow": [8, 49, 55, 56, 57, 58, 59, 63, 64, 66, 72, 77, 89], "n_dim": [9, 10, 11, 12, 13, 14, 15, 17, 21, 22, 24, 40, 41, 43, 44, 50, 55, 56, 57, 58, 59, 72, 74, 75, 76, 78, 79, 81], "max": [9, 20, 58, 59, 65, 80, 81], "result": [9, 16, 21, 23, 24, 26, 29, 31, 43, 44, 46, 54, 55, 56, 57, 58, 59, 64, 65, 66, 67, 70, 71, 76, 78, 80, 84, 89], "zero": [9, 10, 11, 12, 13, 14, 23, 24, 34, 36, 38, 48, 52, 54, 55, 56, 57, 58, 59, 70, 72, 76, 80], "unit": [9, 34, 36, 38, 48, 54, 55, 72, 76, 80], "deviat": [9, 20, 34, 36, 38, 48, 49, 54, 55, 70, 89], "n_shortest": 9, "basedistanceselector": 10, "metric_param": [10, 11, 13, 14, 15, 19, 21, 23, 24, 25, 28, 31, 32, 36, 38, 39, 40, 41, 51, 54, 55, 57, 58, 59, 71, 80, 81], "n_job": [10, 11, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 28, 31, 34, 35, 36, 37, 38, 45, 48, 49, 50, 51, 52, 54, 55, 60, 84], "itself": [10, 11, 12, 13, 14, 80], "fit_transform": [10, 11, 12, 13, 14, 19, 21, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55], "fit_param": [10, 11, 12, 13, 14, 19, 21, 47, 50, 51, 53, 55], "n_featur": [10, 11, 12, 13, 14, 19, 21, 22, 23, 24, 34, 35, 36, 37, 38, 47, 50, 51, 53, 55, 56, 57, 58, 59], "n_output": [10, 11, 12, 13, 14, 19, 21, 22, 23, 24, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "target": [10, 11, 12, 13, 14, 19, 21, 23, 24, 28, 29, 31, 47, 50, 51, 53, 55, 56, 57, 58, 59, 66, 71, 91], "unsupervis": [10, 11, 12, 13, 14, 19, 21, 23, 24, 47, 50, 51, 53, 55], "addit": [10, 11, 12, 13, 14, 19, 21, 47, 50, 51, 53, 55, 72, 75, 79, 81], "x_new": [10, 11, 12, 13, 14, 19, 21, 47, 50, 51, 53, 55], "n_features_new": [10, 11, 12, 13, 14, 19, 21, 47, 50, 51, 53, 55], "get_dimens": [10, 11, 12, 13, 14, 78], "boolean": [10, 11, 12, 13, 14, 20, 67], "mask": [10, 11, 12, 13, 14, 65], "instead": [10, 11, 12, 13, 14, 16, 20, 21, 23, 24, 35, 36, 37, 38, 42, 44, 56, 58, 59, 72, 78, 81, 85], "n_selected_dim": [10, 11, 12, 13, 14], "retain": [10, 11, 12, 13, 14, 93], "inverse_transform": [10, 11, 12, 13, 14], "revers": [10, 11, 12, 13, 14, 30, 31, 71], "insert": [10, 11, 12, 13, 14, 42, 44], "been": [10, 11, 12, 13, 14, 23, 24, 49, 55, 65, 77, 80], "set_output": [10, 11, 12, 13, 14, 19, 21, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55], "output": [10, 11, 12, 13, 14, 15, 16, 19, 21, 23, 24, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 64, 66, 72, 81], "introduc": [10, 11, 12, 13, 14, 19, 21, 23, 24, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 93], "api": [10, 11, 12, 13, 14, 19, 21, 23, 24, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 72, 74, 90, 93], "panda": [10, 11, 12, 13, 14, 19, 21, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55], "configur": [10, 11, 12, 13, 14, 19, 21, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 71, 72, 80, 81, 84, 85, 92], "datafram": [10, 11, 12, 13, 14, 19, 21, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55], "polar": [10, 11, 12, 13, 14, 19, 21, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55], "unchang": [10, 11, 12, 13, 14, 19, 20, 21, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55], "wa": [10, 11, 12, 13, 14, 19, 21, 23, 24, 26, 31, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 71], "reduc": [10, 11, 12, 13, 14, 23, 24, 49, 55, 75, 78], "dimensionselectormixin": 10, "score_func": [11, 14], "f_classif": [11, 14], "function": [11, 14, 16, 23, 24, 28, 30, 37, 47, 48, 49, 56, 58, 70, 71, 72, 75, 76, 77, 78, 80, 81, 84], "draw": [11, 13, 14, 23, 24, 36, 38, 54, 55], "calcul": [11, 13, 14, 16, 21, 34, 36, 38, 39, 41, 53, 71, 80], "percent": [11, 14, 70], "about": [11, 13, 14, 15, 16, 19, 21, 23, 24, 28, 31, 36, 38, 39, 40, 41, 49, 51, 52, 54, 55, 57, 58, 59, 64, 66, 72, 81, 84], "control": [11, 13, 14, 20, 23, 24, 25, 30, 31, 32, 34, 36, 38, 45, 48, 51, 52, 54, 55, 92, 93], "parallel": [11, 13, 14, 15, 16, 19, 21, 23, 24, 28, 31, 34, 36, 38, 45, 48, 52, 54, 55, 60], "job": [11, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 28, 31, 34, 36, 38, 45, 48, 50, 52, 54, 55, 60], "dataset": [11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25, 28, 31, 32, 33, 34, 36, 38, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 64, 65, 66, 70, 71, 74, 76, 77, 78, 81, 84, 89], "sdp": [11, 14], "50": [11, 14, 20, 71, 75, 81], "fpr": [11, 14], "abov": [11, 14, 36, 38, 54, 55, 72, 76, 80], "fdr": [11, 14], "fwe": [11, 14], "correct": [11, 14, 28, 31, 37, 40, 41, 56, 58, 61, 83], "posit": [11, 14, 15, 19, 21, 23, 24, 25, 30, 31, 32, 34, 38, 45, 48, 52, 55, 70, 80], "rate": [11, 14, 20], "discoveri": [11, 14, 22, 23, 24, 34, 38, 48, 49, 52, 55, 57, 59, 81, 84], "benjamini": [11, 14], "hochberg": [11, 14], "fwer": [11, 14], "famili": [11, 14], "wise": [11, 14, 67, 72, 76], "bonferroni": [11, 14], "sd": [11, 12, 14], "01": [11, 14, 20, 49, 55, 80, 84], "80": [11, 14, 71], "6": [11, 14, 15, 20, 21, 49, 55, 72, 74, 80, 81], "100": [11, 14, 23, 24, 25, 28, 29, 31, 32, 51, 55, 57, 59, 65, 71, 75, 80, 84], "top": [11, 14, 15, 21, 25, 32, 93], "sdt": [11, 14], "300": [11, 12, 14, 16, 19, 21, 72, 78], "65": [11, 12, 14, 78], "cv": [12, 14, 34, 35, 36, 37, 38], "direct": [12, 14], "forward": [12, 14, 78], "tol": [12, 14, 19, 20, 21], "backward": [12, 14, 78], "greedili": [12, 14, 78, 93], "At": [12, 14, 78], "iter": [12, 14, 16, 19, 21, 28, 31, 34, 36, 38, 42, 44, 75, 78], "choos": [12, 14, 78], "best": [12, 14, 15, 16, 21, 23, 24, 26, 29, 31, 35, 36, 37, 38, 54, 55, 56, 58, 59, 78, 81], "add": [12, 14, 23, 24, 30, 31, 63, 65, 66, 78, 93], "unfit": [12, 14], "behavior": [12, 14, 71], "long": [12, 14, 77], "increas": [12, 14, 23, 24, 58, 59], "larger": [12, 14, 23, 24, 40, 41, 58, 59, 65, 72, 79, 80], "half": [12, 14, 34, 36, 38, 81], "integ": [12, 14, 19, 21, 23, 24, 34, 38, 45, 48, 52, 55, 65, 89], "strategi": [12, 14, 23, 24, 34, 36, 38, 42, 44, 48, 52, 53, 55, 78], "defin": [12, 14, 23, 24, 35, 36, 37, 38, 47, 51, 53, 54, 55, 56, 57, 58, 59, 71, 77], "rule": [12, 14], "predict": [12, 14, 19, 21, 22, 23, 24, 26, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 56, 57, 58, 59, 70, 71, 78, 84, 85], "toler": [12, 14, 16, 19, 21, 23, 24, 40, 41, 58, 59, 80], "neg": [12, 14, 23, 24, 35, 36, 37, 38, 56, 57, 58, 59, 93], "clf": [12, 14, 22, 24, 28, 31, 72, 78, 80, 84], "threshold": [13, 14, 15, 21, 23, 24, 25, 26, 29, 30, 31, 32, 36, 38, 53, 54, 55, 58, 59, 84, 86, 93], "suitabl": [13, 14, 53], "sinc": [13, 14, 19, 21, 22, 23, 24, 26, 31, 34, 35, 36, 37, 38, 49, 55, 56, 57, 58, 59, 71, 72, 76, 81, 89], "dv": [13, 14], "9": [13, 14, 15, 20, 21, 34, 38, 48, 49, 54, 55, 77, 78], "dim": [15, 17, 21, 76, 81], "univari": [15, 19, 21, 39, 41, 72, 74, 79, 81], "needl": [15, 21], "haystack": [15, 21], "_metric": [15, 16, 21, 28, 31, 36, 38, 40, 41, 54, 55], "smallest": [15, 16, 19, 21], "pass": [15, 16, 19, 21, 23, 24, 37, 56, 58, 64, 66, 81, 84, 89], "signific": [15, 21], "implic": [15, 21], "wildoar": [15, 21], "11": [15, 21, 23, 24, 36, 38, 52, 54, 55], "7": [15, 20, 21, 23, 24, 49, 52, 54, 55, 81], "8": [15, 19, 20, 21, 34, 36, 38, 48, 49, 54, 55, 58, 65, 70, 93], "24621125": [15, 21], "79583152": [15, 21], "24695077": [15, 21], "m_timestep": [15, 20, 21], "ndim": [15, 21, 64, 66, 72], "broadcast": [15, 17, 21, 26, 31, 81], "same": [15, 20, 21, 23, 24, 25, 28, 31, 32, 40, 41, 54, 55, 56, 57, 58, 59, 65, 71, 72, 76, 77, 80, 81, 93], "_subsequence_metr": [15, 21], "lib": [15, 21], "stride_trick": [15, 21], "sliding_window_view": [15, 21], "window_shap": [15, 21], "broadcast_to": [15, 21], "pad": [15, 21, 23, 24, 46, 52, 55, 70], "mass": [15, 21, 80, 81], "correspond": [15, 21, 23, 24, 34, 36, 38, 40, 41, 56, 57, 58, 59, 70, 71, 84], "everi": [15, 17, 21, 56, 57, 58, 59, 64, 66, 81], "broacast": [15, 21], "space": [15, 19, 21, 29, 46, 55, 65, 81], "amount": [15, 21], "search": [15, 21, 56, 57, 58, 59, 80], "run": [15, 16, 19, 21, 23, 24, 28, 30, 31, 34, 38, 45, 48, 52, 54, 55, 63, 75, 76, 92], "output_s": [15, 21, 46, 55], "squeez": [15, 21, 62], "ecg200": [15, 21, 71], "reshap": [15, 21, 81], "14": [15, 21, 81], "00120332": [15, 21], "41943788": [15, 21], "81597243": [15, 21], "75219094": [15, 21], "72681005": [15, 21], "70155561": [15, 21], "dtw": [15, 19, 21, 22, 24, 27, 29, 31, 33, 54, 55, 57, 58, 59, 71, 80, 81], "01881424": [15, 21], "15083281": [15, 21], "48856368": [15, 21], "83139294": [15, 21], "75595579": [15, 21], "30073636": [15, 21], "65346307": [15, 21], "27919601": [15, 21], "25666948": [15, 21], "0961576": [15, 21], "warn": [15, 16, 21, 64, 66], "full": [15, 21, 37, 40, 41, 47, 49, 55, 56, 58, 72, 75, 81], "scalar": [15, 21, 62, 65, 81], "return_index": [15, 17, 20, 21, 81], "mani": [15, 21, 23, 24, 64, 66, 76, 81], "equal": [15, 21, 23, 24, 51, 55, 56, 57, 58, 59, 74, 75, 80, 89, 93], "good": [15, 21, 30, 31, 40, 41, 89], "first": [15, 17, 20, 21, 23, 24, 48, 51, 54, 55, 57, 58, 59, 64, 66, 70, 71, 77, 79, 81, 84, 89, 92], "dist": [15, 21, 58, 59, 81], "minumum": [15, 21, 65], "max_match": [15, 21], "less": [15, 21, 23, 24, 58, 59, 72, 75, 76], "behaviour": [15, 21], "order": [15, 21, 23, 24, 34, 36, 38, 40, 41, 47, 48, 55, 56, 57, 58, 59, 64, 65, 66, 71, 72, 74, 81], "occurr": [15, 21, 70], "length": [15, 21, 23, 24, 36, 38, 54, 55, 58, 59, 62, 64, 66, 67, 76, 79, 80], "x_sampl": [15, 21, 81], "y_sampl": [15, 21, 81], "n_subsequ": [15, 21, 81], "yn_timestep": [15, 17, 21], "closer": [15, 21, 29, 40, 41], "treshold": [15, 21], "trivial": [15, 17, 21], "vicin": [15, 21], "within": [15, 21, 71, 78, 81], "timestep": [15, 21, 40, 41, 52, 54, 55, 64, 66, 72, 74, 75, 76, 79, 81], "anoth": [15, 21, 71, 77, 80, 89], "higher": [15, 21], "n_match": [15, 21], "found": [15, 21], "n_compon": [16, 21], "n_init": [16, 19, 21], "max_it": [16, 19, 21, 28, 29, 31], "verbos": [16, 19, 20, 21, 23, 24, 29, 30, 31, 92], "001": [16, 19, 21, 80], "dissimilar": [16, 21], "dissimilarity_param": [16, 21], "normalized_stress": [16, 21], "immers": [16, 21], "nonmetr": [16, 21], "non": [16, 21, 22, 24, 40, 41, 49, 55, 64, 66, 81, 93], "smacof": [16, 21], "differ": [16, 21, 28, 30, 31, 34, 36, 38, 40, 41, 42, 44, 48, 55, 70, 71, 72, 77, 79, 80, 81], "initi": [16, 19, 20, 21, 29, 70, 71, 77], "determin": [16, 19, 21, 23, 24, 26, 30, 31, 34, 35, 36, 37, 38, 39, 41, 42, 44, 49, 55, 56, 58, 59, 77, 84, 89], "stress": [16, 21], "respect": [16, 21, 71, 75, 77, 84], "declar": [16, 19, 21, 77], "converg": [16, 19, 21], "tune": [16, 21], "separ": [16, 21, 23, 24, 58, 59, 77, 89, 93], "whether": [16, 21, 34, 36, 38, 64, 65, 66, 71], "being": [16, 21, 28, 31], "center": [16, 19, 21], "reproduc": [16, 21], "across": [16, 21], "measu": [16, 21], "norm": [16, 21, 80], "conveni": [16, 21, 39, 41, 72], "wrapper": [16, 21, 39, 41, 62], "sklearn": [16, 21, 23, 24, 37, 39, 41, 47, 48, 55, 56, 58, 64, 66, 70, 71, 72, 78, 89], "manifold": [16, 21], "subsequenec": [17, 21], "xn_timestep": [17, 21], "second": [17, 20, 21, 23, 24, 51, 54, 55, 57, 58, 59, 77, 81], "r": [19, 20, 21, 22, 23, 24, 29, 31, 34, 35, 36, 37, 38, 49, 51, 54, 55, 56, 57, 58, 59, 71, 80, 92], "init": [19, 20, 21], "softdtw": [19, 21], "penalti": [19, 20, 21, 80], "tradit": [19, 21, 76, 78, 80, 89], "randomli": [19, 21, 49, 54, 55, 70, 86], "centroid": [19, 21, 71], "consecut": [19, 21], "diagnost": [19, 21], "messag": [19, 21, 64, 66], "dure": [19, 21, 30, 31], "n_iter_": [19, 21], "cluster_centers_": [19, 21], "labels_": [19, 21], "Not": [19, 21, 23, 24], "fit_predict": [19, 21, 23, 24], "present": [19, 21, 23, 24, 71, 77], "consist": [19, 21, 23, 24, 28, 30, 31, 35, 36, 37, 38, 54, 55, 56, 58, 59, 70, 81, 84], "convent": [19, 21, 23, 24, 63, 64, 66, 72, 75, 84], "int64": [19, 21], "belong": [19, 21, 71, 72], "30": [19, 21, 72, 80, 81], "0001": [19, 21], "pam": [19, 21], "medoid": [19, 21, 27, 31, 71], "core": [19, 21, 23, 24, 34, 38, 45, 48, 49, 51, 52, 55, 84], "medoid_indices_": [19, 21], "n_neighbor": [19, 21, 22, 24, 28, 31, 71], "classes_": [19, 21, 23, 24, 29, 31, 56, 57, 58, 59, 71], "shapel": [19, 21], "known": [19, 21, 28, 31], "multivarait": [19, 21], "kneighborclassifi": [19, 21], "sample_weight": [19, 20, 21, 22, 23, 24, 34, 35, 36, 37, 38, 40, 41, 56, 57, 58, 59], "accuraci": [19, 21, 22, 23, 24, 34, 35, 36, 37, 38, 40, 41, 56, 57, 58, 59, 71, 78, 84], "multi": [19, 21, 22, 23, 24, 34, 35, 36, 37, 38, 49, 55, 56, 57, 58, 59, 64, 66, 78, 89], "harsh": [19, 21, 22, 23, 24, 34, 35, 36, 37, 38, 56, 57, 58, 59], "you": [19, 21, 22, 23, 24, 28, 31, 34, 35, 36, 37, 38, 56, 57, 58, 59, 72, 84, 91, 92, 93], "correctli": [19, 21, 22, 23, 24, 34, 35, 36, 37, 38, 56, 57, 58, 59], "x_timestep": [20, 81], "y_timestep": [20, 81], "out": [20, 23, 24, 72, 78, 84, 90], "vector": [20, 64, 66], "penal": 20, "store": [20, 23, 24, 71, 75], "mm": 20, "max_stabl": 20, "learning_r": 20, "decai": 20, "1e": [20, 40, 41], "max_epoch": 20, "return_cost": 20, "exp": [20, 23, 24, 58, 59], "influenc": [20, 23, 24, 35, 36, 37, 38, 56, 58, 59], "much": [20, 40, 41, 93], "contribut": 20, "ssg": 20, "minim": [20, 36, 38, 54, 55], "equival": 20, "stochast": 20, "subgradi": 20, "epoch": 20, "cost": [20, 30, 31, 80, 81], "minmum": 20, "runtim": 20, "pseudo": [20, 26, 28, 30, 31], "27442791e": 20, "19807473e": 20, "02": [20, 49, 55], "77490053e": 20, "60441308e": 20, "31930140e": 20, "17437783e": 20, "43925941e": 20, "60983434e": 20, "72118437e": 20, "73352049e": 20, "56701557e": 20, "53269314e": 20, "33366128e": 20, "09010828e": 20, "97539989e": 20, "71443248e": 20, "42492836e": 20, "71408958e": 20, "82518334e": 20, "35671953e": 20, "26442901e": 20, "38342948e": 20, "11248815e": 20, "99355168e": 20, "00": [20, 49, 55], "08588712e": 20, "35954194e": 20, "78345146e": 20, "41023092e": 20, "99915956e": 20, "82717462e": 20, "71687181e": 20, "55819192e": 20, "28805337e": 20, "06653283e": 20, "25159669e": 20, "02389872e": 20, "39410523e": 20, "34687887e": 20, "03": 20, "98654485e": 20, "85832342e": 20, "56436416e": 20, "25302660e": 20, "77697444e": 20, "24606299e": 20, "76357782e": 20, "27083874e": 20, "44590342e": 20, "64184026e": 20, "03608265e": 20, "13964118e": 20, "33595675e": 20, "09954847e": 20, "61924171e": 20, "47433305e": 20, "29583168e": 20, "00425122e": 20, "80524683e": 20, "70210329e": 20, "40259039e": 20, "59657389e": 20, "52170730e": 20, "54666287e": 20, "93690730e": 20, "23968406e": 20, "upper": [20, 23, 24, 36, 38, 42, 44, 51, 52, 54, 55, 57, 58, 59, 81], "keogh": [20, 81], "2002": 20, "28th": 20, "veri": [20, 76, 80], "larg": [20, 65, 70, 75, 80, 84], "min_dist": 20, "cumul": 20, "step": [20, 28, 31, 36, 38, 54, 55, 70, 71, 72, 75, 76, 78], "precomput": [20, 23, 24, 35, 36, 37, 38, 56, 58, 59], "x_indic": 20, "y_indic": 20, "provid": [20, 28, 31, 49, 52, 71, 72, 77, 80, 91], "n": [20, 72, 81, 89], "omitaomu": 20, "o": [20, 23, 24, 29, 57, 59, 81, 84], "2021": [20, 28, 31, 40, 41, 93], "pattern": [20, 36, 38, 54, 55, 80, 89], "recognit": [20, 36, 38, 54, 55, 80], "44": 20, "2231": 20, "2240": 20, "diagon": 20, "raec1aca773": 20, "grid": [22, 23, 24, 51, 54, 55, 57, 58, 59, 84], "elast": [22, 24, 81], "non_elast": [22, 24], "one": [22, 23, 24, 25, 32, 48, 51, 54, 55, 57, 58, 59, 62, 70, 71, 72, 75, 77, 80, 81, 84], "line": [22, 24, 65, 84, 92], "bagnal": [22, 24, 84], "2015": [22, 24, 54, 55, 84], "slightli": [22, 24, 71], "smaller": [22, 24, 65, 84], "custom": [22, 23, 24, 49, 55, 57, 59, 84], "paralel": [22, 24, 49, 55], "jason": [22, 24, 84], "anthoni": [22, 24, 84], "knowledg": [22, 23, 24, 27, 30, 31, 34, 38, 40, 41, 48, 49, 52, 55, 57, 59, 71, 80, 81, 84], "29": [22, 24, 84], "min_r": [22, 23, 24, 51, 54, 55, 57, 58, 59, 80, 84], "max_r": [22, 23, 24, 51, 54, 55, 57, 58, 59, 80, 84], "ddtw": [22, 24, 80, 81, 84], "9866666666666667": [22, 24, 84], "n_estim": [23, 24, 71], "max_sampl": [23, 24], "bootstrap": [23, 24], "oob_scor": [23, 24], "class_weight": [23, 24, 34, 35, 36, 37, 38, 57, 58, 59], "warm_start": [23, 24], "base_estim": [23, 24], "deprec": [23, 24, 26, 31, 49, 55, 57, 58, 59, 66], "meta": [23, 24], "drawn": [23, 24], "replac": [23, 24, 28, 31, 40, 41, 77, 91, 92], "balanc": [23, 24, 34, 36, 38, 57, 58, 59], "associ": [23, 24, 34, 36, 38, 57, 58, 59], "invers": [23, 24, 57, 58, 59, 71], "proport": [23, 24, 57, 58, 59], "frequenc": [23, 24, 57, 58, 59, 65, 70], "reus": [23, 24, 71, 72, 76], "solut": [23, 24], "previou": [23, 24, 76], "just": [23, 24, 74, 92], "whole": [23, 24], "resampl": [23, 24, 25, 32, 34, 38, 45, 52, 55], "estimators_samples_": [23, 24], "member": [23, 24], "footprint": [23, 24], "thu": [23, 24], "fetch": [23, 24, 92], "slower": [23, 24, 81], "expect": [23, 24, 35, 36, 37, 38, 50, 55, 56, 58, 59, 71, 72, 76, 89], "decision_funct": [23, 24, 40, 41], "decis": [23, 24, 30, 31, 56, 57, 58, 59, 71, 84], "spars": [23, 24, 34, 36, 38, 56, 57, 58, 59, 64, 66, 70], "matric": [23, 24], "accept": [23, 24, 34, 38, 48, 55, 64, 66, 72, 75, 76, 77, 80, 81], "column": [23, 24, 64, 66, 77, 79], "appear": [23, 24, 71], "special": [23, 24, 72], "case": [23, 24, 28, 31, 80], "build": [23, 24, 57, 59, 72, 91], "do": [23, 24, 56, 57, 58, 59, 80, 81, 92, 93], "resort": [23, 24], "vote": [23, 24], "predict_log_proba": [23, 24], "log": [23, 24, 49, 55], "repres": [23, 24, 66, 71, 74, 79, 80, 85], "frac": [23, 24, 35, 36, 37, 38, 56, 58, 59], "u": [23, 24, 35, 36, 37, 38, 56, 58, 59], "v": [23, 24, 35, 36, 37, 38, 56, 58, 59, 77, 80], "residu": [23, 24, 35, 36, 37, 38, 56, 58, 59], "sum": [23, 24, 35, 36, 37, 38, 54, 55, 56, 58, 59], "squar": [23, 24, 25, 32, 35, 36, 37, 38, 56, 58, 59], "y_true": [23, 24, 35, 36, 37, 38, 56, 58, 59], "y_pred": [23, 24, 35, 36, 37, 38, 56, 58, 59, 71], "total": [23, 24, 35, 36, 37, 38, 56, 58, 59], "becaus": [23, 24, 35, 36, 37, 38, 56, 58, 59], "arbitrarili": [23, 24, 35, 36, 37, 38, 56, 58, 59], "wors": [23, 24, 35, 36, 37, 38, 56, 58, 59], "constant": [23, 24, 35, 36, 37, 38, 56, 58, 59], "alwai": [23, 24, 27, 31, 35, 36, 37, 38, 42, 44, 56, 58, 59, 80], "disregard": [23, 24, 35, 36, 37, 38, 56, 58, 59], "some": [23, 24, 35, 36, 37, 38, 56, 58, 59, 63, 64, 66, 74, 75, 79, 80, 91], "n_samples_fit": [23, 24, 35, 36, 37, 38, 56, 58, 59], "multioutput": [23, 24, 35, 36, 37, 38, 56, 58, 59], "uniform_averag": [23, 24, 35, 36, 37, 38, 56, 58, 59], "23": [23, 24, 35, 36, 37, 38, 56, 58, 59, 70], "r2_score": [23, 24, 35, 36, 37, 38, 56, 58, 59], "except": [23, 24, 35, 36, 37, 38, 56, 58, 59, 77, 89], "multioutputregressor": [23, 24, 35, 36, 37, 38, 56, 58, 59], "baseforestclassifi": 23, "estimator_param": 23, "max_depth": [23, 24, 56, 57, 58, 59, 71], "min_samples_split": [23, 24, 56, 57, 58, 59], "min_samples_leaf": [23, 24, 56, 57, 58, 59], "min_impurity_decreas": [23, 24, 56, 57, 58, 59], "impurity_equality_toler": [23, 24, 56, 58, 59, 93], "criterion": [23, 24, 57, 58, 59], "entropi": [23, 24, 57, 58, 59], "tree": [23, 24, 33, 71, 80, 84, 93], "baseforestregressor": 23, "squared_error": [23, 24, 58, 59], "baseshapeletforestclassifi": 23, "n_shapelet": [23, 24, 25, 32, 36, 38, 54, 55, 58, 59], "log2": [23, 24, 25, 32, 40, 41, 49, 53, 55, 58, 59], "min_shapelet_s": [23, 24, 25, 29, 31, 32, 36, 38, 54, 55, 58, 59], "max_shapelet_s": [23, 24, 25, 29, 31, 32, 36, 38, 54, 55, 58, 59], "directli": [23, 70, 77], "baseshapeletforestregressor": 23, "depth": [23, 24, 57, 58, 59, 92], "expand": [23, 24, 58, 59], "until": [23, 24, 58, 59], "leav": [23, 24, 56, 57, 58, 59, 84], "pure": [23, 24, 58, 59], "node": [23, 24, 52, 55, 56, 57, 58, 59], "leaf": [23, 24, 56, 57, 58, 59], "impur": [23, 24, 57, 58, 59, 93], "decreas": [23, 24, 57, 58, 59], "mandatori": [23, 24, 51, 54, 55, 57, 58, 59], "specifii": [23, 24, 51, 54, 55, 57, 58, 59], "give": [23, 24, 25, 32, 51, 54, 55, 57, 58, 59, 84, 85], "follow": [23, 24, 37, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 72, 75, 76, 77, 80, 81, 84, 92], "num_r": [23, 24, 51, 54, 55, 57, 58, 59], "gini": [23, 24, 57, 58, 59], "scaled_euclidean": [23, 24, 58, 59, 80, 81], "y_hat": [23, 24], "mse": [23, 24, 58, 59], "v1": [23, 24, 58, 59, 75, 77], "forestmixin": 23, "n_interv": [23, 24, 25, 32, 40, 41, 49, 53, 55, 58, 59], "sqrt": [23, 24, 25, 32, 40, 41, 49, 53, 55, 58, 59], "fix": [23, 24, 49, 55, 58, 59, 70, 93], "summar": [23, 24, 49, 55, 58, 59], "mean_var_std": [23, 24], "sample_s": [23, 24, 39, 41, 49, 55, 58, 59], "min_siz": [23, 24, 49, 52, 55, 58, 59], "max_siz": [23, 24, 49, 52, 55, 58, 59], "contamin": [23, 24, 43, 44], "offset": [23, 24], "offset_": [23, 24], "model_select": [23, 24, 33, 70, 71, 72], "balanced_accuracy_scor": [23, 24], "test_siz": [23, 24, 42, 43, 44, 72], "anomalies_train_s": [23, 24, 43, 44], "8674": [23, 24], "n_pivot": [23, 24, 51, 55, 57, 58, 59], "pivot_sampl": [23, 24, 57, 59], "metric_sampl": [23, 24, 51, 55, 57, 59], "metric_factori": [23, 24, 57, 59], "uniform": [23, 24, 51, 52, 53, 55, 57, 59, 76, 81], "parameter": [23, 24, 57, 59, 80], "suggest": [23, 24, 57, 59, 84], "luca": [23, 24, 57, 59, 84], "2019": [23, 24, 49, 55, 57, 59, 84, 92], "2020": [23, 24, 27, 29, 30, 31, 40, 41, 52, 55, 57, 59, 71], "combin": [23, 24, 29, 49, 55, 57, 59, 70], "sub": [23, 24, 57, 59], "benjamin": [23, 24, 57, 59, 84], "ahm": [23, 24, 57, 59, 84], "shifaz": [23, 24, 57, 59, 84], "charlott": [23, 24, 57, 59, 84], "pelleti": [23, 24, 57, 59, 84], "lachlan": [23, 24, 57, 59, 84], "neill": [23, 24, 57, 59, 84], "nayyar": [23, 24, 57, 59, 84], "zaidi": [23, 24, 57, 59, 84], "bart": [23, 24, 57, 59, 84], "goethal": [23, 24, 57, 59, 84], "fran\u00e7oi": [23, 24, 52, 55, 57, 59, 84], "petitjean": [23, 24, 52, 55, 57, 59, 84], "geoffrei": [23, 24, 52, 55, 57, 59, 80, 84], "webb": [23, 24, 34, 38, 48, 52, 55, 57, 59, 80, 84], "scalabl": [23, 24, 57, 59, 84], "n_kernel": [23, 24, 34, 35, 38, 48, 52, 55, 58, 59, 70], "normal": [23, 24, 25, 32, 34, 35, 36, 37, 38, 43, 44, 48, 52, 53, 55, 58, 59, 65, 70, 71, 76, 80], "sampling_param": [23, 24, 34, 35, 38, 48, 52, 55, 58, 59], "kernel_s": [23, 24, 34, 35, 38, 46, 48, 52, 55, 58, 59], "bias_prob": [23, 24, 35, 38, 52, 55, 58, 59], "normalize_prob": [23, 24, 35, 36, 38, 52, 54, 55, 58, 59], "padding_prob": [23, 24, 35, 38, 52, 55, 58, 59], "13": [23, 24, 52, 55], "bia": [23, 24, 46, 52, 55], "processor": [23, 24, 54, 55, 84, 92], "gap": [23, 24, 58, 59, 80, 93], "never": [23, 24, 58, 59, 64, 66, 70, 80], "current": [23, 24, 28, 29, 31, 58, 59, 75, 76, 77, 92], "ab": [23, 24, 58, 59], "toward": [23, 24, 29, 58, 59, 63], "independeth": [23, 24, 58, 59], "sparse_output": [23, 24], "high": [23, 24], "dimension": [23, 24], "fall": [23, 24, 72, 80], "lead": [23, 24, 71], "code": [23, 24, 71, 76, 81, 93], "ones": [23, 24], "csr": [23, 24], "bin": [25, 32, 53, 55, 65, 89, 91], "n_bin": [25, 32, 40, 41, 53, 55], "n_repeat": [25, 32], "discret": [25, 32, 34, 36, 38, 54, 55, 65, 89], "permut": [25, 32], "show_bin": [25, 32], "show_grid": [25, 32], "scorer": [25, 32, 34, 36, 38], "were": [25, 32, 79], "annot": [25, 32, 33], "axi": [25, 32, 56, 57, 58, 59, 62, 64, 66, 76, 81], "mappabl": [25, 32], "scalarmapp": [25, 32], "colorbar": [25, 32], "specici": [25, 32], "least": [25, 32, 64, 66], "importances_": [25, 32], "components_": [25, 32], "end": [25, 32, 56, 57, 58, 59, 64, 66, 74, 76, 79], "permuteimport": 25, "kernel_scal": [25, 32], "25": [25, 32, 57, 59, 80, 89], "predictevalu": [26, 29], "probabilityevalu": [26, 29], "targetevalu": [26, 28, 29, 31], "train_x": [26, 31], "train_i": [26, 31], "valid_scor": [26, 31], "method_arg": [26, 31], "basecounterfactu": [26, 31], "infer": [26, 31], "most": [26, 28, 31, 70, 71, 74, 78, 79, 89, 91, 93], "appropri": [26, 31, 79], "_counterfactu": [26, 31], "renam": [26, 31, 49, 55], "success": [26, 31], "stabl": [26, 31, 43, 44, 74], "x_counterfactu": [26, 31, 40, 41], "wdtw": [27, 31, 80, 81], "karlsson": [27, 30, 31, 40, 41, 71], "reban": [27, 30, 31, 40, 41, 71], "j": [27, 30, 31, 40, 41, 71, 81], "papapetr": [27, 30, 31, 40, 41, 71], "gioni": [27, 30, 31, 40, 41, 71], "local": [27, 30, 31, 40, 41, 71], "tweak": [27, 30, 31, 40, 41, 71], "system": [27, 30, 31, 40, 41, 71, 75, 77, 91, 92], "62": [27, 30, 31, 40, 41, 71], "1671": [27, 30, 31, 40, 41, 71], "1700": [27, 30, 31, 40, 41, 71], "explainer_": [27, 31], "exce": [28, 31], "grow": [28, 31], "unfortun": [28, 31], "interpret": [28, 31, 40, 41, 49, 55], "To": [28, 31, 71, 75, 76, 77, 79, 89, 91], "exactli": [28, 31, 75, 79], "replic": [28, 31], "delanei": [28, 31, 40, 41, 93], "your": [28, 31, 56, 57, 58, 59, 91, 92, 93], "own": [28, 31, 49, 55], "recommend": [28, 31, 91], "author": [28, 31], "gradcam": [28, 31], "green": [28, 31, 40, 41], "d": [28, 31, 34, 38, 40, 41, 48, 49, 55, 75, 80, 81], "kean": [28, 31, 40, 41], "reason": [28, 31, 72], "research": [28, 31], "develop": [28, 31, 47, 55, 92, 93], "vol": [28, 31], "12877": [28, 31], "32": [28, 31, 48, 55, 75], "47": [28, 31], "springer": [28, 31], "publish": [28, 31, 89], "cham": [28, 31], "scienc": [28, 31], "ngc": [28, 31], "51": [28, 31], "float32": [28, 31, 65, 84], "cf": [28, 31], "nfc": [28, 31], "target_": [28, 29, 31], "importance_": [28, 31, 72], "estimator_": [28, 29, 31], "clasess_": [28, 31], "dynamictimewarptransform": 29, "gamma": 29, "move": [29, 57, 59, 80], "euclideantransform": 29, "knearestprototypesampl": 29, "prototype_indici": 29, "metric_transform": 29, "prototyp": 29, "nearest_index": 29, "state": [29, 43, 44, 51, 55, 76, 85], "sample_mov": 29, "sampla": 29, "knearestshapeletprototypesampl": 29, "shapeletprototypesampl": 29, "metrictransform": 29, "step_siz": [29, 31], "n_prototyp": [29, 31], "samsten": [29, 31], "isak": [29, 31], "partitions_": [29, 31], "prototypesampl": [29, 31], "prototype_indic": 29, "refin": 29, "new_counterfactu": 29, "_o": 29, "sample_shapelet": 29, "uniformprototypesampl": 29, "uniformli": [29, 53, 55, 58, 59], "weighteddynamictimewarptransform": 29, "epsilon": [30, 31, 80], "batch_siz": [30, 31], "max_path": [30, 31], "cosin": [30, 31, 80, 81], "manhattan": [30, 31, 80, 81], "degre": [30, 31], "batch": [30, 31, 60], "candid": [30, 31, 40, 41], "subsampl": [30, 31], "stdout": [30, 31], "execut": [30, 31, 60], "2018": [30, 31, 71], "via": [30, 31, 71], "irrevers": [30, 31, 71], "paths_": [30, 31], "x_true": 31, "normalized_euclidean": [31, 40, 41, 80, 81], "dimension_select": [33, 78, 93], "ensembl": [33, 71, 72, 89], "linear_model": [33, 72, 78, 85], "variable_len": [33, 64, 66, 76, 79], "n_group": [34, 36, 38, 48, 54, 55, 70], "64": [34, 36, 38, 48, 54, 55, 70, 75, 92], "fit_intercept": [34, 35, 36, 37, 38], "group": [34, 36, 38, 42, 44, 48, 54, 55, 70, 85], "sampler": [34, 38, 48, 55], "n_alpha": [34, 36, 38], "try": [34, 36, 38, 62, 70, 71, 78, 80, 84], "intercept": [34, 36, 38], "signatur": [34, 36, 38], "class_label": [34, 36, 38], "sparsescal": [34, 36, 38, 70], "disabl": [34, 36, 38, 64, 66, 72, 93], "standardscal": [34, 36, 38, 70], "dempster": [34, 38, 48, 52, 55], "schmidt": [34, 38, 48, 54, 55], "2023": [34, 38, 48, 55, 80], "hydra": [34, 38, 48, 55], "accur": [34, 38, 48, 52, 55, 83], "10000": [35, 38, 70], "gcv_mode": [35, 36, 37, 38], "shapelet_s": [36, 38, 54, 55, 58], "soft_min": [36, 38, 54, 55], "soft_max": [36, 38, 54, 55], "soft_threshold": [36, 38, 54, 55], "count": [36, 38, 54, 55, 70], "1000": [36, 38, 52, 54, 55, 58], "antoin": [36, 38, 54, 55], "guillaum": [36, 38, 54, 55], "christel": [36, 38, 54, 55], "vrain": [36, 38, 54, 55], "elloumi": [36, 38, 54, 55], "wael": [36, 38, 54, 55], "artifici": [36, 38, 54, 55], "intellig": [36, 38, 54, 55, 80], "2022": [36, 38, 54, 55], "basetransformclassifi": 37, "_estimator_typ": [37, 56, 58], "accuracy_scor": 37, "enforc": [37, 56, 58, 64, 66], "through": [37, 56, 58, 80, 84, 91], "requires_i": [37, 56, 58], "classifiermixin": 37, "left": [37, 56, 58], "hand": [37, 56, 58], "side": [37, 46, 55, 56, 58], "mro": [37, 56, 58], "myestim": [37, 56, 58], "def": [37, 47, 55, 56, 58, 71, 81], "__init__": [37, 47, 55, 56, 58], "is_fitted_": [37, 56, 58], "fill_valu": [37, 47, 55, 56, 58], "66": [37, 52, 55], "basetransformestim": 37, "basetransformregressor": 37, "regressormixin": [37, 56, 58], "transformridgecv": 37, "transformridgeclassifiercv": 37, "x_factual": [40, 41], "atol": [40, 41], "08": [40, 41], "n_timetep": [40, 41], "overlap": [40, 41, 49, 55], "counterfacut": [40, 41], "factual": [40, 41], "x_plausibl": [40, 41], "y_plausibl": [40, 41], "y_counterfactu": [40, 41], "typic": [40, 41, 72, 81], "m_sampl": [40, 41], "localoutlierfactor": [40, 41], "individu": [40, 41, 76], "plausabl": [40, 41], "incic": [40, 41], "better": [40, 41], "arxiv": [40, 41, 54, 55], "2009": [40, 41], "13211v2": [40, 41], "redund": [40, 41], "impact": [40, 41], "x_nativ": [40, 41], "y_nativ": [40, 41], "captur": [40, 41, 72], "n_nativ": [40, 41], "n_counterfactu": [40, 41], "avareg": [40, 41], "smyth": [40, 41], "b": [40, 41, 71, 81], "divers": [40, 41], "2101": [40, 41], "09056v1": [40, 41], "y_predict": [40, 41], "n_split": [42, 44], "shuffl": [42, 44, 72], "total_n_outli": [42, 44], "psudo": [42, 43, 44], "contrari": [42, 44], "fold": [42, 44], "repeatedli": [42, 44, 72, 75], "get_n_split": [42, 44], "compat": [42, 44, 45, 48, 49, 51, 52, 54, 55], "train_idx": [42, 44], "test_idx": [42, 44], "normal_class": [43, 44], "anomal": [43, 44], "train_test_split": [43, 44, 70, 71, 72], "baseattributetransform": [45, 48, 49, 51, 52, 54, 55], "engin": [45, 80], "embedding_": [45, 48, 52, 54, 55], "embed": [45, 48, 49, 51, 52, 54, 55, 85], "underli": [45, 48, 52, 54, 55], "n_dimens": [45, 48, 49, 51, 52, 54, 55, 64, 66], "stride": [46, 55], "implicit": [46, 55], "floor": [46, 55], "deleg": [47, 55, 63, 64, 66], "get_feature_names_out": [47, 55], "automat": [47, 55, 91], "wrap": [47, 55, 62], "onetoonefeaturemixin": [47, 55], "classnameprefixfeaturesoutmixin": [47, 55], "help": [47, 55, 71], "transformermixin": [47, 55], "mytransform": [47, 55], "descret": [48, 55], "make_pipelin": [48, 55, 70, 72, 78], "make_union": [48, 55], "dempster_hydra": [48, 55], "catch22": [49, 55], "_summar": [49, 55], "x_t": [49, 55], "19633603e": [49, 55], "51047206e": [49, 55], "90000000e": [49, 55], "80000000e": [49, 55], "48441896e": [49, 55], "73293560e": [49, 55], "21476510e": [49, 55], "70000000e": [49, 55], "00000000e": [49, 55], "70502518e": [49, 55], "60000000e": [49, 55], "42857143e": [49, 55], "26666667e": [49, 55], "89974643e": [49, 55], "31570726e": [49, 55], "50000000e": [49, 55], "90873852e": [49, 55], "47311800e": [49, 55], "intervalmixin": 49, "It": [49, 71, 72, 84, 90], "_get_gener": [49, 52], "mean_var_slop": [49, 55, 58, 59], "possibli": [49, 55], "slope": [49, 55], "releas": [49, 55], "lock": [49, 55], "gil": [49, 55], "As": [49, 55, 70, 72, 75, 77, 80, 81], "suit": [49, 55, 63, 81], "futur": [49, 55, 75, 93], "downstream": [49, 55], "project": [49, 55, 92], "cython": [49, 55, 81], "lubba": [49, 55], "carl": [49, 55], "h": [49, 55], "sarab": [49, 55], "sethi": [49, 55], "philip": [49, 55], "knaut": [49, 55], "simon": [49, 55], "schultz": [49, 55], "ben": [49, 55], "fulcher": [49, 55], "nick": [49, 55], "jone": [49, 55], "canon": [49, 55], "characterist": [49, 55], "33": [49, 55], "1821": [49, 55], "1852": [49, 55], "15": [49, 55], "timepoint": [49, 55], "std": [49, 55, 80], "12": [49, 55, 81], "matrixprofil": [50, 55], "pivotmixin": 51, "rocketmixin": 52, "angu": [52, 55], "exception": [52, 55], "34": [52, 55, 70, 72, 81], "1454": [52, 55], "1495": [52, 55], "51333333": [52, 55], "11526939": [52, 55], "47333333": [52, 55], "04712544": [52, 55], "24": [52, 55], "82912261": [52, 55], "52666667": [52, 55], "26611524": [52, 55], "54": [52, 55, 81], "98047216": [52, 55], "81260641": [52, 55], "54666667": [52, 55], "71210092": [52, 55], "35333333": [52, 55], "28841158": [52, 55], "25333333": [52, 55], "82203705": [52, 55], "72938203": [52, 55], "45333333": [52, 55], "53756324": [52, 55], "24666667": [52, 55], "8380654": [52, 55], "68666667": [52, 55], "80533684": [52, 55], "26": [52, 55, 76], "41709413": [52, 55], "65634235": [52, 55], "94724793": [52, 55], "32666667": [52, 55], "85575661": [52, 55], "67630249": [52, 55], "piecewic": 53, "get_threshold": 53, "normalbin": 53, "assum": [53, 55, 65, 71, 74, 76, 77, 79], "uniformbin": 53, "ignore_i": [54, 55], "three": [54, 55, 71, 78, 80, 81], "wistuba": [54, 55], "martin": [54, 55], "josif": [54, 55], "grabocka": [54, 55], "lar": [54, 55], "thiem": [54, 55], "ultra": [54, 55], "preprint": [54, 55], "1503": [54, 55], "05018": [54, 55], "load_gunpoint": [54, 55], "erp": [54, 55, 80, 81], "min_g": [54, 55], "max_g": [54, 55], "shapeletmixin": 54, "estiom": 54, "basetre": 56, "check_input": [56, 57, 58, 59], "bypass": [56, 57, 58, 59], "sure": [56, 57, 58, 59, 64, 66], "up": [56, 57, 58, 59, 91], "node_count": [56, 57, 58, 59], "tree_": [56, 57, 58, 59], "equvival": [56, 57, 58, 59], "decision_path": [56, 57, 58, 59], "n_node": [56, 57, 58, 59], "nonzero": [56, 57, 58, 59], "travers": [56, 57, 58, 59, 71], "basetreeclassifi": 56, "child": [56, 57, 58, 59], "net": [56, 57, 58, 59], "carri": [56, 57, 58, 59], "don": [56, 57, 58, 59, 91], "know": [56, 57, 58, 59], "what": [56, 57, 58, 59, 89, 90], "basetreeregressor": 56, "msm": [57, 59, 80, 81, 84], "min_c": [57, 59, 80, 84], "max_c": [57, 59, 80, 84], "num_c": [57, 59], "20": [57, 59, 81], "basefeaturetreeclassifi": 58, "basefeaturetreeregressor": 58, "dilatedshapelettreeclassifi": 58, "scaled_dtw": [58, 59, 80, 81], "structur": [58, 59], "n_classes_": [58, 59], "run_in_parallel": 60, "parallel_arg": 60, "assert_exhaustive_parameter_check": 61, "assert": 61, "ok": 61, "assert_parameter_check": 61, "skip": [61, 63], "extend": 61, "array_or_scalar": 62, "optional_f": 62, "item": 62, "singleton": 62, "recursivlei": 62, "unwrap": 62, "Such": 62, "unstabl": 62, "stabil": 62, "beta": 62, "unsat": 62, "check_estim": 63, "generate_onli": 63, "skip_scikit": 63, "adher": 63, "monkei": 63, "patch": 63, "relat": [63, 80], "silent": 63, "tailor": 63, "copi": [64, 66, 81], "ensure_2d": [64, 66], "ensure_ts_arrai": [64, 66], "allow_3d": [64, 66], "allow_nd": [64, 66], "force_all_finit": [64, 66], "multi_output": [64, 66], "ensure_min_sampl": [64, 66], "ensure_min_timestep": [64, 66], "ensure_min_dim": [64, 66], "allow_eo": [64, 66], "y_numer": [64, 66], "y_contigu": [64, 66], "2d": [64, 66, 72, 79, 81], "3d": [64, 66, 72, 79, 81], "finit": [64, 66], "varial": [64, 66], "report": [64, 66, 81], "ravel_1d": [64, 66], "input_nam": [64, 66], "convert": [64, 65, 66, 75, 89], "empti": [64, 66], "attempt": [64, 66], "failur": [64, 66], "convers": [64, 66], "fortran": [64, 66], "style": [64, 66], "noth": [64, 66], "layout": [64, 66], "kept": [64, 66], "trigger": [64, 66], "might": [64, 66, 71], "ravel": [64, 66], "neither": [64, 66], "eo": [64, 66, 67, 74, 76, 79], "nan": [64, 66, 74, 79], "pd": [64, 66], "na": [64, 66], "cannot": [64, 66], "infinit": [64, 66], "row": [64, 66, 79], "reject": [64, 66], "midpointnorm": 65, "vmin": 65, "vmax": 65, "midpoint": 65, "normalis": 65, "autoscal": 65, "autoscale_non": 65, "static": 65, "process_valu": 65, "homogen": 65, "effici": [65, 90, 93], "is_scalar": 65, "byte": 65, "float64": 65, "place": 65, "oper": [65, 72, 75, 76, 77, 91, 92], "greatli": 65, "improv": [65, 75, 93], "speed": 65, "plot_frequency_domain": 65, "jitter": 65, "sample_spac": 65, "cmap": 65, "dark2": 65, "freqenc": 65, "matplotlib": [65, 76], "colormap": 65, "plot_time_domain": 65, "linewidth": 65, "zorder": 65, "show_legend": 65, "opac": 65, "width": 65, "color": 65, "legend": 65, "metricopt": 66, "mark": 66, "is_satisfied_bi": 66, "val": 66, "is_satisfi": 66, "subsequencemetricopt": 66, "check_classification_target": 66, "valueerror": 66, "check_opt": 66, "option_valu": 66, "check_typ": 66, "target_typ": 66, "variabl": [67, 79, 92], "get_variable_length": 67, "lenght": 67, "is_end_of_seri": [67, 74, 76, 79], "is_variable_length": 67, "wildboar": [70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 84, 86, 89, 90, 92, 93], "dempsar": 70, "emploi": [70, 71], "sligtli": 70, "manner": 70, "activ": [70, 91], "record": [70, 71], "exponenti": 70, "Then": [70, 72], "had": 70, "purpos": [70, 71, 72, 81], "motestrain": 70, "954": 70, "84": [70, 71], "Of": [70, 71], "510": 70, "444": 70, "here": [70, 71, 77, 91], "wherein": 70, "dictat": 70, "stage": 70, "applic": [70, 71, 76], "scaler": 70, "compens": 70, "sparsiti": 70, "induc": 70, "exhibit": 70, "achiev": [70, 72], "ultim": 70, "ridg": [70, 85], "x27": [70, 71, 78, 80, 84], "jupyt": [70, 71, 78, 80, 84], "environ": [70, 71, 78, 80, 84, 91, 92], "rerun": [70, 71, 78, 80, 84], "cell": [70, 71, 78, 80, 84], "html": [70, 71, 78, 80, 84], "trust": [70, 71, 72, 78, 80, 84], "notebook": [70, 71, 78, 80, 84], "On": [70, 71, 78, 80, 84], "github": [70, 71, 78, 80, 84, 92], "unabl": [70, 71, 78, 80, 84], "render": [70, 71, 78, 80, 84], "page": [70, 71, 78, 80, 84], "nbviewer": [70, 71, 78, 80, 84], "org": [70, 71, 77, 78, 80, 84], "nbsp": [70, 71, 78, 80, 84], "document": [70, 71, 72, 78, 80, 84, 91, 93], "pipelineifittedpipelin": [70, 78], "hydratransformhydratransform": 70, "sparsescalersparsescal": 70, "inspect": [70, 81], "x_test_transform": 70, "53921955": 70, "39192971": 70, "60035454": 70, "36929508": 70, "5286341": 70, "08999765": 70, "4096": 70, "princip": 70, "analysi": [70, 80], "pca": 70, "account": 70, "04": 70, "17": [70, 93], "enabl": [70, 93], "process": [70, 92], "furthermor": 70, "offer": [70, 75], "rockettransformrockettransform": 70, "standardscalerstandardscal": 70, "48997254": 70, "59756611": 70, "39066057": 70, "64889163": 70, "67770114": 70, "54507442": 70, "contrast": [70, 71, 76], "whose": 70, "46": 70, "18": 70, "39": 70, "could": [71, 76], "led": 71, "altern": [71, 77, 92], "outcom": 71, "essenti": [71, 72, 92], "need": [71, 80, 81, 92, 93], "alter": 71, "certain": 71, "flip": 71, "These": [71, 80], "understand": 71, "highlight": 71, "critic": 71, "natur": 71, "facilit": 71, "delin": 71, "arithmet": 71, "incorpor": 71, "although": 71, "former": 71, "minkowski": [71, 80, 81], "electrocardiogram": 71, "ecg": 71, "signal": 71, "task": [71, 72, 81, 84, 85, 89], "goal": [71, 72, 83], "distinguish": [71, 80], "heartbeat": 71, "particular": [71, 72, 81], "abnorm": 71, "cardiac": 71, "heart": 71, "96": 71, "next": 71, "five": 71, "nn": 71, "kneighborsclassifierifittedkneighborsclassifi": 71, "compris": 71, "primari": [71, 89], "interact": 71, "desired_label": 71, "modifi": 71, "vice": [71, 72], "versa": [71, 72], "find_counterfactu": 71, "y_desir": 71, "empty_lik": 71, "x_cf": 71, "cf_pred": 71, "7757554": 71, "04521294": 71, "12209986": 71, "41066892": 71, "51301643": 71, "13364922": 71, "4545415": 71, "8152728": 71, "36613719": 71, "59799892": 71, "6364614": 71, "66240546": 71, "37925246": 71, "4975822": 71, "87851584": 71, "5716536": 71, "05212617": 71, "33645889": 71, "now": [71, 93], "36": 71, "alongsid": 71, "One": [71, 72, 75, 76], "propos": [71, 93], "rsf": 71, "shapeletforestclassifierifittedshapeletforestclassifi": [71, 84], "previous": [71, 72, 75, 83, 93], "met": 71, "64275557": 71, "96522188": 71, "90476179": 71, "09269015": 71, "12069088": 71, "34982908": 71, "5807386": 71, "09711063": 71, "74405634": 71, "28666866": 71, "32964692": 71, "14763103": 71, "5347352": 71, "15122819": 71, "66537309": 71, "31634668": 71, "43290016": 71, "38359833": 71, "29476759": 71, "86093158": 71, "41918778": 71, "16256033": 71, "0061831": 71, "56791544": 71, "66077834": 71, "7870391": 71, "20106232": 71, "18811169": 71, "37941185": 71, "32272574": 71, "74926655": 71, "33281894": 71, "20372777": 71, "41850936": 71, "25302505": 71, "48742855": 71, "novemb": 71, "207": 71, "216": 71, "problem": [72, 80, 89], "involv": [72, 81], "forecast": 72, "unfamiliar": 72, "framework": 72, "focu": [72, 89], "chronolog": 72, "logic": 72, "solv": 72, "python": [72, 75, 77, 80, 81, 90, 91, 92, 93], "concern": 72, "categori": [72, 80], "supervis": 72, "nomin": 72, "unlabel": 72, "acquir": 72, "commun": 72, "access": [72, 91], "robust": [72, 80], "often": [72, 78, 85], "opt": 72, "prefer": 72, "irrespect": 72, "floodmodeling1": 72, "uea": 72, "extrins": 72, "snippet": [72, 76], "tsereg": 72, "interfac": [72, 77], "unseen": [72, 83], "simplifi": [72, 76], "experiment": 72, "clone": [72, 92], "screen": 72, "despit": 72, "even": 72, "tabluar_x": 72, "design": 72, "interoper": 72, "logisticregress": 72, "bad": 72, "practic": 72, "proper": 72, "hold": [72, 80], "respons": 72, "break": 72, "continu": [72, 81], "reevalu": 72, "relianc": 72, "visual": [72, 92], "31": [72, 80], "disk": [72, 77], "pickl": 72, "repr": 72, "dump": 72, "earlier": 72, "clf_": 72, "older": 72, "newer": 72, "secur": 72, "unpickl": 72, "wherea": [74, 84], "context": 74, "multivaret": 74, "howev": [74, 75, 77, 81], "unequ": [74, 76, 80], "ieee754": 74, "treat": [74, 93], "isnan": [74, 79], "wb": 74, "t1": 74, "t2": 74, "t3": 74, "vstack": 74, "pip": [75, 89, 91, 92], "conda": 75, "advanc": 75, "entri": 75, "hope": 75, "drawback": 75, "asset": 75, "demand": [75, 77], "small": [75, 89, 93], "experi": 75, "brows": 75, "688": 75, "43": 75, "kb": 75, "668": 75, "bit": [75, 92], "conform": 75, "common": [75, 76, 79, 80, 91], "workflow": [75, 81], "comparis": 75, "explanatori": 75, "n_label": 75, "greater": [75, 78], "chain": 75, "large_multivari": 75, "large_multiclass": 75, "0x7f262ce95d00": 75, "predefin": 76, "our": 76, "enumer": [76, 91], "rewritten": 76, "crude": 76, "wai": 76, "deal": 76, "longer": 76, "accomplish": [76, 81], "argmax": 76, "pyplot": 76, "plt": 76, "iseo": 76, "fig": 76, "subplot": 76, "nrow": 76, "scatter": 76, "arang": 76, "marker": 76, "set_ylabel": 76, "spokenarabicdigit": 76, "ucrmt": 76, "figur": 76, "loss": 76, "togeth": 77, "compos": 77, "written": 77, "letter": 77, "regular": 77, "alphanumer": 77, "charact": 77, "za": 77, "z0": 77, "z": [77, 80], "exemplifi": 77, "hard": 77, "endpoint": 77, "http": [77, 92], "www": 77, "repo": 77, "addition": 77, "offlin": 77, "localappdata": 77, "gnu": [77, 91, 92], "linux": [77, 91, 92], "xdg_cache_hom": 77, "unset": 77, "maco": [77, 91, 92], "librarycach": 77, "fallback": 77, "session": 77, "func": [77, 81], "bundle_url": 77, "example1": 77, "remot": 77, "sha": 77, "sha1": 77, "hash": 77, "npy": 77, "npz": 77, "save": 77, "savez": 77, "dataset_nam": 77, "_train": 77, "_test": 77, "That": 77, "inspir": 78, "distancevariancethresholdifitteddistancevariancethreshold": 78, "third": [78, 81], "And": 78, "remain": 78, "sequentialdimensionselectorifittedsequentialdimensionselector": 78, "kneighborsclassifierkneighborsclassifi": 78, "rocketclassifierifittedrocketclassifi": 78, "92": 78, "sequentialdimensionselectorsequentialdimensionselector": 78, "rocketclassifierrocketclassifi": 78, "98": 78, "embrac": 79, "asarrai": 79, "produc": [79, 83], "rank": 79, "arr": 79, "shorter": [79, 80], "loos": 80, "obei": 80, "inequ": 80, "distinct": 80, "gt": 80, "ne": 80, "symmetr": 80, "sai": 80, "triangl": [80, 81], "lt": 80, "shortcut": 80, "lp": 80, "shift": 80, "min_": 80, "notat": 80, "_elastic_": 80, "eleasticensembl": 80, "parameter_nam": 80, "max_": 80, "num_": 80, "inclus": 80, "instanti": 80, "proximitytreeclassifierinot": 80, "fittedproximitytreeclassifi": 80, "slide": 80, "moreov": 80, "comment": 80, "undefin": 80, "chebyshev": [80, 81], "angular": [80, 81], "phase": 80, "wddtw": [80, 81], "longest": 80, "lcss": [80, 81], "edit": [80, 92], "edr": [80, 81], "twe": [80, 81], "edit_penalti": 80, "stiff": [80, 81], "lambda": 80, "nu": 80, "amerc": 80, "matthieu": 80, "herrmann": 80, "intuit": 80, "volum": 80, "137": 80, "hirschberg": 80, "1977": 80, "journal": 80, "jacm": 80, "chen": 80, "l": 80, "ng": 80, "2004": 80, "marriag": 80, "thirtieth": 80, "\u00f6zsu": 80, "oria": 80, "2005": 80, "trajectori": 80, "manag": 80, "stefan": 80, "athitso": 80, "transact": 80, "1425": 80, "1438": 80, "marteau": 80, "2008": 80, "adjust": 80, "306": 80, "318": 80, "_euclidean": 81, "51158857": 81, "11514381": 81, "35905618": 81, "mirror": 81, "imag": 81, "halv": 81, "advis": [81, 84], "tri": 81, "smart": 81, "85497117": 81, "96086309": 81, "18777928": 81, "00606825": 81, "23060212": 81, "27419835": 81, "64445581": 81, "38965963": 81, "79102936": 81, "59756098": 81, "47560976": 81, "64634146": 81, "08536585": 81, "03658537": 81, "13414634": 81, "09756098": 81, "25609756": 81, "12195122": 81, "76": 81, "20881199": 81, "73": 81, "62554784": 81, "88": 81, "5536877": 81, "27": 81, "49142159": 81, "56024904": 81, "24551102": 81, "45513015": 81, "81": 81, "60658533": 81, "06099416": 81, "multitud": 81, "48683192": 81, "60301954": 81, "34083722": 81, "35954558": 81, "sometim": 81, "_pairs_": 81, "50816474": 81, "3299048": 81, "55193242": 81, "interdimension": 81, "50507001": 81, "90920635": 81, "27646127": 81, "60041068": 81, "60786006": 81, "75645164": 81, "26677146": 81, "24823344": 81, "similarli": 81, "interest": 81, "slice": 81, "want": [81, 92], "avoid": [81, 91], "unwant": 81, "limits_": 81, "queri": 81, "le": 81, "counterpart": 81, "_threshold_": 81, "jag": 81, "66371456": 81, "11914265": 81, "13076667": 81, "99043671": 81, "73408875": 81, "84227457": 81, "2028058": 81, "85972633": 81, "85367621": 81, "86957415": 81, "64041732": 81, "33156061": 81, "56698045": 81, "99489626": 81, "6790517": 81, "16754772": 81, "10973127": 81, "50583639": 81, "pairwise_sd_ful": 81, "stack": 81, "21688671": 81, "83210644": 81, "50884094": 81, "18507116": 81, "11177626": 81, "15611733": 81, "21780536": 81, "13350353": 81, "09710811": 81, "75114125": 81, "13489775": 81, "09806374": 81, "idx": 81, "28": 81, "investig": 81, "cpu": 81, "theoret": 81, "complex": [81, 84], "magnitud": 81, "97686": 81, "87686": 81, "98368": 81, "98282": 81, "11131": 81, "98268": 81, "95506": 81, "14157": 81, "96041": 81, "94631": 81, "83231": 81, "92207": 81, "55527": 81, "73285": 81, "55538": 81, "41892": 81, "40887": 81, "42778": 81, "00061": 81, "00104": 81, "00064": 81, "wlcss": 81, "00054": 81, "00091": 81, "00056": 81, "00030": 81, "00052": 81, "00032": 81, "00028": 81, "00048": 81, "00029": 81, "00021": 81, "00035": 81, "00022": 81, "00019": 81, "82372": 81, "49048": 81, "79202": 81, "66394": 81, "75967": 81, "67113": 81, "56287": 81, "61275": 81, "56196": 81, "text": 81, "49453": 81, "59627": 81, "49988": 81, "42765": 81, "58025": 81, "43553": 81, "42761": 81, "58982": 81, "43474": 81, "21051": 81, "33659": 81, "21757": 81, "06851": 81, "10321": 81, "07092": 81, "00216": 81, "00413": 81, "00226": 81, "00146": 81, "00278": 81, "00153": 81, "00102": 81, "00195": 81, "00107": 81, "00194": 81, "00106": 81, "00099": 81, "00190": 81, "00189": 81, "00103": 81, "00097": 81, "00185": 81, "00101": 81, "00096": 81, "00182": 81, "00100": 81, "00095": 81, "00181": 81, "00071": 81, "00136": 81, "00074": 81, "rakthanmanon": 81, "campana": 81, "mueen": 81, "batista": 81, "westov": 81, "zhu": 81, "q": 81, "zakaria": 81, "2012": 81, "august": 81, "trillion": 81, "under": [81, 92], "18th": 81, "262": 81, "270": 81, "varieti": 84, "excel": 84, "baselin": [84, 93], "alloc": 84, "highli": 84, "proximityforestclassifierifittedproximityforestclassifi": 84, "paper": 84, "9666666666666667": 84, "8533333333333334": 84, "9733333333333334": 84, "elasticensembleclassifierifittedelasticensembleclassifi": 84, "superset": 84, "art": 85, "emmott_label": 89, "oppos": 89, "perhap": 89, "minority_label": 89, "majority_label": 89, "sophist": 89, "randomforestclassifi": 89, "four": [89, 93], "75": 89, "quantil": 89, "familiar": 90, "introduct": 90, "concept": 90, "There": 91, "offici": 91, "pypi": 91, "compil": [91, 92], "fastest": 91, "platform": 91, "built": 91, "write": 91, "conflict": 91, "strongli": 91, "virtual": [91, 92], "venv": 91, "python3": [91, 92], "folder": 91, "ceavet": 91, "outsid": 91, "scope": 91, "issu": 91, "debian": [91, 92], "apt": [91, 92], "homebrew": 91, "brew": 91, "anaconda": 91, "miniconda": 91, "pull": 92, "git": 92, "com": 92, "isaksamsten": 92, "tool": 92, "studio": 92, "command": 92, "cmd": 92, "consol": 92, "distutils_use_sdk": 92, "program": 92, "x86": 92, "microsoft": 92, "buildtool": 92, "vc": 92, "auxiliari": 92, "vcvarsal": 92, "bat": 92, "x64": 92, "xcode": 92, "ubuntu": 92, "dev": 92, "txt": 92, "mode": 92, "eas": 92, "wildboar_build": 92, "architectur": 92, "enhanc": 93, "someth": 93, "couldn": 93, "miscellan": 93, "didn": 93, "scipi": 93, "mult": 93, "hyper": 93}, "objects": {"": [[33, 0, 0, "-", "wildboar"]], "wildboar": [[3, 0, 0, "-", "annotate"], [4, 0, 0, "-", "base"], [7, 0, 0, "-", "datasets"], [14, 0, 0, "-", "dimension_selection"], [21, 0, 0, "-", "distance"], [24, 0, 0, "-", "ensemble"], [32, 0, 0, "-", "explain"], [38, 0, 0, "-", "linear_model"], [41, 0, 0, "-", "metrics"], [44, 0, 0, "-", "model_selection"], [55, 0, 0, "-", "transform"], [59, 0, 0, "-", "tree"], [64, 0, 0, "-", "utils"], [68, 0, 0, "-", "version"]], "wildboar.annotate": [[1, 0, 0, "-", "_motifs"], [2, 0, 0, "-", "_segment"], [3, 1, 1, "", "motifs"], [3, 1, 1, "", "segment"]], "wildboar.annotate._motifs": [[1, 1, 1, "", "motifs"]], "wildboar.annotate._segment": [[2, 1, 1, "", "segment"]], "wildboar.base": [[4, 2, 1, "", "BaseEstimator"], [4, 2, 1, "", "CounterfactualMixin"], [4, 2, 1, "", "ExplainerMixin"], [4, 1, 1, "", "is_counterfactual"], [4, 1, 1, "", "is_explainer"]], "wildboar.base.BaseEstimator": [[4, 3, 1, "", "get_metadata_routing"], [4, 3, 1, "", "get_params"], [4, 3, 1, "", "set_params"]], "wildboar.base.CounterfactualMixin": [[4, 3, 1, "", "score"]], "wildboar.base.ExplainerMixin": [[4, 3, 1, "", "fit_explain"], [4, 3, 1, "", "plot"]], "wildboar.datasets": [[7, 2, 1, "", "Bundle"], [7, 2, 1, "", "JSONRepository"], [7, 2, 1, "", "NpBundle"], [7, 2, 1, "", "Repository"], [5, 0, 0, "-", "_filter"], [6, 0, 0, "-", "_repository"], [7, 1, 1, "", "clear_cache"], [7, 1, 1, "", "get_bundles"], [7, 1, 1, "", "get_repository"], [7, 1, 1, "", "install_repository"], [7, 1, 1, "", "list_bundles"], [7, 1, 1, "", "list_collections"], [7, 1, 1, "", "list_datasets"], [7, 1, 1, "", "list_repositories"], [7, 1, 1, "", "load_articulary_word_recognition"], [7, 1, 1, "", "load_basic_motions"], [7, 1, 1, "", "load_dataset"], [7, 1, 1, "", "load_datasets"], [7, 1, 1, "", "load_ering"], [7, 1, 1, "", "load_gun_point"], [7, 1, 1, "", "load_synthetic_control"], [7, 1, 1, "", "load_two_lead_ecg"], [8, 0, 0, "-", "outlier"], [9, 0, 0, "-", "preprocess"], [7, 1, 1, "", "refresh_repositories"], [7, 1, 1, "", "set_cache_dir"]], "wildboar.datasets.Bundle": [[7, 3, 1, "", "get_collection"], [7, 3, 1, "", "get_filename"], [7, 3, 1, "", "list"], [7, 3, 1, "", "load"]], "wildboar.datasets.JSONRepository": [[7, 4, 1, "", "download_url"], [7, 3, 1, "", "get_bundle"], [7, 3, 1, "", "get_bundles"], [7, 4, 1, "", "name"], [7, 3, 1, "", "refresh"], [7, 4, 1, "", "version"], [7, 4, 1, "", "wildboar_requires"]], "wildboar.datasets.NpBundle": [[7, 3, 1, "", "get_collection"], [7, 3, 1, "", "get_filename"], [7, 3, 1, "", "list"], [7, 3, 1, "", "load"]], "wildboar.datasets.Repository": [[7, 4, 1, "", "download_url"], [7, 3, 1, "", "get_bundle"], [7, 3, 1, "", "get_bundles"], [7, 4, 1, "", "name"], [7, 3, 1, "", "refresh"], [7, 4, 1, "", "version"], [7, 4, 1, "", "wildboar_requires"]], "wildboar.datasets._filter": [[5, 1, 1, "", "make_dict_filter"], [5, 1, 1, "", "make_filter"], [5, 1, 1, "", "make_list_filter"], [5, 1, 1, "", "make_str_filter"]], "wildboar.datasets._repository": [[6, 2, 1, "", "Bundle"], [6, 2, 1, "", "JSONRepository"], [6, 2, 1, "", "NpBundle"], [6, 2, 1, "", "Repository"]], "wildboar.datasets._repository.Bundle": [[6, 3, 1, "", "get_collection"], [6, 3, 1, "", "get_filename"], [6, 3, 1, "", "list"], [6, 3, 1, "", "load"]], "wildboar.datasets._repository.JSONRepository": [[6, 4, 1, "", "download_url"], [6, 3, 1, "", "get_bundle"], [6, 3, 1, "", "get_bundles"], [6, 4, 1, "", "name"], [6, 3, 1, "", "refresh"], [6, 4, 1, "", "version"], [6, 4, 1, "", "wildboar_requires"]], "wildboar.datasets._repository.NpBundle": [[6, 3, 1, "", "get_collection"], [6, 3, 1, "", "get_filename"], [6, 3, 1, "", "list"], [6, 3, 1, "", "load"]], "wildboar.datasets._repository.Repository": [[6, 4, 1, "", "download_url"], [6, 3, 1, "", "get_bundle"], [6, 3, 1, "", "get_bundles"], [6, 4, 1, "", "name"], [6, 3, 1, "", "refresh"], [6, 4, 1, "", "version"], [6, 4, 1, "", "wildboar_requires"]], "wildboar.datasets.outlier": [[8, 1, 1, "", "density_outliers"], [8, 1, 1, "", "emmott_outliers"], [8, 1, 1, "", "kmeans_outliers"], [8, 1, 1, "", "majority_outliers"], [8, 1, 1, "", "minority_outliers"]], "wildboar.datasets.preprocess": [[9, 1, 1, "", "maxabs_scale"], [9, 1, 1, "", "minmax_scale"], [9, 1, 1, "", "named_preprocess"], [9, 1, 1, "", "standardize"], [9, 1, 1, "", "truncate"]], "wildboar.dimension_selection": [[14, 2, 1, "", "DistanceVarianceThreshold"], [14, 2, 1, "", "SelectDimensionPercentile"], [14, 2, 1, "", "SelectDimensionSignificance"], [14, 2, 1, "", "SelectDimensionTopK"], [14, 2, 1, "", "SequentialDimensionSelector"], [10, 0, 0, "-", "_base"], [11, 0, 0, "-", "_distance"], [12, 0, 0, "-", "_sequential"], [13, 0, 0, "-", "_variance"]], "wildboar.dimension_selection.DistanceVarianceThreshold": [[14, 3, 1, "", "fit"], [14, 3, 1, "", "fit_transform"], [14, 3, 1, "", "get_dimensions"], [14, 3, 1, "", "get_metadata_routing"], [14, 3, 1, "", "get_params"], [14, 3, 1, "", "inverse_transform"], [14, 3, 1, "", "set_output"], [14, 3, 1, "", "set_params"], [14, 3, 1, "", "transform"]], "wildboar.dimension_selection.SelectDimensionPercentile": [[14, 3, 1, "", "fit"], [14, 3, 1, "", "fit_transform"], [14, 3, 1, "", "get_dimensions"], [14, 3, 1, "", "get_metadata_routing"], [14, 3, 1, "", "get_params"], [14, 3, 1, "", "inverse_transform"], [14, 3, 1, "", "set_output"], [14, 3, 1, "", "set_params"], [14, 3, 1, "", "transform"]], "wildboar.dimension_selection.SelectDimensionSignificance": [[14, 3, 1, "", "fit"], [14, 3, 1, "", "fit_transform"], [14, 3, 1, "", "get_dimensions"], [14, 3, 1, "", "get_metadata_routing"], [14, 3, 1, "", "get_params"], [14, 3, 1, "", "inverse_transform"], [14, 3, 1, "", "set_output"], [14, 3, 1, "", "set_params"], [14, 3, 1, "", "transform"]], "wildboar.dimension_selection.SelectDimensionTopK": [[14, 3, 1, "", "fit"], [14, 3, 1, "", "fit_transform"], [14, 3, 1, "", "get_dimensions"], [14, 3, 1, "", "get_metadata_routing"], [14, 3, 1, "", "get_params"], [14, 3, 1, "", "inverse_transform"], [14, 3, 1, "", "set_output"], [14, 3, 1, "", "set_params"], [14, 3, 1, "", "transform"]], "wildboar.dimension_selection.SequentialDimensionSelector": [[14, 3, 1, "", "fit"], [14, 3, 1, "", "fit_transform"], [14, 3, 1, "", "get_dimensions"], [14, 3, 1, "", "get_metadata_routing"], [14, 3, 1, "", "get_params"], [14, 3, 1, "", "inverse_transform"], [14, 3, 1, "", "set_output"], [14, 3, 1, "", "set_params"], [14, 3, 1, "", "transform"]], "wildboar.dimension_selection._base": [[10, 2, 1, "", "BaseDistanceSelector"], [10, 2, 1, "", "DimensionSelectorMixin"]], "wildboar.dimension_selection._base.BaseDistanceSelector": [[10, 3, 1, "", "fit"], [10, 3, 1, "", "fit_transform"], [10, 3, 1, "", "get_dimensions"], [10, 3, 1, "", "get_metadata_routing"], [10, 3, 1, "", "get_params"], [10, 3, 1, "", "inverse_transform"], [10, 3, 1, "", "set_output"], [10, 3, 1, "", "set_params"], [10, 3, 1, "", "transform"]], "wildboar.dimension_selection._base.DimensionSelectorMixin": [[10, 3, 1, "", "fit_transform"], [10, 3, 1, "", "get_dimensions"], [10, 3, 1, "", "inverse_transform"], [10, 3, 1, "", "set_output"], [10, 3, 1, "", "transform"]], "wildboar.dimension_selection._distance": [[11, 2, 1, "", "SelectDimensionPercentile"], [11, 2, 1, "", "SelectDimensionSignificance"], [11, 2, 1, "", "SelectDimensionTopK"]], "wildboar.dimension_selection._distance.SelectDimensionPercentile": [[11, 3, 1, "", "fit"], [11, 3, 1, "", "fit_transform"], [11, 3, 1, "", "get_dimensions"], [11, 3, 1, "", "get_metadata_routing"], [11, 3, 1, "", "get_params"], [11, 3, 1, "", "inverse_transform"], [11, 3, 1, "", "set_output"], [11, 3, 1, "", "set_params"], [11, 3, 1, "", "transform"]], "wildboar.dimension_selection._distance.SelectDimensionSignificance": [[11, 3, 1, "", "fit"], [11, 3, 1, "", "fit_transform"], [11, 3, 1, "", "get_dimensions"], [11, 3, 1, "", "get_metadata_routing"], [11, 3, 1, "", "get_params"], [11, 3, 1, "", "inverse_transform"], [11, 3, 1, "", "set_output"], [11, 3, 1, "", "set_params"], [11, 3, 1, "", "transform"]], "wildboar.dimension_selection._distance.SelectDimensionTopK": [[11, 3, 1, "", "fit"], [11, 3, 1, "", "fit_transform"], [11, 3, 1, "", "get_dimensions"], [11, 3, 1, "", "get_metadata_routing"], [11, 3, 1, "", "get_params"], [11, 3, 1, "", "inverse_transform"], [11, 3, 1, "", "set_output"], [11, 3, 1, "", "set_params"], [11, 3, 1, "", "transform"]], "wildboar.dimension_selection._sequential": [[12, 2, 1, "", "SequentialDimensionSelector"]], "wildboar.dimension_selection._sequential.SequentialDimensionSelector": [[12, 3, 1, "", "fit"], [12, 3, 1, "", "fit_transform"], [12, 3, 1, "", "get_dimensions"], [12, 3, 1, "", "get_metadata_routing"], [12, 3, 1, "", "get_params"], [12, 3, 1, "", "inverse_transform"], [12, 3, 1, "", "set_output"], [12, 3, 1, "", "set_params"], [12, 3, 1, "", "transform"]], "wildboar.dimension_selection._variance": [[13, 2, 1, "", "DistanceVarianceThreshold"]], "wildboar.dimension_selection._variance.DistanceVarianceThreshold": [[13, 3, 1, "", "fit"], [13, 3, 1, "", "fit_transform"], [13, 3, 1, "", "get_dimensions"], [13, 3, 1, "", "get_metadata_routing"], [13, 3, 1, "", "get_params"], [13, 3, 1, "", "inverse_transform"], [13, 3, 1, "", "set_output"], [13, 3, 1, "", "set_params"], [13, 3, 1, "", "transform"]], "wildboar.distance": [[21, 2, 1, "", "KMeans"], [21, 2, 1, "", "KMedoids"], [21, 2, 1, "", "KNeighborsClassifier"], [21, 2, 1, "", "MDS"], [15, 0, 0, "-", "_distance"], [16, 0, 0, "-", "_manifold"], [17, 0, 0, "-", "_matrix_profile"], [18, 0, 0, "-", "_multi_metric"], [19, 0, 0, "-", "_neighbors"], [21, 1, 1, "", "argmin_distance"], [21, 1, 1, "", "argmin_subsequence_distance"], [21, 1, 1, "", "distance_profile"], [20, 0, 0, "-", "dtw"], [21, 1, 1, "", "matrix_profile"], [21, 1, 1, "", "paired_distance"], [21, 1, 1, "", "paired_subsequence_distance"], [21, 1, 1, "", "paired_subsequence_match"], [21, 1, 1, "", "pairwise_distance"], [21, 1, 1, "", "pairwise_subsequence_distance"], [21, 1, 1, "", "subsequence_match"]], "wildboar.distance.KMeans": [[21, 3, 1, "", "fit"], [21, 3, 1, "", "fit_predict"], [21, 3, 1, "", "fit_transform"], [21, 3, 1, "", "get_metadata_routing"], [21, 3, 1, "", "get_params"], [21, 3, 1, "", "predict"], [21, 3, 1, "", "set_output"], [21, 3, 1, "", "set_params"], [21, 3, 1, "", "transform"]], "wildboar.distance.KMedoids": [[21, 3, 1, "", "fit"], [21, 3, 1, "", "fit_predict"], [21, 3, 1, "", "fit_transform"], [21, 3, 1, "", "get_metadata_routing"], [21, 3, 1, "", "get_params"], [21, 3, 1, "", "predict"], [21, 3, 1, "", "set_output"], [21, 3, 1, "", "set_params"], [21, 3, 1, "", "transform"]], "wildboar.distance.KNeighborsClassifier": [[21, 3, 1, "", "fit"], [21, 3, 1, "", "get_metadata_routing"], [21, 3, 1, "", "get_params"], [21, 3, 1, "", "predict"], [21, 3, 1, "", "predict_proba"], [21, 3, 1, "", "score"], [21, 3, 1, "", "set_params"]], "wildboar.distance.MDS": [[21, 3, 1, "", "get_metadata_routing"], [21, 3, 1, "", "get_params"], [21, 3, 1, "", "set_params"]], "wildboar.distance._distance": [[15, 1, 1, "", "argmin_distance"], [15, 1, 1, "", "argmin_subsequence_distance"], [15, 1, 1, "", "distance_profile"], [15, 1, 1, "", "paired_distance"], [15, 1, 1, "", "paired_subsequence_distance"], [15, 1, 1, "", "paired_subsequence_match"], [15, 1, 1, "", "pairwise_distance"], [15, 1, 1, "", "pairwise_subsequence_distance"], [15, 1, 1, "", "subsequence_match"]], "wildboar.distance._manifold": [[16, 2, 1, "", "MDS"]], "wildboar.distance._manifold.MDS": [[16, 3, 1, "", "get_metadata_routing"], [16, 3, 1, "", "get_params"], [16, 3, 1, "", "set_params"]], "wildboar.distance._matrix_profile": [[17, 1, 1, "", "matrix_profile"]], "wildboar.distance._neighbors": [[19, 2, 1, "", "KMeans"], [19, 2, 1, "", "KMedoids"], [19, 2, 1, "", "KNeighborsClassifier"]], "wildboar.distance._neighbors.KMeans": [[19, 3, 1, "", "fit"], [19, 3, 1, "", "fit_predict"], [19, 3, 1, "", "fit_transform"], [19, 3, 1, "", "get_metadata_routing"], [19, 3, 1, "", "get_params"], [19, 3, 1, "", "predict"], [19, 3, 1, "", "set_output"], [19, 3, 1, "", "set_params"], [19, 3, 1, "", "transform"]], "wildboar.distance._neighbors.KMedoids": [[19, 3, 1, "", "fit"], [19, 3, 1, "", "fit_predict"], [19, 3, 1, "", "fit_transform"], [19, 3, 1, "", "get_metadata_routing"], [19, 3, 1, "", "get_params"], [19, 3, 1, "", "predict"], [19, 3, 1, "", "set_output"], [19, 3, 1, "", "set_params"], [19, 3, 1, "", "transform"]], "wildboar.distance._neighbors.KNeighborsClassifier": [[19, 3, 1, "", "fit"], [19, 3, 1, "", "get_metadata_routing"], [19, 3, 1, "", "get_params"], [19, 3, 1, "", "predict"], [19, 3, 1, "", "predict_proba"], [19, 3, 1, "", "score"], [19, 3, 1, "", "set_params"]], "wildboar.distance.dtw": [[20, 1, 1, "", "ddtw_distance"], [20, 1, 1, "", "dtw_alignment"], [20, 1, 1, "", "dtw_average"], [20, 1, 1, "", "dtw_distance"], [20, 1, 1, "", "dtw_envelop"], [20, 1, 1, "", "dtw_lb_keogh"], [20, 1, 1, "", "dtw_mapping"], [20, 1, 1, "", "jeong_weight"], [20, 1, 1, "", "wddtw_distance"], [20, 1, 1, "", "wdtw_alignment"], [20, 1, 1, "", "wdtw_distance"]], "wildboar.ensemble": [[24, 2, 1, "", "BaggingClassifier"], [24, 2, 1, "", "BaggingRegressor"], [24, 2, 1, "", "BaseBagging"], [24, 2, 1, "", "ElasticEnsembleClassifier"], [24, 2, 1, "", "ExtraShapeletTreesClassifier"], [24, 2, 1, "", "ExtraShapeletTreesRegressor"], [24, 2, 1, "", "IntervalForestClassifier"], [24, 2, 1, "", "IntervalForestRegressor"], [24, 2, 1, "", "IsolationShapeletForest"], [24, 2, 1, "", "PivotForestClassifier"], [24, 2, 1, "", "ProximityForestClassifier"], [24, 2, 1, "", "RocketForestClassifier"], [24, 2, 1, "", "RocketForestRegressor"], [24, 2, 1, "", "ShapeletForestClassifier"], [24, 2, 1, "", "ShapeletForestEmbedding"], [24, 2, 1, "", "ShapeletForestRegressor"], [22, 0, 0, "-", "_elastic"], [23, 0, 0, "-", "_ensemble"]], "wildboar.ensemble.BaggingClassifier": [[24, 3, 1, "", "decision_function"], [24, 4, 1, "", "estimators_samples_"], [24, 3, 1, "", "fit"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "predict"], [24, 3, 1, "", "predict_log_proba"], [24, 3, 1, "", "predict_proba"], [24, 3, 1, "", "score"], [24, 3, 1, "", "set_params"]], "wildboar.ensemble.BaggingRegressor": [[24, 4, 1, "", "estimators_samples_"], [24, 3, 1, "", "fit"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "predict"], [24, 3, 1, "", "score"], [24, 3, 1, "", "set_params"]], "wildboar.ensemble.BaseBagging": [[24, 4, 1, "", "estimators_samples_"], [24, 3, 1, "", "fit"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "set_params"]], "wildboar.ensemble.ElasticEnsembleClassifier": [[24, 3, 1, "", "fit"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "predict"], [24, 3, 1, "", "predict_proba"], [24, 3, 1, "", "score"], [24, 3, 1, "", "set_params"]], "wildboar.ensemble.ExtraShapeletTreesClassifier": [[24, 3, 1, "", "decision_function"], [24, 4, 1, "", "estimators_samples_"], [24, 3, 1, "", "fit"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "predict"], [24, 3, 1, "", "predict_log_proba"], [24, 3, 1, "", "predict_proba"], [24, 3, 1, "", "score"], [24, 3, 1, "", "set_params"]], "wildboar.ensemble.ExtraShapeletTreesRegressor": [[24, 4, 1, "", "estimators_samples_"], [24, 3, 1, "", "fit"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "predict"], [24, 3, 1, "", "score"], [24, 3, 1, "", "set_params"]], "wildboar.ensemble.IntervalForestClassifier": [[24, 3, 1, "", "decision_function"], [24, 4, 1, "", "estimators_samples_"], [24, 3, 1, "", "fit"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "predict"], [24, 3, 1, "", "predict_log_proba"], [24, 3, 1, "", "predict_proba"], [24, 3, 1, "", "score"], [24, 3, 1, "", "set_params"]], "wildboar.ensemble.IntervalForestRegressor": [[24, 4, 1, "", "estimators_samples_"], [24, 3, 1, "", "fit"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "predict"], [24, 3, 1, "", "score"], [24, 3, 1, "", "set_params"]], "wildboar.ensemble.IsolationShapeletForest": [[24, 4, 1, "", "estimators_samples_"], [24, 3, 1, "", "fit"], [24, 3, 1, "", "fit_predict"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "set_params"]], "wildboar.ensemble.PivotForestClassifier": [[24, 3, 1, "", "decision_function"], [24, 4, 1, "", "estimators_samples_"], [24, 3, 1, "", "fit"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "predict"], [24, 3, 1, "", "predict_log_proba"], [24, 3, 1, "", "predict_proba"], [24, 3, 1, "", "score"], [24, 3, 1, "", "set_params"]], "wildboar.ensemble.ProximityForestClassifier": [[24, 3, 1, "", "decision_function"], [24, 4, 1, "", "estimators_samples_"], [24, 3, 1, "", "fit"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "predict"], [24, 3, 1, "", "predict_log_proba"], [24, 3, 1, "", "predict_proba"], [24, 3, 1, "", "score"], [24, 3, 1, "", "set_params"]], "wildboar.ensemble.RocketForestClassifier": [[24, 3, 1, "", "decision_function"], [24, 4, 1, "", "estimators_samples_"], [24, 3, 1, "", "fit"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "predict"], [24, 3, 1, "", "predict_log_proba"], [24, 3, 1, "", "predict_proba"], [24, 3, 1, "", "score"], [24, 3, 1, "", "set_params"]], "wildboar.ensemble.RocketForestRegressor": [[24, 4, 1, "", "estimators_samples_"], [24, 3, 1, "", "fit"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "predict"], [24, 3, 1, "", "score"], [24, 3, 1, "", "set_params"]], "wildboar.ensemble.ShapeletForestClassifier": [[24, 3, 1, "", "decision_function"], [24, 4, 1, "", "estimators_samples_"], [24, 3, 1, "", "fit"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "predict"], [24, 3, 1, "", "predict_log_proba"], [24, 3, 1, "", "predict_proba"], [24, 3, 1, "", "score"], [24, 3, 1, "", "set_params"]], "wildboar.ensemble.ShapeletForestEmbedding": [[24, 4, 1, "", "estimators_samples_"], [24, 3, 1, "", "fit"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "predict"], [24, 3, 1, "", "score"], [24, 3, 1, "", "set_params"]], "wildboar.ensemble.ShapeletForestRegressor": [[24, 4, 1, "", "estimators_samples_"], [24, 3, 1, "", "fit"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "predict"], [24, 3, 1, "", "score"], [24, 3, 1, "", "set_params"]], "wildboar.ensemble._elastic": [[22, 2, 1, "", "ElasticEnsembleClassifier"]], "wildboar.ensemble._elastic.ElasticEnsembleClassifier": [[22, 3, 1, "", "fit"], [22, 3, 1, "", "get_metadata_routing"], [22, 3, 1, "", "get_params"], [22, 3, 1, "", "predict"], [22, 3, 1, "", "predict_proba"], [22, 3, 1, "", "score"], [22, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble": [[23, 2, 1, "", "BaggingClassifier"], [23, 2, 1, "", "BaggingRegressor"], [23, 2, 1, "", "BaseBagging"], [23, 2, 1, "", "BaseForestClassifier"], [23, 2, 1, "", "BaseForestRegressor"], [23, 2, 1, "", "BaseShapeletForestClassifier"], [23, 2, 1, "", "BaseShapeletForestRegressor"], [23, 2, 1, "", "ExtraShapeletTreesClassifier"], [23, 2, 1, "", "ExtraShapeletTreesRegressor"], [23, 2, 1, "", "ForestMixin"], [23, 2, 1, "", "IntervalForestClassifier"], [23, 2, 1, "", "IntervalForestRegressor"], [23, 2, 1, "", "IsolationShapeletForest"], [23, 2, 1, "", "PivotForestClassifier"], [23, 2, 1, "", "ProximityForestClassifier"], [23, 2, 1, "", "RocketForestClassifier"], [23, 2, 1, "", "RocketForestRegressor"], [23, 2, 1, "", "ShapeletForestClassifier"], [23, 2, 1, "", "ShapeletForestEmbedding"], [23, 2, 1, "", "ShapeletForestRegressor"]], "wildboar.ensemble._ensemble.BaggingClassifier": [[23, 3, 1, "", "decision_function"], [23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "predict"], [23, 3, 1, "", "predict_log_proba"], [23, 3, 1, "", "predict_proba"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.BaggingRegressor": [[23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "predict"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.BaseBagging": [[23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.BaseForestClassifier": [[23, 3, 1, "", "decision_function"], [23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "predict"], [23, 3, 1, "", "predict_log_proba"], [23, 3, 1, "", "predict_proba"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.BaseForestRegressor": [[23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "predict"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.BaseShapeletForestClassifier": [[23, 3, 1, "", "decision_function"], [23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "predict"], [23, 3, 1, "", "predict_log_proba"], [23, 3, 1, "", "predict_proba"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.BaseShapeletForestRegressor": [[23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "predict"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier": [[23, 3, 1, "", "decision_function"], [23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "predict"], [23, 3, 1, "", "predict_log_proba"], [23, 3, 1, "", "predict_proba"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.ExtraShapeletTreesRegressor": [[23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "predict"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.IntervalForestClassifier": [[23, 3, 1, "", "decision_function"], [23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "predict"], [23, 3, 1, "", "predict_log_proba"], [23, 3, 1, "", "predict_proba"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.IntervalForestRegressor": [[23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "predict"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.IsolationShapeletForest": [[23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "fit_predict"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.PivotForestClassifier": [[23, 3, 1, "", "decision_function"], [23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "predict"], [23, 3, 1, "", "predict_log_proba"], [23, 3, 1, "", "predict_proba"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.ProximityForestClassifier": [[23, 3, 1, "", "decision_function"], [23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "predict"], [23, 3, 1, "", "predict_log_proba"], [23, 3, 1, "", "predict_proba"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.RocketForestClassifier": [[23, 3, 1, "", "decision_function"], [23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "predict"], [23, 3, 1, "", "predict_log_proba"], [23, 3, 1, "", "predict_proba"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.RocketForestRegressor": [[23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "predict"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.ShapeletForestClassifier": [[23, 3, 1, "", "decision_function"], [23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "predict"], [23, 3, 1, "", "predict_log_proba"], [23, 3, 1, "", "predict_proba"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.ShapeletForestEmbedding": [[23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "predict"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.ShapeletForestRegressor": [[23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "predict"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.explain": [[32, 2, 1, "", "AmplitudeImportance"], [32, 2, 1, "", "FrequencyImportance"], [32, 2, 1, "", "IntervalImportance"], [32, 2, 1, "", "ShapeletImportance"], [25, 0, 0, "-", "_importance"], [31, 0, 0, "-", "counterfactual"], [32, 1, 1, "", "plot_importances"]], "wildboar.explain.AmplitudeImportance": [[32, 3, 1, "", "fit_explain"], [32, 3, 1, "", "get_metadata_routing"], [32, 3, 1, "", "get_params"], [32, 3, 1, "", "plot"], [32, 3, 1, "", "set_params"]], "wildboar.explain.FrequencyImportance": [[32, 3, 1, "", "fit_explain"], [32, 3, 1, "", "get_metadata_routing"], [32, 3, 1, "", "get_params"], [32, 3, 1, "", "plot"], [32, 3, 1, "", "set_params"]], "wildboar.explain.IntervalImportance": [[32, 3, 1, "", "fit_explain"], [32, 3, 1, "", "get_metadata_routing"], [32, 3, 1, "", "get_params"], [32, 3, 1, "", "plot"], [32, 3, 1, "", "set_params"]], "wildboar.explain.ShapeletImportance": [[32, 3, 1, "", "fit_explain"], [32, 3, 1, "", "get_metadata_routing"], [32, 3, 1, "", "get_params"], [32, 3, 1, "", "plot"], [32, 3, 1, "", "set_params"]], "wildboar.explain._importance": [[25, 2, 1, "", "AmplitudeImportance"], [25, 2, 1, "", "FrequencyImportance"], [25, 2, 1, "", "IntervalImportance"], [25, 2, 1, "", "PermuteImportance"], [25, 2, 1, "", "ShapeletImportance"], [25, 1, 1, "", "plot_importances"]], "wildboar.explain._importance.AmplitudeImportance": [[25, 3, 1, "", "fit_explain"], [25, 3, 1, "", "get_metadata_routing"], [25, 3, 1, "", "get_params"], [25, 3, 1, "", "plot"], [25, 3, 1, "", "set_params"]], "wildboar.explain._importance.FrequencyImportance": [[25, 3, 1, "", "fit_explain"], [25, 3, 1, "", "get_metadata_routing"], [25, 3, 1, "", "get_params"], [25, 3, 1, "", "plot"], [25, 3, 1, "", "set_params"]], "wildboar.explain._importance.IntervalImportance": [[25, 3, 1, "", "fit_explain"], [25, 3, 1, "", "get_metadata_routing"], [25, 3, 1, "", "get_params"], [25, 3, 1, "", "plot"], [25, 3, 1, "", "set_params"]], "wildboar.explain._importance.PermuteImportance": [[25, 3, 1, "", "get_metadata_routing"], [25, 3, 1, "", "get_params"], [25, 3, 1, "", "set_params"]], "wildboar.explain._importance.ShapeletImportance": [[25, 3, 1, "", "fit_explain"], [25, 3, 1, "", "get_metadata_routing"], [25, 3, 1, "", "get_params"], [25, 3, 1, "", "plot"], [25, 3, 1, "", "set_params"]], "wildboar.explain.counterfactual": [[31, 2, 1, "", "KNeighborsCounterfactual"], [31, 2, 1, "", "NativeGuideCounterfactual"], [31, 2, 1, "", "PrototypeCounterfactual"], [31, 2, 1, "", "ShapeletForestCounterfactual"], [26, 0, 0, "-", "_helper"], [27, 0, 0, "-", "_nn"], [28, 0, 0, "-", "_nun"], [29, 0, 0, "-", "_proto"], [30, 0, 0, "-", "_sf"], [31, 1, 1, "", "counterfactuals"], [31, 1, 1, "", "proximity"]], "wildboar.explain.counterfactual.KNeighborsCounterfactual": [[31, 3, 1, "", "fit_explain"], [31, 3, 1, "", "get_metadata_routing"], [31, 3, 1, "", "get_params"], [31, 3, 1, "", "plot"], [31, 3, 1, "", "score"], [31, 3, 1, "", "set_params"]], "wildboar.explain.counterfactual.NativeGuideCounterfactual": [[31, 3, 1, "", "fit_explain"], [31, 3, 1, "", "get_metadata_routing"], [31, 3, 1, "", "get_params"], [31, 3, 1, "", "plot"], [31, 3, 1, "", "score"], [31, 3, 1, "", "set_params"]], "wildboar.explain.counterfactual.PrototypeCounterfactual": [[31, 3, 1, "", "fit_explain"], [31, 3, 1, "", "get_metadata_routing"], [31, 3, 1, "", "get_params"], [31, 3, 1, "", "plot"], [31, 3, 1, "", "score"], [31, 3, 1, "", "set_params"]], "wildboar.explain.counterfactual.ShapeletForestCounterfactual": [[31, 3, 1, "", "fit_explain"], [31, 3, 1, "", "get_metadata_routing"], [31, 3, 1, "", "get_params"], [31, 3, 1, "", "plot"], [31, 3, 1, "", "score"], [31, 3, 1, "", "set_params"]], "wildboar.explain.counterfactual._helper": [[26, 2, 1, "", "PredictEvaluator"], [26, 2, 1, "", "ProbabilityEvaluator"], [26, 2, 1, "", "TargetEvaluator"], [26, 1, 1, "", "counterfactuals"]], "wildboar.explain.counterfactual._helper.PredictEvaluator": [[26, 3, 1, "", "is_counterfactual"]], "wildboar.explain.counterfactual._helper.ProbabilityEvaluator": [[26, 3, 1, "", "is_counterfactual"]], "wildboar.explain.counterfactual._helper.TargetEvaluator": [[26, 3, 1, "", "is_counterfactual"]], "wildboar.explain.counterfactual._nn": [[27, 2, 1, "", "KNeighborsCounterfactual"]], "wildboar.explain.counterfactual._nn.KNeighborsCounterfactual": [[27, 3, 1, "", "fit_explain"], [27, 3, 1, "", "get_metadata_routing"], [27, 3, 1, "", "get_params"], [27, 3, 1, "", "plot"], [27, 3, 1, "", "score"], [27, 3, 1, "", "set_params"]], "wildboar.explain.counterfactual._nun": [[28, 2, 1, "", "NativeGuideCounterfactual"]], "wildboar.explain.counterfactual._nun.NativeGuideCounterfactual": [[28, 3, 1, "", "fit_explain"], [28, 3, 1, "", "get_metadata_routing"], [28, 3, 1, "", "get_params"], [28, 3, 1, "", "plot"], [28, 3, 1, "", "score"], [28, 3, 1, "", "set_params"]], "wildboar.explain.counterfactual._proto": [[29, 2, 1, "", "DynamicTimeWarpTransform"], [29, 2, 1, "", "EuclideanTransform"], [29, 2, 1, "", "KNearestPrototypeSampler"], [29, 2, 1, "", "KNearestShapeletPrototypeSampler"], [29, 2, 1, "", "MetricTransform"], [29, 2, 1, "", "PredictEvaluator"], [29, 2, 1, "", "ProbabilityEvaluator"], [29, 2, 1, "", "PrototypeCounterfactual"], [29, 2, 1, "", "PrototypeSampler"], [29, 2, 1, "", "ShapeletPrototypeSampler"], [29, 2, 1, "", "TargetEvaluator"], [29, 2, 1, "", "UniformPrototypeSampler"], [29, 2, 1, "", "WeightedDynamicTimeWarpTransform"]], "wildboar.explain.counterfactual._proto.DynamicTimeWarpTransform": [[29, 3, 1, "", "move"]], "wildboar.explain.counterfactual._proto.EuclideanTransform": [[29, 3, 1, "", "move"]], "wildboar.explain.counterfactual._proto.KNearestPrototypeSampler": [[29, 3, 1, "", "move"], [29, 3, 1, "", "nearest_index"], [29, 3, 1, "", "sample"], [29, 3, 1, "", "sample_move"]], "wildboar.explain.counterfactual._proto.KNearestShapeletPrototypeSampler": [[29, 3, 1, "", "move"], [29, 3, 1, "", "sample"], [29, 3, 1, "", "sample_move"]], "wildboar.explain.counterfactual._proto.MetricTransform": [[29, 3, 1, "", "move"]], "wildboar.explain.counterfactual._proto.PredictEvaluator": [[29, 3, 1, "", "is_counterfactual"]], "wildboar.explain.counterfactual._proto.ProbabilityEvaluator": [[29, 3, 1, "", "is_counterfactual"]], "wildboar.explain.counterfactual._proto.PrototypeCounterfactual": [[29, 3, 1, "", "fit_explain"], [29, 3, 1, "", "get_metadata_routing"], [29, 3, 1, "", "get_params"], [29, 3, 1, "", "plot"], [29, 3, 1, "", "score"], [29, 3, 1, "", "set_params"]], "wildboar.explain.counterfactual._proto.PrototypeSampler": [[29, 3, 1, "", "move"], [29, 3, 1, "", "sample"], [29, 3, 1, "", "sample_move"]], "wildboar.explain.counterfactual._proto.ShapeletPrototypeSampler": [[29, 3, 1, "", "move"], [29, 3, 1, "", "sample"], [29, 3, 1, "", "sample_move"], [29, 3, 1, "", "sample_shapelet"]], "wildboar.explain.counterfactual._proto.TargetEvaluator": [[29, 3, 1, "", "is_counterfactual"]], "wildboar.explain.counterfactual._proto.UniformPrototypeSampler": [[29, 3, 1, "", "move"], [29, 3, 1, "", "sample"], [29, 3, 1, "", "sample_move"]], "wildboar.explain.counterfactual._proto.WeightedDynamicTimeWarpTransform": [[29, 3, 1, "", "move"]], "wildboar.explain.counterfactual._sf": [[30, 2, 1, "", "ShapeletForestCounterfactual"]], "wildboar.explain.counterfactual._sf.ShapeletForestCounterfactual": [[30, 3, 1, "", "fit_explain"], [30, 3, 1, "", "get_metadata_routing"], [30, 3, 1, "", "get_params"], [30, 3, 1, "", "plot"], [30, 3, 1, "", "score"], [30, 3, 1, "", "set_params"]], "wildboar.linear_model": [[38, 2, 1, "", "CastorClassifier"], [38, 2, 1, "", "DilatedShapeletClassifier"], [38, 2, 1, "", "HydraClassifier"], [38, 2, 1, "", "RandomShapeletClassifier"], [38, 2, 1, "", "RandomShapeletRegressor"], [38, 2, 1, "", "RocketClassifier"], [38, 2, 1, "", "RocketRegressor"], [34, 0, 0, "-", "_hydra"], [35, 0, 0, "-", "_rocket"], [36, 0, 0, "-", "_shapelet"], [37, 0, 0, "-", "_transform"]], "wildboar.linear_model.CastorClassifier": [[38, 3, 1, "", "get_metadata_routing"], [38, 3, 1, "", "get_params"], [38, 3, 1, "", "score"], [38, 3, 1, "", "set_params"]], "wildboar.linear_model.DilatedShapeletClassifier": [[38, 3, 1, "", "get_metadata_routing"], [38, 3, 1, "", "get_params"], [38, 3, 1, "", "score"], [38, 3, 1, "", "set_params"]], "wildboar.linear_model.HydraClassifier": [[38, 3, 1, "", "get_metadata_routing"], [38, 3, 1, "", "get_params"], [38, 3, 1, "", "score"], [38, 3, 1, "", "set_params"]], "wildboar.linear_model.RandomShapeletClassifier": [[38, 3, 1, "", "get_metadata_routing"], [38, 3, 1, "", "get_params"], [38, 3, 1, "", "score"], [38, 3, 1, "", "set_params"]], "wildboar.linear_model.RandomShapeletRegressor": [[38, 3, 1, "", "get_metadata_routing"], [38, 3, 1, "", "get_params"], [38, 3, 1, "", "score"], [38, 3, 1, "", "set_params"]], "wildboar.linear_model.RocketClassifier": [[38, 3, 1, "", "get_metadata_routing"], [38, 3, 1, "", "get_params"], [38, 3, 1, "", "score"], [38, 3, 1, "", "set_params"]], "wildboar.linear_model.RocketRegressor": [[38, 3, 1, "", "get_metadata_routing"], [38, 3, 1, "", "get_params"], [38, 3, 1, "", "score"], [38, 3, 1, "", "set_params"]], "wildboar.linear_model._hydra": [[34, 2, 1, "", "HydraClassifier"]], "wildboar.linear_model._hydra.HydraClassifier": [[34, 3, 1, "", "get_metadata_routing"], [34, 3, 1, "", "get_params"], [34, 3, 1, "", "score"], [34, 3, 1, "", "set_params"]], "wildboar.linear_model._rocket": [[35, 2, 1, "", "RocketClassifier"], [35, 2, 1, "", "RocketRegressor"]], "wildboar.linear_model._rocket.RocketClassifier": [[35, 3, 1, "", "get_metadata_routing"], [35, 3, 1, "", "get_params"], [35, 3, 1, "", "score"], [35, 3, 1, "", "set_params"]], "wildboar.linear_model._rocket.RocketRegressor": [[35, 3, 1, "", "get_metadata_routing"], [35, 3, 1, "", "get_params"], [35, 3, 1, "", "score"], [35, 3, 1, "", "set_params"]], "wildboar.linear_model._shapelet": [[36, 2, 1, "", "CastorClassifier"], [36, 2, 1, "", "DilatedShapeletClassifier"], [36, 2, 1, "", "RandomShapeletClassifier"], [36, 2, 1, "", "RandomShapeletRegressor"]], "wildboar.linear_model._shapelet.CastorClassifier": [[36, 3, 1, "", "get_metadata_routing"], [36, 3, 1, "", "get_params"], [36, 3, 1, "", "score"], [36, 3, 1, "", "set_params"]], "wildboar.linear_model._shapelet.DilatedShapeletClassifier": [[36, 3, 1, "", "get_metadata_routing"], [36, 3, 1, "", "get_params"], [36, 3, 1, "", "score"], [36, 3, 1, "", "set_params"]], "wildboar.linear_model._shapelet.RandomShapeletClassifier": [[36, 3, 1, "", "get_metadata_routing"], [36, 3, 1, "", "get_params"], [36, 3, 1, "", "score"], [36, 3, 1, "", "set_params"]], "wildboar.linear_model._shapelet.RandomShapeletRegressor": [[36, 3, 1, "", "get_metadata_routing"], [36, 3, 1, "", "get_params"], [36, 3, 1, "", "score"], [36, 3, 1, "", "set_params"]], "wildboar.linear_model._transform": [[37, 2, 1, "", "BaseTransformClassifier"], [37, 2, 1, "", "BaseTransformEstimator"], [37, 2, 1, "", "BaseTransformRegressor"], [37, 2, 1, "", "TransformRidgeCV"], [37, 2, 1, "", "TransformRidgeClassifierCV"]], "wildboar.linear_model._transform.BaseTransformClassifier": [[37, 3, 1, "", "get_metadata_routing"], [37, 3, 1, "", "get_params"], [37, 3, 1, "", "score"], [37, 3, 1, "", "set_params"]], "wildboar.linear_model._transform.BaseTransformEstimator": [[37, 3, 1, "", "get_metadata_routing"], [37, 3, 1, "", "get_params"], [37, 3, 1, "", "set_params"]], "wildboar.linear_model._transform.BaseTransformRegressor": [[37, 3, 1, "", "get_metadata_routing"], [37, 3, 1, "", "get_params"], [37, 3, 1, "", "score"], [37, 3, 1, "", "set_params"]], "wildboar.linear_model._transform.TransformRidgeCV": [[37, 3, 1, "", "get_metadata_routing"], [37, 3, 1, "", "get_params"], [37, 3, 1, "", "score"], [37, 3, 1, "", "set_params"]], "wildboar.linear_model._transform.TransformRidgeClassifierCV": [[37, 3, 1, "", "get_metadata_routing"], [37, 3, 1, "", "get_params"], [37, 3, 1, "", "score"], [37, 3, 1, "", "set_params"]], "wildboar.metrics": [[39, 0, 0, "-", "_cluster"], [40, 0, 0, "-", "_counterfactual"], [41, 1, 1, "", "compactness_score"], [41, 1, 1, "", "plausability_score"], [41, 1, 1, "", "proximity_score"], [41, 1, 1, "", "redudancy_score"], [41, 1, 1, "", "relative_proximity_score"], [41, 1, 1, "", "silhouette_samples"], [41, 1, 1, "", "silhouette_score"], [41, 1, 1, "", "validity_score"]], "wildboar.metrics._cluster": [[39, 1, 1, "", "silhouette_samples"], [39, 1, 1, "", "silhouette_score"]], "wildboar.metrics._counterfactual": [[40, 1, 1, "", "compactness_score"], [40, 1, 1, "", "plausability_score"], [40, 1, 1, "", "proximity_score"], [40, 1, 1, "", "redudancy_score"], [40, 1, 1, "", "relative_proximity_score"], [40, 1, 1, "", "validity_score"]], "wildboar.model_selection": [[44, 2, 1, "", "RepeatedOutlierSplit"], [42, 0, 0, "-", "_cv"], [43, 0, 0, "-", "_outlier"], [44, 1, 1, "", "outlier_train_test_split"]], "wildboar.model_selection.RepeatedOutlierSplit": [[44, 3, 1, "", "get_n_splits"], [44, 3, 1, "", "split"]], "wildboar.model_selection._cv": [[42, 2, 1, "", "RepeatedOutlierSplit"]], "wildboar.model_selection._cv.RepeatedOutlierSplit": [[42, 3, 1, "", "get_n_splits"], [42, 3, 1, "", "split"]], "wildboar.model_selection._outlier": [[43, 1, 1, "", "outlier_train_test_split"]], "wildboar.transform": [[55, 2, 1, "", "CastorTransform"], [55, 2, 1, "", "DerivativeTransform"], [55, 2, 1, "", "DiffTransform"], [55, 2, 1, "", "DilatedShapeletTransform"], [55, 2, 1, "", "FeatureTransform"], [55, 2, 1, "", "HydraTransform"], [55, 2, 1, "", "IntervalTransform"], [55, 2, 1, "", "MatrixProfileTransform"], [55, 2, 1, "", "PAA"], [55, 2, 1, "", "PivotTransform"], [55, 2, 1, "", "ProximityTransform"], [55, 2, 1, "", "RandomShapeletTransform"], [55, 2, 1, "", "RocketTransform"], [55, 2, 1, "", "SAX"], [45, 0, 0, "-", "_base"], [46, 0, 0, "-", "_conv"], [47, 0, 0, "-", "_diff"], [48, 0, 0, "-", "_hydra"], [49, 0, 0, "-", "_interval"], [50, 0, 0, "-", "_matrix_profile"], [51, 0, 0, "-", "_pivot"], [52, 0, 0, "-", "_rocket"], [53, 0, 0, "-", "_sax"], [54, 0, 0, "-", "_shapelet"], [55, 1, 1, "", "convolve"], [55, 1, 1, "", "piecewice_aggregate_approximation"], [55, 1, 1, "", "symbolic_aggregate_approximation"]], "wildboar.transform.CastorTransform": [[55, 3, 1, "", "fit"], [55, 3, 1, "", "fit_transform"], [55, 3, 1, "", "get_metadata_routing"], [55, 3, 1, "", "get_params"], [55, 3, 1, "", "set_output"], [55, 3, 1, "", "set_params"], [55, 3, 1, "", "transform"]], "wildboar.transform.DerivativeTransform": [[55, 3, 1, "", "fit_transform"], [55, 3, 1, "", "get_metadata_routing"], [55, 3, 1, "", "get_params"], [55, 3, 1, "", "set_output"], [55, 3, 1, "", "set_params"]], "wildboar.transform.DiffTransform": [[55, 3, 1, "", "fit_transform"], [55, 3, 1, "", "get_metadata_routing"], [55, 3, 1, "", "get_params"], [55, 3, 1, "", "set_output"], [55, 3, 1, "", "set_params"]], "wildboar.transform.DilatedShapeletTransform": [[55, 3, 1, "", "fit"], [55, 3, 1, "", "fit_transform"], [55, 3, 1, "", "get_metadata_routing"], [55, 3, 1, "", "get_params"], [55, 3, 1, "", "set_output"], [55, 3, 1, "", "set_params"], [55, 3, 1, "", "transform"]], "wildboar.transform.FeatureTransform": [[55, 3, 1, "", "fit"], [55, 3, 1, "", "fit_transform"], [55, 3, 1, "", "get_metadata_routing"], [55, 3, 1, "", "get_params"], [55, 3, 1, "", "set_output"], [55, 3, 1, "", "set_params"], [55, 3, 1, "", "transform"]], "wildboar.transform.HydraTransform": [[55, 3, 1, "", "fit"], [55, 3, 1, "", "fit_transform"], [55, 3, 1, "", "get_metadata_routing"], [55, 3, 1, "", "get_params"], [55, 3, 1, "", "set_output"], [55, 3, 1, "", "set_params"], [55, 3, 1, "", "transform"]], "wildboar.transform.IntervalTransform": [[55, 3, 1, "", "fit"], [55, 3, 1, "", "fit_transform"], [55, 3, 1, "", "get_metadata_routing"], [55, 3, 1, "", "get_params"], [55, 3, 1, "", "set_output"], [55, 3, 1, "", "set_params"], [55, 3, 1, "", "transform"]], "wildboar.transform.MatrixProfileTransform": [[55, 3, 1, "", "fit"], [55, 3, 1, "", "fit_transform"], [55, 3, 1, "", "get_metadata_routing"], [55, 3, 1, "", "get_params"], [55, 3, 1, "", "set_output"], [55, 3, 1, "", "set_params"], [55, 3, 1, "", "transform"]], "wildboar.transform.PAA": [[55, 3, 1, "", "fit_transform"], [55, 3, 1, "", "get_metadata_routing"], [55, 3, 1, "", "get_params"], [55, 3, 1, "", "set_output"], [55, 3, 1, "", "set_params"]], "wildboar.transform.PivotTransform": [[55, 3, 1, "", "fit"], [55, 3, 1, "", "fit_transform"], [55, 3, 1, "", "get_metadata_routing"], [55, 3, 1, "", "get_params"], [55, 3, 1, "", "set_output"], [55, 3, 1, "", "set_params"], [55, 3, 1, "", "transform"]], "wildboar.transform.ProximityTransform": [[55, 3, 1, "", "fit_transform"], [55, 3, 1, "", "get_metadata_routing"], [55, 3, 1, "", "get_params"], [55, 3, 1, "", "set_output"], [55, 3, 1, "", "set_params"]], "wildboar.transform.RandomShapeletTransform": [[55, 3, 1, "", "fit"], [55, 3, 1, "", "fit_transform"], [55, 3, 1, "", "get_metadata_routing"], [55, 3, 1, "", "get_params"], [55, 3, 1, "", "set_output"], [55, 3, 1, "", "set_params"], [55, 3, 1, "", "transform"]], "wildboar.transform.RocketTransform": [[55, 3, 1, "", "fit"], [55, 3, 1, "", "fit_transform"], [55, 3, 1, "", "get_metadata_routing"], [55, 3, 1, "", "get_params"], [55, 3, 1, "", "set_output"], [55, 3, 1, "", "set_params"], [55, 3, 1, "", "transform"]], "wildboar.transform.SAX": [[55, 3, 1, "", "fit_transform"], [55, 3, 1, "", "get_metadata_routing"], [55, 3, 1, "", "get_params"], [55, 3, 1, "", "set_output"], [55, 3, 1, "", "set_params"]], "wildboar.transform._base": [[45, 2, 1, "", "BaseAttributeTransform"]], "wildboar.transform._base.BaseAttributeTransform": [[45, 3, 1, "", "fit"], [45, 3, 1, "", "fit_transform"], [45, 3, 1, "", "get_metadata_routing"], [45, 3, 1, "", "get_params"], [45, 3, 1, "", "set_output"], [45, 3, 1, "", "set_params"], [45, 3, 1, "", "transform"]], "wildboar.transform._conv": [[46, 1, 1, "", "convolve"]], "wildboar.transform._diff": [[47, 2, 1, "", "DerivativeTransform"], [47, 2, 1, "", "DiffTransform"]], "wildboar.transform._diff.DerivativeTransform": [[47, 3, 1, "", "fit_transform"], [47, 3, 1, "", "get_metadata_routing"], [47, 3, 1, "", "get_params"], [47, 3, 1, "", "set_output"], [47, 3, 1, "", "set_params"]], "wildboar.transform._diff.DiffTransform": [[47, 3, 1, "", "fit_transform"], [47, 3, 1, "", "get_metadata_routing"], [47, 3, 1, "", "get_params"], [47, 3, 1, "", "set_output"], [47, 3, 1, "", "set_params"]], "wildboar.transform._hydra": [[48, 2, 1, "", "HydraTransform"]], "wildboar.transform._hydra.HydraTransform": [[48, 3, 1, "", "fit"], [48, 3, 1, "", "fit_transform"], [48, 3, 1, "", "get_metadata_routing"], [48, 3, 1, "", "get_params"], [48, 3, 1, "", "set_output"], [48, 3, 1, "", "set_params"], [48, 3, 1, "", "transform"]], "wildboar.transform._interval": [[49, 2, 1, "", "FeatureTransform"], [49, 2, 1, "", "IntervalMixin"], [49, 2, 1, "", "IntervalTransform"]], "wildboar.transform._interval.FeatureTransform": [[49, 3, 1, "", "fit"], [49, 3, 1, "", "fit_transform"], [49, 3, 1, "", "get_metadata_routing"], [49, 3, 1, "", "get_params"], [49, 3, 1, "", "set_output"], [49, 3, 1, "", "set_params"], [49, 3, 1, "", "transform"]], "wildboar.transform._interval.IntervalTransform": [[49, 3, 1, "", "fit"], [49, 3, 1, "", "fit_transform"], [49, 3, 1, "", "get_metadata_routing"], [49, 3, 1, "", "get_params"], [49, 3, 1, "", "set_output"], [49, 3, 1, "", "set_params"], [49, 3, 1, "", "transform"]], "wildboar.transform._matrix_profile": [[50, 2, 1, "", "MatrixProfileTransform"]], "wildboar.transform._matrix_profile.MatrixProfileTransform": [[50, 3, 1, "", "fit"], [50, 3, 1, "", "fit_transform"], [50, 3, 1, "", "get_metadata_routing"], [50, 3, 1, "", "get_params"], [50, 3, 1, "", "set_output"], [50, 3, 1, "", "set_params"], [50, 3, 1, "", "transform"]], "wildboar.transform._pivot": [[51, 2, 1, "", "PivotMixin"], [51, 2, 1, "", "PivotTransform"], [51, 2, 1, "", "ProximityTransform"]], "wildboar.transform._pivot.PivotTransform": [[51, 3, 1, "", "fit"], [51, 3, 1, "", "fit_transform"], [51, 3, 1, "", "get_metadata_routing"], [51, 3, 1, "", "get_params"], [51, 3, 1, "", "set_output"], [51, 3, 1, "", "set_params"], [51, 3, 1, "", "transform"]], "wildboar.transform._pivot.ProximityTransform": [[51, 3, 1, "", "fit_transform"], [51, 3, 1, "", "get_metadata_routing"], [51, 3, 1, "", "get_params"], [51, 3, 1, "", "set_output"], [51, 3, 1, "", "set_params"]], "wildboar.transform._rocket": [[52, 2, 1, "", "RocketMixin"], [52, 2, 1, "", "RocketTransform"]], "wildboar.transform._rocket.RocketTransform": [[52, 3, 1, "", "fit"], [52, 3, 1, "", "fit_transform"], [52, 3, 1, "", "get_metadata_routing"], [52, 3, 1, "", "get_params"], [52, 3, 1, "", "set_output"], [52, 3, 1, "", "set_params"], [52, 3, 1, "", "transform"]], "wildboar.transform._sax": [[53, 2, 1, "", "Binning"], [53, 2, 1, "", "NormalBinning"], [53, 2, 1, "", "PAA"], [53, 2, 1, "", "SAX"], [53, 2, 1, "", "UniformBinning"], [53, 1, 1, "", "piecewice_aggregate_approximation"], [53, 1, 1, "", "symbolic_aggregate_approximation"]], "wildboar.transform._sax.Binning": [[53, 3, 1, "", "get_thresholds"], [53, 3, 1, "", "scale"]], "wildboar.transform._sax.NormalBinning": [[53, 3, 1, "", "get_thresholds"], [53, 3, 1, "", "scale"]], "wildboar.transform._sax.PAA": [[53, 3, 1, "", "fit_transform"], [53, 3, 1, "", "get_metadata_routing"], [53, 3, 1, "", "get_params"], [53, 3, 1, "", "set_output"], [53, 3, 1, "", "set_params"]], "wildboar.transform._sax.SAX": [[53, 3, 1, "", "fit_transform"], [53, 3, 1, "", "get_metadata_routing"], [53, 3, 1, "", "get_params"], [53, 3, 1, "", "set_output"], [53, 3, 1, "", "set_params"]], "wildboar.transform._sax.UniformBinning": [[53, 3, 1, "", "get_thresholds"], [53, 3, 1, "", "scale"]], "wildboar.transform._shapelet": [[54, 2, 1, "", "CastorTransform"], [54, 2, 1, "", "DilatedShapeletTransform"], [54, 2, 1, "", "RandomShapeletTransform"], [54, 2, 1, "", "ShapeletMixin"]], "wildboar.transform._shapelet.CastorTransform": [[54, 3, 1, "", "fit"], [54, 3, 1, "", "fit_transform"], [54, 3, 1, "", "get_metadata_routing"], [54, 3, 1, "", "get_params"], [54, 3, 1, "", "set_output"], [54, 3, 1, "", "set_params"], [54, 3, 1, "", "transform"]], "wildboar.transform._shapelet.DilatedShapeletTransform": [[54, 3, 1, "", "fit"], [54, 3, 1, "", "fit_transform"], [54, 3, 1, "", "get_metadata_routing"], [54, 3, 1, "", "get_params"], [54, 3, 1, "", "set_output"], [54, 3, 1, "", "set_params"], [54, 3, 1, "", "transform"]], "wildboar.transform._shapelet.RandomShapeletTransform": [[54, 3, 1, "", "fit"], [54, 3, 1, "", "fit_transform"], [54, 3, 1, "", "get_metadata_routing"], [54, 3, 1, "", "get_params"], [54, 3, 1, "", "set_output"], [54, 3, 1, "", "set_params"], [54, 3, 1, "", "transform"]], "wildboar.tree": [[59, 2, 1, "", "ExtraShapeletTreeClassifier"], [59, 2, 1, "", "ExtraShapeletTreeRegressor"], [59, 2, 1, "", "IntervalTreeClassifier"], [59, 2, 1, "", "IntervalTreeRegressor"], [59, 2, 1, "", "PivotTreeClassifier"], [59, 2, 1, "", "ProximityTreeClassifier"], [59, 2, 1, "", "RocketTreeClassifier"], [59, 2, 1, "", "RocketTreeRegressor"], [59, 2, 1, "", "ShapeletTreeClassifier"], [59, 2, 1, "", "ShapeletTreeRegressor"], [56, 0, 0, "-", "_base"], [57, 0, 0, "-", "_ptree"], [58, 0, 0, "-", "_tree"]], "wildboar.tree.ExtraShapeletTreeClassifier": [[59, 3, 1, "", "apply"], [59, 3, 1, "", "decision_path"], [59, 3, 1, "", "fit"], [59, 3, 1, "", "get_metadata_routing"], [59, 3, 1, "", "get_params"], [59, 3, 1, "", "predict"], [59, 3, 1, "", "predict_proba"], [59, 3, 1, "", "score"], [59, 3, 1, "", "set_params"]], "wildboar.tree.ExtraShapeletTreeRegressor": [[59, 3, 1, "", "apply"], [59, 3, 1, "", "decision_path"], [59, 3, 1, "", "fit"], [59, 3, 1, "", "get_metadata_routing"], [59, 3, 1, "", "get_params"], [59, 3, 1, "", "predict"], [59, 3, 1, "", "score"], [59, 3, 1, "", "set_params"]], "wildboar.tree.IntervalTreeClassifier": [[59, 3, 1, "", "apply"], [59, 3, 1, "", "decision_path"], [59, 3, 1, "", "fit"], [59, 3, 1, "", "get_metadata_routing"], [59, 3, 1, "", "get_params"], [59, 3, 1, "", "predict"], [59, 3, 1, "", "predict_proba"], [59, 3, 1, "", "score"], [59, 3, 1, "", "set_params"]], "wildboar.tree.IntervalTreeRegressor": [[59, 3, 1, "", "apply"], [59, 3, 1, "", "decision_path"], [59, 3, 1, "", "fit"], [59, 3, 1, "", "get_metadata_routing"], [59, 3, 1, "", "get_params"], [59, 3, 1, "", "predict"], [59, 3, 1, "", "score"], [59, 3, 1, "", "set_params"]], "wildboar.tree.PivotTreeClassifier": [[59, 3, 1, "", "apply"], [59, 3, 1, "", "decision_path"], [59, 3, 1, "", "fit"], [59, 3, 1, "", "get_metadata_routing"], [59, 3, 1, "", "get_params"], [59, 3, 1, "", "predict"], [59, 3, 1, "", "predict_proba"], [59, 3, 1, "", "score"], [59, 3, 1, "", "set_params"]], "wildboar.tree.ProximityTreeClassifier": [[59, 3, 1, "", "apply"], [59, 3, 1, "", "decision_path"], [59, 3, 1, "", "fit"], [59, 3, 1, "", "get_metadata_routing"], [59, 3, 1, "", "get_params"], [59, 3, 1, "", "predict"], [59, 3, 1, "", "predict_proba"], [59, 3, 1, "", "score"], [59, 3, 1, "", "set_params"]], "wildboar.tree.RocketTreeClassifier": [[59, 3, 1, "", "apply"], [59, 3, 1, "", "decision_path"], [59, 3, 1, "", "fit"], [59, 3, 1, "", "get_metadata_routing"], [59, 3, 1, "", "get_params"], [59, 3, 1, "", "predict"], [59, 3, 1, "", "predict_proba"], [59, 3, 1, "", "score"], [59, 3, 1, "", "set_params"]], "wildboar.tree.RocketTreeRegressor": [[59, 3, 1, "", "apply"], [59, 3, 1, "", "decision_path"], [59, 3, 1, "", "fit"], [59, 3, 1, "", "get_metadata_routing"], [59, 3, 1, "", "get_params"], [59, 3, 1, "", "predict"], [59, 3, 1, "", "score"], [59, 3, 1, "", "set_params"]], "wildboar.tree.ShapeletTreeClassifier": [[59, 3, 1, "", "apply"], [59, 3, 1, "", "decision_path"], [59, 3, 1, "", "fit"], [59, 3, 1, "", "get_metadata_routing"], [59, 3, 1, "", "get_params"], [59, 3, 1, "", "predict"], [59, 3, 1, "", "predict_proba"], [59, 3, 1, "", "score"], [59, 3, 1, "", "set_params"]], "wildboar.tree.ShapeletTreeRegressor": [[59, 3, 1, "", "apply"], [59, 3, 1, "", "decision_path"], [59, 3, 1, "", "fit"], [59, 3, 1, "", "get_metadata_routing"], [59, 3, 1, "", "get_params"], [59, 3, 1, "", "predict"], [59, 3, 1, "", "score"], [59, 3, 1, "", "set_params"]], "wildboar.tree._base": [[56, 2, 1, "", "BaseTree"], [56, 2, 1, "", "BaseTreeClassifier"], [56, 2, 1, "", "BaseTreeRegressor"]], "wildboar.tree._base.BaseTree": [[56, 3, 1, "", "apply"], [56, 3, 1, "", "decision_path"], [56, 3, 1, "", "get_metadata_routing"], [56, 3, 1, "", "get_params"], [56, 3, 1, "", "set_params"]], "wildboar.tree._base.BaseTreeClassifier": [[56, 3, 1, "", "apply"], [56, 3, 1, "", "decision_path"], [56, 3, 1, "", "fit"], [56, 3, 1, "", "get_metadata_routing"], [56, 3, 1, "", "get_params"], [56, 3, 1, "", "predict"], [56, 3, 1, "", "predict_proba"], [56, 3, 1, "", "score"], [56, 3, 1, "", "set_params"]], "wildboar.tree._base.BaseTreeRegressor": [[56, 3, 1, "", "apply"], [56, 3, 1, "", "decision_path"], [56, 3, 1, "", "fit"], [56, 3, 1, "", "get_metadata_routing"], [56, 3, 1, "", "get_params"], [56, 3, 1, "", "predict"], [56, 3, 1, "", "score"], [56, 3, 1, "", "set_params"]], "wildboar.tree._ptree": [[57, 2, 1, "", "ProximityTreeClassifier"]], "wildboar.tree._ptree.ProximityTreeClassifier": [[57, 3, 1, "", "apply"], [57, 3, 1, "", "decision_path"], [57, 3, 1, "", "fit"], [57, 3, 1, "", "get_metadata_routing"], [57, 3, 1, "", "get_params"], [57, 3, 1, "", "predict"], [57, 3, 1, "", "predict_proba"], [57, 3, 1, "", "score"], [57, 3, 1, "", "set_params"]], "wildboar.tree._tree": [[58, 2, 1, "", "BaseFeatureTreeClassifier"], [58, 2, 1, "", "BaseFeatureTreeRegressor"], [58, 2, 1, "", "DilatedShapeletTreeClassifier"], [58, 2, 1, "", "ExtraShapeletTreeClassifier"], [58, 2, 1, "", "ExtraShapeletTreeRegressor"], [58, 2, 1, "", "IntervalTreeClassifier"], [58, 2, 1, "", "IntervalTreeRegressor"], [58, 2, 1, "", "PivotTreeClassifier"], [58, 2, 1, "", "RocketTreeClassifier"], [58, 2, 1, "", "RocketTreeRegressor"], [58, 2, 1, "", "ShapeletTreeClassifier"], [58, 2, 1, "", "ShapeletTreeRegressor"]], "wildboar.tree._tree.BaseFeatureTreeClassifier": [[58, 3, 1, "", "apply"], [58, 3, 1, "", "decision_path"], [58, 3, 1, "", "fit"], [58, 3, 1, "", "get_metadata_routing"], [58, 3, 1, "", "get_params"], [58, 3, 1, "", "predict"], [58, 3, 1, "", "predict_proba"], [58, 3, 1, "", "score"], [58, 3, 1, "", "set_params"]], "wildboar.tree._tree.BaseFeatureTreeRegressor": [[58, 3, 1, "", "apply"], [58, 3, 1, "", "decision_path"], [58, 3, 1, "", "fit"], [58, 3, 1, "", "get_metadata_routing"], [58, 3, 1, "", "get_params"], [58, 3, 1, "", "predict"], [58, 3, 1, "", "score"], [58, 3, 1, "", "set_params"]], "wildboar.tree._tree.DilatedShapeletTreeClassifier": [[58, 3, 1, "", "apply"], [58, 3, 1, "", "decision_path"], [58, 3, 1, "", "fit"], [58, 3, 1, "", "get_metadata_routing"], [58, 3, 1, "", "get_params"], [58, 3, 1, "", "predict"], [58, 3, 1, "", "predict_proba"], [58, 3, 1, "", "score"], [58, 3, 1, "", "set_params"]], "wildboar.tree._tree.ExtraShapeletTreeClassifier": [[58, 3, 1, "", "apply"], [58, 3, 1, "", "decision_path"], [58, 3, 1, "", "fit"], [58, 3, 1, "", "get_metadata_routing"], [58, 3, 1, "", "get_params"], [58, 3, 1, "", "predict"], [58, 3, 1, "", "predict_proba"], [58, 3, 1, "", "score"], [58, 3, 1, "", "set_params"]], "wildboar.tree._tree.ExtraShapeletTreeRegressor": [[58, 3, 1, "", "apply"], [58, 3, 1, "", "decision_path"], [58, 3, 1, "", "fit"], [58, 3, 1, "", "get_metadata_routing"], [58, 3, 1, "", "get_params"], [58, 3, 1, "", "predict"], [58, 3, 1, "", "score"], [58, 3, 1, "", "set_params"]], "wildboar.tree._tree.IntervalTreeClassifier": [[58, 3, 1, "", "apply"], [58, 3, 1, "", "decision_path"], [58, 3, 1, "", "fit"], [58, 3, 1, "", "get_metadata_routing"], [58, 3, 1, "", "get_params"], [58, 3, 1, "", "predict"], [58, 3, 1, "", "predict_proba"], [58, 3, 1, "", "score"], [58, 3, 1, "", "set_params"]], "wildboar.tree._tree.IntervalTreeRegressor": [[58, 3, 1, "", "apply"], [58, 3, 1, "", "decision_path"], [58, 3, 1, "", "fit"], [58, 3, 1, "", "get_metadata_routing"], [58, 3, 1, "", "get_params"], [58, 3, 1, "", "predict"], [58, 3, 1, "", "score"], [58, 3, 1, "", "set_params"]], "wildboar.tree._tree.PivotTreeClassifier": [[58, 3, 1, "", "apply"], [58, 3, 1, "", "decision_path"], [58, 3, 1, "", "fit"], [58, 3, 1, "", "get_metadata_routing"], [58, 3, 1, "", "get_params"], [58, 3, 1, "", "predict"], [58, 3, 1, "", "predict_proba"], [58, 3, 1, "", "score"], [58, 3, 1, "", "set_params"]], "wildboar.tree._tree.RocketTreeClassifier": [[58, 3, 1, "", "apply"], [58, 3, 1, "", "decision_path"], [58, 3, 1, "", "fit"], [58, 3, 1, "", "get_metadata_routing"], [58, 3, 1, "", "get_params"], [58, 3, 1, "", "predict"], [58, 3, 1, "", "predict_proba"], [58, 3, 1, "", "score"], [58, 3, 1, "", "set_params"]], "wildboar.tree._tree.RocketTreeRegressor": [[58, 3, 1, "", "apply"], [58, 3, 1, "", "decision_path"], [58, 3, 1, "", "fit"], [58, 3, 1, "", "get_metadata_routing"], [58, 3, 1, "", "get_params"], [58, 3, 1, "", "predict"], [58, 3, 1, "", "score"], [58, 3, 1, "", "set_params"]], "wildboar.tree._tree.ShapeletTreeClassifier": [[58, 3, 1, "", "apply"], [58, 3, 1, "", "decision_path"], [58, 3, 1, "", "fit"], [58, 3, 1, "", "get_metadata_routing"], [58, 3, 1, "", "get_params"], [58, 3, 1, "", "predict"], [58, 3, 1, "", "predict_proba"], [58, 3, 1, "", "score"], [58, 3, 1, "", "set_params"]], "wildboar.tree._tree.ShapeletTreeRegressor": [[58, 3, 1, "", "apply"], [58, 3, 1, "", "decision_path"], [58, 3, 1, "", "fit"], [58, 3, 1, "", "get_metadata_routing"], [58, 3, 1, "", "get_params"], [58, 3, 1, "", "predict"], [58, 3, 1, "", "score"], [58, 3, 1, "", "set_params"]], "wildboar.utils": [[60, 0, 0, "-", "_parallel"], [61, 0, 0, "-", "_testing"], [64, 1, 1, "", "check_X_y"], [64, 1, 1, "", "check_array"], [62, 0, 0, "-", "decorators"], [63, 0, 0, "-", "estimator_checks"], [65, 0, 0, "-", "plot"], [66, 0, 0, "-", "validation"], [67, 0, 0, "-", "variable_len"]], "wildboar.utils._parallel": [[60, 1, 1, "", "run_in_parallel"]], "wildboar.utils._testing": [[61, 1, 1, "", "assert_exhaustive_parameter_checks"], [61, 1, 1, "", "assert_parameter_checks"]], "wildboar.utils.decorators": [[62, 1, 1, "", "array_or_scalar"], [62, 1, 1, "", "singleton"], [62, 1, 1, "", "unstable"]], "wildboar.utils.estimator_checks": [[63, 1, 1, "", "check_estimator"]], "wildboar.utils.plot": [[65, 2, 1, "", "MidpointNormalize"], [65, 1, 1, "", "plot_frequency_domain"], [65, 1, 1, "", "plot_time_domain"]], "wildboar.utils.plot.MidpointNormalize": [[65, 3, 1, "", "autoscale"], [65, 3, 1, "", "autoscale_None"], [65, 3, 1, "", "process_value"], [65, 3, 1, "", "scaled"]], "wildboar.utils.validation": [[66, 2, 1, "", "MetricOptions"], [66, 2, 1, "", "SubsequenceMetricOptions"], [66, 1, 1, "", "check_X_y"], [66, 1, 1, "", "check_array"], [66, 1, 1, "", "check_classification_targets"], [66, 1, 1, "", "check_option"], [66, 1, 1, "", "check_type"]], "wildboar.utils.validation.MetricOptions": [[66, 3, 1, "", "is_satisfied_by"]], "wildboar.utils.validation.SubsequenceMetricOptions": [[66, 3, 1, "", "is_satisfied_by"]], "wildboar.utils.variable_len": [[67, 1, 1, "", "get_variable_length"], [67, 1, 1, "", "is_end_of_series"], [67, 1, 1, "", "is_variable_length"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"]}, "titleterms": {"wildboar": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 91], "annot": [0, 1, 2, 3, 73], "function": [0, 1, 2, 3, 4, 5, 7, 8, 9, 15, 17, 20, 21, 25, 26, 31, 32, 39, 40, 41, 43, 44, 46, 53, 55, 60, 61, 62, 63, 64, 65, 66, 67], "base": [0, 4, 85, 86], "class": [0, 4, 6, 7, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 65, 66], "dataset": [0, 5, 6, 7, 8, 9, 72, 75], "outlier": [0, 8, 88, 89], "preprocess": [0, 9], "dimension_select": [0, 10, 11, 12, 13, 14], "distanc": [0, 15, 16, 17, 18, 19, 20, 21, 81, 82], "dtw": [0, 20], "ensembl": [0, 22, 23, 24, 84], "explain": [0, 25, 26, 27, 28, 29, 30, 31, 32], "counterfactu": [0, 26, 27, 28, 29, 30, 31, 71], "linear_model": [0, 34, 35, 36, 37, 38], "metric": [0, 39, 40, 41, 80, 81, 82], "model_select": [0, 42, 43, 44], "transform": [0, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 70, 72, 85], "tree": [0, 56, 57, 58, 59, 86], "util": [0, 60, 61, 62, 63, 64, 65, 66, 67], "_motif": 1, "modul": [1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 34, 35, 36, 37, 39, 40, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67], "content": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], "_segment": 2, "packag": [3, 7, 14, 21, 24, 31, 32, 33, 38, 41, 44, 55, 59, 64], "_filter": 5, "_repositori": 6, "submodul": [7, 21, 33, 64], "_base": [10, 45, 56], "_distanc": [11, 15], "_sequenti": 12, "_varianc": 13, "_manifold": 16, "_matrix_profil": [17, 50], "_multi_metr": 18, "_neighbor": 19, "_elast": 22, "_ensembl": 23, "_import": 25, "_helper": 26, "_nn": 27, "_nun": 28, "_proto": 29, "_sf": 30, "subpackag": [32, 33], "_hydra": [34, 48], "_rocket": [35, 52], "_shapelet": [36, 54], "_transform": 37, "_cluster": 39, "_counterfactu": 40, "_cv": 42, "_outlier": 43, "_conv": 46, "_diff": 47, "_interv": 49, "_pivot": 51, "_sax": 53, "_ptree": 57, "_tree": 58, "_parallel": 60, "_test": 61, "decor": 62, "estimator_check": 63, "plot": 65, "valid": 66, "variable_len": 67, "version": [68, 93], "exampl": [69, 72], "convolut": 70, "hydra": 70, "rocket": 70, "explan": 71, "nearest": 71, "neighbour": 71, "shapelet": [71, 84], "forest": [71, 84], "refer": [71, 84], "user": 72, "guid": 72, "load": [72, 75], "an": 72, "learn": [72, 83, 87], "predict": 72, "time": [72, 74, 82], "seri": [72, 74], "tabular": 72, "data": 72, "explor": 72, "model": [72, 93], "perform": 72, "persist": 72, "variabl": 74, "length": 74, "singl": 75, "multipl": 75, "filter": 75, "pre": 76, "process": 76, "repositori": 77, "definit": 77, "instal": [77, 91], "local": 77, "cach": 77, "json": 77, "dimens": 78, "select": 78, "varianc": 78, "threshold": 78, "sequenti": 78, "selector": 78, "glossari": 79, "specif": 80, "subsequ": [80, 81, 82], "elast": [80, 82, 84], "non": 80, "pairwis": 81, "pair": 81, "multivari": 81, "support": 81, "search": 81, "benchmark": [81, 89], "dynam": 82, "warp": 82, "longest": 82, "common": 82, "edit": 82, "real": 82, "penalti": 82, "sequenc": 82, "move": 82, "split": 82, "merg": 82, "supervis": 83, "estim": [84, 85, 86], "proxim": 84, "unsupervis": 87, "detect": [88, 89], "minor": 89, "label": 89, "major": 89, "emmott": 89, "build": 92, "from": 92, "sourc": 92, "what": 93, "": 93, "new": 93, "depend": 93, "1": 93, "3": 93, "0": 93, "chang": 93}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"wildboar": [[0, "wildboar"], [33, "module-wildboar"]], "wildboar.annotate": [[0, "wildboar-annotate"], [3, "module-wildboar.annotate"]], "Functions": [[0, "id1"], [0, "id3"], [0, "id5"], [0, "id6"], [0, "id7"], [0, "id10"], [0, "id11"], [0, "id14"], [0, "id16"], [0, "id18"], [0, "id20"], [0, "id22"], [0, "id24"], [1, "functions"], [2, "functions"], [3, "functions"], [4, "functions"], [5, "functions"], [7, "functions"], [8, "functions"], [9, "functions"], [15, "functions"], [17, "functions"], [20, "functions"], [21, "functions"], [25, "functions"], [26, "functions"], [31, "functions"], [32, "functions"], [39, "functions"], [40, "functions"], [41, "functions"], [43, "functions"], [44, "functions"], [46, "functions"], [53, "functions"], [55, "functions"], [60, "functions"], [61, "functions"], [62, "functions"], [63, "functions"], [64, "functions"], [65, "functions"], [66, "functions"], [67, "functions"]], "wildboar.base": [[0, "wildboar-base"], [4, "module-wildboar.base"]], "Classes": [[0, "id2"], [0, "id4"], [0, "id8"], [0, "id9"], [0, "id12"], [0, "id13"], [0, "id15"], [0, "id17"], [0, "id19"], [0, "id21"], [0, "id23"], [4, "classes"], [6, "classes"], [7, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [16, "classes"], [19, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [42, "classes"], [44, "classes"], [45, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [65, "classes"], [66, "classes"]], "wildboar.datasets": [[0, "wildboar-datasets"], [7, "module-wildboar.datasets"]], "wildboar.datasets.outlier": [[0, "wildboar-datasets-outlier"], [8, "module-wildboar.datasets.outlier"]], "wildboar.datasets.preprocess": [[0, "wildboar-datasets-preprocess"], [9, "module-wildboar.datasets.preprocess"]], "wildboar.dimension_selection": [[0, "wildboar-dimension-selection"], [14, "module-wildboar.dimension_selection"]], "wildboar.distance": [[0, "wildboar-distance"], [21, "module-wildboar.distance"]], "wildboar.distance.dtw": [[0, "wildboar-distance-dtw"], [20, "module-wildboar.distance.dtw"]], "wildboar.ensemble": [[0, "wildboar-ensemble"], [24, "module-wildboar.ensemble"]], "wildboar.explain": [[0, "wildboar-explain"], [32, "module-wildboar.explain"]], "wildboar.explain.counterfactual": [[0, "wildboar-explain-counterfactual"], [31, "module-wildboar.explain.counterfactual"]], "wildboar.linear_model": [[0, "wildboar-linear-model"], [38, "module-wildboar.linear_model"]], "wildboar.metrics": [[0, "wildboar-metrics"], [41, "module-wildboar.metrics"]], "wildboar.model_selection": [[0, "wildboar-model-selection"], [44, "module-wildboar.model_selection"]], "wildboar.transform": [[0, "wildboar-transform"], [55, "module-wildboar.transform"]], "wildboar.tree": [[0, "wildboar-tree"], [59, "module-wildboar.tree"]], "wildboar.utils": [[0, "wildboar-utils"], [64, "module-wildboar.utils"]], "wildboar.annotate._motifs": [[1, "module-wildboar.annotate._motifs"]], "Module Contents": [[1, "module-contents"], [2, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [19, "module-contents"], [20, "module-contents"], [22, "module-contents"], [23, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [39, "module-contents"], [40, "module-contents"], [42, "module-contents"], [43, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"]], "wildboar.annotate._segment": [[2, "module-wildboar.annotate._segment"]], "Package Contents": [[3, "package-contents"], [7, "package-contents"], [14, "package-contents"], [21, "package-contents"], [24, "package-contents"], [31, "package-contents"], [32, "package-contents"], [33, "package-contents"], [38, "package-contents"], [41, "package-contents"], [44, "package-contents"], [55, "package-contents"], [59, "package-contents"], [64, "package-contents"]], "wildboar.datasets._filter": [[5, "module-wildboar.datasets._filter"]], "wildboar.datasets._repository": [[6, "module-wildboar.datasets._repository"]], "Submodules": [[7, "submodules"], [21, "submodules"], [33, "submodules"], [64, "submodules"]], "wildboar.dimension_selection._base": [[10, "module-wildboar.dimension_selection._base"]], "wildboar.dimension_selection._distance": [[11, "module-wildboar.dimension_selection._distance"]], "wildboar.dimension_selection._sequential": [[12, "module-wildboar.dimension_selection._sequential"]], "wildboar.dimension_selection._variance": [[13, "module-wildboar.dimension_selection._variance"]], "wildboar.distance._distance": [[15, "module-wildboar.distance._distance"]], "wildboar.distance._manifold": [[16, "module-wildboar.distance._manifold"]], "wildboar.distance._matrix_profile": [[17, "module-wildboar.distance._matrix_profile"]], "wildboar.distance._multi_metric": [[18, "module-wildboar.distance._multi_metric"]], "wildboar.distance._neighbors": [[19, "module-wildboar.distance._neighbors"]], "wildboar.ensemble._elastic": [[22, "module-wildboar.ensemble._elastic"]], "wildboar.ensemble._ensemble": [[23, "module-wildboar.ensemble._ensemble"]], "wildboar.explain._importance": [[25, "module-wildboar.explain._importance"]], "wildboar.explain.counterfactual._helper": [[26, "module-wildboar.explain.counterfactual._helper"]], "wildboar.explain.counterfactual._nn": [[27, "module-wildboar.explain.counterfactual._nn"]], "wildboar.explain.counterfactual._nun": [[28, "module-wildboar.explain.counterfactual._nun"]], "wildboar.explain.counterfactual._proto": [[29, "module-wildboar.explain.counterfactual._proto"]], "wildboar.explain.counterfactual._sf": [[30, "module-wildboar.explain.counterfactual._sf"]], "Subpackages": [[32, "subpackages"], [33, "subpackages"]], "wildboar.linear_model._hydra": [[34, "module-wildboar.linear_model._hydra"]], "wildboar.linear_model._rocket": [[35, "module-wildboar.linear_model._rocket"]], "wildboar.linear_model._shapelet": [[36, "module-wildboar.linear_model._shapelet"]], "wildboar.linear_model._transform": [[37, "module-wildboar.linear_model._transform"]], "wildboar.metrics._cluster": [[39, "module-wildboar.metrics._cluster"]], "wildboar.metrics._counterfactual": [[40, "module-wildboar.metrics._counterfactual"]], "wildboar.model_selection._cv": [[42, "module-wildboar.model_selection._cv"]], "wildboar.model_selection._outlier": [[43, "module-wildboar.model_selection._outlier"]], "wildboar.transform._base": [[45, "module-wildboar.transform._base"]], "wildboar.transform._conv": [[46, "module-wildboar.transform._conv"]], "wildboar.transform._diff": [[47, "module-wildboar.transform._diff"]], "wildboar.transform._hydra": [[48, "module-wildboar.transform._hydra"]], "wildboar.transform._interval": [[49, "module-wildboar.transform._interval"]], "wildboar.transform._matrix_profile": [[50, "module-wildboar.transform._matrix_profile"]], "wildboar.transform._pivot": [[51, "module-wildboar.transform._pivot"]], "wildboar.transform._rocket": [[52, "module-wildboar.transform._rocket"]], "wildboar.transform._sax": [[53, "module-wildboar.transform._sax"]], "wildboar.transform._shapelet": [[54, "module-wildboar.transform._shapelet"]], "wildboar.tree._base": [[56, "module-wildboar.tree._base"]], "wildboar.tree._ptree": [[57, "module-wildboar.tree._ptree"]], "wildboar.tree._tree": [[58, "module-wildboar.tree._tree"]], "wildboar.utils._parallel": [[60, "module-wildboar.utils._parallel"]], "wildboar.utils._testing": [[61, "module-wildboar.utils._testing"]], "wildboar.utils.decorators": [[62, "module-wildboar.utils.decorators"]], "wildboar.utils.estimator_checks": [[63, "module-wildboar.utils.estimator_checks"]], "wildboar.utils.plot": [[65, "module-wildboar.utils.plot"]], "wildboar.utils.validation": [[66, "module-wildboar.utils.validation"]], "wildboar.utils.variable_len": [[67, "module-wildboar.utils.variable_len"]], "wildboar.version": [[68, "module-wildboar.version"]], "Examples": [[69, "examples"]], "Convolution transform": [[70, "convolution-transform"]], "Hydra transformation": [[70, "hydra-transformation"]], "Rocket transform": [[70, "rocket-transform"]], "Counterfactual explanations": [[71, "counterfactual-explanations"]], "Nearest neighbour counterfactuals": [[71, "nearest-neighbour-counterfactuals"]], "Shapelet forest counterfactuals": [[71, "shapelet-forest-counterfactuals"]], "References": [[71, "references"], [84, "references"]], "User Guide": [[72, "user-guide"]], "Loading an example dataset": [[72, "loading-an-example-dataset"]], "Learning and predicting": [[72, "learning-and-predicting"]], "Transforming time series to tabular data": [[72, "transforming-time-series-to-tabular-data"]], "Exploring model performance": [[72, "exploring-model-performance"]], "Model persistence": [[72, "model-persistence"]], "Annotate": [[73, "annotate"]], "Time series": [[74, "time-series"]], "Variable length time series": [[74, "variable-length-time-series"]], "Datasets": [[75, "datasets"]], "Loading datasets": [[75, "loading-datasets"]], "Loading a single dataset": [[75, "loading-a-single-dataset"]], "Loading multiple datasets": [[75, "loading-multiple-datasets"]], "Filters": [[75, "filters"]], "Pre-processing": [[76, "pre-processing"]], "Repositories": [[77, "repositories"]], "Repository definitions": [[77, "repository-definitions"]], "Installing repositories": [[77, "installing-repositories"]], "Local cache": [[77, "local-cache"]], "JSON repositories": [[77, "json-repositories"]], "Dimension selection": [[78, "dimension-selection"]], "Dimension variance threshold": [[78, "dimension-variance-threshold"]], "Sequential dimension selector": [[78, "sequential-dimension-selector"]], "Glossary": [[79, "glossary"]], "Metrics": [[80, "metrics"], [81, "metrics"]], "Metric specification": [[80, "metric-specification"]], "Subsequence metrics": [[80, "subsequence-metrics"], [81, "subsequence-metrics"]], "Elastic and non-elastic metrics": [[80, "elastic-and-non-elastic-metrics"]], "Distance": [[81, "distance"]], "Pairwise distance": [[81, "pairwise-distance"]], "Paired distance": [[81, "paired-distance"]], "Multivariate support": [[81, "multivariate-support"]], "Subsequence search": [[81, "subsequence-search"]], "Pairwise subsequence distance": [[81, "pairwise-subsequence-distance"]], "Benchmark": [[81, "benchmark"]], "Elastic metrics": [[82, "elastic-metrics"]], "Dynamic time warping": [[82, "dynamic-time-warping"]], "Longest common subsequence": [[82, "longest-common-subsequence"]], "Edit-distance with real penalty": [[82, "edit-distance-with-real-penalty"]], "Edit-distance for real sequence": [[82, "edit-distance-for-real-sequence"]], "Time-warp edit distance": [[82, "time-warp-edit-distance"]], "Move-split-merge": [[82, "move-split-merge"]], "Supervised learning": [[83, "supervised-learning"]], "Ensemble estimators": [[84, "ensemble-estimators"]], "Shapelet forests": [[84, "shapelet-forests"]], "Proximity forests": [[84, "proximity-forests"]], "Elastic Ensemble": [[84, "elastic-ensemble"]], "Transform-based estimators": [[85, "transform-based-estimators"]], "Tree-based estimators": [[86, "tree-based-estimators"]], "Unsupervised learning": [[87, "unsupervised-learning"]], "Outlier detection": [[88, "outlier-detection"]], "Outlier detection benchmarks": [[89, "outlier-detection-benchmarks"]], "Minority labeler": [[89, "minority-labeler"]], "Majority labeler": [[89, "majority-labeler"]], "Emmott labeler": [[89, "emmott-labeler"]], "Install wildboar": [[91, "install-wildboar"]], "Build from source": [[92, "build-from-source"]], "What\u2019s new": [[93, "what-s-new"]], "Dependencies": [[93, "dependencies"]], "Version 1.3.0": [[93, "version-1-3-0"]], "New and changed models": [[93, "new-and-changed-models"]]}, "indexentries": {"module": [[1, "module-wildboar.annotate._motifs"], [2, "module-wildboar.annotate._segment"], [3, "module-wildboar.annotate"], [4, "module-wildboar.base"], [5, "module-wildboar.datasets._filter"], [6, "module-wildboar.datasets._repository"], [7, "module-wildboar.datasets"], [8, "module-wildboar.datasets.outlier"], [9, "module-wildboar.datasets.preprocess"], [10, "module-wildboar.dimension_selection._base"], [11, "module-wildboar.dimension_selection._distance"], [12, "module-wildboar.dimension_selection._sequential"], [13, "module-wildboar.dimension_selection._variance"], [14, "module-wildboar.dimension_selection"], [15, "module-wildboar.distance._distance"], [16, "module-wildboar.distance._manifold"], [17, "module-wildboar.distance._matrix_profile"], [18, "module-wildboar.distance._multi_metric"], [19, "module-wildboar.distance._neighbors"], [20, "module-wildboar.distance.dtw"], [21, "module-wildboar.distance"], [22, "module-wildboar.ensemble._elastic"], [23, "module-wildboar.ensemble._ensemble"], [24, "module-wildboar.ensemble"], [25, "module-wildboar.explain._importance"], [26, "module-wildboar.explain.counterfactual._helper"], [27, "module-wildboar.explain.counterfactual._nn"], [28, "module-wildboar.explain.counterfactual._nun"], [29, "module-wildboar.explain.counterfactual._proto"], [30, "module-wildboar.explain.counterfactual._sf"], [31, "module-wildboar.explain.counterfactual"], [32, "module-wildboar.explain"], [33, "module-wildboar"], [34, "module-wildboar.linear_model._hydra"], [35, "module-wildboar.linear_model._rocket"], [36, "module-wildboar.linear_model._shapelet"], [37, "module-wildboar.linear_model._transform"], [38, "module-wildboar.linear_model"], [39, "module-wildboar.metrics._cluster"], [40, "module-wildboar.metrics._counterfactual"], [41, "module-wildboar.metrics"], [42, "module-wildboar.model_selection._cv"], [43, "module-wildboar.model_selection._outlier"], [44, "module-wildboar.model_selection"], [45, "module-wildboar.transform._base"], [46, "module-wildboar.transform._conv"], [47, "module-wildboar.transform._diff"], [48, "module-wildboar.transform._hydra"], [49, "module-wildboar.transform._interval"], [50, "module-wildboar.transform._matrix_profile"], [51, "module-wildboar.transform._pivot"], [52, "module-wildboar.transform._rocket"], [53, "module-wildboar.transform._sax"], [54, "module-wildboar.transform._shapelet"], [55, "module-wildboar.transform"], [56, "module-wildboar.tree._base"], [57, "module-wildboar.tree._ptree"], [58, "module-wildboar.tree._tree"], [59, "module-wildboar.tree"], [60, "module-wildboar.utils._parallel"], [61, "module-wildboar.utils._testing"], [62, "module-wildboar.utils.decorators"], [63, "module-wildboar.utils.estimator_checks"], [64, "module-wildboar.utils"], [65, "module-wildboar.utils.plot"], [66, "module-wildboar.utils.validation"], [67, "module-wildboar.utils.variable_len"], [68, "module-wildboar.version"]], "motifs() (in module wildboar.annotate._motifs)": [[1, "wildboar.annotate._motifs.motifs"]], "wildboar.annotate._motifs": [[1, "module-wildboar.annotate._motifs"]], "segment() (in module wildboar.annotate._segment)": [[2, "wildboar.annotate._segment.segment"]], "wildboar.annotate._segment": [[2, "module-wildboar.annotate._segment"]], "motifs() (in module wildboar.annotate)": [[3, "wildboar.annotate.motifs"]], "segment() (in module wildboar.annotate)": [[3, "wildboar.annotate.segment"]], "wildboar.annotate": [[3, "module-wildboar.annotate"]], "baseestimator (class in wildboar.base)": [[4, "wildboar.base.BaseEstimator"]], "counterfactualmixin (class in wildboar.base)": [[4, "wildboar.base.CounterfactualMixin"]], "explainermixin (class in wildboar.base)": [[4, "wildboar.base.ExplainerMixin"]], "fit_explain() (wildboar.base.explainermixin method)": [[4, "wildboar.base.ExplainerMixin.fit_explain"]], "get_metadata_routing() (wildboar.base.baseestimator method)": [[4, "wildboar.base.BaseEstimator.get_metadata_routing"]], "get_params() (wildboar.base.baseestimator method)": [[4, "wildboar.base.BaseEstimator.get_params"]], "is_counterfactual() (in module wildboar.base)": [[4, "wildboar.base.is_counterfactual"]], "is_explainer() (in module wildboar.base)": [[4, "wildboar.base.is_explainer"]], "plot() (wildboar.base.explainermixin method)": [[4, "wildboar.base.ExplainerMixin.plot"]], "score() (wildboar.base.counterfactualmixin method)": [[4, "wildboar.base.CounterfactualMixin.score"]], "set_params() (wildboar.base.baseestimator method)": [[4, "wildboar.base.BaseEstimator.set_params"]], "wildboar.base": [[4, "module-wildboar.base"]], "make_dict_filter() (in module wildboar.datasets._filter)": [[5, "wildboar.datasets._filter.make_dict_filter"]], "make_filter() (in module wildboar.datasets._filter)": [[5, "wildboar.datasets._filter.make_filter"]], "make_list_filter() (in module wildboar.datasets._filter)": [[5, "wildboar.datasets._filter.make_list_filter"]], "make_str_filter() (in module wildboar.datasets._filter)": [[5, "wildboar.datasets._filter.make_str_filter"]], "wildboar.datasets._filter": [[5, "module-wildboar.datasets._filter"]], "bundle (class in wildboar.datasets._repository)": [[6, "wildboar.datasets._repository.Bundle"]], "jsonrepository (class in wildboar.datasets._repository)": [[6, "wildboar.datasets._repository.JSONRepository"]], "npbundle (class in wildboar.datasets._repository)": [[6, "wildboar.datasets._repository.NpBundle"]], "repository (class in wildboar.datasets._repository)": [[6, "wildboar.datasets._repository.Repository"]], "download_url (wildboar.datasets._repository.jsonrepository property)": [[6, "wildboar.datasets._repository.JSONRepository.download_url"]], "download_url (wildboar.datasets._repository.repository property)": [[6, "wildboar.datasets._repository.Repository.download_url"]], "get_bundle() (wildboar.datasets._repository.jsonrepository method)": [[6, "wildboar.datasets._repository.JSONRepository.get_bundle"]], "get_bundle() (wildboar.datasets._repository.repository method)": [[6, "wildboar.datasets._repository.Repository.get_bundle"]], "get_bundles() (wildboar.datasets._repository.jsonrepository method)": [[6, "wildboar.datasets._repository.JSONRepository.get_bundles"]], "get_bundles() (wildboar.datasets._repository.repository method)": [[6, "wildboar.datasets._repository.Repository.get_bundles"]], "get_collection() (wildboar.datasets._repository.bundle method)": [[6, "wildboar.datasets._repository.Bundle.get_collection"]], "get_collection() (wildboar.datasets._repository.npbundle method)": [[6, "wildboar.datasets._repository.NpBundle.get_collection"]], "get_filename() (wildboar.datasets._repository.bundle method)": [[6, "wildboar.datasets._repository.Bundle.get_filename"]], "get_filename() (wildboar.datasets._repository.npbundle method)": [[6, "wildboar.datasets._repository.NpBundle.get_filename"]], "list() (wildboar.datasets._repository.bundle method)": [[6, "wildboar.datasets._repository.Bundle.list"]], "list() (wildboar.datasets._repository.npbundle method)": [[6, "wildboar.datasets._repository.NpBundle.list"]], "load() (wildboar.datasets._repository.bundle method)": [[6, "wildboar.datasets._repository.Bundle.load"]], "load() (wildboar.datasets._repository.npbundle method)": [[6, "wildboar.datasets._repository.NpBundle.load"]], "name (wildboar.datasets._repository.jsonrepository property)": [[6, "wildboar.datasets._repository.JSONRepository.name"]], "name (wildboar.datasets._repository.repository property)": [[6, "wildboar.datasets._repository.Repository.name"]], "refresh() (wildboar.datasets._repository.jsonrepository method)": [[6, "wildboar.datasets._repository.JSONRepository.refresh"]], "refresh() (wildboar.datasets._repository.repository method)": [[6, "wildboar.datasets._repository.Repository.refresh"]], "version (wildboar.datasets._repository.jsonrepository property)": [[6, "wildboar.datasets._repository.JSONRepository.version"]], "version (wildboar.datasets._repository.repository property)": [[6, "wildboar.datasets._repository.Repository.version"]], "wildboar.datasets._repository": [[6, "module-wildboar.datasets._repository"]], "wildboar_requires (wildboar.datasets._repository.jsonrepository property)": [[6, "wildboar.datasets._repository.JSONRepository.wildboar_requires"]], "wildboar_requires (wildboar.datasets._repository.repository property)": [[6, "wildboar.datasets._repository.Repository.wildboar_requires"]], "bundle (class in wildboar.datasets)": [[7, "wildboar.datasets.Bundle"]], "jsonrepository (class in wildboar.datasets)": [[7, "wildboar.datasets.JSONRepository"]], "npbundle (class in wildboar.datasets)": [[7, "wildboar.datasets.NpBundle"]], "repository (class in wildboar.datasets)": [[7, "wildboar.datasets.Repository"]], "clear_cache() (in module wildboar.datasets)": [[7, "wildboar.datasets.clear_cache"]], "download_url (wildboar.datasets.jsonrepository property)": [[7, "wildboar.datasets.JSONRepository.download_url"]], "download_url (wildboar.datasets.repository property)": [[7, "wildboar.datasets.Repository.download_url"]], "get_bundle() (wildboar.datasets.jsonrepository method)": [[7, "wildboar.datasets.JSONRepository.get_bundle"]], "get_bundle() (wildboar.datasets.repository method)": [[7, "wildboar.datasets.Repository.get_bundle"]], "get_bundles() (in module wildboar.datasets)": [[7, "wildboar.datasets.get_bundles"]], "get_bundles() (wildboar.datasets.jsonrepository method)": [[7, "wildboar.datasets.JSONRepository.get_bundles"]], "get_bundles() (wildboar.datasets.repository method)": [[7, "wildboar.datasets.Repository.get_bundles"]], "get_collection() (wildboar.datasets.bundle method)": [[7, "wildboar.datasets.Bundle.get_collection"]], "get_collection() (wildboar.datasets.npbundle method)": [[7, "wildboar.datasets.NpBundle.get_collection"]], "get_filename() (wildboar.datasets.bundle method)": [[7, "wildboar.datasets.Bundle.get_filename"]], "get_filename() (wildboar.datasets.npbundle method)": [[7, "wildboar.datasets.NpBundle.get_filename"]], "get_repository() (in module wildboar.datasets)": [[7, "wildboar.datasets.get_repository"]], "install_repository() (in module wildboar.datasets)": [[7, "wildboar.datasets.install_repository"]], "list() (wildboar.datasets.bundle method)": [[7, "wildboar.datasets.Bundle.list"]], "list() (wildboar.datasets.npbundle method)": [[7, "wildboar.datasets.NpBundle.list"]], "list_bundles() (in module wildboar.datasets)": [[7, "wildboar.datasets.list_bundles"]], "list_collections() (in module wildboar.datasets)": [[7, "wildboar.datasets.list_collections"]], "list_datasets() (in module wildboar.datasets)": [[7, "wildboar.datasets.list_datasets"]], "list_repositories() (in module wildboar.datasets)": [[7, "wildboar.datasets.list_repositories"]], "load() (wildboar.datasets.bundle method)": [[7, "wildboar.datasets.Bundle.load"]], "load() (wildboar.datasets.npbundle method)": [[7, "wildboar.datasets.NpBundle.load"]], "load_articulary_word_recognition() (in module wildboar.datasets)": [[7, "wildboar.datasets.load_articulary_word_recognition"]], "load_basic_motions() (in module wildboar.datasets)": [[7, "wildboar.datasets.load_basic_motions"]], "load_dataset() (in module wildboar.datasets)": [[7, "wildboar.datasets.load_dataset"]], "load_datasets() (in module wildboar.datasets)": [[7, "wildboar.datasets.load_datasets"]], "load_ering() (in module wildboar.datasets)": [[7, "wildboar.datasets.load_ering"]], "load_gun_point() (in module wildboar.datasets)": [[7, "wildboar.datasets.load_gun_point"]], "load_synthetic_control() (in module wildboar.datasets)": [[7, "wildboar.datasets.load_synthetic_control"]], "load_two_lead_ecg() (in module wildboar.datasets)": [[7, "wildboar.datasets.load_two_lead_ecg"]], "name (wildboar.datasets.jsonrepository property)": [[7, "wildboar.datasets.JSONRepository.name"]], "name (wildboar.datasets.repository property)": [[7, "wildboar.datasets.Repository.name"]], "refresh() (wildboar.datasets.jsonrepository method)": [[7, "wildboar.datasets.JSONRepository.refresh"]], "refresh() (wildboar.datasets.repository method)": [[7, "wildboar.datasets.Repository.refresh"]], "refresh_repositories() (in module wildboar.datasets)": [[7, "wildboar.datasets.refresh_repositories"]], "set_cache_dir() (in module wildboar.datasets)": [[7, "wildboar.datasets.set_cache_dir"]], "version (wildboar.datasets.jsonrepository property)": [[7, "wildboar.datasets.JSONRepository.version"]], "version (wildboar.datasets.repository property)": [[7, "wildboar.datasets.Repository.version"]], "wildboar.datasets": [[7, "module-wildboar.datasets"]], "wildboar_requires (wildboar.datasets.jsonrepository property)": [[7, "wildboar.datasets.JSONRepository.wildboar_requires"]], "wildboar_requires (wildboar.datasets.repository property)": [[7, "wildboar.datasets.Repository.wildboar_requires"]], "density_outliers() (in module wildboar.datasets.outlier)": [[8, "wildboar.datasets.outlier.density_outliers"]], "emmott_outliers() (in module wildboar.datasets.outlier)": [[8, "wildboar.datasets.outlier.emmott_outliers"]], "kmeans_outliers() (in module wildboar.datasets.outlier)": [[8, "wildboar.datasets.outlier.kmeans_outliers"]], "majority_outliers() (in module wildboar.datasets.outlier)": [[8, "wildboar.datasets.outlier.majority_outliers"]], "minority_outliers() (in module wildboar.datasets.outlier)": [[8, "wildboar.datasets.outlier.minority_outliers"]], "wildboar.datasets.outlier": [[8, "module-wildboar.datasets.outlier"]], "maxabs_scale() (in module wildboar.datasets.preprocess)": [[9, "wildboar.datasets.preprocess.maxabs_scale"]], "minmax_scale() (in module wildboar.datasets.preprocess)": [[9, "wildboar.datasets.preprocess.minmax_scale"]], "named_preprocess() (in module wildboar.datasets.preprocess)": [[9, "wildboar.datasets.preprocess.named_preprocess"]], "standardize() (in module wildboar.datasets.preprocess)": [[9, "wildboar.datasets.preprocess.standardize"]], "truncate() (in module wildboar.datasets.preprocess)": [[9, "wildboar.datasets.preprocess.truncate"]], "wildboar.datasets.preprocess": [[9, "module-wildboar.datasets.preprocess"]], "basedistanceselector (class in wildboar.dimension_selection._base)": [[10, "wildboar.dimension_selection._base.BaseDistanceSelector"]], "dimensionselectormixin (class in wildboar.dimension_selection._base)": [[10, "wildboar.dimension_selection._base.DimensionSelectorMixin"]], "fit() (wildboar.dimension_selection._base.basedistanceselector method)": [[10, "wildboar.dimension_selection._base.BaseDistanceSelector.fit"]], "fit_transform() (wildboar.dimension_selection._base.basedistanceselector method)": [[10, "wildboar.dimension_selection._base.BaseDistanceSelector.fit_transform"]], "fit_transform() (wildboar.dimension_selection._base.dimensionselectormixin method)": [[10, "wildboar.dimension_selection._base.DimensionSelectorMixin.fit_transform"]], "get_dimensions() (wildboar.dimension_selection._base.basedistanceselector method)": [[10, "wildboar.dimension_selection._base.BaseDistanceSelector.get_dimensions"]], "get_dimensions() (wildboar.dimension_selection._base.dimensionselectormixin method)": [[10, "wildboar.dimension_selection._base.DimensionSelectorMixin.get_dimensions"]], "get_metadata_routing() (wildboar.dimension_selection._base.basedistanceselector method)": [[10, "wildboar.dimension_selection._base.BaseDistanceSelector.get_metadata_routing"]], "get_params() (wildboar.dimension_selection._base.basedistanceselector method)": [[10, "wildboar.dimension_selection._base.BaseDistanceSelector.get_params"]], "inverse_transform() (wildboar.dimension_selection._base.basedistanceselector method)": [[10, "wildboar.dimension_selection._base.BaseDistanceSelector.inverse_transform"]], "inverse_transform() (wildboar.dimension_selection._base.dimensionselectormixin method)": [[10, "wildboar.dimension_selection._base.DimensionSelectorMixin.inverse_transform"]], "set_output() (wildboar.dimension_selection._base.basedistanceselector method)": [[10, "wildboar.dimension_selection._base.BaseDistanceSelector.set_output"]], "set_output() (wildboar.dimension_selection._base.dimensionselectormixin method)": [[10, "wildboar.dimension_selection._base.DimensionSelectorMixin.set_output"]], "set_params() (wildboar.dimension_selection._base.basedistanceselector method)": [[10, "wildboar.dimension_selection._base.BaseDistanceSelector.set_params"]], "transform() (wildboar.dimension_selection._base.basedistanceselector method)": [[10, "wildboar.dimension_selection._base.BaseDistanceSelector.transform"]], "transform() (wildboar.dimension_selection._base.dimensionselectormixin method)": [[10, "wildboar.dimension_selection._base.DimensionSelectorMixin.transform"]], "wildboar.dimension_selection._base": [[10, "module-wildboar.dimension_selection._base"]], "selectdimensionpercentile (class in wildboar.dimension_selection._distance)": [[11, "wildboar.dimension_selection._distance.SelectDimensionPercentile"]], "selectdimensionsignificance (class in wildboar.dimension_selection._distance)": [[11, "wildboar.dimension_selection._distance.SelectDimensionSignificance"]], "selectdimensiontopk (class in wildboar.dimension_selection._distance)": [[11, "wildboar.dimension_selection._distance.SelectDimensionTopK"]], "fit() (wildboar.dimension_selection._distance.selectdimensionpercentile method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionPercentile.fit"]], "fit() (wildboar.dimension_selection._distance.selectdimensionsignificance method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionSignificance.fit"]], "fit() (wildboar.dimension_selection._distance.selectdimensiontopk method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionTopK.fit"]], "fit_transform() (wildboar.dimension_selection._distance.selectdimensionpercentile method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionPercentile.fit_transform"]], "fit_transform() (wildboar.dimension_selection._distance.selectdimensionsignificance method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionSignificance.fit_transform"]], "fit_transform() (wildboar.dimension_selection._distance.selectdimensiontopk method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionTopK.fit_transform"]], "get_dimensions() (wildboar.dimension_selection._distance.selectdimensionpercentile method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionPercentile.get_dimensions"]], "get_dimensions() (wildboar.dimension_selection._distance.selectdimensionsignificance method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionSignificance.get_dimensions"]], "get_dimensions() (wildboar.dimension_selection._distance.selectdimensiontopk method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionTopK.get_dimensions"]], "get_metadata_routing() (wildboar.dimension_selection._distance.selectdimensionpercentile method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionPercentile.get_metadata_routing"]], "get_metadata_routing() (wildboar.dimension_selection._distance.selectdimensionsignificance method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionSignificance.get_metadata_routing"]], "get_metadata_routing() (wildboar.dimension_selection._distance.selectdimensiontopk method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionTopK.get_metadata_routing"]], "get_params() (wildboar.dimension_selection._distance.selectdimensionpercentile method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionPercentile.get_params"]], "get_params() (wildboar.dimension_selection._distance.selectdimensionsignificance method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionSignificance.get_params"]], "get_params() (wildboar.dimension_selection._distance.selectdimensiontopk method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionTopK.get_params"]], "inverse_transform() (wildboar.dimension_selection._distance.selectdimensionpercentile method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionPercentile.inverse_transform"]], "inverse_transform() (wildboar.dimension_selection._distance.selectdimensionsignificance method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionSignificance.inverse_transform"]], "inverse_transform() (wildboar.dimension_selection._distance.selectdimensiontopk method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionTopK.inverse_transform"]], "set_output() (wildboar.dimension_selection._distance.selectdimensionpercentile method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionPercentile.set_output"]], "set_output() (wildboar.dimension_selection._distance.selectdimensionsignificance method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionSignificance.set_output"]], "set_output() (wildboar.dimension_selection._distance.selectdimensiontopk method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionTopK.set_output"]], "set_params() (wildboar.dimension_selection._distance.selectdimensionpercentile method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionPercentile.set_params"]], "set_params() (wildboar.dimension_selection._distance.selectdimensionsignificance method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionSignificance.set_params"]], "set_params() (wildboar.dimension_selection._distance.selectdimensiontopk method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionTopK.set_params"]], "transform() (wildboar.dimension_selection._distance.selectdimensionpercentile method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionPercentile.transform"]], "transform() (wildboar.dimension_selection._distance.selectdimensionsignificance method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionSignificance.transform"]], "transform() (wildboar.dimension_selection._distance.selectdimensiontopk method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionTopK.transform"]], "wildboar.dimension_selection._distance": [[11, "module-wildboar.dimension_selection._distance"]], "sequentialdimensionselector (class in wildboar.dimension_selection._sequential)": [[12, "wildboar.dimension_selection._sequential.SequentialDimensionSelector"]], "fit() (wildboar.dimension_selection._sequential.sequentialdimensionselector method)": [[12, "wildboar.dimension_selection._sequential.SequentialDimensionSelector.fit"]], "fit_transform() (wildboar.dimension_selection._sequential.sequentialdimensionselector method)": [[12, "wildboar.dimension_selection._sequential.SequentialDimensionSelector.fit_transform"]], "get_dimensions() (wildboar.dimension_selection._sequential.sequentialdimensionselector method)": [[12, "wildboar.dimension_selection._sequential.SequentialDimensionSelector.get_dimensions"]], "get_metadata_routing() (wildboar.dimension_selection._sequential.sequentialdimensionselector method)": [[12, "wildboar.dimension_selection._sequential.SequentialDimensionSelector.get_metadata_routing"]], "get_params() (wildboar.dimension_selection._sequential.sequentialdimensionselector method)": [[12, "wildboar.dimension_selection._sequential.SequentialDimensionSelector.get_params"]], "inverse_transform() (wildboar.dimension_selection._sequential.sequentialdimensionselector method)": [[12, "wildboar.dimension_selection._sequential.SequentialDimensionSelector.inverse_transform"]], "set_output() (wildboar.dimension_selection._sequential.sequentialdimensionselector method)": [[12, "wildboar.dimension_selection._sequential.SequentialDimensionSelector.set_output"]], "set_params() (wildboar.dimension_selection._sequential.sequentialdimensionselector method)": [[12, "wildboar.dimension_selection._sequential.SequentialDimensionSelector.set_params"]], "transform() (wildboar.dimension_selection._sequential.sequentialdimensionselector method)": [[12, "wildboar.dimension_selection._sequential.SequentialDimensionSelector.transform"]], "wildboar.dimension_selection._sequential": [[12, "module-wildboar.dimension_selection._sequential"]], "distancevariancethreshold (class in wildboar.dimension_selection._variance)": [[13, "wildboar.dimension_selection._variance.DistanceVarianceThreshold"]], "fit() (wildboar.dimension_selection._variance.distancevariancethreshold method)": [[13, "wildboar.dimension_selection._variance.DistanceVarianceThreshold.fit"]], "fit_transform() (wildboar.dimension_selection._variance.distancevariancethreshold method)": [[13, "wildboar.dimension_selection._variance.DistanceVarianceThreshold.fit_transform"]], "get_dimensions() (wildboar.dimension_selection._variance.distancevariancethreshold method)": [[13, "wildboar.dimension_selection._variance.DistanceVarianceThreshold.get_dimensions"]], "get_metadata_routing() (wildboar.dimension_selection._variance.distancevariancethreshold method)": [[13, "wildboar.dimension_selection._variance.DistanceVarianceThreshold.get_metadata_routing"]], "get_params() (wildboar.dimension_selection._variance.distancevariancethreshold method)": [[13, "wildboar.dimension_selection._variance.DistanceVarianceThreshold.get_params"]], "inverse_transform() (wildboar.dimension_selection._variance.distancevariancethreshold method)": [[13, "wildboar.dimension_selection._variance.DistanceVarianceThreshold.inverse_transform"]], "set_output() (wildboar.dimension_selection._variance.distancevariancethreshold method)": [[13, "wildboar.dimension_selection._variance.DistanceVarianceThreshold.set_output"]], "set_params() (wildboar.dimension_selection._variance.distancevariancethreshold method)": [[13, "wildboar.dimension_selection._variance.DistanceVarianceThreshold.set_params"]], "transform() (wildboar.dimension_selection._variance.distancevariancethreshold method)": [[13, "wildboar.dimension_selection._variance.DistanceVarianceThreshold.transform"]], "wildboar.dimension_selection._variance": [[13, "module-wildboar.dimension_selection._variance"]], "distancevariancethreshold (class in wildboar.dimension_selection)": [[14, "wildboar.dimension_selection.DistanceVarianceThreshold"]], "selectdimensionpercentile (class in wildboar.dimension_selection)": [[14, "wildboar.dimension_selection.SelectDimensionPercentile"]], "selectdimensionsignificance (class in wildboar.dimension_selection)": [[14, "wildboar.dimension_selection.SelectDimensionSignificance"]], "selectdimensiontopk (class in wildboar.dimension_selection)": [[14, "wildboar.dimension_selection.SelectDimensionTopK"]], "sequentialdimensionselector (class in wildboar.dimension_selection)": [[14, "wildboar.dimension_selection.SequentialDimensionSelector"]], "fit() (wildboar.dimension_selection.distancevariancethreshold method)": [[14, "wildboar.dimension_selection.DistanceVarianceThreshold.fit"]], "fit() (wildboar.dimension_selection.selectdimensionpercentile method)": [[14, "wildboar.dimension_selection.SelectDimensionPercentile.fit"]], "fit() (wildboar.dimension_selection.selectdimensionsignificance method)": [[14, "wildboar.dimension_selection.SelectDimensionSignificance.fit"]], "fit() (wildboar.dimension_selection.selectdimensiontopk method)": [[14, "wildboar.dimension_selection.SelectDimensionTopK.fit"]], "fit() (wildboar.dimension_selection.sequentialdimensionselector method)": [[14, "wildboar.dimension_selection.SequentialDimensionSelector.fit"]], "fit_transform() (wildboar.dimension_selection.distancevariancethreshold method)": [[14, "wildboar.dimension_selection.DistanceVarianceThreshold.fit_transform"]], "fit_transform() (wildboar.dimension_selection.selectdimensionpercentile method)": [[14, "wildboar.dimension_selection.SelectDimensionPercentile.fit_transform"]], "fit_transform() (wildboar.dimension_selection.selectdimensionsignificance method)": [[14, "wildboar.dimension_selection.SelectDimensionSignificance.fit_transform"]], "fit_transform() (wildboar.dimension_selection.selectdimensiontopk method)": [[14, "wildboar.dimension_selection.SelectDimensionTopK.fit_transform"]], "fit_transform() (wildboar.dimension_selection.sequentialdimensionselector method)": [[14, "wildboar.dimension_selection.SequentialDimensionSelector.fit_transform"]], "get_dimensions() (wildboar.dimension_selection.distancevariancethreshold method)": [[14, "wildboar.dimension_selection.DistanceVarianceThreshold.get_dimensions"]], "get_dimensions() (wildboar.dimension_selection.selectdimensionpercentile method)": [[14, "wildboar.dimension_selection.SelectDimensionPercentile.get_dimensions"]], "get_dimensions() (wildboar.dimension_selection.selectdimensionsignificance method)": [[14, "wildboar.dimension_selection.SelectDimensionSignificance.get_dimensions"]], "get_dimensions() (wildboar.dimension_selection.selectdimensiontopk method)": [[14, "wildboar.dimension_selection.SelectDimensionTopK.get_dimensions"]], "get_dimensions() (wildboar.dimension_selection.sequentialdimensionselector method)": [[14, "wildboar.dimension_selection.SequentialDimensionSelector.get_dimensions"]], "get_metadata_routing() (wildboar.dimension_selection.distancevariancethreshold method)": [[14, "wildboar.dimension_selection.DistanceVarianceThreshold.get_metadata_routing"]], "get_metadata_routing() (wildboar.dimension_selection.selectdimensionpercentile method)": [[14, "wildboar.dimension_selection.SelectDimensionPercentile.get_metadata_routing"]], "get_metadata_routing() (wildboar.dimension_selection.selectdimensionsignificance method)": [[14, "wildboar.dimension_selection.SelectDimensionSignificance.get_metadata_routing"]], "get_metadata_routing() (wildboar.dimension_selection.selectdimensiontopk method)": [[14, "wildboar.dimension_selection.SelectDimensionTopK.get_metadata_routing"]], "get_metadata_routing() (wildboar.dimension_selection.sequentialdimensionselector method)": [[14, "wildboar.dimension_selection.SequentialDimensionSelector.get_metadata_routing"]], "get_params() (wildboar.dimension_selection.distancevariancethreshold method)": [[14, "wildboar.dimension_selection.DistanceVarianceThreshold.get_params"]], "get_params() (wildboar.dimension_selection.selectdimensionpercentile method)": [[14, "wildboar.dimension_selection.SelectDimensionPercentile.get_params"]], "get_params() (wildboar.dimension_selection.selectdimensionsignificance method)": [[14, "wildboar.dimension_selection.SelectDimensionSignificance.get_params"]], "get_params() (wildboar.dimension_selection.selectdimensiontopk method)": [[14, "wildboar.dimension_selection.SelectDimensionTopK.get_params"]], "get_params() (wildboar.dimension_selection.sequentialdimensionselector method)": [[14, "wildboar.dimension_selection.SequentialDimensionSelector.get_params"]], "inverse_transform() (wildboar.dimension_selection.distancevariancethreshold method)": [[14, "wildboar.dimension_selection.DistanceVarianceThreshold.inverse_transform"]], "inverse_transform() (wildboar.dimension_selection.selectdimensionpercentile method)": [[14, "wildboar.dimension_selection.SelectDimensionPercentile.inverse_transform"]], "inverse_transform() (wildboar.dimension_selection.selectdimensionsignificance method)": [[14, "wildboar.dimension_selection.SelectDimensionSignificance.inverse_transform"]], "inverse_transform() (wildboar.dimension_selection.selectdimensiontopk method)": [[14, "wildboar.dimension_selection.SelectDimensionTopK.inverse_transform"]], "inverse_transform() (wildboar.dimension_selection.sequentialdimensionselector method)": [[14, "wildboar.dimension_selection.SequentialDimensionSelector.inverse_transform"]], "set_output() (wildboar.dimension_selection.distancevariancethreshold method)": [[14, "wildboar.dimension_selection.DistanceVarianceThreshold.set_output"]], "set_output() (wildboar.dimension_selection.selectdimensionpercentile method)": [[14, "wildboar.dimension_selection.SelectDimensionPercentile.set_output"]], "set_output() (wildboar.dimension_selection.selectdimensionsignificance method)": [[14, "wildboar.dimension_selection.SelectDimensionSignificance.set_output"]], "set_output() (wildboar.dimension_selection.selectdimensiontopk method)": [[14, "wildboar.dimension_selection.SelectDimensionTopK.set_output"]], "set_output() (wildboar.dimension_selection.sequentialdimensionselector method)": [[14, "wildboar.dimension_selection.SequentialDimensionSelector.set_output"]], "set_params() (wildboar.dimension_selection.distancevariancethreshold method)": [[14, "wildboar.dimension_selection.DistanceVarianceThreshold.set_params"]], "set_params() (wildboar.dimension_selection.selectdimensionpercentile method)": [[14, "wildboar.dimension_selection.SelectDimensionPercentile.set_params"]], "set_params() (wildboar.dimension_selection.selectdimensionsignificance method)": [[14, "wildboar.dimension_selection.SelectDimensionSignificance.set_params"]], "set_params() (wildboar.dimension_selection.selectdimensiontopk method)": [[14, "wildboar.dimension_selection.SelectDimensionTopK.set_params"]], "set_params() (wildboar.dimension_selection.sequentialdimensionselector method)": [[14, "wildboar.dimension_selection.SequentialDimensionSelector.set_params"]], "transform() (wildboar.dimension_selection.distancevariancethreshold method)": [[14, "wildboar.dimension_selection.DistanceVarianceThreshold.transform"]], "transform() (wildboar.dimension_selection.selectdimensionpercentile method)": [[14, "wildboar.dimension_selection.SelectDimensionPercentile.transform"]], "transform() (wildboar.dimension_selection.selectdimensionsignificance method)": [[14, "wildboar.dimension_selection.SelectDimensionSignificance.transform"]], "transform() (wildboar.dimension_selection.selectdimensiontopk method)": [[14, "wildboar.dimension_selection.SelectDimensionTopK.transform"]], "transform() (wildboar.dimension_selection.sequentialdimensionselector method)": [[14, "wildboar.dimension_selection.SequentialDimensionSelector.transform"]], "wildboar.dimension_selection": [[14, "module-wildboar.dimension_selection"]], "argmin_distance() (in module wildboar.distance._distance)": [[15, "wildboar.distance._distance.argmin_distance"]], "argmin_subsequence_distance() (in module wildboar.distance._distance)": [[15, "wildboar.distance._distance.argmin_subsequence_distance"]], "distance_profile() (in module wildboar.distance._distance)": [[15, "wildboar.distance._distance.distance_profile"]], "paired_distance() (in module wildboar.distance._distance)": [[15, "wildboar.distance._distance.paired_distance"]], "paired_subsequence_distance() (in module wildboar.distance._distance)": [[15, "wildboar.distance._distance.paired_subsequence_distance"]], "paired_subsequence_match() (in module wildboar.distance._distance)": [[15, "wildboar.distance._distance.paired_subsequence_match"]], "pairwise_distance() (in module wildboar.distance._distance)": [[15, "wildboar.distance._distance.pairwise_distance"]], "pairwise_subsequence_distance() (in module wildboar.distance._distance)": [[15, "wildboar.distance._distance.pairwise_subsequence_distance"]], "subsequence_match() (in module wildboar.distance._distance)": [[15, "wildboar.distance._distance.subsequence_match"]], "wildboar.distance._distance": [[15, "module-wildboar.distance._distance"]], "mds (class in wildboar.distance._manifold)": [[16, "wildboar.distance._manifold.MDS"]], "get_metadata_routing() (wildboar.distance._manifold.mds method)": [[16, "wildboar.distance._manifold.MDS.get_metadata_routing"]], "get_params() (wildboar.distance._manifold.mds method)": [[16, "wildboar.distance._manifold.MDS.get_params"]], "set_params() (wildboar.distance._manifold.mds method)": [[16, "wildboar.distance._manifold.MDS.set_params"]], "wildboar.distance._manifold": [[16, "module-wildboar.distance._manifold"]], "matrix_profile() (in module wildboar.distance._matrix_profile)": [[17, "wildboar.distance._matrix_profile.matrix_profile"]], "wildboar.distance._matrix_profile": [[17, "module-wildboar.distance._matrix_profile"]], "wildboar.distance._multi_metric": [[18, "module-wildboar.distance._multi_metric"]], "kmeans (class in wildboar.distance._neighbors)": [[19, "wildboar.distance._neighbors.KMeans"]], "kmedoids (class in wildboar.distance._neighbors)": [[19, "wildboar.distance._neighbors.KMedoids"]], "kneighborsclassifier (class in wildboar.distance._neighbors)": [[19, "wildboar.distance._neighbors.KNeighborsClassifier"]], "fit() (wildboar.distance._neighbors.kmeans method)": [[19, "wildboar.distance._neighbors.KMeans.fit"]], "fit() (wildboar.distance._neighbors.kmedoids method)": [[19, "wildboar.distance._neighbors.KMedoids.fit"]], "fit() (wildboar.distance._neighbors.kneighborsclassifier method)": [[19, "wildboar.distance._neighbors.KNeighborsClassifier.fit"]], "fit_predict() (wildboar.distance._neighbors.kmeans method)": [[19, "wildboar.distance._neighbors.KMeans.fit_predict"]], "fit_predict() (wildboar.distance._neighbors.kmedoids method)": [[19, "wildboar.distance._neighbors.KMedoids.fit_predict"]], "fit_transform() (wildboar.distance._neighbors.kmeans method)": [[19, "wildboar.distance._neighbors.KMeans.fit_transform"]], "fit_transform() (wildboar.distance._neighbors.kmedoids method)": [[19, "wildboar.distance._neighbors.KMedoids.fit_transform"]], "get_metadata_routing() (wildboar.distance._neighbors.kmeans method)": [[19, "wildboar.distance._neighbors.KMeans.get_metadata_routing"]], "get_metadata_routing() (wildboar.distance._neighbors.kmedoids method)": [[19, "wildboar.distance._neighbors.KMedoids.get_metadata_routing"]], "get_metadata_routing() (wildboar.distance._neighbors.kneighborsclassifier method)": [[19, "wildboar.distance._neighbors.KNeighborsClassifier.get_metadata_routing"]], "get_params() (wildboar.distance._neighbors.kmeans method)": [[19, "wildboar.distance._neighbors.KMeans.get_params"]], "get_params() (wildboar.distance._neighbors.kmedoids method)": [[19, "wildboar.distance._neighbors.KMedoids.get_params"]], "get_params() (wildboar.distance._neighbors.kneighborsclassifier method)": [[19, "wildboar.distance._neighbors.KNeighborsClassifier.get_params"]], "predict() (wildboar.distance._neighbors.kmeans method)": [[19, "wildboar.distance._neighbors.KMeans.predict"]], "predict() (wildboar.distance._neighbors.kmedoids method)": [[19, "wildboar.distance._neighbors.KMedoids.predict"]], "predict() (wildboar.distance._neighbors.kneighborsclassifier method)": [[19, "wildboar.distance._neighbors.KNeighborsClassifier.predict"]], "predict_proba() (wildboar.distance._neighbors.kneighborsclassifier method)": [[19, "wildboar.distance._neighbors.KNeighborsClassifier.predict_proba"]], "score() (wildboar.distance._neighbors.kneighborsclassifier method)": [[19, "wildboar.distance._neighbors.KNeighborsClassifier.score"]], "set_output() (wildboar.distance._neighbors.kmeans method)": [[19, "wildboar.distance._neighbors.KMeans.set_output"]], "set_output() (wildboar.distance._neighbors.kmedoids method)": [[19, "wildboar.distance._neighbors.KMedoids.set_output"]], "set_params() (wildboar.distance._neighbors.kmeans method)": [[19, "wildboar.distance._neighbors.KMeans.set_params"]], "set_params() (wildboar.distance._neighbors.kmedoids method)": [[19, "wildboar.distance._neighbors.KMedoids.set_params"]], "set_params() (wildboar.distance._neighbors.kneighborsclassifier method)": [[19, "wildboar.distance._neighbors.KNeighborsClassifier.set_params"]], "transform() (wildboar.distance._neighbors.kmeans method)": [[19, "wildboar.distance._neighbors.KMeans.transform"]], "transform() (wildboar.distance._neighbors.kmedoids method)": [[19, "wildboar.distance._neighbors.KMedoids.transform"]], "wildboar.distance._neighbors": [[19, "module-wildboar.distance._neighbors"]], "ddtw_distance() (in module wildboar.distance.dtw)": [[20, "wildboar.distance.dtw.ddtw_distance"]], "dtw_alignment() (in module wildboar.distance.dtw)": [[20, "wildboar.distance.dtw.dtw_alignment"]], "dtw_average() (in module wildboar.distance.dtw)": [[20, "wildboar.distance.dtw.dtw_average"]], "dtw_distance() (in module wildboar.distance.dtw)": [[20, "wildboar.distance.dtw.dtw_distance"]], "dtw_envelop() (in module wildboar.distance.dtw)": [[20, "wildboar.distance.dtw.dtw_envelop"]], "dtw_lb_keogh() (in module wildboar.distance.dtw)": [[20, "wildboar.distance.dtw.dtw_lb_keogh"]], "dtw_mapping() (in module wildboar.distance.dtw)": [[20, "wildboar.distance.dtw.dtw_mapping"]], "jeong_weight() (in module wildboar.distance.dtw)": [[20, "wildboar.distance.dtw.jeong_weight"]], "wddtw_distance() (in module wildboar.distance.dtw)": [[20, "wildboar.distance.dtw.wddtw_distance"]], "wdtw_alignment() (in module wildboar.distance.dtw)": [[20, "wildboar.distance.dtw.wdtw_alignment"]], "wdtw_distance() (in module wildboar.distance.dtw)": [[20, "wildboar.distance.dtw.wdtw_distance"]], "wildboar.distance.dtw": [[20, "module-wildboar.distance.dtw"]], "kmeans (class in wildboar.distance)": [[21, "wildboar.distance.KMeans"]], "kmedoids (class in wildboar.distance)": [[21, "wildboar.distance.KMedoids"]], "kneighborsclassifier (class in wildboar.distance)": [[21, "wildboar.distance.KNeighborsClassifier"]], "mds (class in wildboar.distance)": [[21, "wildboar.distance.MDS"]], "argmin_distance() (in module wildboar.distance)": [[21, "wildboar.distance.argmin_distance"]], "argmin_subsequence_distance() (in module wildboar.distance)": [[21, "wildboar.distance.argmin_subsequence_distance"]], "distance_profile() (in module wildboar.distance)": [[21, "wildboar.distance.distance_profile"]], "fit() (wildboar.distance.kmeans method)": [[21, "wildboar.distance.KMeans.fit"]], "fit() (wildboar.distance.kmedoids method)": [[21, "wildboar.distance.KMedoids.fit"]], "fit() (wildboar.distance.kneighborsclassifier method)": [[21, "wildboar.distance.KNeighborsClassifier.fit"]], "fit_predict() (wildboar.distance.kmeans method)": [[21, "wildboar.distance.KMeans.fit_predict"]], "fit_predict() (wildboar.distance.kmedoids method)": [[21, "wildboar.distance.KMedoids.fit_predict"]], "fit_transform() (wildboar.distance.kmeans method)": [[21, "wildboar.distance.KMeans.fit_transform"]], "fit_transform() (wildboar.distance.kmedoids method)": [[21, "wildboar.distance.KMedoids.fit_transform"]], "get_metadata_routing() (wildboar.distance.kmeans method)": [[21, "wildboar.distance.KMeans.get_metadata_routing"]], "get_metadata_routing() (wildboar.distance.kmedoids method)": [[21, "wildboar.distance.KMedoids.get_metadata_routing"]], "get_metadata_routing() (wildboar.distance.kneighborsclassifier method)": [[21, "wildboar.distance.KNeighborsClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.distance.mds method)": [[21, "wildboar.distance.MDS.get_metadata_routing"]], "get_params() (wildboar.distance.kmeans method)": [[21, "wildboar.distance.KMeans.get_params"]], "get_params() (wildboar.distance.kmedoids method)": [[21, "wildboar.distance.KMedoids.get_params"]], "get_params() (wildboar.distance.kneighborsclassifier method)": [[21, "wildboar.distance.KNeighborsClassifier.get_params"]], "get_params() (wildboar.distance.mds method)": [[21, "wildboar.distance.MDS.get_params"]], "matrix_profile() (in module wildboar.distance)": [[21, "wildboar.distance.matrix_profile"]], "paired_distance() (in module wildboar.distance)": [[21, "wildboar.distance.paired_distance"]], "paired_subsequence_distance() (in module wildboar.distance)": [[21, "wildboar.distance.paired_subsequence_distance"]], "paired_subsequence_match() (in module wildboar.distance)": [[21, "wildboar.distance.paired_subsequence_match"]], "pairwise_distance() (in module wildboar.distance)": [[21, "wildboar.distance.pairwise_distance"]], "pairwise_subsequence_distance() (in module wildboar.distance)": [[21, "wildboar.distance.pairwise_subsequence_distance"]], "predict() (wildboar.distance.kmeans method)": [[21, "wildboar.distance.KMeans.predict"]], "predict() (wildboar.distance.kmedoids method)": [[21, "wildboar.distance.KMedoids.predict"]], "predict() (wildboar.distance.kneighborsclassifier method)": [[21, "wildboar.distance.KNeighborsClassifier.predict"]], "predict_proba() (wildboar.distance.kneighborsclassifier method)": [[21, "wildboar.distance.KNeighborsClassifier.predict_proba"]], "score() (wildboar.distance.kneighborsclassifier method)": [[21, "wildboar.distance.KNeighborsClassifier.score"]], "set_output() (wildboar.distance.kmeans method)": [[21, "wildboar.distance.KMeans.set_output"]], "set_output() (wildboar.distance.kmedoids method)": [[21, "wildboar.distance.KMedoids.set_output"]], "set_params() (wildboar.distance.kmeans method)": [[21, "wildboar.distance.KMeans.set_params"]], "set_params() (wildboar.distance.kmedoids method)": [[21, "wildboar.distance.KMedoids.set_params"]], "set_params() (wildboar.distance.kneighborsclassifier method)": [[21, "wildboar.distance.KNeighborsClassifier.set_params"]], "set_params() (wildboar.distance.mds method)": [[21, "wildboar.distance.MDS.set_params"]], "subsequence_match() (in module wildboar.distance)": [[21, "wildboar.distance.subsequence_match"]], "transform() (wildboar.distance.kmeans method)": [[21, "wildboar.distance.KMeans.transform"]], "transform() (wildboar.distance.kmedoids method)": [[21, "wildboar.distance.KMedoids.transform"]], "wildboar.distance": [[21, "module-wildboar.distance"]], "elasticensembleclassifier (class in wildboar.ensemble._elastic)": [[22, "wildboar.ensemble._elastic.ElasticEnsembleClassifier"]], "fit() (wildboar.ensemble._elastic.elasticensembleclassifier method)": [[22, "wildboar.ensemble._elastic.ElasticEnsembleClassifier.fit"]], "get_metadata_routing() (wildboar.ensemble._elastic.elasticensembleclassifier method)": [[22, "wildboar.ensemble._elastic.ElasticEnsembleClassifier.get_metadata_routing"]], "get_params() (wildboar.ensemble._elastic.elasticensembleclassifier method)": [[22, "wildboar.ensemble._elastic.ElasticEnsembleClassifier.get_params"]], "predict() (wildboar.ensemble._elastic.elasticensembleclassifier method)": [[22, "wildboar.ensemble._elastic.ElasticEnsembleClassifier.predict"]], "predict_proba() (wildboar.ensemble._elastic.elasticensembleclassifier method)": [[22, "wildboar.ensemble._elastic.ElasticEnsembleClassifier.predict_proba"]], "score() (wildboar.ensemble._elastic.elasticensembleclassifier method)": [[22, "wildboar.ensemble._elastic.ElasticEnsembleClassifier.score"]], "set_params() (wildboar.ensemble._elastic.elasticensembleclassifier method)": [[22, "wildboar.ensemble._elastic.ElasticEnsembleClassifier.set_params"]], "wildboar.ensemble._elastic": [[22, "module-wildboar.ensemble._elastic"]], "baggingclassifier (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.BaggingClassifier"]], "baggingregressor (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.BaggingRegressor"]], "basebagging (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.BaseBagging"]], "baseforestclassifier (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.BaseForestClassifier"]], "baseforestregressor (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.BaseForestRegressor"]], "baseshapeletforestclassifier (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestClassifier"]], "baseshapeletforestregressor (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestRegressor"]], "extrashapelettreesclassifier (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier"]], "extrashapelettreesregressor (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesRegressor"]], "forestmixin (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.ForestMixin"]], "intervalforestclassifier (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.IntervalForestClassifier"]], "intervalforestregressor (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.IntervalForestRegressor"]], "isolationshapeletforest (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.IsolationShapeletForest"]], "pivotforestclassifier (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.PivotForestClassifier"]], "proximityforestclassifier (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.ProximityForestClassifier"]], "rocketforestclassifier (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.RocketForestClassifier"]], "rocketforestregressor (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.RocketForestRegressor"]], "shapeletforestclassifier (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.ShapeletForestClassifier"]], "shapeletforestembedding (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.ShapeletForestEmbedding"]], "shapeletforestregressor (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.ShapeletForestRegressor"]], "decision_function() (wildboar.ensemble._ensemble.baggingclassifier method)": [[23, "wildboar.ensemble._ensemble.BaggingClassifier.decision_function"]], "decision_function() (wildboar.ensemble._ensemble.baseforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseForestClassifier.decision_function"]], "decision_function() (wildboar.ensemble._ensemble.baseshapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestClassifier.decision_function"]], "decision_function() (wildboar.ensemble._ensemble.extrashapelettreesclassifier method)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier.decision_function"]], "decision_function() (wildboar.ensemble._ensemble.intervalforestclassifier method)": [[23, "wildboar.ensemble._ensemble.IntervalForestClassifier.decision_function"]], "decision_function() (wildboar.ensemble._ensemble.pivotforestclassifier method)": [[23, "wildboar.ensemble._ensemble.PivotForestClassifier.decision_function"]], "decision_function() (wildboar.ensemble._ensemble.proximityforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ProximityForestClassifier.decision_function"]], "decision_function() (wildboar.ensemble._ensemble.rocketforestclassifier method)": [[23, "wildboar.ensemble._ensemble.RocketForestClassifier.decision_function"]], "decision_function() (wildboar.ensemble._ensemble.shapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestClassifier.decision_function"]], "estimators_samples_ (wildboar.ensemble._ensemble.baggingclassifier property)": [[23, "wildboar.ensemble._ensemble.BaggingClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.baggingregressor property)": [[23, "wildboar.ensemble._ensemble.BaggingRegressor.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.basebagging property)": [[23, "wildboar.ensemble._ensemble.BaseBagging.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.baseforestclassifier property)": [[23, "wildboar.ensemble._ensemble.BaseForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.baseforestregressor property)": [[23, "wildboar.ensemble._ensemble.BaseForestRegressor.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.baseshapeletforestclassifier property)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.baseshapeletforestregressor property)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestRegressor.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.extrashapelettreesclassifier property)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.extrashapelettreesregressor property)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesRegressor.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.intervalforestclassifier property)": [[23, "wildboar.ensemble._ensemble.IntervalForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.intervalforestregressor property)": [[23, "wildboar.ensemble._ensemble.IntervalForestRegressor.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.isolationshapeletforest property)": [[23, "wildboar.ensemble._ensemble.IsolationShapeletForest.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.pivotforestclassifier property)": [[23, "wildboar.ensemble._ensemble.PivotForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.proximityforestclassifier property)": [[23, "wildboar.ensemble._ensemble.ProximityForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.rocketforestclassifier property)": [[23, "wildboar.ensemble._ensemble.RocketForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.rocketforestregressor property)": [[23, "wildboar.ensemble._ensemble.RocketForestRegressor.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.shapeletforestclassifier property)": [[23, "wildboar.ensemble._ensemble.ShapeletForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.shapeletforestembedding property)": [[23, "wildboar.ensemble._ensemble.ShapeletForestEmbedding.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.shapeletforestregressor property)": [[23, "wildboar.ensemble._ensemble.ShapeletForestRegressor.estimators_samples_"]], "fit() (wildboar.ensemble._ensemble.baggingclassifier method)": [[23, "wildboar.ensemble._ensemble.BaggingClassifier.fit"]], "fit() (wildboar.ensemble._ensemble.baggingregressor method)": [[23, "wildboar.ensemble._ensemble.BaggingRegressor.fit"]], "fit() (wildboar.ensemble._ensemble.basebagging method)": [[23, "wildboar.ensemble._ensemble.BaseBagging.fit"]], "fit() (wildboar.ensemble._ensemble.baseforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseForestClassifier.fit"]], "fit() (wildboar.ensemble._ensemble.baseforestregressor method)": [[23, "wildboar.ensemble._ensemble.BaseForestRegressor.fit"]], "fit() (wildboar.ensemble._ensemble.baseshapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestClassifier.fit"]], "fit() (wildboar.ensemble._ensemble.baseshapeletforestregressor method)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestRegressor.fit"]], "fit() (wildboar.ensemble._ensemble.extrashapelettreesclassifier method)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier.fit"]], "fit() (wildboar.ensemble._ensemble.extrashapelettreesregressor method)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesRegressor.fit"]], "fit() (wildboar.ensemble._ensemble.intervalforestclassifier method)": [[23, "wildboar.ensemble._ensemble.IntervalForestClassifier.fit"]], "fit() (wildboar.ensemble._ensemble.intervalforestregressor method)": [[23, "wildboar.ensemble._ensemble.IntervalForestRegressor.fit"]], "fit() (wildboar.ensemble._ensemble.isolationshapeletforest method)": [[23, "wildboar.ensemble._ensemble.IsolationShapeletForest.fit"]], "fit() (wildboar.ensemble._ensemble.pivotforestclassifier method)": [[23, "wildboar.ensemble._ensemble.PivotForestClassifier.fit"]], "fit() (wildboar.ensemble._ensemble.proximityforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ProximityForestClassifier.fit"]], "fit() (wildboar.ensemble._ensemble.rocketforestclassifier method)": [[23, "wildboar.ensemble._ensemble.RocketForestClassifier.fit"]], "fit() (wildboar.ensemble._ensemble.rocketforestregressor method)": [[23, "wildboar.ensemble._ensemble.RocketForestRegressor.fit"]], "fit() (wildboar.ensemble._ensemble.shapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestClassifier.fit"]], "fit() (wildboar.ensemble._ensemble.shapeletforestembedding method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestEmbedding.fit"]], "fit() (wildboar.ensemble._ensemble.shapeletforestregressor method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestRegressor.fit"]], "fit_predict() (wildboar.ensemble._ensemble.isolationshapeletforest method)": [[23, "wildboar.ensemble._ensemble.IsolationShapeletForest.fit_predict"]], "get_metadata_routing() (wildboar.ensemble._ensemble.baggingclassifier method)": [[23, "wildboar.ensemble._ensemble.BaggingClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.baggingregressor method)": [[23, "wildboar.ensemble._ensemble.BaggingRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.basebagging method)": [[23, "wildboar.ensemble._ensemble.BaseBagging.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.baseforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.baseforestregressor method)": [[23, "wildboar.ensemble._ensemble.BaseForestRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.baseshapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.baseshapeletforestregressor method)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.extrashapelettreesclassifier method)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.extrashapelettreesregressor method)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.intervalforestclassifier method)": [[23, "wildboar.ensemble._ensemble.IntervalForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.intervalforestregressor method)": [[23, "wildboar.ensemble._ensemble.IntervalForestRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.isolationshapeletforest method)": [[23, "wildboar.ensemble._ensemble.IsolationShapeletForest.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.pivotforestclassifier method)": [[23, "wildboar.ensemble._ensemble.PivotForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.proximityforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ProximityForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.rocketforestclassifier method)": [[23, "wildboar.ensemble._ensemble.RocketForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.rocketforestregressor method)": [[23, "wildboar.ensemble._ensemble.RocketForestRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.shapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.shapeletforestembedding method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestEmbedding.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.shapeletforestregressor method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestRegressor.get_metadata_routing"]], "get_params() (wildboar.ensemble._ensemble.baggingclassifier method)": [[23, "wildboar.ensemble._ensemble.BaggingClassifier.get_params"]], "get_params() (wildboar.ensemble._ensemble.baggingregressor method)": [[23, "wildboar.ensemble._ensemble.BaggingRegressor.get_params"]], "get_params() (wildboar.ensemble._ensemble.basebagging method)": [[23, "wildboar.ensemble._ensemble.BaseBagging.get_params"]], "get_params() (wildboar.ensemble._ensemble.baseforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseForestClassifier.get_params"]], "get_params() (wildboar.ensemble._ensemble.baseforestregressor method)": [[23, "wildboar.ensemble._ensemble.BaseForestRegressor.get_params"]], "get_params() (wildboar.ensemble._ensemble.baseshapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestClassifier.get_params"]], "get_params() (wildboar.ensemble._ensemble.baseshapeletforestregressor method)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestRegressor.get_params"]], "get_params() (wildboar.ensemble._ensemble.extrashapelettreesclassifier method)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier.get_params"]], "get_params() (wildboar.ensemble._ensemble.extrashapelettreesregressor method)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesRegressor.get_params"]], "get_params() (wildboar.ensemble._ensemble.intervalforestclassifier method)": [[23, "wildboar.ensemble._ensemble.IntervalForestClassifier.get_params"]], "get_params() (wildboar.ensemble._ensemble.intervalforestregressor method)": [[23, "wildboar.ensemble._ensemble.IntervalForestRegressor.get_params"]], "get_params() (wildboar.ensemble._ensemble.isolationshapeletforest method)": [[23, "wildboar.ensemble._ensemble.IsolationShapeletForest.get_params"]], "get_params() (wildboar.ensemble._ensemble.pivotforestclassifier method)": [[23, "wildboar.ensemble._ensemble.PivotForestClassifier.get_params"]], "get_params() (wildboar.ensemble._ensemble.proximityforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ProximityForestClassifier.get_params"]], "get_params() (wildboar.ensemble._ensemble.rocketforestclassifier method)": [[23, "wildboar.ensemble._ensemble.RocketForestClassifier.get_params"]], "get_params() (wildboar.ensemble._ensemble.rocketforestregressor method)": [[23, "wildboar.ensemble._ensemble.RocketForestRegressor.get_params"]], "get_params() (wildboar.ensemble._ensemble.shapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestClassifier.get_params"]], "get_params() (wildboar.ensemble._ensemble.shapeletforestembedding method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestEmbedding.get_params"]], "get_params() (wildboar.ensemble._ensemble.shapeletforestregressor method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestRegressor.get_params"]], "predict() (wildboar.ensemble._ensemble.baggingclassifier method)": [[23, "wildboar.ensemble._ensemble.BaggingClassifier.predict"]], "predict() (wildboar.ensemble._ensemble.baggingregressor method)": [[23, "wildboar.ensemble._ensemble.BaggingRegressor.predict"]], "predict() (wildboar.ensemble._ensemble.baseforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseForestClassifier.predict"]], "predict() (wildboar.ensemble._ensemble.baseforestregressor method)": [[23, "wildboar.ensemble._ensemble.BaseForestRegressor.predict"]], "predict() (wildboar.ensemble._ensemble.baseshapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestClassifier.predict"]], "predict() (wildboar.ensemble._ensemble.baseshapeletforestregressor method)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestRegressor.predict"]], "predict() (wildboar.ensemble._ensemble.extrashapelettreesclassifier method)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier.predict"]], "predict() (wildboar.ensemble._ensemble.extrashapelettreesregressor method)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesRegressor.predict"]], "predict() (wildboar.ensemble._ensemble.intervalforestclassifier method)": [[23, "wildboar.ensemble._ensemble.IntervalForestClassifier.predict"]], "predict() (wildboar.ensemble._ensemble.intervalforestregressor method)": [[23, "wildboar.ensemble._ensemble.IntervalForestRegressor.predict"]], "predict() (wildboar.ensemble._ensemble.pivotforestclassifier method)": [[23, "wildboar.ensemble._ensemble.PivotForestClassifier.predict"]], "predict() (wildboar.ensemble._ensemble.proximityforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ProximityForestClassifier.predict"]], "predict() (wildboar.ensemble._ensemble.rocketforestclassifier method)": [[23, "wildboar.ensemble._ensemble.RocketForestClassifier.predict"]], "predict() (wildboar.ensemble._ensemble.rocketforestregressor method)": [[23, "wildboar.ensemble._ensemble.RocketForestRegressor.predict"]], "predict() (wildboar.ensemble._ensemble.shapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestClassifier.predict"]], "predict() (wildboar.ensemble._ensemble.shapeletforestembedding method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestEmbedding.predict"]], "predict() (wildboar.ensemble._ensemble.shapeletforestregressor method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestRegressor.predict"]], "predict_log_proba() (wildboar.ensemble._ensemble.baggingclassifier method)": [[23, "wildboar.ensemble._ensemble.BaggingClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble._ensemble.baseforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseForestClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble._ensemble.baseshapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble._ensemble.extrashapelettreesclassifier method)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble._ensemble.intervalforestclassifier method)": [[23, "wildboar.ensemble._ensemble.IntervalForestClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble._ensemble.pivotforestclassifier method)": [[23, "wildboar.ensemble._ensemble.PivotForestClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble._ensemble.proximityforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ProximityForestClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble._ensemble.rocketforestclassifier method)": [[23, "wildboar.ensemble._ensemble.RocketForestClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble._ensemble.shapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestClassifier.predict_log_proba"]], "predict_proba() (wildboar.ensemble._ensemble.baggingclassifier method)": [[23, "wildboar.ensemble._ensemble.BaggingClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble._ensemble.baseforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseForestClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble._ensemble.baseshapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble._ensemble.extrashapelettreesclassifier method)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble._ensemble.intervalforestclassifier method)": [[23, "wildboar.ensemble._ensemble.IntervalForestClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble._ensemble.pivotforestclassifier method)": [[23, "wildboar.ensemble._ensemble.PivotForestClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble._ensemble.proximityforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ProximityForestClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble._ensemble.rocketforestclassifier method)": [[23, "wildboar.ensemble._ensemble.RocketForestClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble._ensemble.shapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestClassifier.predict_proba"]], "score() (wildboar.ensemble._ensemble.baggingclassifier method)": [[23, "wildboar.ensemble._ensemble.BaggingClassifier.score"]], "score() (wildboar.ensemble._ensemble.baggingregressor method)": [[23, "wildboar.ensemble._ensemble.BaggingRegressor.score"]], "score() (wildboar.ensemble._ensemble.baseforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseForestClassifier.score"]], "score() (wildboar.ensemble._ensemble.baseforestregressor method)": [[23, "wildboar.ensemble._ensemble.BaseForestRegressor.score"]], "score() (wildboar.ensemble._ensemble.baseshapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestClassifier.score"]], "score() (wildboar.ensemble._ensemble.baseshapeletforestregressor method)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestRegressor.score"]], "score() (wildboar.ensemble._ensemble.extrashapelettreesclassifier method)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier.score"]], "score() (wildboar.ensemble._ensemble.extrashapelettreesregressor method)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesRegressor.score"]], "score() (wildboar.ensemble._ensemble.intervalforestclassifier method)": [[23, "wildboar.ensemble._ensemble.IntervalForestClassifier.score"]], "score() (wildboar.ensemble._ensemble.intervalforestregressor method)": [[23, "wildboar.ensemble._ensemble.IntervalForestRegressor.score"]], "score() (wildboar.ensemble._ensemble.pivotforestclassifier method)": [[23, "wildboar.ensemble._ensemble.PivotForestClassifier.score"]], "score() (wildboar.ensemble._ensemble.proximityforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ProximityForestClassifier.score"]], "score() (wildboar.ensemble._ensemble.rocketforestclassifier method)": [[23, "wildboar.ensemble._ensemble.RocketForestClassifier.score"]], "score() (wildboar.ensemble._ensemble.rocketforestregressor method)": [[23, "wildboar.ensemble._ensemble.RocketForestRegressor.score"]], "score() (wildboar.ensemble._ensemble.shapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestClassifier.score"]], "score() (wildboar.ensemble._ensemble.shapeletforestembedding method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestEmbedding.score"]], "score() (wildboar.ensemble._ensemble.shapeletforestregressor method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestRegressor.score"]], "set_params() (wildboar.ensemble._ensemble.baggingclassifier method)": [[23, "wildboar.ensemble._ensemble.BaggingClassifier.set_params"]], "set_params() (wildboar.ensemble._ensemble.baggingregressor method)": [[23, "wildboar.ensemble._ensemble.BaggingRegressor.set_params"]], "set_params() (wildboar.ensemble._ensemble.basebagging method)": [[23, "wildboar.ensemble._ensemble.BaseBagging.set_params"]], "set_params() (wildboar.ensemble._ensemble.baseforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseForestClassifier.set_params"]], "set_params() (wildboar.ensemble._ensemble.baseforestregressor method)": [[23, "wildboar.ensemble._ensemble.BaseForestRegressor.set_params"]], "set_params() (wildboar.ensemble._ensemble.baseshapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestClassifier.set_params"]], "set_params() (wildboar.ensemble._ensemble.baseshapeletforestregressor method)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestRegressor.set_params"]], "set_params() (wildboar.ensemble._ensemble.extrashapelettreesclassifier method)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier.set_params"]], "set_params() (wildboar.ensemble._ensemble.extrashapelettreesregressor method)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesRegressor.set_params"]], "set_params() (wildboar.ensemble._ensemble.intervalforestclassifier method)": [[23, "wildboar.ensemble._ensemble.IntervalForestClassifier.set_params"]], "set_params() (wildboar.ensemble._ensemble.intervalforestregressor method)": [[23, "wildboar.ensemble._ensemble.IntervalForestRegressor.set_params"]], "set_params() (wildboar.ensemble._ensemble.isolationshapeletforest method)": [[23, "wildboar.ensemble._ensemble.IsolationShapeletForest.set_params"]], "set_params() (wildboar.ensemble._ensemble.pivotforestclassifier method)": [[23, "wildboar.ensemble._ensemble.PivotForestClassifier.set_params"]], "set_params() (wildboar.ensemble._ensemble.proximityforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ProximityForestClassifier.set_params"]], "set_params() (wildboar.ensemble._ensemble.rocketforestclassifier method)": [[23, "wildboar.ensemble._ensemble.RocketForestClassifier.set_params"]], "set_params() (wildboar.ensemble._ensemble.rocketforestregressor method)": [[23, "wildboar.ensemble._ensemble.RocketForestRegressor.set_params"]], "set_params() (wildboar.ensemble._ensemble.shapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestClassifier.set_params"]], "set_params() (wildboar.ensemble._ensemble.shapeletforestembedding method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestEmbedding.set_params"]], "set_params() (wildboar.ensemble._ensemble.shapeletforestregressor method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestRegressor.set_params"]], "wildboar.ensemble._ensemble": [[23, "module-wildboar.ensemble._ensemble"]], "baggingclassifier (class in wildboar.ensemble)": [[24, "wildboar.ensemble.BaggingClassifier"]], "baggingregressor (class in wildboar.ensemble)": [[24, "wildboar.ensemble.BaggingRegressor"]], "basebagging (class in wildboar.ensemble)": [[24, "wildboar.ensemble.BaseBagging"]], "elasticensembleclassifier (class in wildboar.ensemble)": [[24, "wildboar.ensemble.ElasticEnsembleClassifier"]], "extrashapelettreesclassifier (class in wildboar.ensemble)": [[24, "wildboar.ensemble.ExtraShapeletTreesClassifier"]], "extrashapelettreesregressor (class in wildboar.ensemble)": [[24, "wildboar.ensemble.ExtraShapeletTreesRegressor"]], "intervalforestclassifier (class in wildboar.ensemble)": [[24, "wildboar.ensemble.IntervalForestClassifier"]], "intervalforestregressor (class in wildboar.ensemble)": [[24, "wildboar.ensemble.IntervalForestRegressor"]], "isolationshapeletforest (class in wildboar.ensemble)": [[24, "wildboar.ensemble.IsolationShapeletForest"]], "pivotforestclassifier (class in wildboar.ensemble)": [[24, "wildboar.ensemble.PivotForestClassifier"]], "proximityforestclassifier (class in wildboar.ensemble)": [[24, "wildboar.ensemble.ProximityForestClassifier"]], "rocketforestclassifier (class in wildboar.ensemble)": [[24, "wildboar.ensemble.RocketForestClassifier"]], "rocketforestregressor (class in wildboar.ensemble)": [[24, "wildboar.ensemble.RocketForestRegressor"]], "shapeletforestclassifier (class in wildboar.ensemble)": [[24, "wildboar.ensemble.ShapeletForestClassifier"]], "shapeletforestembedding (class in wildboar.ensemble)": [[24, "wildboar.ensemble.ShapeletForestEmbedding"]], "shapeletforestregressor (class in wildboar.ensemble)": [[24, "wildboar.ensemble.ShapeletForestRegressor"]], "decision_function() (wildboar.ensemble.baggingclassifier method)": [[24, "wildboar.ensemble.BaggingClassifier.decision_function"]], "decision_function() (wildboar.ensemble.extrashapelettreesclassifier method)": [[24, "wildboar.ensemble.ExtraShapeletTreesClassifier.decision_function"]], "decision_function() (wildboar.ensemble.intervalforestclassifier method)": [[24, "wildboar.ensemble.IntervalForestClassifier.decision_function"]], "decision_function() (wildboar.ensemble.pivotforestclassifier method)": [[24, "wildboar.ensemble.PivotForestClassifier.decision_function"]], "decision_function() (wildboar.ensemble.proximityforestclassifier method)": [[24, "wildboar.ensemble.ProximityForestClassifier.decision_function"]], "decision_function() (wildboar.ensemble.rocketforestclassifier method)": [[24, "wildboar.ensemble.RocketForestClassifier.decision_function"]], "decision_function() (wildboar.ensemble.shapeletforestclassifier method)": [[24, "wildboar.ensemble.ShapeletForestClassifier.decision_function"]], "estimators_samples_ (wildboar.ensemble.baggingclassifier property)": [[24, "wildboar.ensemble.BaggingClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.baggingregressor property)": [[24, "wildboar.ensemble.BaggingRegressor.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.basebagging property)": [[24, "wildboar.ensemble.BaseBagging.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.extrashapelettreesclassifier property)": [[24, "wildboar.ensemble.ExtraShapeletTreesClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.extrashapelettreesregressor property)": [[24, "wildboar.ensemble.ExtraShapeletTreesRegressor.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.intervalforestclassifier property)": [[24, "wildboar.ensemble.IntervalForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.intervalforestregressor property)": [[24, "wildboar.ensemble.IntervalForestRegressor.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.isolationshapeletforest property)": [[24, "wildboar.ensemble.IsolationShapeletForest.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.pivotforestclassifier property)": [[24, "wildboar.ensemble.PivotForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.proximityforestclassifier property)": [[24, "wildboar.ensemble.ProximityForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.rocketforestclassifier property)": [[24, "wildboar.ensemble.RocketForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.rocketforestregressor property)": [[24, "wildboar.ensemble.RocketForestRegressor.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.shapeletforestclassifier property)": [[24, "wildboar.ensemble.ShapeletForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.shapeletforestembedding property)": [[24, "wildboar.ensemble.ShapeletForestEmbedding.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.shapeletforestregressor property)": [[24, "wildboar.ensemble.ShapeletForestRegressor.estimators_samples_"]], "fit() (wildboar.ensemble.baggingclassifier method)": [[24, "wildboar.ensemble.BaggingClassifier.fit"]], "fit() (wildboar.ensemble.baggingregressor method)": [[24, "wildboar.ensemble.BaggingRegressor.fit"]], "fit() (wildboar.ensemble.basebagging method)": [[24, "wildboar.ensemble.BaseBagging.fit"]], "fit() (wildboar.ensemble.elasticensembleclassifier method)": [[24, "wildboar.ensemble.ElasticEnsembleClassifier.fit"]], "fit() (wildboar.ensemble.extrashapelettreesclassifier method)": [[24, "wildboar.ensemble.ExtraShapeletTreesClassifier.fit"]], "fit() (wildboar.ensemble.extrashapelettreesregressor method)": [[24, "wildboar.ensemble.ExtraShapeletTreesRegressor.fit"]], "fit() (wildboar.ensemble.intervalforestclassifier method)": [[24, "wildboar.ensemble.IntervalForestClassifier.fit"]], "fit() (wildboar.ensemble.intervalforestregressor method)": [[24, "wildboar.ensemble.IntervalForestRegressor.fit"]], "fit() (wildboar.ensemble.isolationshapeletforest method)": [[24, "wildboar.ensemble.IsolationShapeletForest.fit"]], "fit() (wildboar.ensemble.pivotforestclassifier method)": [[24, "wildboar.ensemble.PivotForestClassifier.fit"]], "fit() (wildboar.ensemble.proximityforestclassifier method)": [[24, "wildboar.ensemble.ProximityForestClassifier.fit"]], "fit() (wildboar.ensemble.rocketforestclassifier method)": [[24, "wildboar.ensemble.RocketForestClassifier.fit"]], "fit() (wildboar.ensemble.rocketforestregressor method)": [[24, "wildboar.ensemble.RocketForestRegressor.fit"]], "fit() (wildboar.ensemble.shapeletforestclassifier method)": [[24, "wildboar.ensemble.ShapeletForestClassifier.fit"]], "fit() (wildboar.ensemble.shapeletforestembedding method)": [[24, "wildboar.ensemble.ShapeletForestEmbedding.fit"]], "fit() (wildboar.ensemble.shapeletforestregressor method)": [[24, "wildboar.ensemble.ShapeletForestRegressor.fit"]], "fit_predict() (wildboar.ensemble.isolationshapeletforest method)": [[24, "wildboar.ensemble.IsolationShapeletForest.fit_predict"]], "get_metadata_routing() (wildboar.ensemble.baggingclassifier method)": [[24, "wildboar.ensemble.BaggingClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.baggingregressor method)": [[24, "wildboar.ensemble.BaggingRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.basebagging method)": [[24, "wildboar.ensemble.BaseBagging.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.elasticensembleclassifier method)": [[24, "wildboar.ensemble.ElasticEnsembleClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.extrashapelettreesclassifier method)": [[24, "wildboar.ensemble.ExtraShapeletTreesClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.extrashapelettreesregressor method)": [[24, "wildboar.ensemble.ExtraShapeletTreesRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.intervalforestclassifier method)": [[24, "wildboar.ensemble.IntervalForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.intervalforestregressor method)": [[24, "wildboar.ensemble.IntervalForestRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.isolationshapeletforest method)": [[24, "wildboar.ensemble.IsolationShapeletForest.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.pivotforestclassifier method)": [[24, "wildboar.ensemble.PivotForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.proximityforestclassifier method)": [[24, "wildboar.ensemble.ProximityForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.rocketforestclassifier method)": [[24, "wildboar.ensemble.RocketForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.rocketforestregressor method)": [[24, "wildboar.ensemble.RocketForestRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.shapeletforestclassifier method)": [[24, "wildboar.ensemble.ShapeletForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.shapeletforestembedding method)": [[24, "wildboar.ensemble.ShapeletForestEmbedding.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.shapeletforestregressor method)": [[24, "wildboar.ensemble.ShapeletForestRegressor.get_metadata_routing"]], "get_params() (wildboar.ensemble.baggingclassifier method)": [[24, "wildboar.ensemble.BaggingClassifier.get_params"]], "get_params() (wildboar.ensemble.baggingregressor method)": [[24, "wildboar.ensemble.BaggingRegressor.get_params"]], "get_params() (wildboar.ensemble.basebagging method)": [[24, "wildboar.ensemble.BaseBagging.get_params"]], "get_params() (wildboar.ensemble.elasticensembleclassifier method)": [[24, "wildboar.ensemble.ElasticEnsembleClassifier.get_params"]], "get_params() (wildboar.ensemble.extrashapelettreesclassifier method)": [[24, "wildboar.ensemble.ExtraShapeletTreesClassifier.get_params"]], "get_params() (wildboar.ensemble.extrashapelettreesregressor method)": [[24, "wildboar.ensemble.ExtraShapeletTreesRegressor.get_params"]], "get_params() (wildboar.ensemble.intervalforestclassifier method)": [[24, "wildboar.ensemble.IntervalForestClassifier.get_params"]], "get_params() (wildboar.ensemble.intervalforestregressor method)": [[24, "wildboar.ensemble.IntervalForestRegressor.get_params"]], "get_params() (wildboar.ensemble.isolationshapeletforest method)": [[24, "wildboar.ensemble.IsolationShapeletForest.get_params"]], "get_params() (wildboar.ensemble.pivotforestclassifier method)": [[24, "wildboar.ensemble.PivotForestClassifier.get_params"]], "get_params() (wildboar.ensemble.proximityforestclassifier method)": [[24, "wildboar.ensemble.ProximityForestClassifier.get_params"]], "get_params() (wildboar.ensemble.rocketforestclassifier method)": [[24, "wildboar.ensemble.RocketForestClassifier.get_params"]], "get_params() (wildboar.ensemble.rocketforestregressor method)": [[24, "wildboar.ensemble.RocketForestRegressor.get_params"]], "get_params() (wildboar.ensemble.shapeletforestclassifier method)": [[24, "wildboar.ensemble.ShapeletForestClassifier.get_params"]], "get_params() (wildboar.ensemble.shapeletforestembedding method)": [[24, "wildboar.ensemble.ShapeletForestEmbedding.get_params"]], "get_params() (wildboar.ensemble.shapeletforestregressor method)": [[24, "wildboar.ensemble.ShapeletForestRegressor.get_params"]], "predict() (wildboar.ensemble.baggingclassifier method)": [[24, "wildboar.ensemble.BaggingClassifier.predict"]], "predict() (wildboar.ensemble.baggingregressor method)": [[24, "wildboar.ensemble.BaggingRegressor.predict"]], "predict() (wildboar.ensemble.elasticensembleclassifier method)": [[24, "wildboar.ensemble.ElasticEnsembleClassifier.predict"]], "predict() (wildboar.ensemble.extrashapelettreesclassifier method)": [[24, "wildboar.ensemble.ExtraShapeletTreesClassifier.predict"]], "predict() (wildboar.ensemble.extrashapelettreesregressor method)": [[24, "wildboar.ensemble.ExtraShapeletTreesRegressor.predict"]], "predict() (wildboar.ensemble.intervalforestclassifier method)": [[24, "wildboar.ensemble.IntervalForestClassifier.predict"]], "predict() (wildboar.ensemble.intervalforestregressor method)": [[24, "wildboar.ensemble.IntervalForestRegressor.predict"]], "predict() (wildboar.ensemble.pivotforestclassifier method)": [[24, "wildboar.ensemble.PivotForestClassifier.predict"]], "predict() (wildboar.ensemble.proximityforestclassifier method)": [[24, "wildboar.ensemble.ProximityForestClassifier.predict"]], "predict() (wildboar.ensemble.rocketforestclassifier method)": [[24, "wildboar.ensemble.RocketForestClassifier.predict"]], "predict() (wildboar.ensemble.rocketforestregressor method)": [[24, "wildboar.ensemble.RocketForestRegressor.predict"]], "predict() (wildboar.ensemble.shapeletforestclassifier method)": [[24, "wildboar.ensemble.ShapeletForestClassifier.predict"]], "predict() (wildboar.ensemble.shapeletforestembedding method)": [[24, "wildboar.ensemble.ShapeletForestEmbedding.predict"]], "predict() (wildboar.ensemble.shapeletforestregressor method)": [[24, "wildboar.ensemble.ShapeletForestRegressor.predict"]], "predict_log_proba() (wildboar.ensemble.baggingclassifier method)": [[24, "wildboar.ensemble.BaggingClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble.extrashapelettreesclassifier method)": [[24, "wildboar.ensemble.ExtraShapeletTreesClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble.intervalforestclassifier method)": [[24, "wildboar.ensemble.IntervalForestClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble.pivotforestclassifier method)": [[24, "wildboar.ensemble.PivotForestClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble.proximityforestclassifier method)": [[24, "wildboar.ensemble.ProximityForestClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble.rocketforestclassifier method)": [[24, "wildboar.ensemble.RocketForestClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble.shapeletforestclassifier method)": [[24, "wildboar.ensemble.ShapeletForestClassifier.predict_log_proba"]], "predict_proba() (wildboar.ensemble.baggingclassifier method)": [[24, "wildboar.ensemble.BaggingClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble.elasticensembleclassifier method)": [[24, "wildboar.ensemble.ElasticEnsembleClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble.extrashapelettreesclassifier method)": [[24, "wildboar.ensemble.ExtraShapeletTreesClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble.intervalforestclassifier method)": [[24, "wildboar.ensemble.IntervalForestClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble.pivotforestclassifier method)": [[24, "wildboar.ensemble.PivotForestClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble.proximityforestclassifier method)": [[24, "wildboar.ensemble.ProximityForestClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble.rocketforestclassifier method)": [[24, "wildboar.ensemble.RocketForestClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble.shapeletforestclassifier method)": [[24, "wildboar.ensemble.ShapeletForestClassifier.predict_proba"]], "score() (wildboar.ensemble.baggingclassifier method)": [[24, "wildboar.ensemble.BaggingClassifier.score"]], "score() (wildboar.ensemble.baggingregressor method)": [[24, "wildboar.ensemble.BaggingRegressor.score"]], "score() (wildboar.ensemble.elasticensembleclassifier method)": [[24, "wildboar.ensemble.ElasticEnsembleClassifier.score"]], "score() (wildboar.ensemble.extrashapelettreesclassifier method)": [[24, "wildboar.ensemble.ExtraShapeletTreesClassifier.score"]], "score() (wildboar.ensemble.extrashapelettreesregressor method)": [[24, "wildboar.ensemble.ExtraShapeletTreesRegressor.score"]], "score() (wildboar.ensemble.intervalforestclassifier method)": [[24, "wildboar.ensemble.IntervalForestClassifier.score"]], "score() (wildboar.ensemble.intervalforestregressor method)": [[24, "wildboar.ensemble.IntervalForestRegressor.score"]], "score() (wildboar.ensemble.pivotforestclassifier method)": [[24, "wildboar.ensemble.PivotForestClassifier.score"]], "score() (wildboar.ensemble.proximityforestclassifier method)": [[24, "wildboar.ensemble.ProximityForestClassifier.score"]], "score() (wildboar.ensemble.rocketforestclassifier method)": [[24, "wildboar.ensemble.RocketForestClassifier.score"]], "score() (wildboar.ensemble.rocketforestregressor method)": [[24, "wildboar.ensemble.RocketForestRegressor.score"]], "score() (wildboar.ensemble.shapeletforestclassifier method)": [[24, "wildboar.ensemble.ShapeletForestClassifier.score"]], "score() (wildboar.ensemble.shapeletforestembedding method)": [[24, "wildboar.ensemble.ShapeletForestEmbedding.score"]], "score() (wildboar.ensemble.shapeletforestregressor method)": [[24, "wildboar.ensemble.ShapeletForestRegressor.score"]], "set_params() (wildboar.ensemble.baggingclassifier method)": [[24, "wildboar.ensemble.BaggingClassifier.set_params"]], "set_params() (wildboar.ensemble.baggingregressor method)": [[24, "wildboar.ensemble.BaggingRegressor.set_params"]], "set_params() (wildboar.ensemble.basebagging method)": [[24, "wildboar.ensemble.BaseBagging.set_params"]], "set_params() (wildboar.ensemble.elasticensembleclassifier method)": [[24, "wildboar.ensemble.ElasticEnsembleClassifier.set_params"]], "set_params() (wildboar.ensemble.extrashapelettreesclassifier method)": [[24, "wildboar.ensemble.ExtraShapeletTreesClassifier.set_params"]], "set_params() (wildboar.ensemble.extrashapelettreesregressor method)": [[24, "wildboar.ensemble.ExtraShapeletTreesRegressor.set_params"]], "set_params() (wildboar.ensemble.intervalforestclassifier method)": [[24, "wildboar.ensemble.IntervalForestClassifier.set_params"]], "set_params() (wildboar.ensemble.intervalforestregressor method)": [[24, "wildboar.ensemble.IntervalForestRegressor.set_params"]], "set_params() (wildboar.ensemble.isolationshapeletforest method)": [[24, "wildboar.ensemble.IsolationShapeletForest.set_params"]], "set_params() (wildboar.ensemble.pivotforestclassifier method)": [[24, "wildboar.ensemble.PivotForestClassifier.set_params"]], "set_params() (wildboar.ensemble.proximityforestclassifier method)": [[24, "wildboar.ensemble.ProximityForestClassifier.set_params"]], "set_params() (wildboar.ensemble.rocketforestclassifier method)": [[24, "wildboar.ensemble.RocketForestClassifier.set_params"]], "set_params() (wildboar.ensemble.rocketforestregressor method)": [[24, "wildboar.ensemble.RocketForestRegressor.set_params"]], "set_params() (wildboar.ensemble.shapeletforestclassifier method)": [[24, "wildboar.ensemble.ShapeletForestClassifier.set_params"]], "set_params() (wildboar.ensemble.shapeletforestembedding method)": [[24, "wildboar.ensemble.ShapeletForestEmbedding.set_params"]], "set_params() (wildboar.ensemble.shapeletforestregressor method)": [[24, "wildboar.ensemble.ShapeletForestRegressor.set_params"]], "wildboar.ensemble": [[24, "module-wildboar.ensemble"]], "amplitudeimportance (class in wildboar.explain._importance)": [[25, "wildboar.explain._importance.AmplitudeImportance"]], "frequencyimportance (class in wildboar.explain._importance)": [[25, "wildboar.explain._importance.FrequencyImportance"]], "intervalimportance (class in wildboar.explain._importance)": [[25, "wildboar.explain._importance.IntervalImportance"]], "permuteimportance (class in wildboar.explain._importance)": [[25, "wildboar.explain._importance.PermuteImportance"]], "shapeletimportance (class in wildboar.explain._importance)": [[25, "wildboar.explain._importance.ShapeletImportance"]], "fit_explain() (wildboar.explain._importance.amplitudeimportance method)": [[25, "wildboar.explain._importance.AmplitudeImportance.fit_explain"]], "fit_explain() (wildboar.explain._importance.frequencyimportance method)": [[25, "wildboar.explain._importance.FrequencyImportance.fit_explain"]], "fit_explain() (wildboar.explain._importance.intervalimportance method)": [[25, "wildboar.explain._importance.IntervalImportance.fit_explain"]], "fit_explain() (wildboar.explain._importance.shapeletimportance method)": [[25, "wildboar.explain._importance.ShapeletImportance.fit_explain"]], "get_metadata_routing() (wildboar.explain._importance.amplitudeimportance method)": [[25, "wildboar.explain._importance.AmplitudeImportance.get_metadata_routing"]], "get_metadata_routing() (wildboar.explain._importance.frequencyimportance method)": [[25, "wildboar.explain._importance.FrequencyImportance.get_metadata_routing"]], "get_metadata_routing() (wildboar.explain._importance.intervalimportance method)": [[25, "wildboar.explain._importance.IntervalImportance.get_metadata_routing"]], "get_metadata_routing() (wildboar.explain._importance.permuteimportance method)": [[25, "wildboar.explain._importance.PermuteImportance.get_metadata_routing"]], "get_metadata_routing() (wildboar.explain._importance.shapeletimportance method)": [[25, "wildboar.explain._importance.ShapeletImportance.get_metadata_routing"]], "get_params() (wildboar.explain._importance.amplitudeimportance method)": [[25, "wildboar.explain._importance.AmplitudeImportance.get_params"]], "get_params() (wildboar.explain._importance.frequencyimportance method)": [[25, "wildboar.explain._importance.FrequencyImportance.get_params"]], "get_params() (wildboar.explain._importance.intervalimportance method)": [[25, "wildboar.explain._importance.IntervalImportance.get_params"]], "get_params() (wildboar.explain._importance.permuteimportance method)": [[25, "wildboar.explain._importance.PermuteImportance.get_params"]], "get_params() (wildboar.explain._importance.shapeletimportance method)": [[25, "wildboar.explain._importance.ShapeletImportance.get_params"]], "plot() (wildboar.explain._importance.amplitudeimportance method)": [[25, "wildboar.explain._importance.AmplitudeImportance.plot"]], "plot() (wildboar.explain._importance.frequencyimportance method)": [[25, "wildboar.explain._importance.FrequencyImportance.plot"]], "plot() (wildboar.explain._importance.intervalimportance method)": [[25, "wildboar.explain._importance.IntervalImportance.plot"]], "plot() (wildboar.explain._importance.shapeletimportance method)": [[25, "wildboar.explain._importance.ShapeletImportance.plot"]], "plot_importances() (in module wildboar.explain._importance)": [[25, "wildboar.explain._importance.plot_importances"]], "set_params() (wildboar.explain._importance.amplitudeimportance method)": [[25, "wildboar.explain._importance.AmplitudeImportance.set_params"]], "set_params() (wildboar.explain._importance.frequencyimportance method)": [[25, "wildboar.explain._importance.FrequencyImportance.set_params"]], "set_params() (wildboar.explain._importance.intervalimportance method)": [[25, "wildboar.explain._importance.IntervalImportance.set_params"]], "set_params() (wildboar.explain._importance.permuteimportance method)": [[25, "wildboar.explain._importance.PermuteImportance.set_params"]], "set_params() (wildboar.explain._importance.shapeletimportance method)": [[25, "wildboar.explain._importance.ShapeletImportance.set_params"]], "wildboar.explain._importance": [[25, "module-wildboar.explain._importance"]], "predictevaluator (class in wildboar.explain.counterfactual._helper)": [[26, "wildboar.explain.counterfactual._helper.PredictEvaluator"]], "probabilityevaluator (class in wildboar.explain.counterfactual._helper)": [[26, "wildboar.explain.counterfactual._helper.ProbabilityEvaluator"]], "targetevaluator (class in wildboar.explain.counterfactual._helper)": [[26, "wildboar.explain.counterfactual._helper.TargetEvaluator"]], "counterfactuals() (in module wildboar.explain.counterfactual._helper)": [[26, "wildboar.explain.counterfactual._helper.counterfactuals"]], "is_counterfactual() (wildboar.explain.counterfactual._helper.predictevaluator method)": [[26, "wildboar.explain.counterfactual._helper.PredictEvaluator.is_counterfactual"]], "is_counterfactual() (wildboar.explain.counterfactual._helper.probabilityevaluator method)": [[26, "wildboar.explain.counterfactual._helper.ProbabilityEvaluator.is_counterfactual"]], "is_counterfactual() (wildboar.explain.counterfactual._helper.targetevaluator method)": [[26, "wildboar.explain.counterfactual._helper.TargetEvaluator.is_counterfactual"]], "wildboar.explain.counterfactual._helper": [[26, "module-wildboar.explain.counterfactual._helper"]], "kneighborscounterfactual (class in wildboar.explain.counterfactual._nn)": [[27, "wildboar.explain.counterfactual._nn.KNeighborsCounterfactual"]], "fit_explain() (wildboar.explain.counterfactual._nn.kneighborscounterfactual method)": [[27, "wildboar.explain.counterfactual._nn.KNeighborsCounterfactual.fit_explain"]], "get_metadata_routing() (wildboar.explain.counterfactual._nn.kneighborscounterfactual method)": [[27, "wildboar.explain.counterfactual._nn.KNeighborsCounterfactual.get_metadata_routing"]], "get_params() (wildboar.explain.counterfactual._nn.kneighborscounterfactual method)": [[27, "wildboar.explain.counterfactual._nn.KNeighborsCounterfactual.get_params"]], "plot() (wildboar.explain.counterfactual._nn.kneighborscounterfactual method)": [[27, "wildboar.explain.counterfactual._nn.KNeighborsCounterfactual.plot"]], "score() (wildboar.explain.counterfactual._nn.kneighborscounterfactual method)": [[27, "wildboar.explain.counterfactual._nn.KNeighborsCounterfactual.score"]], "set_params() (wildboar.explain.counterfactual._nn.kneighborscounterfactual method)": [[27, "wildboar.explain.counterfactual._nn.KNeighborsCounterfactual.set_params"]], "wildboar.explain.counterfactual._nn": [[27, "module-wildboar.explain.counterfactual._nn"]], "nativeguidecounterfactual (class in wildboar.explain.counterfactual._nun)": [[28, "wildboar.explain.counterfactual._nun.NativeGuideCounterfactual"]], "fit_explain() (wildboar.explain.counterfactual._nun.nativeguidecounterfactual method)": [[28, "wildboar.explain.counterfactual._nun.NativeGuideCounterfactual.fit_explain"]], "get_metadata_routing() (wildboar.explain.counterfactual._nun.nativeguidecounterfactual method)": [[28, "wildboar.explain.counterfactual._nun.NativeGuideCounterfactual.get_metadata_routing"]], "get_params() (wildboar.explain.counterfactual._nun.nativeguidecounterfactual method)": [[28, "wildboar.explain.counterfactual._nun.NativeGuideCounterfactual.get_params"]], "plot() (wildboar.explain.counterfactual._nun.nativeguidecounterfactual method)": [[28, "wildboar.explain.counterfactual._nun.NativeGuideCounterfactual.plot"]], "score() (wildboar.explain.counterfactual._nun.nativeguidecounterfactual method)": [[28, "wildboar.explain.counterfactual._nun.NativeGuideCounterfactual.score"]], "set_params() (wildboar.explain.counterfactual._nun.nativeguidecounterfactual method)": [[28, "wildboar.explain.counterfactual._nun.NativeGuideCounterfactual.set_params"]], "wildboar.explain.counterfactual._nun": [[28, "module-wildboar.explain.counterfactual._nun"]], "dynamictimewarptransform (class in wildboar.explain.counterfactual._proto)": [[29, "wildboar.explain.counterfactual._proto.DynamicTimeWarpTransform"]], "euclideantransform (class in wildboar.explain.counterfactual._proto)": [[29, "wildboar.explain.counterfactual._proto.EuclideanTransform"]], "knearestprototypesampler (class in wildboar.explain.counterfactual._proto)": [[29, "wildboar.explain.counterfactual._proto.KNearestPrototypeSampler"]], "knearestshapeletprototypesampler (class in wildboar.explain.counterfactual._proto)": [[29, "wildboar.explain.counterfactual._proto.KNearestShapeletPrototypeSampler"]], "metrictransform (class in wildboar.explain.counterfactual._proto)": [[29, "wildboar.explain.counterfactual._proto.MetricTransform"]], "predictevaluator (class in wildboar.explain.counterfactual._proto)": [[29, "wildboar.explain.counterfactual._proto.PredictEvaluator"]], "probabilityevaluator (class in wildboar.explain.counterfactual._proto)": [[29, "wildboar.explain.counterfactual._proto.ProbabilityEvaluator"]], "prototypecounterfactual (class in wildboar.explain.counterfactual._proto)": [[29, "wildboar.explain.counterfactual._proto.PrototypeCounterfactual"]], "prototypesampler (class in wildboar.explain.counterfactual._proto)": [[29, "wildboar.explain.counterfactual._proto.PrototypeSampler"]], "shapeletprototypesampler (class in wildboar.explain.counterfactual._proto)": [[29, "wildboar.explain.counterfactual._proto.ShapeletPrototypeSampler"]], "targetevaluator (class in wildboar.explain.counterfactual._proto)": [[29, "wildboar.explain.counterfactual._proto.TargetEvaluator"]], "uniformprototypesampler (class in wildboar.explain.counterfactual._proto)": [[29, "wildboar.explain.counterfactual._proto.UniformPrototypeSampler"]], "weighteddynamictimewarptransform (class in wildboar.explain.counterfactual._proto)": [[29, "wildboar.explain.counterfactual._proto.WeightedDynamicTimeWarpTransform"]], "fit_explain() (wildboar.explain.counterfactual._proto.prototypecounterfactual method)": [[29, "wildboar.explain.counterfactual._proto.PrototypeCounterfactual.fit_explain"]], "get_metadata_routing() (wildboar.explain.counterfactual._proto.prototypecounterfactual method)": [[29, "wildboar.explain.counterfactual._proto.PrototypeCounterfactual.get_metadata_routing"]], "get_params() (wildboar.explain.counterfactual._proto.prototypecounterfactual method)": [[29, "wildboar.explain.counterfactual._proto.PrototypeCounterfactual.get_params"]], "is_counterfactual() (wildboar.explain.counterfactual._proto.predictevaluator method)": [[29, "wildboar.explain.counterfactual._proto.PredictEvaluator.is_counterfactual"]], "is_counterfactual() (wildboar.explain.counterfactual._proto.probabilityevaluator method)": [[29, "wildboar.explain.counterfactual._proto.ProbabilityEvaluator.is_counterfactual"]], "is_counterfactual() (wildboar.explain.counterfactual._proto.targetevaluator method)": [[29, "wildboar.explain.counterfactual._proto.TargetEvaluator.is_counterfactual"]], "move() (wildboar.explain.counterfactual._proto.dynamictimewarptransform method)": [[29, "wildboar.explain.counterfactual._proto.DynamicTimeWarpTransform.move"]], "move() (wildboar.explain.counterfactual._proto.euclideantransform method)": [[29, "wildboar.explain.counterfactual._proto.EuclideanTransform.move"]], "move() (wildboar.explain.counterfactual._proto.knearestprototypesampler method)": [[29, "wildboar.explain.counterfactual._proto.KNearestPrototypeSampler.move"]], "move() (wildboar.explain.counterfactual._proto.knearestshapeletprototypesampler method)": [[29, "wildboar.explain.counterfactual._proto.KNearestShapeletPrototypeSampler.move"]], "move() (wildboar.explain.counterfactual._proto.metrictransform method)": [[29, "wildboar.explain.counterfactual._proto.MetricTransform.move"]], "move() (wildboar.explain.counterfactual._proto.prototypesampler method)": [[29, "wildboar.explain.counterfactual._proto.PrototypeSampler.move"]], "move() (wildboar.explain.counterfactual._proto.shapeletprototypesampler method)": [[29, "wildboar.explain.counterfactual._proto.ShapeletPrototypeSampler.move"]], "move() (wildboar.explain.counterfactual._proto.uniformprototypesampler method)": [[29, "wildboar.explain.counterfactual._proto.UniformPrototypeSampler.move"]], "move() (wildboar.explain.counterfactual._proto.weighteddynamictimewarptransform method)": [[29, "wildboar.explain.counterfactual._proto.WeightedDynamicTimeWarpTransform.move"]], "nearest_index() (wildboar.explain.counterfactual._proto.knearestprototypesampler method)": [[29, "wildboar.explain.counterfactual._proto.KNearestPrototypeSampler.nearest_index"]], "plot() (wildboar.explain.counterfactual._proto.prototypecounterfactual method)": [[29, "wildboar.explain.counterfactual._proto.PrototypeCounterfactual.plot"]], "sample() (wildboar.explain.counterfactual._proto.knearestprototypesampler method)": [[29, "wildboar.explain.counterfactual._proto.KNearestPrototypeSampler.sample"]], "sample() (wildboar.explain.counterfactual._proto.knearestshapeletprototypesampler method)": [[29, "wildboar.explain.counterfactual._proto.KNearestShapeletPrototypeSampler.sample"]], "sample() (wildboar.explain.counterfactual._proto.prototypesampler method)": [[29, "wildboar.explain.counterfactual._proto.PrototypeSampler.sample"]], "sample() (wildboar.explain.counterfactual._proto.shapeletprototypesampler method)": [[29, "wildboar.explain.counterfactual._proto.ShapeletPrototypeSampler.sample"]], "sample() (wildboar.explain.counterfactual._proto.uniformprototypesampler method)": [[29, "wildboar.explain.counterfactual._proto.UniformPrototypeSampler.sample"]], "sample_move() (wildboar.explain.counterfactual._proto.knearestprototypesampler method)": [[29, "wildboar.explain.counterfactual._proto.KNearestPrototypeSampler.sample_move"]], "sample_move() (wildboar.explain.counterfactual._proto.knearestshapeletprototypesampler method)": [[29, "wildboar.explain.counterfactual._proto.KNearestShapeletPrototypeSampler.sample_move"]], "sample_move() (wildboar.explain.counterfactual._proto.prototypesampler method)": [[29, "wildboar.explain.counterfactual._proto.PrototypeSampler.sample_move"]], "sample_move() (wildboar.explain.counterfactual._proto.shapeletprototypesampler method)": [[29, "wildboar.explain.counterfactual._proto.ShapeletPrototypeSampler.sample_move"]], "sample_move() (wildboar.explain.counterfactual._proto.uniformprototypesampler method)": [[29, "wildboar.explain.counterfactual._proto.UniformPrototypeSampler.sample_move"]], "sample_shapelet() (wildboar.explain.counterfactual._proto.shapeletprototypesampler method)": [[29, "wildboar.explain.counterfactual._proto.ShapeletPrototypeSampler.sample_shapelet"]], "score() (wildboar.explain.counterfactual._proto.prototypecounterfactual method)": [[29, "wildboar.explain.counterfactual._proto.PrototypeCounterfactual.score"]], "set_params() (wildboar.explain.counterfactual._proto.prototypecounterfactual method)": [[29, "wildboar.explain.counterfactual._proto.PrototypeCounterfactual.set_params"]], "wildboar.explain.counterfactual._proto": [[29, "module-wildboar.explain.counterfactual._proto"]], "shapeletforestcounterfactual (class in wildboar.explain.counterfactual._sf)": [[30, "wildboar.explain.counterfactual._sf.ShapeletForestCounterfactual"]], "fit_explain() (wildboar.explain.counterfactual._sf.shapeletforestcounterfactual method)": [[30, "wildboar.explain.counterfactual._sf.ShapeletForestCounterfactual.fit_explain"]], "get_metadata_routing() (wildboar.explain.counterfactual._sf.shapeletforestcounterfactual method)": [[30, "wildboar.explain.counterfactual._sf.ShapeletForestCounterfactual.get_metadata_routing"]], "get_params() (wildboar.explain.counterfactual._sf.shapeletforestcounterfactual method)": [[30, "wildboar.explain.counterfactual._sf.ShapeletForestCounterfactual.get_params"]], "plot() (wildboar.explain.counterfactual._sf.shapeletforestcounterfactual method)": [[30, "wildboar.explain.counterfactual._sf.ShapeletForestCounterfactual.plot"]], "score() (wildboar.explain.counterfactual._sf.shapeletforestcounterfactual method)": [[30, "wildboar.explain.counterfactual._sf.ShapeletForestCounterfactual.score"]], "set_params() (wildboar.explain.counterfactual._sf.shapeletforestcounterfactual method)": [[30, "wildboar.explain.counterfactual._sf.ShapeletForestCounterfactual.set_params"]], "wildboar.explain.counterfactual._sf": [[30, "module-wildboar.explain.counterfactual._sf"]], "kneighborscounterfactual (class in wildboar.explain.counterfactual)": [[31, "wildboar.explain.counterfactual.KNeighborsCounterfactual"]], "nativeguidecounterfactual (class in wildboar.explain.counterfactual)": [[31, "wildboar.explain.counterfactual.NativeGuideCounterfactual"]], "prototypecounterfactual (class in wildboar.explain.counterfactual)": [[31, "wildboar.explain.counterfactual.PrototypeCounterfactual"]], "shapeletforestcounterfactual (class in wildboar.explain.counterfactual)": [[31, "wildboar.explain.counterfactual.ShapeletForestCounterfactual"]], "counterfactuals() (in module wildboar.explain.counterfactual)": [[31, "wildboar.explain.counterfactual.counterfactuals"]], "fit_explain() (wildboar.explain.counterfactual.kneighborscounterfactual method)": [[31, "wildboar.explain.counterfactual.KNeighborsCounterfactual.fit_explain"]], "fit_explain() (wildboar.explain.counterfactual.nativeguidecounterfactual method)": [[31, "wildboar.explain.counterfactual.NativeGuideCounterfactual.fit_explain"]], "fit_explain() (wildboar.explain.counterfactual.prototypecounterfactual method)": [[31, "wildboar.explain.counterfactual.PrototypeCounterfactual.fit_explain"]], "fit_explain() (wildboar.explain.counterfactual.shapeletforestcounterfactual method)": [[31, "wildboar.explain.counterfactual.ShapeletForestCounterfactual.fit_explain"]], "get_metadata_routing() (wildboar.explain.counterfactual.kneighborscounterfactual method)": [[31, "wildboar.explain.counterfactual.KNeighborsCounterfactual.get_metadata_routing"]], "get_metadata_routing() (wildboar.explain.counterfactual.nativeguidecounterfactual method)": [[31, "wildboar.explain.counterfactual.NativeGuideCounterfactual.get_metadata_routing"]], "get_metadata_routing() (wildboar.explain.counterfactual.prototypecounterfactual method)": [[31, "wildboar.explain.counterfactual.PrototypeCounterfactual.get_metadata_routing"]], "get_metadata_routing() (wildboar.explain.counterfactual.shapeletforestcounterfactual method)": [[31, "wildboar.explain.counterfactual.ShapeletForestCounterfactual.get_metadata_routing"]], "get_params() (wildboar.explain.counterfactual.kneighborscounterfactual method)": [[31, "wildboar.explain.counterfactual.KNeighborsCounterfactual.get_params"]], "get_params() (wildboar.explain.counterfactual.nativeguidecounterfactual method)": [[31, "wildboar.explain.counterfactual.NativeGuideCounterfactual.get_params"]], "get_params() (wildboar.explain.counterfactual.prototypecounterfactual method)": [[31, "wildboar.explain.counterfactual.PrototypeCounterfactual.get_params"]], "get_params() (wildboar.explain.counterfactual.shapeletforestcounterfactual method)": [[31, "wildboar.explain.counterfactual.ShapeletForestCounterfactual.get_params"]], "plot() (wildboar.explain.counterfactual.kneighborscounterfactual method)": [[31, "wildboar.explain.counterfactual.KNeighborsCounterfactual.plot"]], "plot() (wildboar.explain.counterfactual.nativeguidecounterfactual method)": [[31, "wildboar.explain.counterfactual.NativeGuideCounterfactual.plot"]], "plot() (wildboar.explain.counterfactual.prototypecounterfactual method)": [[31, "wildboar.explain.counterfactual.PrototypeCounterfactual.plot"]], "plot() (wildboar.explain.counterfactual.shapeletforestcounterfactual method)": [[31, "wildboar.explain.counterfactual.ShapeletForestCounterfactual.plot"]], "proximity() (in module wildboar.explain.counterfactual)": [[31, "wildboar.explain.counterfactual.proximity"]], "score() (wildboar.explain.counterfactual.kneighborscounterfactual method)": [[31, "wildboar.explain.counterfactual.KNeighborsCounterfactual.score"]], "score() (wildboar.explain.counterfactual.nativeguidecounterfactual method)": [[31, "wildboar.explain.counterfactual.NativeGuideCounterfactual.score"]], "score() (wildboar.explain.counterfactual.prototypecounterfactual method)": [[31, "wildboar.explain.counterfactual.PrototypeCounterfactual.score"]], "score() (wildboar.explain.counterfactual.shapeletforestcounterfactual method)": [[31, "wildboar.explain.counterfactual.ShapeletForestCounterfactual.score"]], "set_params() (wildboar.explain.counterfactual.kneighborscounterfactual method)": [[31, "wildboar.explain.counterfactual.KNeighborsCounterfactual.set_params"]], "set_params() (wildboar.explain.counterfactual.nativeguidecounterfactual method)": [[31, "wildboar.explain.counterfactual.NativeGuideCounterfactual.set_params"]], "set_params() (wildboar.explain.counterfactual.prototypecounterfactual method)": [[31, "wildboar.explain.counterfactual.PrototypeCounterfactual.set_params"]], "set_params() (wildboar.explain.counterfactual.shapeletforestcounterfactual method)": [[31, "wildboar.explain.counterfactual.ShapeletForestCounterfactual.set_params"]], "wildboar.explain.counterfactual": [[31, "module-wildboar.explain.counterfactual"]], "amplitudeimportance (class in wildboar.explain)": [[32, "wildboar.explain.AmplitudeImportance"]], "frequencyimportance (class in wildboar.explain)": [[32, "wildboar.explain.FrequencyImportance"]], "intervalimportance (class in wildboar.explain)": [[32, "wildboar.explain.IntervalImportance"]], "shapeletimportance (class in wildboar.explain)": [[32, "wildboar.explain.ShapeletImportance"]], "fit_explain() (wildboar.explain.amplitudeimportance method)": [[32, "wildboar.explain.AmplitudeImportance.fit_explain"]], "fit_explain() (wildboar.explain.frequencyimportance method)": [[32, "wildboar.explain.FrequencyImportance.fit_explain"]], "fit_explain() (wildboar.explain.intervalimportance method)": [[32, "wildboar.explain.IntervalImportance.fit_explain"]], "fit_explain() (wildboar.explain.shapeletimportance method)": [[32, "wildboar.explain.ShapeletImportance.fit_explain"]], "get_metadata_routing() (wildboar.explain.amplitudeimportance method)": [[32, "wildboar.explain.AmplitudeImportance.get_metadata_routing"]], "get_metadata_routing() (wildboar.explain.frequencyimportance method)": [[32, "wildboar.explain.FrequencyImportance.get_metadata_routing"]], "get_metadata_routing() (wildboar.explain.intervalimportance method)": [[32, "wildboar.explain.IntervalImportance.get_metadata_routing"]], "get_metadata_routing() (wildboar.explain.shapeletimportance method)": [[32, "wildboar.explain.ShapeletImportance.get_metadata_routing"]], "get_params() (wildboar.explain.amplitudeimportance method)": [[32, "wildboar.explain.AmplitudeImportance.get_params"]], "get_params() (wildboar.explain.frequencyimportance method)": [[32, "wildboar.explain.FrequencyImportance.get_params"]], "get_params() (wildboar.explain.intervalimportance method)": [[32, "wildboar.explain.IntervalImportance.get_params"]], "get_params() (wildboar.explain.shapeletimportance method)": [[32, "wildboar.explain.ShapeletImportance.get_params"]], "plot() (wildboar.explain.amplitudeimportance method)": [[32, "wildboar.explain.AmplitudeImportance.plot"]], "plot() (wildboar.explain.frequencyimportance method)": [[32, "wildboar.explain.FrequencyImportance.plot"]], "plot() (wildboar.explain.intervalimportance method)": [[32, "wildboar.explain.IntervalImportance.plot"]], "plot() (wildboar.explain.shapeletimportance method)": [[32, "wildboar.explain.ShapeletImportance.plot"]], "plot_importances() (in module wildboar.explain)": [[32, "wildboar.explain.plot_importances"]], "set_params() (wildboar.explain.amplitudeimportance method)": [[32, "wildboar.explain.AmplitudeImportance.set_params"]], "set_params() (wildboar.explain.frequencyimportance method)": [[32, "wildboar.explain.FrequencyImportance.set_params"]], "set_params() (wildboar.explain.intervalimportance method)": [[32, "wildboar.explain.IntervalImportance.set_params"]], "set_params() (wildboar.explain.shapeletimportance method)": [[32, "wildboar.explain.ShapeletImportance.set_params"]], "wildboar.explain": [[32, "module-wildboar.explain"]], "wildboar": [[33, "module-wildboar"]], "hydraclassifier (class in wildboar.linear_model._hydra)": [[34, "wildboar.linear_model._hydra.HydraClassifier"]], "get_metadata_routing() (wildboar.linear_model._hydra.hydraclassifier method)": [[34, "wildboar.linear_model._hydra.HydraClassifier.get_metadata_routing"]], "get_params() (wildboar.linear_model._hydra.hydraclassifier method)": [[34, "wildboar.linear_model._hydra.HydraClassifier.get_params"]], "score() (wildboar.linear_model._hydra.hydraclassifier method)": [[34, "wildboar.linear_model._hydra.HydraClassifier.score"]], "set_params() (wildboar.linear_model._hydra.hydraclassifier method)": [[34, "wildboar.linear_model._hydra.HydraClassifier.set_params"]], "wildboar.linear_model._hydra": [[34, "module-wildboar.linear_model._hydra"]], "rocketclassifier (class in wildboar.linear_model._rocket)": [[35, "wildboar.linear_model._rocket.RocketClassifier"]], "rocketregressor (class in wildboar.linear_model._rocket)": [[35, "wildboar.linear_model._rocket.RocketRegressor"]], "get_metadata_routing() (wildboar.linear_model._rocket.rocketclassifier method)": [[35, "wildboar.linear_model._rocket.RocketClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model._rocket.rocketregressor method)": [[35, "wildboar.linear_model._rocket.RocketRegressor.get_metadata_routing"]], "get_params() (wildboar.linear_model._rocket.rocketclassifier method)": [[35, "wildboar.linear_model._rocket.RocketClassifier.get_params"]], "get_params() (wildboar.linear_model._rocket.rocketregressor method)": [[35, "wildboar.linear_model._rocket.RocketRegressor.get_params"]], "score() (wildboar.linear_model._rocket.rocketclassifier method)": [[35, "wildboar.linear_model._rocket.RocketClassifier.score"]], "score() (wildboar.linear_model._rocket.rocketregressor method)": [[35, "wildboar.linear_model._rocket.RocketRegressor.score"]], "set_params() (wildboar.linear_model._rocket.rocketclassifier method)": [[35, "wildboar.linear_model._rocket.RocketClassifier.set_params"]], "set_params() (wildboar.linear_model._rocket.rocketregressor method)": [[35, "wildboar.linear_model._rocket.RocketRegressor.set_params"]], "wildboar.linear_model._rocket": [[35, "module-wildboar.linear_model._rocket"]], "castorclassifier (class in wildboar.linear_model._shapelet)": [[36, "wildboar.linear_model._shapelet.CastorClassifier"]], "dilatedshapeletclassifier (class in wildboar.linear_model._shapelet)": [[36, "wildboar.linear_model._shapelet.DilatedShapeletClassifier"]], "randomshapeletclassifier (class in wildboar.linear_model._shapelet)": [[36, "wildboar.linear_model._shapelet.RandomShapeletClassifier"]], "randomshapeletregressor (class in wildboar.linear_model._shapelet)": [[36, "wildboar.linear_model._shapelet.RandomShapeletRegressor"]], "get_metadata_routing() (wildboar.linear_model._shapelet.castorclassifier method)": [[36, "wildboar.linear_model._shapelet.CastorClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model._shapelet.dilatedshapeletclassifier method)": [[36, "wildboar.linear_model._shapelet.DilatedShapeletClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model._shapelet.randomshapeletclassifier method)": [[36, "wildboar.linear_model._shapelet.RandomShapeletClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model._shapelet.randomshapeletregressor method)": [[36, "wildboar.linear_model._shapelet.RandomShapeletRegressor.get_metadata_routing"]], "get_params() (wildboar.linear_model._shapelet.castorclassifier method)": [[36, "wildboar.linear_model._shapelet.CastorClassifier.get_params"]], "get_params() (wildboar.linear_model._shapelet.dilatedshapeletclassifier method)": [[36, "wildboar.linear_model._shapelet.DilatedShapeletClassifier.get_params"]], "get_params() (wildboar.linear_model._shapelet.randomshapeletclassifier method)": [[36, "wildboar.linear_model._shapelet.RandomShapeletClassifier.get_params"]], "get_params() (wildboar.linear_model._shapelet.randomshapeletregressor method)": [[36, "wildboar.linear_model._shapelet.RandomShapeletRegressor.get_params"]], "score() (wildboar.linear_model._shapelet.castorclassifier method)": [[36, "wildboar.linear_model._shapelet.CastorClassifier.score"]], "score() (wildboar.linear_model._shapelet.dilatedshapeletclassifier method)": [[36, "wildboar.linear_model._shapelet.DilatedShapeletClassifier.score"]], "score() (wildboar.linear_model._shapelet.randomshapeletclassifier method)": [[36, "wildboar.linear_model._shapelet.RandomShapeletClassifier.score"]], "score() (wildboar.linear_model._shapelet.randomshapeletregressor method)": [[36, "wildboar.linear_model._shapelet.RandomShapeletRegressor.score"]], "set_params() (wildboar.linear_model._shapelet.castorclassifier method)": [[36, "wildboar.linear_model._shapelet.CastorClassifier.set_params"]], "set_params() (wildboar.linear_model._shapelet.dilatedshapeletclassifier method)": [[36, "wildboar.linear_model._shapelet.DilatedShapeletClassifier.set_params"]], "set_params() (wildboar.linear_model._shapelet.randomshapeletclassifier method)": [[36, "wildboar.linear_model._shapelet.RandomShapeletClassifier.set_params"]], "set_params() (wildboar.linear_model._shapelet.randomshapeletregressor method)": [[36, "wildboar.linear_model._shapelet.RandomShapeletRegressor.set_params"]], "wildboar.linear_model._shapelet": [[36, "module-wildboar.linear_model._shapelet"]], "basetransformclassifier (class in wildboar.linear_model._transform)": [[37, "wildboar.linear_model._transform.BaseTransformClassifier"]], "basetransformestimator (class in wildboar.linear_model._transform)": [[37, "wildboar.linear_model._transform.BaseTransformEstimator"]], "basetransformregressor (class in wildboar.linear_model._transform)": [[37, "wildboar.linear_model._transform.BaseTransformRegressor"]], "transformridgecv (class in wildboar.linear_model._transform)": [[37, "wildboar.linear_model._transform.TransformRidgeCV"]], "transformridgeclassifiercv (class in wildboar.linear_model._transform)": [[37, "wildboar.linear_model._transform.TransformRidgeClassifierCV"]], "get_metadata_routing() (wildboar.linear_model._transform.basetransformclassifier method)": [[37, "wildboar.linear_model._transform.BaseTransformClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model._transform.basetransformestimator method)": [[37, "wildboar.linear_model._transform.BaseTransformEstimator.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model._transform.basetransformregressor method)": [[37, "wildboar.linear_model._transform.BaseTransformRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model._transform.transformridgecv method)": [[37, "wildboar.linear_model._transform.TransformRidgeCV.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model._transform.transformridgeclassifiercv method)": [[37, "wildboar.linear_model._transform.TransformRidgeClassifierCV.get_metadata_routing"]], "get_params() (wildboar.linear_model._transform.basetransformclassifier method)": [[37, "wildboar.linear_model._transform.BaseTransformClassifier.get_params"]], "get_params() (wildboar.linear_model._transform.basetransformestimator method)": [[37, "wildboar.linear_model._transform.BaseTransformEstimator.get_params"]], "get_params() (wildboar.linear_model._transform.basetransformregressor method)": [[37, "wildboar.linear_model._transform.BaseTransformRegressor.get_params"]], "get_params() (wildboar.linear_model._transform.transformridgecv method)": [[37, "wildboar.linear_model._transform.TransformRidgeCV.get_params"]], "get_params() (wildboar.linear_model._transform.transformridgeclassifiercv method)": [[37, "wildboar.linear_model._transform.TransformRidgeClassifierCV.get_params"]], "score() (wildboar.linear_model._transform.basetransformclassifier method)": [[37, "wildboar.linear_model._transform.BaseTransformClassifier.score"]], "score() (wildboar.linear_model._transform.basetransformregressor method)": [[37, "wildboar.linear_model._transform.BaseTransformRegressor.score"]], "score() (wildboar.linear_model._transform.transformridgecv method)": [[37, "wildboar.linear_model._transform.TransformRidgeCV.score"]], "score() (wildboar.linear_model._transform.transformridgeclassifiercv method)": [[37, "wildboar.linear_model._transform.TransformRidgeClassifierCV.score"]], "set_params() (wildboar.linear_model._transform.basetransformclassifier method)": [[37, "wildboar.linear_model._transform.BaseTransformClassifier.set_params"]], "set_params() (wildboar.linear_model._transform.basetransformestimator method)": [[37, "wildboar.linear_model._transform.BaseTransformEstimator.set_params"]], "set_params() (wildboar.linear_model._transform.basetransformregressor method)": [[37, "wildboar.linear_model._transform.BaseTransformRegressor.set_params"]], "set_params() (wildboar.linear_model._transform.transformridgecv method)": [[37, "wildboar.linear_model._transform.TransformRidgeCV.set_params"]], "set_params() (wildboar.linear_model._transform.transformridgeclassifiercv method)": [[37, "wildboar.linear_model._transform.TransformRidgeClassifierCV.set_params"]], "wildboar.linear_model._transform": [[37, "module-wildboar.linear_model._transform"]], "castorclassifier (class in wildboar.linear_model)": [[38, "wildboar.linear_model.CastorClassifier"]], "dilatedshapeletclassifier (class in wildboar.linear_model)": [[38, "wildboar.linear_model.DilatedShapeletClassifier"]], "hydraclassifier (class in wildboar.linear_model)": [[38, "wildboar.linear_model.HydraClassifier"]], "randomshapeletclassifier (class in wildboar.linear_model)": [[38, "wildboar.linear_model.RandomShapeletClassifier"]], "randomshapeletregressor (class in wildboar.linear_model)": [[38, "wildboar.linear_model.RandomShapeletRegressor"]], "rocketclassifier (class in wildboar.linear_model)": [[38, "wildboar.linear_model.RocketClassifier"]], "rocketregressor (class in wildboar.linear_model)": [[38, "wildboar.linear_model.RocketRegressor"]], "get_metadata_routing() (wildboar.linear_model.castorclassifier method)": [[38, "wildboar.linear_model.CastorClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model.dilatedshapeletclassifier method)": [[38, "wildboar.linear_model.DilatedShapeletClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model.hydraclassifier method)": [[38, "wildboar.linear_model.HydraClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model.randomshapeletclassifier method)": [[38, "wildboar.linear_model.RandomShapeletClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model.randomshapeletregressor method)": [[38, "wildboar.linear_model.RandomShapeletRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model.rocketclassifier method)": [[38, "wildboar.linear_model.RocketClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model.rocketregressor method)": [[38, "wildboar.linear_model.RocketRegressor.get_metadata_routing"]], "get_params() (wildboar.linear_model.castorclassifier method)": [[38, "wildboar.linear_model.CastorClassifier.get_params"]], "get_params() (wildboar.linear_model.dilatedshapeletclassifier method)": [[38, "wildboar.linear_model.DilatedShapeletClassifier.get_params"]], "get_params() (wildboar.linear_model.hydraclassifier method)": [[38, "wildboar.linear_model.HydraClassifier.get_params"]], "get_params() (wildboar.linear_model.randomshapeletclassifier method)": [[38, "wildboar.linear_model.RandomShapeletClassifier.get_params"]], "get_params() (wildboar.linear_model.randomshapeletregressor method)": [[38, "wildboar.linear_model.RandomShapeletRegressor.get_params"]], "get_params() (wildboar.linear_model.rocketclassifier method)": [[38, "wildboar.linear_model.RocketClassifier.get_params"]], "get_params() (wildboar.linear_model.rocketregressor method)": [[38, "wildboar.linear_model.RocketRegressor.get_params"]], "score() (wildboar.linear_model.castorclassifier method)": [[38, "wildboar.linear_model.CastorClassifier.score"]], "score() (wildboar.linear_model.dilatedshapeletclassifier method)": [[38, "wildboar.linear_model.DilatedShapeletClassifier.score"]], "score() (wildboar.linear_model.hydraclassifier method)": [[38, "wildboar.linear_model.HydraClassifier.score"]], "score() (wildboar.linear_model.randomshapeletclassifier method)": [[38, "wildboar.linear_model.RandomShapeletClassifier.score"]], "score() (wildboar.linear_model.randomshapeletregressor method)": [[38, "wildboar.linear_model.RandomShapeletRegressor.score"]], "score() (wildboar.linear_model.rocketclassifier method)": [[38, "wildboar.linear_model.RocketClassifier.score"]], "score() (wildboar.linear_model.rocketregressor method)": [[38, "wildboar.linear_model.RocketRegressor.score"]], "set_params() (wildboar.linear_model.castorclassifier method)": [[38, "wildboar.linear_model.CastorClassifier.set_params"]], "set_params() (wildboar.linear_model.dilatedshapeletclassifier method)": [[38, "wildboar.linear_model.DilatedShapeletClassifier.set_params"]], "set_params() (wildboar.linear_model.hydraclassifier method)": [[38, "wildboar.linear_model.HydraClassifier.set_params"]], "set_params() (wildboar.linear_model.randomshapeletclassifier method)": [[38, "wildboar.linear_model.RandomShapeletClassifier.set_params"]], "set_params() (wildboar.linear_model.randomshapeletregressor method)": [[38, "wildboar.linear_model.RandomShapeletRegressor.set_params"]], "set_params() (wildboar.linear_model.rocketclassifier method)": [[38, "wildboar.linear_model.RocketClassifier.set_params"]], "set_params() (wildboar.linear_model.rocketregressor method)": [[38, "wildboar.linear_model.RocketRegressor.set_params"]], "wildboar.linear_model": [[38, "module-wildboar.linear_model"]], "silhouette_samples() (in module wildboar.metrics._cluster)": [[39, "wildboar.metrics._cluster.silhouette_samples"]], "silhouette_score() (in module wildboar.metrics._cluster)": [[39, "wildboar.metrics._cluster.silhouette_score"]], "wildboar.metrics._cluster": [[39, "module-wildboar.metrics._cluster"]], "compactness_score() (in module wildboar.metrics._counterfactual)": [[40, "wildboar.metrics._counterfactual.compactness_score"]], "plausability_score() (in module wildboar.metrics._counterfactual)": [[40, "wildboar.metrics._counterfactual.plausability_score"]], "proximity_score() (in module wildboar.metrics._counterfactual)": [[40, "wildboar.metrics._counterfactual.proximity_score"]], "redudancy_score() (in module wildboar.metrics._counterfactual)": [[40, "wildboar.metrics._counterfactual.redudancy_score"]], "relative_proximity_score() (in module wildboar.metrics._counterfactual)": [[40, "wildboar.metrics._counterfactual.relative_proximity_score"]], "validity_score() (in module wildboar.metrics._counterfactual)": [[40, "wildboar.metrics._counterfactual.validity_score"]], "wildboar.metrics._counterfactual": [[40, "module-wildboar.metrics._counterfactual"]], "compactness_score() (in module wildboar.metrics)": [[41, "wildboar.metrics.compactness_score"]], "plausability_score() (in module wildboar.metrics)": [[41, "wildboar.metrics.plausability_score"]], "proximity_score() (in module wildboar.metrics)": [[41, "wildboar.metrics.proximity_score"]], "redudancy_score() (in module wildboar.metrics)": [[41, "wildboar.metrics.redudancy_score"]], "relative_proximity_score() (in module wildboar.metrics)": [[41, "wildboar.metrics.relative_proximity_score"]], "silhouette_samples() (in module wildboar.metrics)": [[41, "wildboar.metrics.silhouette_samples"]], "silhouette_score() (in module wildboar.metrics)": [[41, "wildboar.metrics.silhouette_score"]], "validity_score() (in module wildboar.metrics)": [[41, "wildboar.metrics.validity_score"]], "wildboar.metrics": [[41, "module-wildboar.metrics"]], "repeatedoutliersplit (class in wildboar.model_selection._cv)": [[42, "wildboar.model_selection._cv.RepeatedOutlierSplit"]], "get_n_splits() (wildboar.model_selection._cv.repeatedoutliersplit method)": [[42, "wildboar.model_selection._cv.RepeatedOutlierSplit.get_n_splits"]], "split() (wildboar.model_selection._cv.repeatedoutliersplit method)": [[42, "wildboar.model_selection._cv.RepeatedOutlierSplit.split"]], "wildboar.model_selection._cv": [[42, "module-wildboar.model_selection._cv"]], "outlier_train_test_split() (in module wildboar.model_selection._outlier)": [[43, "wildboar.model_selection._outlier.outlier_train_test_split"]], "wildboar.model_selection._outlier": [[43, "module-wildboar.model_selection._outlier"]], "repeatedoutliersplit (class in wildboar.model_selection)": [[44, "wildboar.model_selection.RepeatedOutlierSplit"]], "get_n_splits() (wildboar.model_selection.repeatedoutliersplit method)": [[44, "wildboar.model_selection.RepeatedOutlierSplit.get_n_splits"]], "outlier_train_test_split() (in module wildboar.model_selection)": [[44, "wildboar.model_selection.outlier_train_test_split"]], "split() (wildboar.model_selection.repeatedoutliersplit method)": [[44, "wildboar.model_selection.RepeatedOutlierSplit.split"]], "wildboar.model_selection": [[44, "module-wildboar.model_selection"]], "baseattributetransform (class in wildboar.transform._base)": [[45, "wildboar.transform._base.BaseAttributeTransform"]], "fit() (wildboar.transform._base.baseattributetransform method)": [[45, "wildboar.transform._base.BaseAttributeTransform.fit"]], "fit_transform() (wildboar.transform._base.baseattributetransform method)": [[45, "wildboar.transform._base.BaseAttributeTransform.fit_transform"]], "get_metadata_routing() (wildboar.transform._base.baseattributetransform method)": [[45, "wildboar.transform._base.BaseAttributeTransform.get_metadata_routing"]], "get_params() (wildboar.transform._base.baseattributetransform method)": [[45, "wildboar.transform._base.BaseAttributeTransform.get_params"]], "set_output() (wildboar.transform._base.baseattributetransform method)": [[45, "wildboar.transform._base.BaseAttributeTransform.set_output"]], "set_params() (wildboar.transform._base.baseattributetransform method)": [[45, "wildboar.transform._base.BaseAttributeTransform.set_params"]], "transform() (wildboar.transform._base.baseattributetransform method)": [[45, "wildboar.transform._base.BaseAttributeTransform.transform"]], "wildboar.transform._base": [[45, "module-wildboar.transform._base"]], "convolve() (in module wildboar.transform._conv)": [[46, "wildboar.transform._conv.convolve"]], "wildboar.transform._conv": [[46, "module-wildboar.transform._conv"]], "derivativetransform (class in wildboar.transform._diff)": [[47, "wildboar.transform._diff.DerivativeTransform"]], "difftransform (class in wildboar.transform._diff)": [[47, "wildboar.transform._diff.DiffTransform"]], "fit_transform() (wildboar.transform._diff.derivativetransform method)": [[47, "wildboar.transform._diff.DerivativeTransform.fit_transform"]], "fit_transform() (wildboar.transform._diff.difftransform method)": [[47, "wildboar.transform._diff.DiffTransform.fit_transform"]], "get_metadata_routing() (wildboar.transform._diff.derivativetransform method)": [[47, "wildboar.transform._diff.DerivativeTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform._diff.difftransform method)": [[47, "wildboar.transform._diff.DiffTransform.get_metadata_routing"]], "get_params() (wildboar.transform._diff.derivativetransform method)": [[47, "wildboar.transform._diff.DerivativeTransform.get_params"]], "get_params() (wildboar.transform._diff.difftransform method)": [[47, "wildboar.transform._diff.DiffTransform.get_params"]], "set_output() (wildboar.transform._diff.derivativetransform method)": [[47, "wildboar.transform._diff.DerivativeTransform.set_output"]], "set_output() (wildboar.transform._diff.difftransform method)": [[47, "wildboar.transform._diff.DiffTransform.set_output"]], "set_params() (wildboar.transform._diff.derivativetransform method)": [[47, "wildboar.transform._diff.DerivativeTransform.set_params"]], "set_params() (wildboar.transform._diff.difftransform method)": [[47, "wildboar.transform._diff.DiffTransform.set_params"]], "wildboar.transform._diff": [[47, "module-wildboar.transform._diff"]], "hydratransform (class in wildboar.transform._hydra)": [[48, "wildboar.transform._hydra.HydraTransform"]], "fit() (wildboar.transform._hydra.hydratransform method)": [[48, "wildboar.transform._hydra.HydraTransform.fit"]], "fit_transform() (wildboar.transform._hydra.hydratransform method)": [[48, "wildboar.transform._hydra.HydraTransform.fit_transform"]], "get_metadata_routing() (wildboar.transform._hydra.hydratransform method)": [[48, "wildboar.transform._hydra.HydraTransform.get_metadata_routing"]], "get_params() (wildboar.transform._hydra.hydratransform method)": [[48, "wildboar.transform._hydra.HydraTransform.get_params"]], "set_output() (wildboar.transform._hydra.hydratransform method)": [[48, "wildboar.transform._hydra.HydraTransform.set_output"]], "set_params() (wildboar.transform._hydra.hydratransform method)": [[48, "wildboar.transform._hydra.HydraTransform.set_params"]], "transform() (wildboar.transform._hydra.hydratransform method)": [[48, "wildboar.transform._hydra.HydraTransform.transform"]], "wildboar.transform._hydra": [[48, "module-wildboar.transform._hydra"]], "featuretransform (class in wildboar.transform._interval)": [[49, "wildboar.transform._interval.FeatureTransform"]], "intervalmixin (class in wildboar.transform._interval)": [[49, "wildboar.transform._interval.IntervalMixin"]], "intervaltransform (class in wildboar.transform._interval)": [[49, "wildboar.transform._interval.IntervalTransform"]], "fit() (wildboar.transform._interval.featuretransform method)": [[49, "wildboar.transform._interval.FeatureTransform.fit"]], "fit() (wildboar.transform._interval.intervaltransform method)": [[49, "wildboar.transform._interval.IntervalTransform.fit"]], "fit_transform() (wildboar.transform._interval.featuretransform method)": [[49, "wildboar.transform._interval.FeatureTransform.fit_transform"]], "fit_transform() (wildboar.transform._interval.intervaltransform method)": [[49, "wildboar.transform._interval.IntervalTransform.fit_transform"]], "get_metadata_routing() (wildboar.transform._interval.featuretransform method)": [[49, "wildboar.transform._interval.FeatureTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform._interval.intervaltransform method)": [[49, "wildboar.transform._interval.IntervalTransform.get_metadata_routing"]], "get_params() (wildboar.transform._interval.featuretransform method)": [[49, "wildboar.transform._interval.FeatureTransform.get_params"]], "get_params() (wildboar.transform._interval.intervaltransform method)": [[49, "wildboar.transform._interval.IntervalTransform.get_params"]], "set_output() (wildboar.transform._interval.featuretransform method)": [[49, "wildboar.transform._interval.FeatureTransform.set_output"]], "set_output() (wildboar.transform._interval.intervaltransform method)": [[49, "wildboar.transform._interval.IntervalTransform.set_output"]], "set_params() (wildboar.transform._interval.featuretransform method)": [[49, "wildboar.transform._interval.FeatureTransform.set_params"]], "set_params() (wildboar.transform._interval.intervaltransform method)": [[49, "wildboar.transform._interval.IntervalTransform.set_params"]], "transform() (wildboar.transform._interval.featuretransform method)": [[49, "wildboar.transform._interval.FeatureTransform.transform"]], "transform() (wildboar.transform._interval.intervaltransform method)": [[49, "wildboar.transform._interval.IntervalTransform.transform"]], "wildboar.transform._interval": [[49, "module-wildboar.transform._interval"]], "matrixprofiletransform (class in wildboar.transform._matrix_profile)": [[50, "wildboar.transform._matrix_profile.MatrixProfileTransform"]], "fit() (wildboar.transform._matrix_profile.matrixprofiletransform method)": [[50, "wildboar.transform._matrix_profile.MatrixProfileTransform.fit"]], "fit_transform() (wildboar.transform._matrix_profile.matrixprofiletransform method)": [[50, "wildboar.transform._matrix_profile.MatrixProfileTransform.fit_transform"]], "get_metadata_routing() (wildboar.transform._matrix_profile.matrixprofiletransform method)": [[50, "wildboar.transform._matrix_profile.MatrixProfileTransform.get_metadata_routing"]], "get_params() (wildboar.transform._matrix_profile.matrixprofiletransform method)": [[50, "wildboar.transform._matrix_profile.MatrixProfileTransform.get_params"]], "set_output() (wildboar.transform._matrix_profile.matrixprofiletransform method)": [[50, "wildboar.transform._matrix_profile.MatrixProfileTransform.set_output"]], "set_params() (wildboar.transform._matrix_profile.matrixprofiletransform method)": [[50, "wildboar.transform._matrix_profile.MatrixProfileTransform.set_params"]], "transform() (wildboar.transform._matrix_profile.matrixprofiletransform method)": [[50, "wildboar.transform._matrix_profile.MatrixProfileTransform.transform"]], "wildboar.transform._matrix_profile": [[50, "module-wildboar.transform._matrix_profile"]], "pivotmixin (class in wildboar.transform._pivot)": [[51, "wildboar.transform._pivot.PivotMixin"]], "pivottransform (class in wildboar.transform._pivot)": [[51, "wildboar.transform._pivot.PivotTransform"]], "proximitytransform (class in wildboar.transform._pivot)": [[51, "wildboar.transform._pivot.ProximityTransform"]], "fit() (wildboar.transform._pivot.pivottransform method)": [[51, "wildboar.transform._pivot.PivotTransform.fit"]], "fit_transform() (wildboar.transform._pivot.pivottransform method)": [[51, "wildboar.transform._pivot.PivotTransform.fit_transform"]], "fit_transform() (wildboar.transform._pivot.proximitytransform method)": [[51, "wildboar.transform._pivot.ProximityTransform.fit_transform"]], "get_metadata_routing() (wildboar.transform._pivot.pivottransform method)": [[51, "wildboar.transform._pivot.PivotTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform._pivot.proximitytransform method)": [[51, "wildboar.transform._pivot.ProximityTransform.get_metadata_routing"]], "get_params() (wildboar.transform._pivot.pivottransform method)": [[51, "wildboar.transform._pivot.PivotTransform.get_params"]], "get_params() (wildboar.transform._pivot.proximitytransform method)": [[51, "wildboar.transform._pivot.ProximityTransform.get_params"]], "set_output() (wildboar.transform._pivot.pivottransform method)": [[51, "wildboar.transform._pivot.PivotTransform.set_output"]], "set_output() (wildboar.transform._pivot.proximitytransform method)": [[51, "wildboar.transform._pivot.ProximityTransform.set_output"]], "set_params() (wildboar.transform._pivot.pivottransform method)": [[51, "wildboar.transform._pivot.PivotTransform.set_params"]], "set_params() (wildboar.transform._pivot.proximitytransform method)": [[51, "wildboar.transform._pivot.ProximityTransform.set_params"]], "transform() (wildboar.transform._pivot.pivottransform method)": [[51, "wildboar.transform._pivot.PivotTransform.transform"]], "wildboar.transform._pivot": [[51, "module-wildboar.transform._pivot"]], "rocketmixin (class in wildboar.transform._rocket)": [[52, "wildboar.transform._rocket.RocketMixin"]], "rockettransform (class in wildboar.transform._rocket)": [[52, "wildboar.transform._rocket.RocketTransform"]], "fit() (wildboar.transform._rocket.rockettransform method)": [[52, "wildboar.transform._rocket.RocketTransform.fit"]], "fit_transform() (wildboar.transform._rocket.rockettransform method)": [[52, "wildboar.transform._rocket.RocketTransform.fit_transform"]], "get_metadata_routing() (wildboar.transform._rocket.rockettransform method)": [[52, "wildboar.transform._rocket.RocketTransform.get_metadata_routing"]], "get_params() (wildboar.transform._rocket.rockettransform method)": [[52, "wildboar.transform._rocket.RocketTransform.get_params"]], "set_output() (wildboar.transform._rocket.rockettransform method)": [[52, "wildboar.transform._rocket.RocketTransform.set_output"]], "set_params() (wildboar.transform._rocket.rockettransform method)": [[52, "wildboar.transform._rocket.RocketTransform.set_params"]], "transform() (wildboar.transform._rocket.rockettransform method)": [[52, "wildboar.transform._rocket.RocketTransform.transform"]], "wildboar.transform._rocket": [[52, "module-wildboar.transform._rocket"]], "binning (class in wildboar.transform._sax)": [[53, "wildboar.transform._sax.Binning"]], "normalbinning (class in wildboar.transform._sax)": [[53, "wildboar.transform._sax.NormalBinning"]], "paa (class in wildboar.transform._sax)": [[53, "wildboar.transform._sax.PAA"]], "sax (class in wildboar.transform._sax)": [[53, "wildboar.transform._sax.SAX"]], "uniformbinning (class in wildboar.transform._sax)": [[53, "wildboar.transform._sax.UniformBinning"]], "fit_transform() (wildboar.transform._sax.paa method)": [[53, "wildboar.transform._sax.PAA.fit_transform"]], "fit_transform() (wildboar.transform._sax.sax method)": [[53, "wildboar.transform._sax.SAX.fit_transform"]], "get_metadata_routing() (wildboar.transform._sax.paa method)": [[53, "wildboar.transform._sax.PAA.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform._sax.sax method)": [[53, "wildboar.transform._sax.SAX.get_metadata_routing"]], "get_params() (wildboar.transform._sax.paa method)": [[53, "wildboar.transform._sax.PAA.get_params"]], "get_params() (wildboar.transform._sax.sax method)": [[53, "wildboar.transform._sax.SAX.get_params"]], "get_thresholds() (wildboar.transform._sax.binning method)": [[53, "wildboar.transform._sax.Binning.get_thresholds"]], "get_thresholds() (wildboar.transform._sax.normalbinning method)": [[53, "wildboar.transform._sax.NormalBinning.get_thresholds"]], "get_thresholds() (wildboar.transform._sax.uniformbinning method)": [[53, "wildboar.transform._sax.UniformBinning.get_thresholds"]], "piecewice_aggregate_approximation() (in module wildboar.transform._sax)": [[53, "wildboar.transform._sax.piecewice_aggregate_approximation"]], "scale() (wildboar.transform._sax.binning method)": [[53, "wildboar.transform._sax.Binning.scale"]], "scale() (wildboar.transform._sax.normalbinning method)": [[53, "wildboar.transform._sax.NormalBinning.scale"]], "scale() (wildboar.transform._sax.uniformbinning method)": [[53, "wildboar.transform._sax.UniformBinning.scale"]], "set_output() (wildboar.transform._sax.paa method)": [[53, "wildboar.transform._sax.PAA.set_output"]], "set_output() (wildboar.transform._sax.sax method)": [[53, "wildboar.transform._sax.SAX.set_output"]], "set_params() (wildboar.transform._sax.paa method)": [[53, "wildboar.transform._sax.PAA.set_params"]], "set_params() (wildboar.transform._sax.sax method)": [[53, "wildboar.transform._sax.SAX.set_params"]], "symbolic_aggregate_approximation() (in module wildboar.transform._sax)": [[53, "wildboar.transform._sax.symbolic_aggregate_approximation"]], "wildboar.transform._sax": [[53, "module-wildboar.transform._sax"]], "castortransform (class in wildboar.transform._shapelet)": [[54, "wildboar.transform._shapelet.CastorTransform"]], "dilatedshapelettransform (class in wildboar.transform._shapelet)": [[54, "wildboar.transform._shapelet.DilatedShapeletTransform"]], "randomshapelettransform (class in wildboar.transform._shapelet)": [[54, "wildboar.transform._shapelet.RandomShapeletTransform"]], "shapeletmixin (class in wildboar.transform._shapelet)": [[54, "wildboar.transform._shapelet.ShapeletMixin"]], "fit() (wildboar.transform._shapelet.castortransform method)": [[54, "wildboar.transform._shapelet.CastorTransform.fit"]], "fit() (wildboar.transform._shapelet.dilatedshapelettransform method)": [[54, "wildboar.transform._shapelet.DilatedShapeletTransform.fit"]], "fit() (wildboar.transform._shapelet.randomshapelettransform method)": [[54, "wildboar.transform._shapelet.RandomShapeletTransform.fit"]], "fit_transform() (wildboar.transform._shapelet.castortransform method)": [[54, "wildboar.transform._shapelet.CastorTransform.fit_transform"]], "fit_transform() (wildboar.transform._shapelet.dilatedshapelettransform method)": [[54, "wildboar.transform._shapelet.DilatedShapeletTransform.fit_transform"]], "fit_transform() (wildboar.transform._shapelet.randomshapelettransform method)": [[54, "wildboar.transform._shapelet.RandomShapeletTransform.fit_transform"]], "get_metadata_routing() (wildboar.transform._shapelet.castortransform method)": [[54, "wildboar.transform._shapelet.CastorTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform._shapelet.dilatedshapelettransform method)": [[54, "wildboar.transform._shapelet.DilatedShapeletTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform._shapelet.randomshapelettransform method)": [[54, "wildboar.transform._shapelet.RandomShapeletTransform.get_metadata_routing"]], "get_params() (wildboar.transform._shapelet.castortransform method)": [[54, "wildboar.transform._shapelet.CastorTransform.get_params"]], "get_params() (wildboar.transform._shapelet.dilatedshapelettransform method)": [[54, "wildboar.transform._shapelet.DilatedShapeletTransform.get_params"]], "get_params() (wildboar.transform._shapelet.randomshapelettransform method)": [[54, "wildboar.transform._shapelet.RandomShapeletTransform.get_params"]], "set_output() (wildboar.transform._shapelet.castortransform method)": [[54, "wildboar.transform._shapelet.CastorTransform.set_output"]], "set_output() (wildboar.transform._shapelet.dilatedshapelettransform method)": [[54, "wildboar.transform._shapelet.DilatedShapeletTransform.set_output"]], "set_output() (wildboar.transform._shapelet.randomshapelettransform method)": [[54, "wildboar.transform._shapelet.RandomShapeletTransform.set_output"]], "set_params() (wildboar.transform._shapelet.castortransform method)": [[54, "wildboar.transform._shapelet.CastorTransform.set_params"]], "set_params() (wildboar.transform._shapelet.dilatedshapelettransform method)": [[54, "wildboar.transform._shapelet.DilatedShapeletTransform.set_params"]], "set_params() (wildboar.transform._shapelet.randomshapelettransform method)": [[54, "wildboar.transform._shapelet.RandomShapeletTransform.set_params"]], "transform() (wildboar.transform._shapelet.castortransform method)": [[54, "wildboar.transform._shapelet.CastorTransform.transform"]], "transform() (wildboar.transform._shapelet.dilatedshapelettransform method)": [[54, "wildboar.transform._shapelet.DilatedShapeletTransform.transform"]], "transform() (wildboar.transform._shapelet.randomshapelettransform method)": [[54, "wildboar.transform._shapelet.RandomShapeletTransform.transform"]], "wildboar.transform._shapelet": [[54, "module-wildboar.transform._shapelet"]], "castortransform (class in wildboar.transform)": [[55, "wildboar.transform.CastorTransform"]], "derivativetransform (class in wildboar.transform)": [[55, "wildboar.transform.DerivativeTransform"]], "difftransform (class in wildboar.transform)": [[55, "wildboar.transform.DiffTransform"]], "dilatedshapelettransform (class in wildboar.transform)": [[55, "wildboar.transform.DilatedShapeletTransform"]], "featuretransform (class in wildboar.transform)": [[55, "wildboar.transform.FeatureTransform"]], "hydratransform (class in wildboar.transform)": [[55, "wildboar.transform.HydraTransform"]], "intervaltransform (class in wildboar.transform)": [[55, "wildboar.transform.IntervalTransform"]], "matrixprofiletransform (class in wildboar.transform)": [[55, "wildboar.transform.MatrixProfileTransform"]], "paa (class in wildboar.transform)": [[55, "wildboar.transform.PAA"]], "pivottransform (class in wildboar.transform)": [[55, "wildboar.transform.PivotTransform"]], "proximitytransform (class in wildboar.transform)": [[55, "wildboar.transform.ProximityTransform"]], "randomshapelettransform (class in wildboar.transform)": [[55, "wildboar.transform.RandomShapeletTransform"]], "rockettransform (class in wildboar.transform)": [[55, "wildboar.transform.RocketTransform"]], "sax (class in wildboar.transform)": [[55, "wildboar.transform.SAX"]], "convolve() (in module wildboar.transform)": [[55, "wildboar.transform.convolve"]], "fit() (wildboar.transform.castortransform method)": [[55, "wildboar.transform.CastorTransform.fit"]], "fit() (wildboar.transform.dilatedshapelettransform method)": [[55, "wildboar.transform.DilatedShapeletTransform.fit"]], "fit() (wildboar.transform.featuretransform method)": [[55, "wildboar.transform.FeatureTransform.fit"]], "fit() (wildboar.transform.hydratransform method)": [[55, "wildboar.transform.HydraTransform.fit"]], "fit() (wildboar.transform.intervaltransform method)": [[55, "wildboar.transform.IntervalTransform.fit"]], "fit() (wildboar.transform.matrixprofiletransform method)": [[55, "wildboar.transform.MatrixProfileTransform.fit"]], "fit() (wildboar.transform.pivottransform method)": [[55, "wildboar.transform.PivotTransform.fit"]], "fit() (wildboar.transform.randomshapelettransform method)": [[55, "wildboar.transform.RandomShapeletTransform.fit"]], "fit() (wildboar.transform.rockettransform method)": [[55, "wildboar.transform.RocketTransform.fit"]], "fit_transform() (wildboar.transform.castortransform method)": [[55, "wildboar.transform.CastorTransform.fit_transform"]], "fit_transform() (wildboar.transform.derivativetransform method)": [[55, "wildboar.transform.DerivativeTransform.fit_transform"]], "fit_transform() (wildboar.transform.difftransform method)": [[55, "wildboar.transform.DiffTransform.fit_transform"]], "fit_transform() (wildboar.transform.dilatedshapelettransform method)": [[55, "wildboar.transform.DilatedShapeletTransform.fit_transform"]], "fit_transform() (wildboar.transform.featuretransform method)": [[55, "wildboar.transform.FeatureTransform.fit_transform"]], "fit_transform() (wildboar.transform.hydratransform method)": [[55, "wildboar.transform.HydraTransform.fit_transform"]], "fit_transform() (wildboar.transform.intervaltransform method)": [[55, "wildboar.transform.IntervalTransform.fit_transform"]], "fit_transform() (wildboar.transform.matrixprofiletransform method)": [[55, "wildboar.transform.MatrixProfileTransform.fit_transform"]], "fit_transform() (wildboar.transform.paa method)": [[55, "wildboar.transform.PAA.fit_transform"]], "fit_transform() (wildboar.transform.pivottransform method)": [[55, "wildboar.transform.PivotTransform.fit_transform"]], "fit_transform() (wildboar.transform.proximitytransform method)": [[55, "wildboar.transform.ProximityTransform.fit_transform"]], "fit_transform() (wildboar.transform.randomshapelettransform method)": [[55, "wildboar.transform.RandomShapeletTransform.fit_transform"]], "fit_transform() (wildboar.transform.rockettransform method)": [[55, "wildboar.transform.RocketTransform.fit_transform"]], "fit_transform() (wildboar.transform.sax method)": [[55, "wildboar.transform.SAX.fit_transform"]], "get_metadata_routing() (wildboar.transform.castortransform method)": [[55, "wildboar.transform.CastorTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.derivativetransform method)": [[55, "wildboar.transform.DerivativeTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.difftransform method)": [[55, "wildboar.transform.DiffTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.dilatedshapelettransform method)": [[55, "wildboar.transform.DilatedShapeletTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.featuretransform method)": [[55, "wildboar.transform.FeatureTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.hydratransform method)": [[55, "wildboar.transform.HydraTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.intervaltransform method)": [[55, "wildboar.transform.IntervalTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.matrixprofiletransform method)": [[55, "wildboar.transform.MatrixProfileTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.paa method)": [[55, "wildboar.transform.PAA.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.pivottransform method)": [[55, "wildboar.transform.PivotTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.proximitytransform method)": [[55, "wildboar.transform.ProximityTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.randomshapelettransform method)": [[55, "wildboar.transform.RandomShapeletTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.rockettransform method)": [[55, "wildboar.transform.RocketTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.sax method)": [[55, "wildboar.transform.SAX.get_metadata_routing"]], "get_params() (wildboar.transform.castortransform method)": [[55, "wildboar.transform.CastorTransform.get_params"]], "get_params() (wildboar.transform.derivativetransform method)": [[55, "wildboar.transform.DerivativeTransform.get_params"]], "get_params() (wildboar.transform.difftransform method)": [[55, "wildboar.transform.DiffTransform.get_params"]], "get_params() (wildboar.transform.dilatedshapelettransform method)": [[55, "wildboar.transform.DilatedShapeletTransform.get_params"]], "get_params() (wildboar.transform.featuretransform method)": [[55, "wildboar.transform.FeatureTransform.get_params"]], "get_params() (wildboar.transform.hydratransform method)": [[55, "wildboar.transform.HydraTransform.get_params"]], "get_params() (wildboar.transform.intervaltransform method)": [[55, "wildboar.transform.IntervalTransform.get_params"]], "get_params() (wildboar.transform.matrixprofiletransform method)": [[55, "wildboar.transform.MatrixProfileTransform.get_params"]], "get_params() (wildboar.transform.paa method)": [[55, "wildboar.transform.PAA.get_params"]], "get_params() (wildboar.transform.pivottransform method)": [[55, "wildboar.transform.PivotTransform.get_params"]], "get_params() (wildboar.transform.proximitytransform method)": [[55, "wildboar.transform.ProximityTransform.get_params"]], "get_params() (wildboar.transform.randomshapelettransform method)": [[55, "wildboar.transform.RandomShapeletTransform.get_params"]], "get_params() (wildboar.transform.rockettransform method)": [[55, "wildboar.transform.RocketTransform.get_params"]], "get_params() (wildboar.transform.sax method)": [[55, "wildboar.transform.SAX.get_params"]], "piecewice_aggregate_approximation() (in module wildboar.transform)": [[55, "wildboar.transform.piecewice_aggregate_approximation"]], "set_output() (wildboar.transform.castortransform method)": [[55, "wildboar.transform.CastorTransform.set_output"]], "set_output() (wildboar.transform.derivativetransform method)": [[55, "wildboar.transform.DerivativeTransform.set_output"]], "set_output() (wildboar.transform.difftransform method)": [[55, "wildboar.transform.DiffTransform.set_output"]], "set_output() (wildboar.transform.dilatedshapelettransform method)": [[55, "wildboar.transform.DilatedShapeletTransform.set_output"]], "set_output() (wildboar.transform.featuretransform method)": [[55, "wildboar.transform.FeatureTransform.set_output"]], "set_output() (wildboar.transform.hydratransform method)": [[55, "wildboar.transform.HydraTransform.set_output"]], "set_output() (wildboar.transform.intervaltransform method)": [[55, "wildboar.transform.IntervalTransform.set_output"]], "set_output() (wildboar.transform.matrixprofiletransform method)": [[55, "wildboar.transform.MatrixProfileTransform.set_output"]], "set_output() (wildboar.transform.paa method)": [[55, "wildboar.transform.PAA.set_output"]], "set_output() (wildboar.transform.pivottransform method)": [[55, "wildboar.transform.PivotTransform.set_output"]], "set_output() (wildboar.transform.proximitytransform method)": [[55, "wildboar.transform.ProximityTransform.set_output"]], "set_output() (wildboar.transform.randomshapelettransform method)": [[55, "wildboar.transform.RandomShapeletTransform.set_output"]], "set_output() (wildboar.transform.rockettransform method)": [[55, "wildboar.transform.RocketTransform.set_output"]], "set_output() (wildboar.transform.sax method)": [[55, "wildboar.transform.SAX.set_output"]], "set_params() (wildboar.transform.castortransform method)": [[55, "wildboar.transform.CastorTransform.set_params"]], "set_params() (wildboar.transform.derivativetransform method)": [[55, "wildboar.transform.DerivativeTransform.set_params"]], "set_params() (wildboar.transform.difftransform method)": [[55, "wildboar.transform.DiffTransform.set_params"]], "set_params() (wildboar.transform.dilatedshapelettransform method)": [[55, "wildboar.transform.DilatedShapeletTransform.set_params"]], "set_params() (wildboar.transform.featuretransform method)": [[55, "wildboar.transform.FeatureTransform.set_params"]], "set_params() (wildboar.transform.hydratransform method)": [[55, "wildboar.transform.HydraTransform.set_params"]], "set_params() (wildboar.transform.intervaltransform method)": [[55, "wildboar.transform.IntervalTransform.set_params"]], "set_params() (wildboar.transform.matrixprofiletransform method)": [[55, "wildboar.transform.MatrixProfileTransform.set_params"]], "set_params() (wildboar.transform.paa method)": [[55, "wildboar.transform.PAA.set_params"]], "set_params() (wildboar.transform.pivottransform method)": [[55, "wildboar.transform.PivotTransform.set_params"]], "set_params() (wildboar.transform.proximitytransform method)": [[55, "wildboar.transform.ProximityTransform.set_params"]], "set_params() (wildboar.transform.randomshapelettransform method)": [[55, "wildboar.transform.RandomShapeletTransform.set_params"]], "set_params() (wildboar.transform.rockettransform method)": [[55, "wildboar.transform.RocketTransform.set_params"]], "set_params() (wildboar.transform.sax method)": [[55, "wildboar.transform.SAX.set_params"]], "symbolic_aggregate_approximation() (in module wildboar.transform)": [[55, "wildboar.transform.symbolic_aggregate_approximation"]], "transform() (wildboar.transform.castortransform method)": [[55, "wildboar.transform.CastorTransform.transform"]], "transform() (wildboar.transform.dilatedshapelettransform method)": [[55, "wildboar.transform.DilatedShapeletTransform.transform"]], "transform() (wildboar.transform.featuretransform method)": [[55, "wildboar.transform.FeatureTransform.transform"]], "transform() (wildboar.transform.hydratransform method)": [[55, "wildboar.transform.HydraTransform.transform"]], "transform() (wildboar.transform.intervaltransform method)": [[55, "wildboar.transform.IntervalTransform.transform"]], "transform() (wildboar.transform.matrixprofiletransform method)": [[55, "wildboar.transform.MatrixProfileTransform.transform"]], "transform() (wildboar.transform.pivottransform method)": [[55, "wildboar.transform.PivotTransform.transform"]], "transform() (wildboar.transform.randomshapelettransform method)": [[55, "wildboar.transform.RandomShapeletTransform.transform"]], "transform() (wildboar.transform.rockettransform method)": [[55, "wildboar.transform.RocketTransform.transform"]], "wildboar.transform": [[55, "module-wildboar.transform"]], "basetree (class in wildboar.tree._base)": [[56, "wildboar.tree._base.BaseTree"]], "basetreeclassifier (class in wildboar.tree._base)": [[56, "wildboar.tree._base.BaseTreeClassifier"]], "basetreeregressor (class in wildboar.tree._base)": [[56, "wildboar.tree._base.BaseTreeRegressor"]], "apply() (wildboar.tree._base.basetree method)": [[56, "wildboar.tree._base.BaseTree.apply"]], "apply() (wildboar.tree._base.basetreeclassifier method)": [[56, "wildboar.tree._base.BaseTreeClassifier.apply"]], "apply() (wildboar.tree._base.basetreeregressor method)": [[56, "wildboar.tree._base.BaseTreeRegressor.apply"]], "decision_path() (wildboar.tree._base.basetree method)": [[56, "wildboar.tree._base.BaseTree.decision_path"]], "decision_path() (wildboar.tree._base.basetreeclassifier method)": [[56, "wildboar.tree._base.BaseTreeClassifier.decision_path"]], "decision_path() (wildboar.tree._base.basetreeregressor method)": [[56, "wildboar.tree._base.BaseTreeRegressor.decision_path"]], "fit() (wildboar.tree._base.basetreeclassifier method)": [[56, "wildboar.tree._base.BaseTreeClassifier.fit"]], "fit() (wildboar.tree._base.basetreeregressor method)": [[56, "wildboar.tree._base.BaseTreeRegressor.fit"]], "get_metadata_routing() (wildboar.tree._base.basetree method)": [[56, "wildboar.tree._base.BaseTree.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._base.basetreeclassifier method)": [[56, "wildboar.tree._base.BaseTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._base.basetreeregressor method)": [[56, "wildboar.tree._base.BaseTreeRegressor.get_metadata_routing"]], "get_params() (wildboar.tree._base.basetree method)": [[56, "wildboar.tree._base.BaseTree.get_params"]], "get_params() (wildboar.tree._base.basetreeclassifier method)": [[56, "wildboar.tree._base.BaseTreeClassifier.get_params"]], "get_params() (wildboar.tree._base.basetreeregressor method)": [[56, "wildboar.tree._base.BaseTreeRegressor.get_params"]], "predict() (wildboar.tree._base.basetreeclassifier method)": [[56, "wildboar.tree._base.BaseTreeClassifier.predict"]], "predict() (wildboar.tree._base.basetreeregressor method)": [[56, "wildboar.tree._base.BaseTreeRegressor.predict"]], "predict_proba() (wildboar.tree._base.basetreeclassifier method)": [[56, "wildboar.tree._base.BaseTreeClassifier.predict_proba"]], "score() (wildboar.tree._base.basetreeclassifier method)": [[56, "wildboar.tree._base.BaseTreeClassifier.score"]], "score() (wildboar.tree._base.basetreeregressor method)": [[56, "wildboar.tree._base.BaseTreeRegressor.score"]], "set_params() (wildboar.tree._base.basetree method)": [[56, "wildboar.tree._base.BaseTree.set_params"]], "set_params() (wildboar.tree._base.basetreeclassifier method)": [[56, "wildboar.tree._base.BaseTreeClassifier.set_params"]], "set_params() (wildboar.tree._base.basetreeregressor method)": [[56, "wildboar.tree._base.BaseTreeRegressor.set_params"]], "wildboar.tree._base": [[56, "module-wildboar.tree._base"]], "proximitytreeclassifier (class in wildboar.tree._ptree)": [[57, "wildboar.tree._ptree.ProximityTreeClassifier"]], "apply() (wildboar.tree._ptree.proximitytreeclassifier method)": [[57, "wildboar.tree._ptree.ProximityTreeClassifier.apply"]], "decision_path() (wildboar.tree._ptree.proximitytreeclassifier method)": [[57, "wildboar.tree._ptree.ProximityTreeClassifier.decision_path"]], "fit() (wildboar.tree._ptree.proximitytreeclassifier method)": [[57, "wildboar.tree._ptree.ProximityTreeClassifier.fit"]], "get_metadata_routing() (wildboar.tree._ptree.proximitytreeclassifier method)": [[57, "wildboar.tree._ptree.ProximityTreeClassifier.get_metadata_routing"]], "get_params() (wildboar.tree._ptree.proximitytreeclassifier method)": [[57, "wildboar.tree._ptree.ProximityTreeClassifier.get_params"]], "predict() (wildboar.tree._ptree.proximitytreeclassifier method)": [[57, "wildboar.tree._ptree.ProximityTreeClassifier.predict"]], "predict_proba() (wildboar.tree._ptree.proximitytreeclassifier method)": [[57, "wildboar.tree._ptree.ProximityTreeClassifier.predict_proba"]], "score() (wildboar.tree._ptree.proximitytreeclassifier method)": [[57, "wildboar.tree._ptree.ProximityTreeClassifier.score"]], "set_params() (wildboar.tree._ptree.proximitytreeclassifier method)": [[57, "wildboar.tree._ptree.ProximityTreeClassifier.set_params"]], "wildboar.tree._ptree": [[57, "module-wildboar.tree._ptree"]], "basefeaturetreeclassifier (class in wildboar.tree._tree)": [[58, "wildboar.tree._tree.BaseFeatureTreeClassifier"]], "basefeaturetreeregressor (class in wildboar.tree._tree)": [[58, "wildboar.tree._tree.BaseFeatureTreeRegressor"]], "dilatedshapelettreeclassifier (class in wildboar.tree._tree)": [[58, "wildboar.tree._tree.DilatedShapeletTreeClassifier"]], "extrashapelettreeclassifier (class in wildboar.tree._tree)": [[58, "wildboar.tree._tree.ExtraShapeletTreeClassifier"]], "extrashapelettreeregressor (class in wildboar.tree._tree)": [[58, "wildboar.tree._tree.ExtraShapeletTreeRegressor"]], "intervaltreeclassifier (class in wildboar.tree._tree)": [[58, "wildboar.tree._tree.IntervalTreeClassifier"]], "intervaltreeregressor (class in wildboar.tree._tree)": [[58, "wildboar.tree._tree.IntervalTreeRegressor"]], "pivottreeclassifier (class in wildboar.tree._tree)": [[58, "wildboar.tree._tree.PivotTreeClassifier"]], "rockettreeclassifier (class in wildboar.tree._tree)": [[58, "wildboar.tree._tree.RocketTreeClassifier"]], "rockettreeregressor (class in wildboar.tree._tree)": [[58, "wildboar.tree._tree.RocketTreeRegressor"]], "shapelettreeclassifier (class in wildboar.tree._tree)": [[58, "wildboar.tree._tree.ShapeletTreeClassifier"]], "shapelettreeregressor (class in wildboar.tree._tree)": [[58, "wildboar.tree._tree.ShapeletTreeRegressor"]], "apply() (wildboar.tree._tree.basefeaturetreeclassifier method)": [[58, "wildboar.tree._tree.BaseFeatureTreeClassifier.apply"]], "apply() (wildboar.tree._tree.basefeaturetreeregressor method)": [[58, "wildboar.tree._tree.BaseFeatureTreeRegressor.apply"]], "apply() (wildboar.tree._tree.dilatedshapelettreeclassifier method)": [[58, "wildboar.tree._tree.DilatedShapeletTreeClassifier.apply"]], "apply() (wildboar.tree._tree.extrashapelettreeclassifier method)": [[58, "wildboar.tree._tree.ExtraShapeletTreeClassifier.apply"]], "apply() (wildboar.tree._tree.extrashapelettreeregressor method)": [[58, "wildboar.tree._tree.ExtraShapeletTreeRegressor.apply"]], "apply() (wildboar.tree._tree.intervaltreeclassifier method)": [[58, "wildboar.tree._tree.IntervalTreeClassifier.apply"]], "apply() (wildboar.tree._tree.intervaltreeregressor method)": [[58, "wildboar.tree._tree.IntervalTreeRegressor.apply"]], "apply() (wildboar.tree._tree.pivottreeclassifier method)": [[58, "wildboar.tree._tree.PivotTreeClassifier.apply"]], "apply() (wildboar.tree._tree.rockettreeclassifier method)": [[58, "wildboar.tree._tree.RocketTreeClassifier.apply"]], "apply() (wildboar.tree._tree.rockettreeregressor method)": [[58, "wildboar.tree._tree.RocketTreeRegressor.apply"]], "apply() (wildboar.tree._tree.shapelettreeclassifier method)": [[58, "wildboar.tree._tree.ShapeletTreeClassifier.apply"]], "apply() (wildboar.tree._tree.shapelettreeregressor method)": [[58, "wildboar.tree._tree.ShapeletTreeRegressor.apply"]], "decision_path() (wildboar.tree._tree.basefeaturetreeclassifier method)": [[58, "wildboar.tree._tree.BaseFeatureTreeClassifier.decision_path"]], "decision_path() (wildboar.tree._tree.basefeaturetreeregressor method)": [[58, "wildboar.tree._tree.BaseFeatureTreeRegressor.decision_path"]], "decision_path() (wildboar.tree._tree.dilatedshapelettreeclassifier method)": [[58, "wildboar.tree._tree.DilatedShapeletTreeClassifier.decision_path"]], "decision_path() (wildboar.tree._tree.extrashapelettreeclassifier method)": [[58, "wildboar.tree._tree.ExtraShapeletTreeClassifier.decision_path"]], "decision_path() (wildboar.tree._tree.extrashapelettreeregressor method)": [[58, "wildboar.tree._tree.ExtraShapeletTreeRegressor.decision_path"]], "decision_path() (wildboar.tree._tree.intervaltreeclassifier method)": [[58, "wildboar.tree._tree.IntervalTreeClassifier.decision_path"]], "decision_path() (wildboar.tree._tree.intervaltreeregressor method)": [[58, "wildboar.tree._tree.IntervalTreeRegressor.decision_path"]], "decision_path() (wildboar.tree._tree.pivottreeclassifier method)": [[58, "wildboar.tree._tree.PivotTreeClassifier.decision_path"]], "decision_path() (wildboar.tree._tree.rockettreeclassifier method)": [[58, "wildboar.tree._tree.RocketTreeClassifier.decision_path"]], "decision_path() (wildboar.tree._tree.rockettreeregressor method)": [[58, "wildboar.tree._tree.RocketTreeRegressor.decision_path"]], "decision_path() (wildboar.tree._tree.shapelettreeclassifier method)": [[58, "wildboar.tree._tree.ShapeletTreeClassifier.decision_path"]], "decision_path() (wildboar.tree._tree.shapelettreeregressor method)": [[58, "wildboar.tree._tree.ShapeletTreeRegressor.decision_path"]], "fit() (wildboar.tree._tree.basefeaturetreeclassifier method)": [[58, "wildboar.tree._tree.BaseFeatureTreeClassifier.fit"]], "fit() (wildboar.tree._tree.basefeaturetreeregressor method)": [[58, "wildboar.tree._tree.BaseFeatureTreeRegressor.fit"]], "fit() (wildboar.tree._tree.dilatedshapelettreeclassifier method)": [[58, "wildboar.tree._tree.DilatedShapeletTreeClassifier.fit"]], "fit() (wildboar.tree._tree.extrashapelettreeclassifier method)": [[58, "wildboar.tree._tree.ExtraShapeletTreeClassifier.fit"]], "fit() (wildboar.tree._tree.extrashapelettreeregressor method)": [[58, "wildboar.tree._tree.ExtraShapeletTreeRegressor.fit"]], "fit() (wildboar.tree._tree.intervaltreeclassifier method)": [[58, "wildboar.tree._tree.IntervalTreeClassifier.fit"]], "fit() (wildboar.tree._tree.intervaltreeregressor method)": [[58, "wildboar.tree._tree.IntervalTreeRegressor.fit"]], "fit() (wildboar.tree._tree.pivottreeclassifier method)": [[58, "wildboar.tree._tree.PivotTreeClassifier.fit"]], "fit() (wildboar.tree._tree.rockettreeclassifier method)": [[58, "wildboar.tree._tree.RocketTreeClassifier.fit"]], "fit() (wildboar.tree._tree.rockettreeregressor method)": [[58, "wildboar.tree._tree.RocketTreeRegressor.fit"]], "fit() (wildboar.tree._tree.shapelettreeclassifier method)": [[58, "wildboar.tree._tree.ShapeletTreeClassifier.fit"]], "fit() (wildboar.tree._tree.shapelettreeregressor method)": [[58, "wildboar.tree._tree.ShapeletTreeRegressor.fit"]], "get_metadata_routing() (wildboar.tree._tree.basefeaturetreeclassifier method)": [[58, "wildboar.tree._tree.BaseFeatureTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._tree.basefeaturetreeregressor method)": [[58, "wildboar.tree._tree.BaseFeatureTreeRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._tree.dilatedshapelettreeclassifier method)": [[58, "wildboar.tree._tree.DilatedShapeletTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._tree.extrashapelettreeclassifier method)": [[58, "wildboar.tree._tree.ExtraShapeletTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._tree.extrashapelettreeregressor method)": [[58, "wildboar.tree._tree.ExtraShapeletTreeRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._tree.intervaltreeclassifier method)": [[58, "wildboar.tree._tree.IntervalTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._tree.intervaltreeregressor method)": [[58, "wildboar.tree._tree.IntervalTreeRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._tree.pivottreeclassifier method)": [[58, "wildboar.tree._tree.PivotTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._tree.rockettreeclassifier method)": [[58, "wildboar.tree._tree.RocketTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._tree.rockettreeregressor method)": [[58, "wildboar.tree._tree.RocketTreeRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._tree.shapelettreeclassifier method)": [[58, "wildboar.tree._tree.ShapeletTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._tree.shapelettreeregressor method)": [[58, "wildboar.tree._tree.ShapeletTreeRegressor.get_metadata_routing"]], "get_params() (wildboar.tree._tree.basefeaturetreeclassifier method)": [[58, "wildboar.tree._tree.BaseFeatureTreeClassifier.get_params"]], "get_params() (wildboar.tree._tree.basefeaturetreeregressor method)": [[58, "wildboar.tree._tree.BaseFeatureTreeRegressor.get_params"]], "get_params() (wildboar.tree._tree.dilatedshapelettreeclassifier method)": [[58, "wildboar.tree._tree.DilatedShapeletTreeClassifier.get_params"]], "get_params() (wildboar.tree._tree.extrashapelettreeclassifier method)": [[58, "wildboar.tree._tree.ExtraShapeletTreeClassifier.get_params"]], "get_params() (wildboar.tree._tree.extrashapelettreeregressor method)": [[58, "wildboar.tree._tree.ExtraShapeletTreeRegressor.get_params"]], "get_params() (wildboar.tree._tree.intervaltreeclassifier method)": [[58, "wildboar.tree._tree.IntervalTreeClassifier.get_params"]], "get_params() (wildboar.tree._tree.intervaltreeregressor method)": [[58, "wildboar.tree._tree.IntervalTreeRegressor.get_params"]], "get_params() (wildboar.tree._tree.pivottreeclassifier method)": [[58, "wildboar.tree._tree.PivotTreeClassifier.get_params"]], "get_params() (wildboar.tree._tree.rockettreeclassifier method)": [[58, "wildboar.tree._tree.RocketTreeClassifier.get_params"]], "get_params() (wildboar.tree._tree.rockettreeregressor method)": [[58, "wildboar.tree._tree.RocketTreeRegressor.get_params"]], "get_params() (wildboar.tree._tree.shapelettreeclassifier method)": [[58, "wildboar.tree._tree.ShapeletTreeClassifier.get_params"]], "get_params() (wildboar.tree._tree.shapelettreeregressor method)": [[58, "wildboar.tree._tree.ShapeletTreeRegressor.get_params"]], "predict() (wildboar.tree._tree.basefeaturetreeclassifier method)": [[58, "wildboar.tree._tree.BaseFeatureTreeClassifier.predict"]], "predict() (wildboar.tree._tree.basefeaturetreeregressor method)": [[58, "wildboar.tree._tree.BaseFeatureTreeRegressor.predict"]], "predict() (wildboar.tree._tree.dilatedshapelettreeclassifier method)": [[58, "wildboar.tree._tree.DilatedShapeletTreeClassifier.predict"]], "predict() (wildboar.tree._tree.extrashapelettreeclassifier method)": [[58, "wildboar.tree._tree.ExtraShapeletTreeClassifier.predict"]], "predict() (wildboar.tree._tree.extrashapelettreeregressor method)": [[58, "wildboar.tree._tree.ExtraShapeletTreeRegressor.predict"]], "predict() (wildboar.tree._tree.intervaltreeclassifier method)": [[58, "wildboar.tree._tree.IntervalTreeClassifier.predict"]], "predict() (wildboar.tree._tree.intervaltreeregressor method)": [[58, "wildboar.tree._tree.IntervalTreeRegressor.predict"]], "predict() (wildboar.tree._tree.pivottreeclassifier method)": [[58, "wildboar.tree._tree.PivotTreeClassifier.predict"]], "predict() (wildboar.tree._tree.rockettreeclassifier method)": [[58, "wildboar.tree._tree.RocketTreeClassifier.predict"]], "predict() (wildboar.tree._tree.rockettreeregressor method)": [[58, "wildboar.tree._tree.RocketTreeRegressor.predict"]], "predict() (wildboar.tree._tree.shapelettreeclassifier method)": [[58, "wildboar.tree._tree.ShapeletTreeClassifier.predict"]], "predict() (wildboar.tree._tree.shapelettreeregressor method)": [[58, "wildboar.tree._tree.ShapeletTreeRegressor.predict"]], "predict_proba() (wildboar.tree._tree.basefeaturetreeclassifier method)": [[58, "wildboar.tree._tree.BaseFeatureTreeClassifier.predict_proba"]], "predict_proba() (wildboar.tree._tree.dilatedshapelettreeclassifier method)": [[58, "wildboar.tree._tree.DilatedShapeletTreeClassifier.predict_proba"]], "predict_proba() (wildboar.tree._tree.extrashapelettreeclassifier method)": [[58, "wildboar.tree._tree.ExtraShapeletTreeClassifier.predict_proba"]], "predict_proba() (wildboar.tree._tree.intervaltreeclassifier method)": [[58, "wildboar.tree._tree.IntervalTreeClassifier.predict_proba"]], "predict_proba() (wildboar.tree._tree.pivottreeclassifier method)": [[58, "wildboar.tree._tree.PivotTreeClassifier.predict_proba"]], "predict_proba() (wildboar.tree._tree.rockettreeclassifier method)": [[58, "wildboar.tree._tree.RocketTreeClassifier.predict_proba"]], "predict_proba() (wildboar.tree._tree.shapelettreeclassifier method)": [[58, "wildboar.tree._tree.ShapeletTreeClassifier.predict_proba"]], "score() (wildboar.tree._tree.basefeaturetreeclassifier method)": [[58, "wildboar.tree._tree.BaseFeatureTreeClassifier.score"]], "score() (wildboar.tree._tree.basefeaturetreeregressor method)": [[58, "wildboar.tree._tree.BaseFeatureTreeRegressor.score"]], "score() (wildboar.tree._tree.dilatedshapelettreeclassifier method)": [[58, "wildboar.tree._tree.DilatedShapeletTreeClassifier.score"]], "score() (wildboar.tree._tree.extrashapelettreeclassifier method)": [[58, "wildboar.tree._tree.ExtraShapeletTreeClassifier.score"]], "score() (wildboar.tree._tree.extrashapelettreeregressor method)": [[58, "wildboar.tree._tree.ExtraShapeletTreeRegressor.score"]], "score() (wildboar.tree._tree.intervaltreeclassifier method)": [[58, "wildboar.tree._tree.IntervalTreeClassifier.score"]], "score() (wildboar.tree._tree.intervaltreeregressor method)": [[58, "wildboar.tree._tree.IntervalTreeRegressor.score"]], "score() (wildboar.tree._tree.pivottreeclassifier method)": [[58, "wildboar.tree._tree.PivotTreeClassifier.score"]], "score() (wildboar.tree._tree.rockettreeclassifier method)": [[58, "wildboar.tree._tree.RocketTreeClassifier.score"]], "score() (wildboar.tree._tree.rockettreeregressor method)": [[58, "wildboar.tree._tree.RocketTreeRegressor.score"]], "score() (wildboar.tree._tree.shapelettreeclassifier method)": [[58, "wildboar.tree._tree.ShapeletTreeClassifier.score"]], "score() (wildboar.tree._tree.shapelettreeregressor method)": [[58, "wildboar.tree._tree.ShapeletTreeRegressor.score"]], "set_params() (wildboar.tree._tree.basefeaturetreeclassifier method)": [[58, "wildboar.tree._tree.BaseFeatureTreeClassifier.set_params"]], "set_params() (wildboar.tree._tree.basefeaturetreeregressor method)": [[58, "wildboar.tree._tree.BaseFeatureTreeRegressor.set_params"]], "set_params() (wildboar.tree._tree.dilatedshapelettreeclassifier method)": [[58, "wildboar.tree._tree.DilatedShapeletTreeClassifier.set_params"]], "set_params() (wildboar.tree._tree.extrashapelettreeclassifier method)": [[58, "wildboar.tree._tree.ExtraShapeletTreeClassifier.set_params"]], "set_params() (wildboar.tree._tree.extrashapelettreeregressor method)": [[58, "wildboar.tree._tree.ExtraShapeletTreeRegressor.set_params"]], "set_params() (wildboar.tree._tree.intervaltreeclassifier method)": [[58, "wildboar.tree._tree.IntervalTreeClassifier.set_params"]], "set_params() (wildboar.tree._tree.intervaltreeregressor method)": [[58, "wildboar.tree._tree.IntervalTreeRegressor.set_params"]], "set_params() (wildboar.tree._tree.pivottreeclassifier method)": [[58, "wildboar.tree._tree.PivotTreeClassifier.set_params"]], "set_params() (wildboar.tree._tree.rockettreeclassifier method)": [[58, "wildboar.tree._tree.RocketTreeClassifier.set_params"]], "set_params() (wildboar.tree._tree.rockettreeregressor method)": [[58, "wildboar.tree._tree.RocketTreeRegressor.set_params"]], "set_params() (wildboar.tree._tree.shapelettreeclassifier method)": [[58, "wildboar.tree._tree.ShapeletTreeClassifier.set_params"]], "set_params() (wildboar.tree._tree.shapelettreeregressor method)": [[58, "wildboar.tree._tree.ShapeletTreeRegressor.set_params"]], "wildboar.tree._tree": [[58, "module-wildboar.tree._tree"]], "extrashapelettreeclassifier (class in wildboar.tree)": [[59, "wildboar.tree.ExtraShapeletTreeClassifier"]], "extrashapelettreeregressor (class in wildboar.tree)": [[59, "wildboar.tree.ExtraShapeletTreeRegressor"]], "intervaltreeclassifier (class in wildboar.tree)": [[59, "wildboar.tree.IntervalTreeClassifier"]], "intervaltreeregressor (class in wildboar.tree)": [[59, "wildboar.tree.IntervalTreeRegressor"]], "pivottreeclassifier (class in wildboar.tree)": [[59, "wildboar.tree.PivotTreeClassifier"]], "proximitytreeclassifier (class in wildboar.tree)": [[59, "wildboar.tree.ProximityTreeClassifier"]], "rockettreeclassifier (class in wildboar.tree)": [[59, "wildboar.tree.RocketTreeClassifier"]], "rockettreeregressor (class in wildboar.tree)": [[59, "wildboar.tree.RocketTreeRegressor"]], "shapelettreeclassifier (class in wildboar.tree)": [[59, "wildboar.tree.ShapeletTreeClassifier"]], "shapelettreeregressor (class in wildboar.tree)": [[59, "wildboar.tree.ShapeletTreeRegressor"]], "apply() (wildboar.tree.extrashapelettreeclassifier method)": [[59, "wildboar.tree.ExtraShapeletTreeClassifier.apply"]], "apply() (wildboar.tree.extrashapelettreeregressor method)": [[59, "wildboar.tree.ExtraShapeletTreeRegressor.apply"]], "apply() (wildboar.tree.intervaltreeclassifier method)": [[59, "wildboar.tree.IntervalTreeClassifier.apply"]], "apply() (wildboar.tree.intervaltreeregressor method)": [[59, "wildboar.tree.IntervalTreeRegressor.apply"]], "apply() (wildboar.tree.pivottreeclassifier method)": [[59, "wildboar.tree.PivotTreeClassifier.apply"]], "apply() (wildboar.tree.proximitytreeclassifier method)": [[59, "wildboar.tree.ProximityTreeClassifier.apply"]], "apply() (wildboar.tree.rockettreeclassifier method)": [[59, "wildboar.tree.RocketTreeClassifier.apply"]], "apply() (wildboar.tree.rockettreeregressor method)": [[59, "wildboar.tree.RocketTreeRegressor.apply"]], "apply() (wildboar.tree.shapelettreeclassifier method)": [[59, "wildboar.tree.ShapeletTreeClassifier.apply"]], "apply() (wildboar.tree.shapelettreeregressor method)": [[59, "wildboar.tree.ShapeletTreeRegressor.apply"]], "decision_path() (wildboar.tree.extrashapelettreeclassifier method)": [[59, "wildboar.tree.ExtraShapeletTreeClassifier.decision_path"]], "decision_path() (wildboar.tree.extrashapelettreeregressor method)": [[59, "wildboar.tree.ExtraShapeletTreeRegressor.decision_path"]], "decision_path() (wildboar.tree.intervaltreeclassifier method)": [[59, "wildboar.tree.IntervalTreeClassifier.decision_path"]], "decision_path() (wildboar.tree.intervaltreeregressor method)": [[59, "wildboar.tree.IntervalTreeRegressor.decision_path"]], "decision_path() (wildboar.tree.pivottreeclassifier method)": [[59, "wildboar.tree.PivotTreeClassifier.decision_path"]], "decision_path() (wildboar.tree.proximitytreeclassifier method)": [[59, "wildboar.tree.ProximityTreeClassifier.decision_path"]], "decision_path() (wildboar.tree.rockettreeclassifier method)": [[59, "wildboar.tree.RocketTreeClassifier.decision_path"]], "decision_path() (wildboar.tree.rockettreeregressor method)": [[59, "wildboar.tree.RocketTreeRegressor.decision_path"]], "decision_path() (wildboar.tree.shapelettreeclassifier method)": [[59, "wildboar.tree.ShapeletTreeClassifier.decision_path"]], "decision_path() (wildboar.tree.shapelettreeregressor method)": [[59, "wildboar.tree.ShapeletTreeRegressor.decision_path"]], "fit() (wildboar.tree.extrashapelettreeclassifier method)": [[59, "wildboar.tree.ExtraShapeletTreeClassifier.fit"]], "fit() (wildboar.tree.extrashapelettreeregressor method)": [[59, "wildboar.tree.ExtraShapeletTreeRegressor.fit"]], "fit() (wildboar.tree.intervaltreeclassifier method)": [[59, "wildboar.tree.IntervalTreeClassifier.fit"]], "fit() (wildboar.tree.intervaltreeregressor method)": [[59, "wildboar.tree.IntervalTreeRegressor.fit"]], "fit() (wildboar.tree.pivottreeclassifier method)": [[59, "wildboar.tree.PivotTreeClassifier.fit"]], "fit() (wildboar.tree.proximitytreeclassifier method)": [[59, "wildboar.tree.ProximityTreeClassifier.fit"]], "fit() (wildboar.tree.rockettreeclassifier method)": [[59, "wildboar.tree.RocketTreeClassifier.fit"]], "fit() (wildboar.tree.rockettreeregressor method)": [[59, "wildboar.tree.RocketTreeRegressor.fit"]], "fit() (wildboar.tree.shapelettreeclassifier method)": [[59, "wildboar.tree.ShapeletTreeClassifier.fit"]], "fit() (wildboar.tree.shapelettreeregressor method)": [[59, "wildboar.tree.ShapeletTreeRegressor.fit"]], "get_metadata_routing() (wildboar.tree.extrashapelettreeclassifier method)": [[59, "wildboar.tree.ExtraShapeletTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree.extrashapelettreeregressor method)": [[59, "wildboar.tree.ExtraShapeletTreeRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree.intervaltreeclassifier method)": [[59, "wildboar.tree.IntervalTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree.intervaltreeregressor method)": [[59, "wildboar.tree.IntervalTreeRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree.pivottreeclassifier method)": [[59, "wildboar.tree.PivotTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree.proximitytreeclassifier method)": [[59, "wildboar.tree.ProximityTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree.rockettreeclassifier method)": [[59, "wildboar.tree.RocketTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree.rockettreeregressor method)": [[59, "wildboar.tree.RocketTreeRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree.shapelettreeclassifier method)": [[59, "wildboar.tree.ShapeletTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree.shapelettreeregressor method)": [[59, "wildboar.tree.ShapeletTreeRegressor.get_metadata_routing"]], "get_params() (wildboar.tree.extrashapelettreeclassifier method)": [[59, "wildboar.tree.ExtraShapeletTreeClassifier.get_params"]], "get_params() (wildboar.tree.extrashapelettreeregressor method)": [[59, "wildboar.tree.ExtraShapeletTreeRegressor.get_params"]], "get_params() (wildboar.tree.intervaltreeclassifier method)": [[59, "wildboar.tree.IntervalTreeClassifier.get_params"]], "get_params() (wildboar.tree.intervaltreeregressor method)": [[59, "wildboar.tree.IntervalTreeRegressor.get_params"]], "get_params() (wildboar.tree.pivottreeclassifier method)": [[59, "wildboar.tree.PivotTreeClassifier.get_params"]], "get_params() (wildboar.tree.proximitytreeclassifier method)": [[59, "wildboar.tree.ProximityTreeClassifier.get_params"]], "get_params() (wildboar.tree.rockettreeclassifier method)": [[59, "wildboar.tree.RocketTreeClassifier.get_params"]], "get_params() (wildboar.tree.rockettreeregressor method)": [[59, "wildboar.tree.RocketTreeRegressor.get_params"]], "get_params() (wildboar.tree.shapelettreeclassifier method)": [[59, "wildboar.tree.ShapeletTreeClassifier.get_params"]], "get_params() (wildboar.tree.shapelettreeregressor method)": [[59, "wildboar.tree.ShapeletTreeRegressor.get_params"]], "predict() (wildboar.tree.extrashapelettreeclassifier method)": [[59, "wildboar.tree.ExtraShapeletTreeClassifier.predict"]], "predict() (wildboar.tree.extrashapelettreeregressor method)": [[59, "wildboar.tree.ExtraShapeletTreeRegressor.predict"]], "predict() (wildboar.tree.intervaltreeclassifier method)": [[59, "wildboar.tree.IntervalTreeClassifier.predict"]], "predict() (wildboar.tree.intervaltreeregressor method)": [[59, "wildboar.tree.IntervalTreeRegressor.predict"]], "predict() (wildboar.tree.pivottreeclassifier method)": [[59, "wildboar.tree.PivotTreeClassifier.predict"]], "predict() (wildboar.tree.proximitytreeclassifier method)": [[59, "wildboar.tree.ProximityTreeClassifier.predict"]], "predict() (wildboar.tree.rockettreeclassifier method)": [[59, "wildboar.tree.RocketTreeClassifier.predict"]], "predict() (wildboar.tree.rockettreeregressor method)": [[59, "wildboar.tree.RocketTreeRegressor.predict"]], "predict() (wildboar.tree.shapelettreeclassifier method)": [[59, "wildboar.tree.ShapeletTreeClassifier.predict"]], "predict() (wildboar.tree.shapelettreeregressor method)": [[59, "wildboar.tree.ShapeletTreeRegressor.predict"]], "predict_proba() (wildboar.tree.extrashapelettreeclassifier method)": [[59, "wildboar.tree.ExtraShapeletTreeClassifier.predict_proba"]], "predict_proba() (wildboar.tree.intervaltreeclassifier method)": [[59, "wildboar.tree.IntervalTreeClassifier.predict_proba"]], "predict_proba() (wildboar.tree.pivottreeclassifier method)": [[59, "wildboar.tree.PivotTreeClassifier.predict_proba"]], "predict_proba() (wildboar.tree.proximitytreeclassifier method)": [[59, "wildboar.tree.ProximityTreeClassifier.predict_proba"]], "predict_proba() (wildboar.tree.rockettreeclassifier method)": [[59, "wildboar.tree.RocketTreeClassifier.predict_proba"]], "predict_proba() (wildboar.tree.shapelettreeclassifier method)": [[59, "wildboar.tree.ShapeletTreeClassifier.predict_proba"]], "score() (wildboar.tree.extrashapelettreeclassifier method)": [[59, "wildboar.tree.ExtraShapeletTreeClassifier.score"]], "score() (wildboar.tree.extrashapelettreeregressor method)": [[59, "wildboar.tree.ExtraShapeletTreeRegressor.score"]], "score() (wildboar.tree.intervaltreeclassifier method)": [[59, "wildboar.tree.IntervalTreeClassifier.score"]], "score() (wildboar.tree.intervaltreeregressor method)": [[59, "wildboar.tree.IntervalTreeRegressor.score"]], "score() (wildboar.tree.pivottreeclassifier method)": [[59, "wildboar.tree.PivotTreeClassifier.score"]], "score() (wildboar.tree.proximitytreeclassifier method)": [[59, "wildboar.tree.ProximityTreeClassifier.score"]], "score() (wildboar.tree.rockettreeclassifier method)": [[59, "wildboar.tree.RocketTreeClassifier.score"]], "score() (wildboar.tree.rockettreeregressor method)": [[59, "wildboar.tree.RocketTreeRegressor.score"]], "score() (wildboar.tree.shapelettreeclassifier method)": [[59, "wildboar.tree.ShapeletTreeClassifier.score"]], "score() (wildboar.tree.shapelettreeregressor method)": [[59, "wildboar.tree.ShapeletTreeRegressor.score"]], "set_params() (wildboar.tree.extrashapelettreeclassifier method)": [[59, "wildboar.tree.ExtraShapeletTreeClassifier.set_params"]], "set_params() (wildboar.tree.extrashapelettreeregressor method)": [[59, "wildboar.tree.ExtraShapeletTreeRegressor.set_params"]], "set_params() (wildboar.tree.intervaltreeclassifier method)": [[59, "wildboar.tree.IntervalTreeClassifier.set_params"]], "set_params() (wildboar.tree.intervaltreeregressor method)": [[59, "wildboar.tree.IntervalTreeRegressor.set_params"]], "set_params() (wildboar.tree.pivottreeclassifier method)": [[59, "wildboar.tree.PivotTreeClassifier.set_params"]], "set_params() (wildboar.tree.proximitytreeclassifier method)": [[59, "wildboar.tree.ProximityTreeClassifier.set_params"]], "set_params() (wildboar.tree.rockettreeclassifier method)": [[59, "wildboar.tree.RocketTreeClassifier.set_params"]], "set_params() (wildboar.tree.rockettreeregressor method)": [[59, "wildboar.tree.RocketTreeRegressor.set_params"]], "set_params() (wildboar.tree.shapelettreeclassifier method)": [[59, "wildboar.tree.ShapeletTreeClassifier.set_params"]], "set_params() (wildboar.tree.shapelettreeregressor method)": [[59, "wildboar.tree.ShapeletTreeRegressor.set_params"]], "wildboar.tree": [[59, "module-wildboar.tree"]], "run_in_parallel() (in module wildboar.utils._parallel)": [[60, "wildboar.utils._parallel.run_in_parallel"]], "wildboar.utils._parallel": [[60, "module-wildboar.utils._parallel"]], "assert_exhaustive_parameter_checks() (in module wildboar.utils._testing)": [[61, "wildboar.utils._testing.assert_exhaustive_parameter_checks"]], "assert_parameter_checks() (in module wildboar.utils._testing)": [[61, "wildboar.utils._testing.assert_parameter_checks"]], "wildboar.utils._testing": [[61, "module-wildboar.utils._testing"]], "array_or_scalar() (in module wildboar.utils.decorators)": [[62, "wildboar.utils.decorators.array_or_scalar"]], "singleton() (in module wildboar.utils.decorators)": [[62, "wildboar.utils.decorators.singleton"]], "unstable() (in module wildboar.utils.decorators)": [[62, "wildboar.utils.decorators.unstable"]], "wildboar.utils.decorators": [[62, "module-wildboar.utils.decorators"]], "check_estimator() (in module wildboar.utils.estimator_checks)": [[63, "wildboar.utils.estimator_checks.check_estimator"]], "wildboar.utils.estimator_checks": [[63, "module-wildboar.utils.estimator_checks"]], "check_x_y() (in module wildboar.utils)": [[64, "wildboar.utils.check_X_y"]], "check_array() (in module wildboar.utils)": [[64, "wildboar.utils.check_array"]], "wildboar.utils": [[64, "module-wildboar.utils"]], "midpointnormalize (class in wildboar.utils.plot)": [[65, "wildboar.utils.plot.MidpointNormalize"]], "autoscale() (wildboar.utils.plot.midpointnormalize method)": [[65, "wildboar.utils.plot.MidpointNormalize.autoscale"]], "autoscale_none() (wildboar.utils.plot.midpointnormalize method)": [[65, "wildboar.utils.plot.MidpointNormalize.autoscale_None"]], "plot_frequency_domain() (in module wildboar.utils.plot)": [[65, "wildboar.utils.plot.plot_frequency_domain"]], "plot_time_domain() (in module wildboar.utils.plot)": [[65, "wildboar.utils.plot.plot_time_domain"]], "process_value() (wildboar.utils.plot.midpointnormalize static method)": [[65, "wildboar.utils.plot.MidpointNormalize.process_value"]], "scaled() (wildboar.utils.plot.midpointnormalize method)": [[65, "wildboar.utils.plot.MidpointNormalize.scaled"]], "wildboar.utils.plot": [[65, "module-wildboar.utils.plot"]], "metricoptions (class in wildboar.utils.validation)": [[66, "wildboar.utils.validation.MetricOptions"]], "subsequencemetricoptions (class in wildboar.utils.validation)": [[66, "wildboar.utils.validation.SubsequenceMetricOptions"]], "check_x_y() (in module wildboar.utils.validation)": [[66, "wildboar.utils.validation.check_X_y"]], "check_array() (in module wildboar.utils.validation)": [[66, "wildboar.utils.validation.check_array"]], "check_classification_targets() (in module wildboar.utils.validation)": [[66, "wildboar.utils.validation.check_classification_targets"]], "check_option() (in module wildboar.utils.validation)": [[66, "wildboar.utils.validation.check_option"]], "check_type() (in module wildboar.utils.validation)": [[66, "wildboar.utils.validation.check_type"]], "is_satisfied_by() (wildboar.utils.validation.metricoptions method)": [[66, "wildboar.utils.validation.MetricOptions.is_satisfied_by"]], "is_satisfied_by() (wildboar.utils.validation.subsequencemetricoptions method)": [[66, "wildboar.utils.validation.SubsequenceMetricOptions.is_satisfied_by"]], "wildboar.utils.validation": [[66, "module-wildboar.utils.validation"]], "get_variable_length() (in module wildboar.utils.variable_len)": [[67, "wildboar.utils.variable_len.get_variable_length"]], "is_end_of_series() (in module wildboar.utils.variable_len)": [[67, "wildboar.utils.variable_len.is_end_of_series"]], "is_variable_length() (in module wildboar.utils.variable_len)": [[67, "wildboar.utils.variable_len.is_variable_length"]], "wildboar.utils.variable_len": [[67, "module-wildboar.utils.variable_len"]], "wildboar.version": [[68, "module-wildboar.version"]]}})