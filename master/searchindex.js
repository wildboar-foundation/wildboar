Search.setIndex({"docnames": ["api/index", "api/wildboar/annotate/_motifs/index", "api/wildboar/annotate/_segment/index", "api/wildboar/annotate/index", "api/wildboar/base/index", "api/wildboar/datasets/_filter/index", "api/wildboar/datasets/_repository/index", "api/wildboar/datasets/index", "api/wildboar/datasets/outlier/index", "api/wildboar/datasets/preprocess/index", "api/wildboar/dimension_selection/_base/index", "api/wildboar/dimension_selection/_distance/index", "api/wildboar/dimension_selection/_sequential/index", "api/wildboar/dimension_selection/_variance/index", "api/wildboar/dimension_selection/index", "api/wildboar/distance/_distance/index", "api/wildboar/distance/_manifold/index", "api/wildboar/distance/_matrix_profile/index", "api/wildboar/distance/_multi_metric/index", "api/wildboar/distance/_neighbors/index", "api/wildboar/distance/dtw/index", "api/wildboar/distance/index", "api/wildboar/ensemble/_elastic/index", "api/wildboar/ensemble/_ensemble/index", "api/wildboar/ensemble/index", "api/wildboar/explain/_importance/index", "api/wildboar/explain/counterfactual/_helper/index", "api/wildboar/explain/counterfactual/_nn/index", "api/wildboar/explain/counterfactual/_nun/index", "api/wildboar/explain/counterfactual/_proto/index", "api/wildboar/explain/counterfactual/_sf/index", "api/wildboar/explain/counterfactual/index", "api/wildboar/explain/index", "api/wildboar/index", "api/wildboar/linear_model/_hydra/index", "api/wildboar/linear_model/_rocket/index", "api/wildboar/linear_model/_shapelet/index", "api/wildboar/linear_model/_transform/index", "api/wildboar/linear_model/index", "api/wildboar/metrics/_cluster/index", "api/wildboar/metrics/_counterfactual/index", "api/wildboar/metrics/index", "api/wildboar/model_selection/_cv/index", "api/wildboar/model_selection/_outlier/index", "api/wildboar/model_selection/index", "api/wildboar/transform/_base/index", "api/wildboar/transform/_conv/index", "api/wildboar/transform/_diff/index", "api/wildboar/transform/_hydra/index", "api/wildboar/transform/_interval/index", "api/wildboar/transform/_matrix_profile/index", "api/wildboar/transform/_pivot/index", "api/wildboar/transform/_rocket/index", "api/wildboar/transform/_sax/index", "api/wildboar/transform/_shapelet/index", "api/wildboar/transform/index", "api/wildboar/tree/_base/index", "api/wildboar/tree/_plot/index", "api/wildboar/tree/_ptree/index", "api/wildboar/tree/_tree/index", "api/wildboar/tree/index", "api/wildboar/utils/_parallel/index", "api/wildboar/utils/_testing/index", "api/wildboar/utils/decorators/index", "api/wildboar/utils/estimator_checks/index", "api/wildboar/utils/index", "api/wildboar/utils/plot/index", "api/wildboar/utils/validation/index", "api/wildboar/utils/variable_len/index", "api/wildboar/version/index", "guide", "guide/annotate", "guide/basics", "guide/datasets", "guide/datasets/preprocess", "guide/datasets/repositories", "guide/dimension_selection", "guide/explain/counterfactuals", "guide/glossary", "guide/metrics", "guide/metrics/distance", "guide/metrics/elastic", "guide/supervised", "guide/supervised/ensemble", "guide/supervised/transform", "guide/supervised/trees", "guide/unsupervised", "guide/unsupervised/outlier", "guide/unsupervised/outlier/generation", "guide/unsupervised/transform", "index", "install", "install/build", "more/whatsnew"], "filenames": ["api/index.rst", "api/wildboar/annotate/_motifs/index.rst", "api/wildboar/annotate/_segment/index.rst", "api/wildboar/annotate/index.rst", "api/wildboar/base/index.rst", "api/wildboar/datasets/_filter/index.rst", "api/wildboar/datasets/_repository/index.rst", "api/wildboar/datasets/index.rst", "api/wildboar/datasets/outlier/index.rst", "api/wildboar/datasets/preprocess/index.rst", "api/wildboar/dimension_selection/_base/index.rst", "api/wildboar/dimension_selection/_distance/index.rst", "api/wildboar/dimension_selection/_sequential/index.rst", "api/wildboar/dimension_selection/_variance/index.rst", "api/wildboar/dimension_selection/index.rst", "api/wildboar/distance/_distance/index.rst", "api/wildboar/distance/_manifold/index.rst", "api/wildboar/distance/_matrix_profile/index.rst", "api/wildboar/distance/_multi_metric/index.rst", "api/wildboar/distance/_neighbors/index.rst", "api/wildboar/distance/dtw/index.rst", "api/wildboar/distance/index.rst", "api/wildboar/ensemble/_elastic/index.rst", "api/wildboar/ensemble/_ensemble/index.rst", "api/wildboar/ensemble/index.rst", "api/wildboar/explain/_importance/index.rst", "api/wildboar/explain/counterfactual/_helper/index.rst", "api/wildboar/explain/counterfactual/_nn/index.rst", "api/wildboar/explain/counterfactual/_nun/index.rst", "api/wildboar/explain/counterfactual/_proto/index.rst", "api/wildboar/explain/counterfactual/_sf/index.rst", "api/wildboar/explain/counterfactual/index.rst", "api/wildboar/explain/index.rst", "api/wildboar/index.rst", "api/wildboar/linear_model/_hydra/index.rst", "api/wildboar/linear_model/_rocket/index.rst", "api/wildboar/linear_model/_shapelet/index.rst", "api/wildboar/linear_model/_transform/index.rst", "api/wildboar/linear_model/index.rst", "api/wildboar/metrics/_cluster/index.rst", "api/wildboar/metrics/_counterfactual/index.rst", "api/wildboar/metrics/index.rst", "api/wildboar/model_selection/_cv/index.rst", "api/wildboar/model_selection/_outlier/index.rst", "api/wildboar/model_selection/index.rst", "api/wildboar/transform/_base/index.rst", "api/wildboar/transform/_conv/index.rst", "api/wildboar/transform/_diff/index.rst", "api/wildboar/transform/_hydra/index.rst", "api/wildboar/transform/_interval/index.rst", "api/wildboar/transform/_matrix_profile/index.rst", "api/wildboar/transform/_pivot/index.rst", "api/wildboar/transform/_rocket/index.rst", "api/wildboar/transform/_sax/index.rst", "api/wildboar/transform/_shapelet/index.rst", "api/wildboar/transform/index.rst", "api/wildboar/tree/_base/index.rst", "api/wildboar/tree/_plot/index.rst", "api/wildboar/tree/_ptree/index.rst", "api/wildboar/tree/_tree/index.rst", "api/wildboar/tree/index.rst", "api/wildboar/utils/_parallel/index.rst", "api/wildboar/utils/_testing/index.rst", "api/wildboar/utils/decorators/index.rst", "api/wildboar/utils/estimator_checks/index.rst", "api/wildboar/utils/index.rst", "api/wildboar/utils/plot/index.rst", "api/wildboar/utils/validation/index.rst", "api/wildboar/utils/variable_len/index.rst", "api/wildboar/version/index.rst", "guide.rst", "guide/annotate.rst", "guide/basics.rst", "guide/datasets.rst", "guide/datasets/preprocess.rst", "guide/datasets/repositories.rst", "guide/dimension_selection.rst", "guide/explain/counterfactuals.rst", "guide/glossary.rst", "guide/metrics.rst", "guide/metrics/distance.rst", "guide/metrics/elastic.rst", "guide/supervised.rst", "guide/supervised/ensemble.rst", "guide/supervised/transform.rst", "guide/supervised/trees.rst", "guide/unsupervised.rst", "guide/unsupervised/outlier.rst", "guide/unsupervised/outlier/generation.rst", "guide/unsupervised/transform.rst", "index.rst", "install.rst", "install/build.rst", "more/whatsnew.rst"], "titles": ["API Reference", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.annotate._motifs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.annotate._segment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.annotate</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.datasets._filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.datasets._repository</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.datasets.outlier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.datasets.preprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.dimension_selection._base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.dimension_selection._distance</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.dimension_selection._sequential</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.dimension_selection._variance</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.dimension_selection</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.distance._distance</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.distance._manifold</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.distance._matrix_profile</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.distance._multi_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.distance._neighbors</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.distance.dtw</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.distance</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.ensemble._elastic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.ensemble._ensemble</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.ensemble</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.explain._importance</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.explain.counterfactual._helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.explain.counterfactual._nn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.explain.counterfactual._nun</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.explain.counterfactual._proto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.explain.counterfactual._sf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.explain.counterfactual</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.explain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.linear_model._hydra</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.linear_model._rocket</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.linear_model._shapelet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.linear_model._transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.linear_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.metrics._cluster</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.metrics._counterfactual</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.metrics</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.model_selection._cv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.model_selection._outlier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.model_selection</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.transform._base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.transform._conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.transform._diff</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.transform._hydra</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.transform._interval</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.transform._matrix_profile</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.transform._pivot</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.transform._rocket</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.transform._sax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.transform._shapelet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.tree._base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.tree._plot</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.tree._ptree</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.tree._tree</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.tree</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.utils._parallel</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.utils._testing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.utils.decorators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.utils.estimator_checks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.utils.plot</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.utils.validation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.utils.variable_len</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.version</span></code>", "User Guide", "Annotate", "Time series", "Datasets", "Pre-processing", "Repositories", "Dimension selection", "Counterfactual explanations", "Glossary", "Metrics", "Distance", "Elastic metrics", "Supervised learning", "Ensemble estimators", "Transform-based estimators", "Tree-based estimators", "Unsupervised learning", "Outlier detection", "Outlier detection benchmarks", "Time series transform", "&lt;no title&gt;", "Install wildboar", "Build from source", "What\u2019s new"], "terms": {"motif": [1, 3, 17, 21], "x": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 79, 80, 85, 88, 89], "mp": [1, 3, 17, 21], "none": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 75, 79, 84, 85, 93], "window": [1, 2, 3, 17, 19, 20, 21, 25, 28, 31, 32, 40, 41, 50, 53, 55, 75, 79, 91, 92], "auto": [1, 3, 12, 14, 15, 16, 19, 21, 22, 23, 24, 27, 29, 31, 51, 55, 58, 60, 77], "exclud": [1, 2, 3, 15, 17, 21, 50, 55], "0": [1, 2, 3, 6, 7, 8, 9, 11, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 42, 43, 44, 46, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 65, 66, 67, 70, 72, 73, 74, 75, 76, 77, 79, 80, 83, 84, 85, 88, 89, 91], "2": [1, 2, 3, 8, 12, 14, 15, 16, 17, 20, 21, 23, 24, 25, 26, 27, 28, 31, 32, 35, 36, 37, 38, 42, 43, 44, 46, 47, 49, 50, 52, 55, 56, 58, 59, 60, 65, 67, 68, 70, 72, 73, 75, 76, 77, 78, 79, 80, 83, 84, 89, 90, 91, 93], "max_dist": [1, 3], "max_neighbour": [1, 3], "10": [1, 3, 11, 14, 15, 21, 23, 24, 25, 32, 34, 35, 36, 37, 38, 49, 51, 52, 54, 55, 58, 59, 60, 66, 79, 80, 84, 85, 89, 92], "min_neighbour": [1, 3], "1": [1, 2, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 65, 66, 67, 68, 70, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 88, 89, 91, 92], "max_motif": [1, 3], "return_dist": [1, 3, 15, 21], "fals": [1, 2, 3, 7, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 34, 36, 38, 40, 41, 53, 54, 55, 57, 60, 64, 65, 66, 67, 70, 72, 73, 75, 76, 83, 84, 85], "sourc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 77, 85, 89, 91], "find": [1, 2, 3, 15, 21, 73, 80, 92], "paramet": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 73, 74, 75, 77, 79, 80, 83, 84, 88, 89, 90, 93], "arrai": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 65, 66, 67, 68, 70, 72, 74, 75, 76, 77, 78, 80, 83, 85, 89], "like": [1, 2, 3, 4, 8, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 78], "shape": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 66, 70, 72, 73, 74, 76, 78, 79, 80, 85], "n_sampl": [1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 65, 66, 67, 70, 72, 73, 74, 78, 80], "n_timestep": [1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 65, 66, 67, 70, 72, 73, 74, 78, 80, 83, 84], "The": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 88, 89, 90, 91, 92, 93], "time": [1, 2, 3, 4, 9, 11, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 36, 38, 39, 40, 41, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 64, 65, 66, 67, 68, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 88, 93], "seri": [1, 2, 3, 4, 9, 11, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 36, 38, 39, 40, 41, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 64, 65, 67, 68, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 88, 93], "ndarrai": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 63, 65, 67, 68, 70, 74], "profile_s": [1, 2, 3, 17, 21], "option": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 73, 75, 79, 80, 88, 91, 92], "matrix": [1, 2, 3, 17, 20, 21, 23, 24, 26, 29, 31, 35, 36, 37, 38, 50, 55, 56, 58, 59, 60, 70, 80], "profil": [1, 2, 3, 15, 17, 21, 50, 55], "i": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 88, 89, 91, 92, 93], "comput": [1, 2, 3, 11, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 29, 31, 32, 39, 40, 41, 50, 51, 55, 56, 57, 58, 59, 60, 76, 77, 79, 80, 85, 93], "int": [1, 2, 3, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 65, 66, 67, 73, 80, 88], "float": [1, 2, 3, 4, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 65, 66, 67, 68, 72, 73, 79, 83, 93], "size": [1, 2, 3, 9, 15, 17, 19, 20, 21, 23, 24, 25, 29, 30, 31, 32, 34, 36, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 52, 53, 54, 55, 57, 59, 60, 70, 73, 84, 85, 89], "math": [1, 3, 15, 21], "ceil": [1, 3, 15, 21, 59, 60], "fraction": [1, 2, 3, 8, 11, 13, 14, 17, 20, 21, 23, 24, 25, 30, 31, 32, 40, 41, 42, 44, 50, 55, 56, 57, 58, 59, 60, 88, 93], "exact": [1, 2, 3, 15, 17, 19, 20, 21, 23, 24, 25, 32, 34, 38, 45, 48, 50, 52, 55, 80], "exclus": [1, 2, 3, 15, 17, 21, 50, 55, 77], "zone": [1, 3, 15, 17, 21, 50, 55], "str": [1, 3, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 21, 23, 24, 25, 26, 28, 31, 32, 34, 36, 38, 39, 40, 41, 49, 51, 53, 54, 55, 57, 58, 59, 60, 63, 65, 66, 67, 73], "maximum": [1, 3, 9, 16, 19, 20, 21, 23, 24, 25, 28, 29, 31, 32, 36, 38, 42, 44, 49, 52, 54, 55, 58, 59, 60, 66, 74, 78, 80, 89], "distanc": [1, 2, 3, 8, 11, 12, 13, 14, 22, 23, 24, 25, 28, 30, 31, 32, 36, 38, 39, 40, 41, 51, 54, 55, 58, 59, 60, 76, 77, 79, 83, 84, 85, 93], "between": [1, 3, 9, 11, 12, 13, 14, 15, 19, 20, 21, 23, 24, 26, 28, 30, 31, 39, 40, 41, 46, 54, 55, 59, 60, 70, 74, 76, 77, 79, 80, 85, 88], "number": [1, 2, 3, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 70, 73, 76, 78, 80, 83, 84, 85, 89], "neighbour": [1, 3], "minimum": [1, 3, 6, 7, 9, 15, 20, 21, 23, 24, 25, 26, 29, 32, 36, 38, 49, 52, 54, 55, 58, 59, 60, 65, 67, 75, 77, 79, 84], "return": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 70, 73, 74, 75, 77, 78, 80, 88], "bool": [1, 2, 3, 4, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68], "from": [1, 3, 6, 7, 8, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 34, 35, 36, 37, 38, 40, 41, 43, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 66, 68, 70, 73, 74, 75, 76, 77, 79, 80, 83, 84, 85, 88, 89, 91], "main": [1, 3, 70, 73, 90], "motif_indici": [1, 3], "list": [1, 3, 5, 6, 7, 15, 16, 21, 23, 24, 25, 26, 28, 31, 32, 35, 36, 37, 38, 40, 41, 49, 51, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 73, 75, 80, 83, 85, 88], "indici": [1, 3, 15, 21, 42, 44], "motif_dist": [1, 3], "subsequence_match": [1, 3, 15, 21, 80], "subsequ": [1, 3, 15, 17, 21, 23, 24, 50, 52, 54, 55, 77, 84, 89], "match": [1, 3, 15, 17, 21, 29, 75, 77, 79, 80], "matrix_profil": [1, 2, 3, 17, 21], "refer": [1, 2, 3, 8, 17, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 34, 36, 38, 40, 41, 48, 49, 52, 54, 55, 58, 60, 80, 85, 90], "yeh": [1, 3, 17, 21], "c": [1, 3, 17, 21, 23, 24, 65, 67, 70, 79, 83, 84, 92], "m": [1, 3, 17, 20, 21, 28, 31, 40, 41, 79, 80, 83, 84, 91], "et": [1, 2, 3, 8, 17, 20, 21, 23, 24, 48, 55, 58, 60, 77, 83, 84, 88, 89, 93], "al": [1, 2, 3, 8, 17, 20, 21, 23, 24, 48, 55, 58, 60, 77, 83, 84, 88, 89, 93], "2016": [1, 3, 17, 21], "all": [1, 3, 4, 6, 7, 8, 11, 13, 14, 15, 17, 19, 21, 22, 23, 24, 25, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 52, 54, 55, 56, 59, 60, 62, 64, 65, 66, 67, 70, 73, 74, 75, 76, 77, 79, 80, 83, 84, 85, 91, 92], "pair": [1, 3, 7, 17, 21, 23, 24, 40, 41, 51, 54, 55, 58, 59, 60, 67], "similar": [1, 3, 17, 21, 26, 31, 50, 55, 70, 74, 77, 79, 80, 83], "join": [1, 2, 3, 17, 21, 50, 55], "unifi": [1, 3, 17, 21], "view": [1, 3, 17, 21], "includ": [1, 3, 8, 17, 21, 31, 33, 65, 67, 70, 83, 84, 89], "discord": [1, 3, 17, 21], "shapelet": [1, 3, 15, 17, 21, 23, 24, 25, 29, 30, 31, 32, 36, 38, 52, 54, 55, 59, 60, 70, 93], "In": [1, 2, 3, 8, 17, 19, 20, 21, 22, 23, 24, 30, 31, 34, 35, 36, 37, 38, 49, 55, 56, 58, 59, 60, 70, 72, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 88, 89, 93], "ieee": [1, 3, 17, 21, 30, 31, 77, 79], "16th": [1, 3, 17, 21], "intern": [1, 2, 3, 17, 20, 21, 23, 24, 28, 30, 31, 59, 60, 77, 79, 80, 84], "confer": [1, 2, 3, 17, 20, 21, 30, 31, 77, 79, 80, 84], "data": [1, 2, 3, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 26, 29, 30, 31, 34, 35, 36, 37, 38, 39, 41, 43, 44, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 65, 67, 73, 74, 75, 77, 79, 80, 83, 84, 88, 89], "mine": [1, 2, 3, 17, 21, 22, 23, 24, 30, 31, 34, 38, 48, 49, 52, 55, 58, 60, 77, 80, 83, 84], "icdm": [1, 3, 17, 21, 30, 31, 77], "segment": [2, 3], "mpi": [2, 3, 17, 21], "n_segment": [2, 3], "boundri": [2, 3], "return_arc_curv": [2, 3], "chang": [2, 3, 7, 20, 23, 24, 26, 30, 31, 40, 41, 59, 60, 72, 73, 75, 77, 80, 83, 84], "regim": [2, 3], "If": [2, 3, 4, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 73, 75, 80, 84, 85, 88, 91, 93], "given": [2, 3, 8, 15, 17, 19, 20, 21, 22, 23, 24, 25, 32, 34, 35, 36, 37, 38, 46, 53, 55, 56, 58, 59, 60, 78, 80, 82, 83, 85], "index": [2, 3, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 23, 24, 25, 29, 32, 54, 55, 56, 58, 59, 60, 72, 78, 80, 84, 85], "must": [2, 3, 8, 20, 25, 28, 31, 32, 40, 41, 49, 52, 75, 79, 88, 91], "unless": [2, 3, 23, 24, 51, 54, 55, 56, 58, 59, 60, 65, 67, 75, 79, 85], "identifi": [2, 3, 23, 24, 54, 55, 59, 60, 65, 67, 70, 72, 75, 77, 80, 89], "ignor": [2, 3, 10, 11, 13, 14, 15, 19, 20, 21, 23, 24, 25, 32, 40, 41, 42, 44, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 64, 72], "self": [2, 3, 4, 10, 11, 12, 13, 14, 16, 17, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 73], "region": [2, 3, 28, 31, 70], "around": [2, 3, 16, 19, 21, 39, 41], "each": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 68, 70, 72, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 89], "express": [2, 3, 8, 17, 21, 23, 24, 40, 41, 50, 55, 59, 60, 73, 75], "arc": [2, 3], "curv": [2, 3], "start": [2, 3, 15, 21, 25, 32, 70, 80, 90], "arc_curv": [2, 3], "gharghabi": [2, 3], "shaghayegh": [2, 3], "2017": [2, 3], "viii": [2, 3], "domain": [2, 3, 66], "agnost": [2, 3, 29, 31], "onlin": [2, 3], "semant": [2, 3], "superhuman": [2, 3], "perform": [2, 3, 12, 14, 15, 16, 19, 21, 23, 24, 40, 41, 49, 52, 55, 64, 65, 67, 73, 74, 76, 80, 85, 89], "level": [2, 3, 16, 21, 28, 31, 84, 85, 93], "proceed": [2, 3, 8, 79, 80, 88], "see": [3, 7, 8, 10, 11, 12, 13, 14, 15, 16, 19, 21, 26, 28, 31, 36, 38, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 80, 84], "section": [3, 7, 25, 32, 83, 84], "user": [3, 4, 7, 8, 10, 11, 12, 13, 14, 15, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 75, 77, 80, 88, 91], "guid": [3, 4, 7, 8, 10, 11, 12, 13, 14, 15, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 84, 90, 93], "more": [3, 7, 8, 11, 13, 14, 15, 16, 19, 21, 23, 24, 25, 28, 31, 32, 36, 37, 38, 39, 40, 41, 51, 54, 55, 56, 58, 59, 60, 65, 67, 70, 75, 79, 80, 83, 84, 85, 88], "detail": [3, 7, 8, 21, 47, 55, 80, 90], "exampl": [3, 7, 8, 10, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 26, 28, 29, 31, 37, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 66, 68, 72, 73, 74, 75, 77, 79, 80, 84, 85, 89, 90], "estim": [4, 8, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 64, 65, 67, 70, 73, 76, 77, 78, 79, 80, 82, 88], "baseestim": [4, 37, 47, 55, 56, 59, 62], "get_metadata_rout": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60], "get": [4, 6, 7, 9, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 70, 74, 83, 90], "metadata": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60], "rout": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60], "thi": [4, 6, 7, 8, 10, 11, 12, 13, 14, 16, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 64, 65, 67, 70, 73, 74, 76, 77, 79, 80, 83, 84, 85, 89, 91], "object": [4, 8, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 64, 65, 66, 67, 70, 73, 79, 80], "pleas": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 76, 77, 79, 83, 85, 89], "check": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 64, 65, 67, 74, 78, 85, 90], "how": [4, 10, 11, 12, 13, 14, 16, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 70, 77, 84, 93], "mechan": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60], "work": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 70, 80, 91, 92, 93], "metadatarequest": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60], "A": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 67, 70, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 88], "encapsul": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60], "inform": [4, 10, 11, 12, 13, 14, 16, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 70, 77, 83, 84], "get_param": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60], "deep": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60], "true": [4, 7, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 67, 68, 72, 73, 76, 78, 79, 80], "default": [4, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 64, 65, 66, 67, 70, 73, 74, 75, 79, 80, 83, 84, 88, 89, 93], "contain": [4, 7, 8, 10, 11, 12, 13, 14, 15, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 67, 68, 72, 75, 76, 77, 79, 80, 85, 89, 90, 93], "subobject": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60], "ar": [4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 64, 65, 66, 67, 70, 72, 73, 74, 75, 77, 79, 80, 82, 83, 84, 85, 88, 89, 91, 93], "param": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60], "dict": [4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 67, 73, 75, 79, 83], "name": [4, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 65, 67, 70, 73, 74, 75, 79, 80], "map": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 82], "valu": [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 70, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 89, 93], "set_param": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60], "set": [4, 7, 8, 10, 11, 12, 13, 14, 16, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 65, 67, 70, 73, 75, 76, 77, 79, 80, 83, 84, 85, 89, 91, 92, 93], "method": [4, 8, 10, 11, 12, 13, 14, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 64, 70, 77, 83, 84, 85, 89, 90], "simpl": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 85, 88, 90, 92], "well": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60], "nest": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60], "pipelin": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 70, 76, 89], "latter": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 77, 80], "have": [4, 9, 10, 11, 12, 13, 14, 15, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 65, 67, 70, 72, 73, 74, 76, 77, 78, 79, 84, 85, 91, 93], "form": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 70, 76], "compon": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 75, 80, 89], "__": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60], "so": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 70, 73, 79], "": [4, 8, 10, 11, 12, 13, 14, 15, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 67, 70, 77, 79, 80, 83, 85, 88, 90], "possibl": [4, 10, 11, 12, 13, 14, 16, 17, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 65, 67, 82, 83, 91], "updat": [4, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60], "instanc": [4, 8, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 64, 65, 67, 75, 77, 79, 84, 89], "counterfactualmixin": 4, "mixin": [4, 10, 23, 25, 32, 37, 47, 49, 51, 52, 54, 55, 56, 59], "counterfactu": [4, 40, 41, 70, 93], "explain": [4, 40, 41, 70, 77, 89, 93], "score": [4, 8, 11, 12, 14, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 56, 58, 59, 60, 70, 76, 83, 84, 88, 93], "y": [4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 65, 66, 67, 70, 73, 74, 75, 76, 77, 79, 80, 85, 88, 89], "term": [4, 23, 24, 27, 28, 29, 30, 31, 52, 55, 78, 79], "close": [4, 27, 28, 29, 30, 31, 65, 67, 77, 84], "fit": [4, 8, 10, 11, 12, 13, 14, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 70, 73, 76, 77, 83, 84, 85, 89], "sampl": [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 70, 72, 73, 74, 75, 77, 78, 80, 83, 84, 85, 88, 89, 93], "desir": [4, 8, 26, 27, 28, 29, 30, 31, 40, 41, 48, 55, 77, 80, 88], "counterfact": [4, 27, 28, 29, 30, 31], "label": [4, 6, 7, 8, 12, 13, 14, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 50, 55, 56, 57, 58, 59, 60, 65, 66, 67, 70, 73, 75, 77, 82, 89], "closensess": [4, 27, 28, 29, 30, 31], "explainermixin": 4, "fit_explain": [4, 25, 27, 28, 29, 30, 31, 32], "kwarg": [4, 7, 19, 21, 23, 24, 25, 27, 28, 29, 30, 31, 32], "explan": [4, 25, 26, 27, 28, 29, 30, 31, 32, 40, 41], "input": [4, 8, 10, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 41, 43, 44, 46, 47, 50, 51, 53, 55, 56, 58, 59, 60, 65, 67, 68, 70, 77, 78, 80, 84, 89], "extra": [4, 6, 7, 25, 27, 28, 29, 30, 31, 32, 59, 60, 75, 80], "argument": [4, 7, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 51, 54, 55, 57, 58, 59, 60, 63, 70, 75, 79, 80, 92, 93], "plot": [4, 25, 27, 28, 29, 30, 31, 32, 57, 60, 70, 74, 77, 89, 93], "ax": [4, 25, 27, 28, 29, 30, 31, 32, 57, 60, 66, 74], "is_counterfactu": [4, 26, 29], "probabl": [4, 8, 19, 21, 22, 23, 24, 25, 26, 28, 29, 31, 32, 36, 38, 51, 52, 54, 55, 56, 57, 58, 59, 60], "is_explain": 4, "an": [4, 8, 10, 11, 12, 13, 14, 15, 16, 19, 21, 22, 23, 24, 28, 29, 31, 34, 36, 38, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 65, 67, 72, 73, 75, 76, 77, 78, 79, 80, 82, 83, 85, 88, 90, 93], "make_dict_filt": 5, "filter": [5, 7, 23, 24, 52, 55, 70, 76, 84], "make": [5, 65, 67, 77, 79], "new": [5, 7, 10, 11, 12, 13, 14, 15, 19, 21, 23, 24, 26, 27, 29, 30, 31, 36, 38, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 64, 70, 74, 77, 84, 85, 90, 92], "subject": 5, "op": 5, "verb": 5, "callabl": [5, 7, 9, 11, 12, 14, 15, 21, 25, 26, 28, 30, 31, 32, 34, 36, 38, 39, 40, 41, 54, 55, 57, 60, 63, 85], "make_filt": 5, "creat": [5, 7, 8, 23, 24, 56, 58, 59, 60, 72, 75, 77, 80, 91, 92], "make_list_filt": 5, "base": [5, 6, 7, 8, 12, 14, 20, 23, 24, 25, 26, 28, 31, 34, 36, 37, 38, 40, 41, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 75, 76, 79, 83, 91, 92, 93], "string": [5, 7, 23, 24, 34, 36, 38, 51, 54, 55, 58, 59, 60, 67, 73, 74, 75], "make_str_filt": 5, "bundl": [6, 7, 73, 75, 88], "kei": [6, 7, 15, 16, 21, 23, 24, 26, 28, 31, 36, 38, 40, 41, 49, 51, 54, 55, 58, 59, 60, 67, 75, 79], "version": [6, 7, 10, 11, 12, 13, 14, 15, 19, 21, 23, 24, 26, 27, 30, 31, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 70, 75, 83, 88, 91, 92], "tag": [6, 7, 37, 56, 59, 64, 75], "descript": [6, 7, 8, 63, 75, 88, 90], "collect": [6, 7, 26, 31, 49, 55, 70, 75, 82, 84, 88, 91], "handl": [6, 7, 73], "uniqu": [6, 7, 40, 41, 75], "human": [6, 7], "readabl": [6, 7], "get_collect": [6, 7], "get_filenam": [6, 7], "ext": [6, 7], "cach": [6, 7, 73], "extens": [6, 7, 75, 89], "file": [6, 7, 75, 92], "filenam": [6, 7], "archiv": [6, 7, 89], "zipfil": [6, 7], "sort": [6, 7, 15, 21, 23, 24], "load": [6, 7, 75, 76, 77, 79, 83, 85, 89], "zip": [6, 7, 73, 75], "n_training_sampl": [6, 7], "train": [6, 7, 10, 11, 12, 13, 14, 19, 21, 23, 24, 26, 31, 40, 41, 42, 43, 44, 52, 55, 56, 58, 59, 60, 70, 73, 74, 75, 85], "numpi": [6, 7, 11, 13, 14, 15, 21, 23, 24, 25, 32, 34, 36, 37, 38, 45, 47, 48, 49, 52, 54, 55, 56, 59, 60, 70, 72, 74, 75, 78, 80, 85, 93], "jsonrepositori": [6, 7, 75], "url": [6, 7, 75], "repositori": [6, 7, 70, 73], "properti": [6, 7, 23, 24, 49, 52, 85], "download_url": [6, 7], "templat": [6, 7], "download": [6, 7, 73, 75, 77, 85, 89, 92], "wildboar_requir": [6, 7, 75], "requir": [6, 7, 8, 19, 20, 21, 22, 23, 24, 26, 31, 34, 35, 36, 37, 38, 56, 58, 59, 60, 65, 67, 75, 77, 80, 88, 92, 93], "min": [6, 7, 9, 19, 20, 21, 59, 60, 80], "get_bundl": [6, 7], "specifi": [6, 7, 11, 13, 14, 23, 24, 25, 32, 40, 41, 51, 54, 55, 59, 60, 70, 73, 74, 75, 77, 79, 80, 83, 84, 85, 88, 91, 93], "dictionari": [6, 7, 23, 24, 29, 30, 31, 34, 36, 38, 48, 51, 54, 55, 58, 59, 60, 67, 75, 79, 84], "refresh": [6, 7, 75], "timeout": [6, 7, 75], "npbundl": [6, 7], "binari": [6, 7, 8, 23, 24, 67, 77, 88, 91], "abstract": [6, 7, 29, 53], "util": [7, 8, 9, 23, 24, 59, 60, 74, 77, 78, 80, 83, 84, 85, 89], "import": [7, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25, 28, 31, 32, 37, 43, 44, 47, 48, 49, 50, 52, 54, 55, 56, 58, 59, 60, 66, 68, 70, 72, 73, 74, 75, 76, 77, 79, 80, 83, 84, 85, 88, 89, 93], "load_dataset": [7, 15, 21, 49, 55, 58, 60, 70, 73, 74, 75, 77, 89], "gunpoint": [7, 49, 55, 58, 60, 73, 74, 75], "200": [7, 73], "60": [7, 73, 80], "clear_cach": 7, "cache_dir": [7, 75], "keep_last_vers": 7, "clear": 7, "delet": 7, "directori": [7, 75, 91], "keep": [7, 23, 24, 35, 36, 37, 38, 56, 59, 60], "latest": [7, 91, 92], "json": 7, "request": [7, 8, 75, 80, 88, 92], "get_repositori": 7, "install_repositori": [7, 75], "instal": [7, 73, 88, 90, 92], "list_bundl": [7, 75], "ucr": [7, 70, 73, 75, 80, 89], "tini": [7, 73, 75], "list_collect": 7, "format": [7, 10, 11, 12, 13, 14, 19, 21, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 75, 84, 85], "bake": [7, 70], "off": [7, 70], "list_dataset": [7, 75], "create_cache_dir": 7, "progress": 7, "forc": [7, 65, 67, 73], "where": [7, 8, 10, 11, 12, 13, 14, 15, 20, 21, 23, 24, 28, 31, 35, 36, 37, 38, 40, 41, 43, 44, 46, 49, 51, 54, 55, 56, 58, 59, 60, 66, 70, 72, 75, 76, 77, 79, 80, 83, 85, 89, 91, 93], "wildboar_cach": 7, "miss": [7, 16, 21, 72, 78], "show": [7, 20, 57, 60, 66, 76, 77, 79, 83, 85, 89], "bar": 7, "while": [7, 23, 24, 56, 58, 59, 60, 70, 73, 75, 77, 80, 85, 91], "re": [7, 19, 21, 23, 24, 73], "list_repositori": [7, 75], "we": [7, 12, 14, 15, 21, 22, 23, 24, 40, 41, 49, 51, 54, 55, 58, 59, 60, 64, 65, 66, 67, 70, 72, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 88, 89, 91, 93], "can": [7, 8, 12, 14, 23, 24, 35, 36, 37, 38, 48, 55, 56, 58, 59, 60, 63, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93], "also": [7, 40, 41, 56, 58, 59, 60, 64, 70, 73, 77, 78, 79, 80, 83, 84, 85, 88, 91], "ani": [7, 8, 56, 58, 59, 60, 75, 76, 77, 78, 79], "newli": 7, "ad": [7, 10, 11, 12, 13, 14, 19, 21, 23, 24, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 76, 93], "still": [7, 91], "pend": 7, "load_articulary_word_recognit": 7, "merge_train_test": [7, 22, 24, 28, 31, 70, 73, 75, 76, 83, 84, 85], "articularywordrecognit": 7, "multivari": [7, 15, 19, 21, 30, 31, 39, 41, 70, 72, 74, 78], "merg": [7, 58, 60, 75, 79], "exist": [7, 42, 44, 70, 73, 79, 93], "test": [7, 12, 14, 19, 21, 22, 23, 24, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 56, 58, 59, 60, 62, 64, 68, 70, 73, 74, 75, 80, 83], "partit": [7, 19, 21, 59, 60, 70, 85, 89], "x_train": [7, 22, 23, 24, 28, 31, 43, 44, 70, 73, 75, 76, 77, 83, 84, 85, 89], "x_test": [7, 22, 23, 24, 28, 31, 43, 44, 70, 73, 75, 76, 77, 83, 84, 85, 89], "y_train": [7, 22, 23, 24, 28, 31, 43, 44, 70, 73, 75, 76, 77, 83, 84, 85, 89], "y_test": [7, 22, 23, 24, 28, 31, 43, 44, 70, 73, 75, 76, 77, 83, 84, 85, 89], "return_extra": 7, "load_basic_mot": [7, 11, 14], "basicmot": 7, "dtype": [7, 19, 21, 28, 31, 65, 67, 72, 73, 83], "preprocess": [7, 25, 32, 34, 36, 38, 53, 55, 70, 73, 74, 89], "contigu": [7, 65, 67, 70, 85], "read": [7, 11, 13, 14, 15, 16, 19, 21, 23, 24, 28, 31, 36, 37, 38, 39, 40, 41, 51, 54, 55, 56, 58, 59, 60, 70, 80, 83], "type": [7, 47, 55, 65, 67, 70, 77, 85], "us": [7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 65, 66, 67, 70, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 88, 89, 90, 91, 92, 93], "_preprocess": 7, "valid": [7, 12, 14, 22, 24, 26, 29, 31, 34, 36, 38, 40, 41, 42, 44, 56, 58, 59, 60, 65, 72, 73, 75, 76, 83], "take": [7, 11, 14, 49, 55, 56, 58, 59, 60, 75, 79, 80], "np": [7, 8, 15, 19, 20, 21, 23, 24, 25, 27, 31, 32, 37, 40, 41, 47, 49, 51, 54, 55, 56, 58, 59, 60, 65, 67, 68, 72, 74, 77, 80, 85], "ensur": [7, 26, 31, 42, 44, 65, 67, 75, 77, 89], "memori": [7, 23, 24, 65, 67, 70, 80, 93], "alreadi": [7, 73, 85, 91], "4": [7, 8, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 23, 24, 25, 32, 37, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 68, 72, 77, 79, 80, 83, 84, 85, 88], "syntheticcontrol": [7, 73, 75], "600": [7, 73], "origin": [7, 23, 24, 25, 26, 28, 31, 32, 34, 38, 40, 41, 45, 52, 55, 65, 67, 70, 77, 83], "split": [7, 12, 14, 23, 24, 34, 36, 38, 42, 43, 44, 56, 57, 58, 59, 60, 70, 75, 79, 83, 85, 89], "preserv": [7, 65, 67, 70], "specif": [7, 22, 23, 24, 47, 51, 54, 55, 58, 59, 60, 64, 65, 67, 73, 74, 75, 77, 83, 84, 91], "gener": [7, 8, 11, 12, 13, 14, 16, 19, 20, 21, 23, 24, 25, 26, 27, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 48, 49, 52, 54, 55, 56, 58, 59, 60, 64, 70, 73, 77, 79, 80, 84, 88, 89], "doe": [7, 8, 42, 44, 48, 55, 70, 79, 80], "indic": [7, 10, 11, 12, 13, 14, 15, 20, 21, 23, 24, 26, 31, 40, 41, 56, 58, 59, 60, 68, 77, 78, 84, 85], "shown": [7, 25, 32], "onli": [7, 10, 11, 12, 13, 14, 16, 17, 20, 21, 23, 24, 25, 26, 28, 30, 31, 32, 56, 57, 58, 59, 60, 65, 67, 70, 73, 74, 75, 76, 79, 80, 83, 84, 89, 92, 93], "yield": [7, 42, 44, 64, 74, 84], "those": [7, 76, 77], "which": [7, 8, 16, 19, 20, 21, 22, 23, 24, 27, 29, 31, 34, 35, 36, 37, 38, 40, 41, 49, 54, 55, 56, 57, 58, 59, 60, 70, 73, 75, 77, 78, 79, 80, 83, 84, 85, 88, 89, 90, 92, 93], "f": [7, 8, 23, 24, 28, 31, 34, 38, 48, 49, 55, 57, 58, 59, 60, 63, 65, 67, 70, 74, 79, 84, 85, 88], "attribut": [7, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 45, 48, 52, 54, 55, 56, 57, 58, 59, 60, 62, 70, 73, 75, 83, 85, 89], "comparison": [7, 73], "spec": 7, "conjunct": [7, 77], "appli": [7, 8, 11, 14, 15, 21, 46, 55, 56, 58, 59, 60, 73, 85, 89], "part": [7, 28, 31, 73, 74, 75, 77, 78, 80, 89], "depend": [7, 8, 12, 14, 15, 16, 17, 21, 49, 55, 57, 60, 70, 72, 80, 85, 89, 91, 92], "tupl": [7, 20, 22, 23, 24, 51, 54, 55, 58, 59, 60, 64, 67, 85], "last": [7, 70, 74, 75, 80], "element": [7, 15, 21, 23, 24, 46, 51, 54, 55, 58, 59, 60, 63, 68, 80], "print": [7, 19, 21, 30, 31, 70, 73, 85], "beef": [7, 73, 75], "470": [7, 73], "coffe": [7, 73, 75], "56": [7, 73], "286": [7, 73], "150": [7, 49, 55, 73, 77], "twoleadecg": [7, 70, 73, 75, 84], "1162": [7, 73], "82": [7, 73], "than": [7, 8, 12, 14, 15, 21, 23, 24, 27, 31, 59, 60, 66, 70, 73, 76, 78, 79, 80, 84, 85], "load_er": [7, 11, 12, 13, 14, 76], "er": 7, "load_gun_point": [7, 22, 24, 28, 31, 48, 49, 52, 55, 56, 58, 59, 60, 66, 73, 83, 85], "load_synthetic_control": [7, 23, 24, 70], "synthetic_control": [7, 70], "load_two_lead_ecg": [7, 20, 23, 24, 43, 44, 50, 55, 70, 80, 84], "refresh_repositori": [7, 75], "mean": [7, 8, 9, 15, 19, 20, 21, 22, 23, 24, 27, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 45, 48, 49, 52, 54, 55, 56, 57, 58, 59, 60, 70, 74, 77, 79, 80, 83, 84, 85, 89], "set_cache_dir": [7, 75], "global": [7, 27, 30, 31, 40, 41, 49, 55, 75, 77, 85], "call": [7, 16, 21, 23, 24, 35, 36, 37, 38, 56, 59, 60, 64, 75, 80, 83], "without": [7, 63, 72, 75, 79, 84], "reset": [7, 75], "root": [7, 25, 32, 85], "synthet": [8, 88], "density_outli": 8, "n_outlier": [8, 42, 44, 88], "05": [8, 11, 14, 20, 23, 24, 29, 31, 36, 38, 42, 43, 44, 49, 54, 55, 59, 79, 88], "dbscan": 8, "ep": [8, 16, 21], "min_sampl": 8, "5": [8, 12, 14, 15, 17, 19, 20, 21, 23, 24, 25, 26, 27, 29, 30, 31, 32, 35, 38, 40, 41, 49, 52, 54, 55, 59, 60, 66, 77, 79, 80, 84, 88], "metric": [8, 10, 11, 13, 14, 15, 16, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 51, 54, 55, 56, 58, 59, 60, 77, 83, 84, 85], "euclidean": [8, 10, 11, 13, 14, 15, 16, 19, 21, 23, 24, 25, 27, 28, 29, 30, 31, 32, 36, 38, 39, 40, 41, 54, 55, 59, 60, 77, 79, 80, 83, 84], "max_ep": 8, "inf": [8, 65, 67], "random_st": [8, 10, 11, 13, 14, 16, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 48, 49, 51, 52, 54, 55, 58, 59, 60, 76, 77, 83, 84, 85, 89], "densitii": 8, "densiti": 8, "cluster": [8, 19, 21, 77, 88], "algorithm": [8, 12, 14, 16, 19, 20, 21, 30, 31, 33, 72, 74, 76, 77, 79, 89, 93], "fail": [8, 27, 31], "assign": [8, 19, 21, 28, 31, 70, 77, 83, 85, 88, 89], "them": [8, 33, 72, 74, 75], "inlier": [8, 23, 24, 42, 44, 88], "By": [8, 23, 24, 25, 32, 34, 36, 38, 48, 51, 53, 55, 58, 60, 65, 66, 67, 70, 72, 75, 76, 80, 83, 84, 88, 89, 93], "minor": [8, 93], "class": [8, 43, 57, 70, 75, 77, 83, 85, 88, 90], "consid": [8, 13, 14, 15, 16, 21, 23, 24, 40, 41, 43, 44, 58, 59, 60, 70, 83, 93], "optic": 8, "when": [8, 16, 17, 19, 21, 23, 24, 25, 30, 31, 32, 35, 36, 37, 38, 39, 41, 50, 53, 55, 56, 59, 60, 64, 65, 67, 70, 73, 75, 77, 79, 80, 93], "cluter": 8, "randomst": [8, 11, 13, 14, 16, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 38, 39, 41, 42, 43, 44, 45, 48, 49, 51, 52, 54, 55, 58, 59, 60], "seed": [8, 11, 13, 14, 23, 24, 25, 27, 31, 32, 34, 36, 38, 45, 48, 49, 52, 54, 55, 58, 59, 60, 70], "random": [8, 11, 13, 14, 16, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 38, 39, 41, 42, 43, 44, 45, 48, 49, 51, 52, 54, 55, 58, 59, 60, 70, 77, 83, 85, 89], "x_outlier": [8, 88], "n_inlier": [8, 42, 44], "y_outlier": [8, 88], "labl": 8, "emmott_outli": [8, 88], "confusion_estim": 8, "difficulty_estim": 8, "transform": [8, 9, 10, 11, 12, 13, 14, 19, 21, 23, 24, 25, 26, 29, 30, 31, 32, 36, 38, 40, 41, 59, 60, 64, 76, 77, 88, 93], "interv": [8, 23, 24, 25, 28, 31, 32, 40, 41, 49, 53, 55, 59, 60, 70, 84, 88, 93], "difficulti": [8, 88], "simplest": [8, 73, 76, 84, 88], "scale": [8, 9, 15, 16, 21, 23, 24, 34, 38, 48, 52, 53, 55, 74, 79, 88], "variat": [8, 76, 88, 93], "tight": [8, 88], "detect": [8, 24, 80], "classif": [8, 19, 20, 21, 22, 23, 24, 28, 31, 34, 35, 36, 37, 38, 40, 41, 43, 44, 48, 52, 54, 55, 56, 57, 58, 59, 60, 67, 70, 77, 83, 84, 85, 88], "describ": [8, 20, 22, 24, 30, 31, 48, 55, 73, 75, 77, 80, 83, 84, 89, 90], "emmott": 8, "2013": [8, 79, 83, 88], "reliabl": [8, 70], "both": [8, 15, 17, 20, 21, 22, 24, 38, 46, 55, 65, 67, 72, 74, 75, 79, 80, 84, 85, 88, 89], "multiclass": [8, 67, 88], "For": [8, 11, 13, 14, 15, 21, 23, 24, 35, 36, 37, 38, 45, 48, 49, 51, 52, 54, 55, 56, 58, 59, 60, 70, 73, 74, 75, 78, 79, 80, 83, 84, 85, 89, 91, 92], "select": [8, 10, 11, 12, 13, 14, 15, 19, 21, 23, 24, 26, 28, 31, 39, 41, 44, 49, 54, 55, 70, 73, 74, 77, 80, 83, 85, 88, 92], "maxim": [8, 23, 24, 36, 38, 54, 55, 59, 60, 84, 85], "confus": [8, 88], "measur": [8, 16, 21, 22, 23, 24, 40, 41, 51, 54, 55, 58, 59, 60, 79, 80, 83], "digit": 8, "rang": [8, 23, 24, 51, 54, 55, 56, 58, 59, 60, 74, 79, 80, 84, 88], "accord": [8, 15, 17, 21, 23, 24, 52, 53, 55, 59, 60, 66, 75, 88], "final": [8, 16, 21, 23, 24, 64], "approxim": [8, 53, 55, 80], "either": [8, 20, 43, 44, 54, 55, 56, 58, 59, 60, 67, 70, 73, 75, 77, 80, 83, 85, 88], "dispers": [8, 88], "guarante": [8, 70], "error": [8, 11, 14, 23, 24, 65, 67], "rais": [8, 65, 67], "ha": [8, 15, 21, 23, 24, 40, 41, 49, 53, 55, 58, 59, 60, 63, 65, 66, 67, 72, 75, 76, 77, 79, 80, 83, 84, 85, 89, 93], "few": [8, 40, 41, 76, 91], "n_class": [8, 19, 21, 22, 23, 24, 56, 58, 59, 60], "forest": [8, 23, 24, 30, 31, 58, 60, 70], "classifi": [8, 19, 21, 22, 23, 24, 27, 30, 31, 32, 35, 36, 37, 38, 48, 55, 58, 59, 60, 64, 70, 76, 77, 83, 85, 89], "support": [8, 15, 16, 19, 21, 23, 24, 28, 30, 31, 36, 38, 40, 41, 49, 52, 54, 55, 59, 60, 70, 72, 73, 74, 75, 76, 79, 84, 88, 93], "predict_proba": [8, 19, 21, 22, 23, 24, 56, 58, 59, 60, 83], "kernel": [8, 11, 13, 14, 23, 24, 34, 35, 36, 37, 38, 46, 48, 52, 54, 55, 56, 59, 60, 84, 88, 89], "logist": [8, 88], "regress": [8, 23, 24, 37, 38, 56, 57, 58, 59, 60, 70, 85, 88], "model": [8, 12, 14, 23, 24, 28, 29, 31, 34, 35, 36, 37, 38, 44, 56, 59, 60, 77, 83, 85, 88], "rbf": [8, 88], "befor": [8, 15, 19, 21, 34, 36, 38, 93], "intervaltransform": [8, 49, 55, 88], "otherwis": [8, 12, 14, 16, 21, 23, 24, 27, 31, 36, 38, 40, 41, 54, 55, 65, 67], "suppli": [8, 25, 26, 28, 31, 32], "hardest": [8, 88], "point": [8, 15, 20, 21, 28, 31, 56, 59, 60, 70, 73, 75, 77, 79, 88], "quantiz": [8, 88], "should": [8, 16, 21, 23, 37, 40, 41, 43, 44, 56, 59, 70, 74, 75, 79], "len": [8, 15, 19, 21, 25, 32, 47, 55], "lower": [8, 15, 20, 21, 23, 24, 36, 38, 40, 41, 51, 52, 54, 55, 58, 59, 60, 66, 80, 84], "denot": [8, 43, 44, 74, 79, 80, 85], "simpler": 8, "multipl": [8, 16, 21, 23, 24, 25, 32, 51, 54, 55, 59, 60, 70, 72, 75, 79, 80, 84, 88], "e": [8, 15, 16, 20, 21, 23, 24, 28, 30, 31, 40, 41, 59, 60, 65, 67, 70, 72, 73, 74, 75, 79, 80, 83, 84, 85, 88, 91, 92], "g": [8, 19, 20, 21, 29, 31, 34, 38, 48, 54, 55, 70, 73, 74, 79, 80, 83, 84, 85, 88, 91, 92], "would": [8, 10, 11, 12, 13, 14, 23, 24, 35, 36, 37, 38, 51, 54, 55, 56, 58, 59, 60, 74, 77, 80], "mix": 8, "easi": [8, 73], "difficult": [8, 88], "16": [8, 84, 88, 89], "3": [8, 15, 20, 21, 22, 23, 24, 28, 31, 37, 47, 49, 52, 55, 56, 59, 60, 65, 67, 68, 72, 74, 76, 78, 79, 80, 83, 84, 85, 88], "percentil": [8, 11, 14, 23, 24, 36, 38, 54, 55, 88], "procedur": [8, 11, 14], "effect": [8, 23, 24, 53, 55, 58, 60, 65, 67, 79, 83, 84, 93], "pivot": [8, 23, 24, 51, 55, 58, 59, 60, 83], "closest": [8, 15, 19, 21, 28, 29, 31, 40, 41, 80], "facil": 8, "locat": [8, 75, 80, 91], "thei": [8, 23, 24, 51, 55, 56, 58, 59, 60, 75, 77], "distribut": [8, 23, 24, 34, 38, 48, 52, 53, 55, 56, 58, 59, 60, 73, 80, 91, 92], "among": [8, 29, 57, 60, 80, 84], "avail": [8, 75, 80, 83, 84, 85], "suffici": 8, "fewer": [8, 40, 41], "mai": [8, 23, 24, 35, 36, 37, 38, 56, 59, 60, 80, 89, 93], "note": [8, 16, 17, 20, 21, 23, 24, 28, 30, 31, 35, 36, 37, 38, 39, 40, 41, 42, 44, 48, 49, 55, 56, 59, 60, 74, 79, 80, 89], "packag": [8, 88, 91, 92], "networkx": [8, 88], "da": [8, 79, 88], "dietterich": [8, 88], "t": [8, 19, 21, 22, 23, 24, 28, 31, 34, 35, 36, 37, 38, 40, 41, 48, 49, 50, 52, 54, 55, 56, 58, 59, 60, 65, 67, 76, 79, 80, 88, 91, 93], "fern": [8, 88], "wong": [8, 88], "w": [8, 19, 20, 21, 22, 23, 24, 34, 35, 36, 37, 38, 56, 58, 59, 60, 73, 75, 84, 88], "k": [8, 11, 14, 15, 19, 21, 23, 24, 25, 27, 31, 32, 58, 60, 77, 80, 83, 88, 93], "systemat": [8, 80, 88], "construct": [8, 28, 29, 31, 40, 41, 53, 55, 59, 60, 65, 67, 77, 83, 84, 85, 88, 89], "anomali": [8, 43, 44, 77, 88], "benchmark": [8, 73, 77], "real": [8, 23, 24, 72, 79, 88], "acm": [8, 79, 80, 88], "sigkdd": [8, 80, 88], "workshop": [8, 88], "pp": [8, 28, 31, 77, 80, 83, 84, 88], "21": [8, 88], "kmeans_outli": 8, "n_cluster": [8, 19, 21], "farther": 8, "other": [8, 19, 21, 27, 31, 42, 44, 70, 73, 75, 80, 83, 85, 88], "satisfi": [8, 67, 79], "constraint": [8, 62, 67, 79], "allow": [8, 49, 55, 56, 58, 59, 60, 64, 65, 67, 70, 75, 88], "per": [8, 25, 30, 31, 32, 34, 36, 38, 48, 49, 51, 54, 55, 83, 85], "majority_outli": 8, "major": [8, 20], "minority_outli": [8, 88], "maxabs_scal": [9, 74], "its": [9, 17, 21, 23, 24, 49, 50, 55, 59, 60, 65, 66, 67, 73, 79, 85, 91], "absolut": [9, 40, 41, 74], "n_dim": [9, 10, 11, 12, 13, 14, 15, 17, 21, 22, 24, 40, 41, 43, 44, 50, 55, 56, 58, 59, 60, 70, 72, 73, 74, 76, 78, 80], "minmax_scal": [9, 53, 55, 73, 74], "max": [9, 20, 59, 60, 79, 80], "along": [9, 25, 32, 34, 36, 38, 74], "dimens": [9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 34, 36, 38, 40, 41, 50, 55, 57, 60, 65, 67, 70, 72, 73, 74, 78, 80, 84, 93], "named_preprocess": 9, "preprocessor": [9, 74], "standard": [9, 23, 24, 34, 36, 38, 48, 49, 54, 55, 70, 74, 84, 89], "result": [9, 16, 21, 23, 24, 26, 29, 31, 43, 44, 46, 54, 55, 56, 58, 59, 60, 65, 67, 68, 74, 76, 77, 79, 80, 83, 84, 85, 88, 89], "zero": [9, 10, 11, 12, 13, 14, 23, 24, 34, 36, 38, 48, 52, 54, 55, 56, 58, 59, 60, 70, 74, 79, 84, 89], "unit": [9, 34, 36, 38, 48, 54, 55, 70, 74, 79], "deviat": [9, 20, 23, 24, 34, 36, 38, 48, 49, 54, 55, 84, 88, 89], "truncat": [9, 74], "n_shortest": 9, "shortest": [9, 74], "sequenc": [9, 65, 67, 72, 74, 79], "basedistanceselector": 10, "metric_param": [10, 11, 13, 14, 15, 19, 21, 23, 24, 25, 28, 31, 32, 36, 38, 39, 40, 41, 51, 54, 55, 58, 59, 60, 77, 79, 80], "n_job": [10, 11, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 28, 31, 34, 35, 36, 37, 38, 45, 48, 49, 50, 51, 52, 54, 55, 61, 80, 83], "selector": [10, 13, 14, 93], "learn": [10, 11, 12, 13, 14, 20, 33, 37, 47, 48, 55, 56, 59, 64, 65, 67, 76, 78, 89, 90, 93], "itself": [10, 11, 12, 13, 14, 79], "fit_transform": [10, 11, 12, 13, 14, 19, 21, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55], "fit_param": [10, 11, 12, 13, 14, 19, 21, 47, 50, 51, 53, 55], "n_featur": [10, 11, 12, 13, 14, 19, 21, 22, 23, 24, 34, 35, 36, 37, 38, 47, 50, 51, 53, 55, 56, 58, 59, 60], "n_output": [10, 11, 12, 13, 14, 19, 21, 22, 23, 24, 34, 35, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60], "target": [10, 11, 12, 13, 14, 19, 21, 23, 24, 28, 29, 31, 47, 50, 51, 53, 55, 56, 58, 59, 60, 67, 77, 91], "unsupervis": [10, 11, 12, 13, 14, 19, 21, 23, 24, 47, 50, 51, 53, 55], "addit": [10, 11, 12, 13, 14, 19, 21, 47, 50, 51, 53, 55, 70, 73, 78, 80], "x_new": [10, 11, 12, 13, 14, 19, 21, 47, 50, 51, 53, 55], "n_features_new": [10, 11, 12, 13, 14, 19, 21, 47, 50, 51, 53, 55], "get_dimens": [10, 11, 12, 13, 14, 76], "boolean": [10, 11, 12, 13, 14, 20, 68], "mask": [10, 11, 12, 13, 14], "instead": [10, 11, 12, 13, 14, 16, 20, 21, 23, 24, 35, 36, 37, 38, 42, 44, 56, 59, 60, 70, 76, 80], "n_selected_dim": [10, 11, 12, 13, 14], "retain": [10, 11, 12, 13, 14, 93], "inverse_transform": [10, 11, 12, 13, 14], "revers": [10, 11, 12, 13, 14, 30, 31, 77], "insert": [10, 11, 12, 13, 14, 42, 44, 84], "been": [10, 11, 12, 13, 14, 23, 24, 49, 55, 66, 75, 79], "remov": [10, 11, 12, 13, 14, 23, 24, 26, 31, 59, 60, 63, 67, 75, 76, 83, 93], "set_output": [10, 11, 12, 13, 14, 19, 21, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55], "output": [10, 11, 12, 13, 14, 15, 16, 19, 21, 23, 24, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 65, 67, 70, 80, 85], "introduc": [10, 11, 12, 13, 14, 19, 21, 23, 24, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 83, 93], "api": [10, 11, 12, 13, 14, 19, 21, 23, 24, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 70, 72, 90, 93], "panda": [10, 11, 12, 13, 14, 19, 21, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55], "configur": [10, 11, 12, 13, 14, 19, 21, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 70, 77, 79, 80, 83, 84, 92], "datafram": [10, 11, 12, 13, 14, 19, 21, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55], "polar": [10, 11, 12, 13, 14, 19, 21, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55], "unchang": [10, 11, 12, 13, 14, 19, 20, 21, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55], "wa": [10, 11, 12, 13, 14, 19, 21, 23, 24, 26, 31, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 60, 77, 83], "reduc": [10, 11, 12, 13, 14, 23, 24, 49, 55, 73, 76], "dimensionselectormixin": 10, "selectdimensionpercentil": [11, 14, 93], "score_func": [11, 14], "f_classif": [11, 14], "largest": [11, 14, 15, 21], "pairwis": [11, 13, 14, 21, 76, 93], "lowest": [11, 14, 15, 20, 21, 80, 89], "function": [11, 14, 16, 23, 24, 28, 30, 37, 47, 48, 49, 56, 59, 70, 73, 74, 75, 76, 77, 79, 80, 83, 85, 89, 93], "two": [11, 12, 14, 19, 20, 21, 23, 24, 34, 38, 48, 49, 51, 54, 55, 58, 59, 60, 70, 75, 77, 79, 80, 84, 85, 89, 93], "p": [11, 14, 23, 24, 27, 29, 30, 31, 40, 41, 77, 79, 80, 83, 93], "draw": [11, 13, 14, 23, 24, 36, 38, 54, 55], "calcul": [11, 13, 14, 16, 21, 34, 36, 38, 39, 41, 53, 77, 79, 80, 84], "percent": [11, 14, 84, 89], "about": [11, 13, 14, 15, 16, 19, 21, 23, 24, 28, 31, 36, 38, 39, 40, 41, 49, 51, 52, 54, 55, 57, 58, 59, 60, 65, 67, 70, 80, 83], "control": [11, 13, 14, 20, 23, 24, 25, 30, 31, 32, 34, 36, 38, 45, 48, 51, 52, 54, 55, 92, 93], "parallel": [11, 13, 14, 15, 16, 19, 21, 23, 24, 28, 31, 34, 36, 38, 45, 48, 49, 52, 54, 55, 61, 85], "job": [11, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 28, 31, 34, 36, 38, 45, 48, 50, 52, 54, 55, 61], "dataset": [11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25, 28, 31, 32, 34, 36, 38, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 65, 66, 67, 72, 74, 75, 76, 77, 80, 83, 84, 85, 88, 89], "sdp": [11, 14], "50": [11, 14, 20, 73, 77, 80, 85], "selectdimensionsignific": [11, 14], "alpha": [11, 14, 23, 24, 34, 35, 36, 37, 38, 59, 60, 66, 93], "fpr": [11, 14], "below": [11, 13, 14, 15, 21, 36, 38, 54, 55, 75, 85, 93], "abov": [11, 14, 36, 38, 54, 55, 70, 74, 79, 83, 85], "fdr": [11, 14], "fwe": [11, 14], "correct": [11, 14, 28, 31, 37, 40, 41, 56, 59, 62, 82], "posit": [11, 14, 15, 19, 21, 23, 24, 25, 30, 31, 32, 34, 38, 45, 48, 52, 55, 79, 80, 89], "rate": [11, 14, 20], "discoveri": [11, 14, 22, 23, 24, 34, 38, 48, 49, 52, 55, 58, 60, 80, 83, 84], "benjamini": [11, 14], "hochberg": [11, 14], "fwer": [11, 14], "famili": [11, 14], "wise": [11, 14, 68, 70, 74], "bonferroni": [11, 14], "sd": [11, 12, 14], "01": [11, 14, 20, 49, 55, 79, 83], "80": [11, 14, 77, 84], "6": [11, 14, 15, 20, 21, 49, 55, 70, 72, 79, 80, 83], "100": [11, 14, 23, 24, 25, 28, 29, 31, 32, 51, 55, 58, 60, 66, 73, 77, 79, 80, 83, 85], "selectdimensiontopk": [11, 14, 93], "highest": [11, 14, 23, 24, 89, 93], "top": [11, 14, 15, 21, 25, 32, 93], "sdt": [11, 14], "300": [11, 12, 14, 16, 19, 21, 70, 76, 80], "65": [11, 12, 14, 76], "sequentialdimensionselector": [12, 14, 76, 93], "cv": [12, 14, 34, 35, 36, 37, 38], "direct": [12, 14], "forward": [12, 14, 76], "tol": [12, 14, 19, 20, 21], "sequenti": [12, 14, 93], "subset": [12, 14, 19, 21, 22, 23, 24, 34, 35, 36, 37, 38, 39, 41, 56, 58, 59, 60, 67, 76, 93], "backward": [12, 14, 76], "greedili": [12, 14, 76, 93], "At": [12, 14, 76, 83], "iter": [12, 14, 16, 19, 21, 28, 31, 34, 36, 38, 42, 44, 73, 76, 84], "choos": [12, 14, 76, 85], "best": [12, 14, 15, 16, 21, 23, 24, 26, 29, 31, 35, 36, 37, 38, 54, 55, 56, 59, 60, 76, 80], "add": [12, 14, 23, 24, 30, 31, 64, 66, 67, 76, 93], "cross": [12, 14, 22, 24, 34, 36, 38, 42, 44, 76, 83], "unfit": [12, 14], "behavior": [12, 14, 77], "long": [12, 14, 75], "increas": [12, 14, 23, 24, 59, 60, 80, 84, 85], "larger": [12, 14, 23, 24, 40, 41, 59, 60, 66, 70, 78, 79], "half": [12, 14, 34, 36, 38, 80], "integ": [12, 14, 19, 21, 23, 24, 34, 38, 45, 48, 52, 55, 80, 88], "strategi": [12, 14, 23, 24, 34, 36, 38, 42, 44, 48, 52, 53, 55, 76], "defin": [12, 14, 23, 24, 35, 36, 37, 38, 47, 51, 53, 54, 55, 56, 58, 59, 60, 75, 77, 84, 85], "evalu": [12, 14, 23, 24, 26, 28, 29, 30, 31, 40, 41, 59, 60, 64, 70, 73, 80, 89], "rule": [12, 14, 85], "predict": [12, 14, 19, 21, 22, 23, 24, 26, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 56, 58, 59, 60, 76, 77, 83, 85, 89], "toler": [12, 14, 16, 19, 21, 23, 24, 40, 41, 59, 60, 79], "neg": [12, 14, 23, 24, 35, 36, 37, 38, 56, 58, 59, 60, 93], "kneighborsclassifi": [12, 14, 19, 21, 22, 24, 28, 31, 76, 77], "clf": [12, 14, 22, 24, 28, 31, 57, 60, 70, 76, 79, 83, 84, 85], "distancevariancethreshold": [13, 14, 76, 93], "threshold": [13, 14, 15, 21, 23, 24, 25, 26, 29, 30, 31, 32, 36, 38, 53, 54, 55, 57, 59, 60, 83, 84, 85, 93], "low": [13, 14, 76, 85], "varianc": [13, 14, 23, 24, 49, 55, 59, 60, 70, 74, 79, 83, 85, 89, 93], "suitabl": [13, 14, 53, 84, 85], "sinc": [13, 14, 19, 21, 22, 23, 24, 26, 31, 34, 35, 36, 37, 38, 49, 55, 56, 58, 59, 60, 70, 74, 77, 80, 85, 88], "dv": [13, 14], "9": [13, 14, 15, 20, 21, 34, 38, 48, 49, 54, 55, 75, 76, 84], "argmin_dist": [15, 21, 80], "dim": [15, 17, 21, 57, 60, 74, 80, 85], "univari": [15, 19, 21, 39, 41, 70, 72, 78, 80], "needl": [15, 21], "haystack": [15, 21], "_metric": [15, 16, 21, 28, 31, 36, 38, 40, 41, 54, 55], "smallest": [15, 16, 19, 21, 84], "pass": [15, 16, 19, 21, 23, 24, 37, 56, 59, 65, 67, 80, 83, 85, 88], "signific": [15, 21], "implic": [15, 21], "wildoar": [15, 21], "11": [15, 21, 23, 24, 36, 38, 52, 54, 55, 80, 84], "7": [15, 20, 21, 23, 24, 49, 52, 54, 55, 80, 84, 85], "8": [15, 19, 20, 21, 34, 36, 38, 48, 49, 54, 55, 59, 66, 84, 89, 93], "24621125": [15, 21], "79583152": [15, 21], "24695077": [15, 21], "argmin_subsequence_dist": [15, 21], "th": [15, 21, 23, 24, 40, 41, 84, 85], "m_timestep": [15, 20, 21], "1d": [15, 21, 46, 55, 65, 67, 78, 80], "ndim": [15, 21, 65, 67, 70], "broadcast": [15, 17, 21, 26, 31, 80], "same": [15, 20, 21, 23, 24, 25, 28, 31, 32, 40, 41, 54, 55, 56, 58, 59, 60, 70, 74, 75, 77, 79, 80, 85, 93], "_subsequence_metr": [15, 21], "lib": [15, 21], "stride_trick": [15, 21], "sliding_window_view": [15, 21], "window_shap": [15, 21], "broadcast_to": [15, 21], "distance_profil": [15, 21], "dilat": [15, 21, 36, 38, 46, 54, 55, 89], "pad": [15, 21, 23, 24, 46, 52, 55, 89], "mass": [15, 21, 79, 80], "correspond": [15, 21, 23, 24, 34, 36, 38, 40, 41, 56, 58, 59, 60, 77, 80, 83, 85, 89], "everi": [15, 17, 21, 56, 58, 59, 60, 65, 67, 80], "broacast": [15, 21], "space": [15, 19, 21, 29, 46, 55, 66, 80, 84], "amount": [15, 21], "search": [15, 21, 56, 58, 59, 60, 79], "run": [15, 16, 19, 21, 23, 24, 28, 30, 31, 34, 38, 45, 48, 52, 54, 55, 64, 73, 74, 92], "output_s": [15, 21, 46, 55], "singl": [15, 16, 19, 21, 23, 24, 26, 31, 34, 38, 40, 41, 45, 48, 52, 55, 56, 58, 59, 60, 63, 72, 75, 78, 80, 83, 84, 85, 89], "squeez": [15, 21, 63], "_": [15, 21, 85], "ecg200": [15, 21, 77], "reshap": [15, 21, 80], "14": [15, 21, 80], "00120332": [15, 21], "41943788": [15, 21], "81597243": [15, 21], "75219094": [15, 21], "72681005": [15, 21], "70155561": [15, 21], "dtw": [15, 19, 21, 22, 24, 27, 29, 31, 54, 55, 58, 59, 60, 77, 79, 80], "01881424": [15, 21], "15083281": [15, 21], "48856368": [15, 21], "83139294": [15, 21], "75595579": [15, 21], "30073636": [15, 21], "65346307": [15, 21], "27919601": [15, 21], "25666948": [15, 21], "0961576": [15, 21], "paired_dist": [15, 21, 80], "warn": [15, 16, 21, 65, 67], "full": [15, 21, 37, 40, 41, 47, 49, 55, 56, 59, 70, 73, 80, 83], "scalar": [15, 21, 63, 80], "paired_subsequence_dist": [15, 21, 80], "return_index": [15, 17, 20, 21, 80], "mani": [15, 21, 23, 24, 65, 67, 74], "equal": [15, 21, 23, 24, 51, 55, 56, 58, 59, 60, 72, 73, 79, 88, 93], "good": [15, 21, 30, 31, 40, 41, 88], "first": [15, 17, 20, 21, 23, 24, 48, 51, 54, 55, 58, 59, 60, 65, 67, 75, 77, 78, 80, 83, 85, 88, 89, 92], "dist": [15, 21, 59, 60, 80, 85], "minumum": [15, 21], "paired_subsequence_match": [15, 21], "max_match": [15, 21], "subsequnc": [15, 21], "less": [15, 21, 23, 24, 59, 60, 70, 73, 74, 80, 85], "behaviour": [15, 21], "order": [15, 21, 23, 24, 34, 36, 38, 40, 41, 47, 48, 55, 56, 58, 59, 60, 65, 66, 67, 70, 72, 77, 80], "occurr": [15, 21, 84, 89], "length": [15, 21, 23, 24, 36, 38, 54, 55, 59, 60, 63, 65, 67, 68, 74, 78, 79, 84], "pairwise_dist": [15, 21, 79, 80], "x_sampl": [15, 21, 80], "y_sampl": [15, 21, 80], "pairwise_subsequence_dist": [15, 21, 79, 80, 85], "n_subsequ": [15, 21, 80], "yn_timestep": [15, 17, 21], "closer": [15, 21, 29, 40, 41], "treshold": [15, 21], "trivial": [15, 17, 21], "vicin": [15, 21], "within": [15, 21, 76, 77, 80, 84], "timestep": [15, 21, 40, 41, 52, 54, 55, 65, 67, 70, 72, 73, 74, 78, 80], "anoth": [15, 21, 75, 77, 79, 80, 88], "higher": [15, 21], "n_match": [15, 21], "found": [15, 21], "md": [16, 21], "n_compon": [16, 21], "n_init": [16, 19, 21], "max_it": [16, 19, 21, 28, 29, 31], "verbos": [16, 19, 20, 21, 23, 24, 29, 30, 31, 92], "001": [16, 19, 21, 79], "dissimilar": [16, 21], "dissimilarity_param": [16, 21], "normalized_stress": [16, 21], "multidimension": [16, 21], "immers": [16, 21], "nonmetr": [16, 21], "non": [16, 21, 22, 23, 24, 40, 41, 49, 55, 59, 60, 65, 67, 80, 83, 84, 93], "smacof": [16, 21], "differ": [16, 21, 28, 30, 31, 34, 36, 38, 40, 41, 42, 44, 48, 55, 70, 75, 77, 78, 79, 80, 89], "initi": [16, 19, 20, 21, 29, 75, 77, 85, 89], "determin": [16, 19, 21, 23, 24, 26, 30, 31, 34, 35, 36, 37, 38, 39, 41, 42, 44, 49, 55, 56, 57, 59, 60, 75, 83, 84, 85, 88], "stress": [16, 21], "rel": [16, 19, 21, 40, 41, 80], "respect": [16, 21, 73, 75, 77, 83], "declar": [16, 19, 21, 75], "converg": [16, 19, 21], "tune": [16, 21, 84], "separ": [16, 21, 23, 24, 59, 60, 75, 88, 93], "whether": [16, 21, 34, 36, 38, 65, 66, 67, 77], "being": [16, 21, 28, 31, 84], "center": [16, 19, 21], "reproduc": [16, 21], "across": [16, 21, 80], "measu": [16, 21], "norm": [16, 21, 79], "raw": [16, 21, 55], "implement": [16, 19, 20, 21, 23, 24, 25, 28, 30, 31, 32, 35, 38, 40, 41, 48, 49, 52, 55, 70, 74, 75, 76, 77, 79, 80, 83, 84, 85, 88, 89], "conveni": [16, 21, 39, 41, 70], "wrapper": [16, 21, 39, 41, 63], "sklearn": [16, 21, 23, 24, 37, 39, 41, 47, 48, 55, 56, 59, 65, 67, 70, 76, 77, 88, 89], "manifold": [16, 21], "nearest": [17, 19, 21, 27, 29, 31, 83], "neighbor": [17, 19, 21, 22, 24, 27, 29, 31, 77, 83], "subsequenec": [17, 21], "xn_timestep": [17, 21], "second": [17, 20, 21, 23, 24, 51, 54, 55, 58, 59, 60, 75, 80], "kmean": [19, 21], "r": [19, 20, 21, 22, 23, 24, 29, 31, 34, 35, 36, 37, 38, 49, 51, 54, 55, 56, 58, 59, 60, 77, 79, 83, 92], "init": [19, 20, 21], "weight": [19, 20, 21, 22, 23, 24, 34, 35, 36, 37, 38, 40, 41, 48, 51, 55, 56, 58, 59, 60, 79], "warp": [19, 20, 21, 58, 60, 77, 79, 80], "softdtw": [19, 21], "penalti": [19, 20, 21, 79], "tradit": [19, 21, 74, 76, 79, 84, 88], "randomli": [19, 21, 23, 24, 49, 54, 55, 59, 60, 83, 85, 89], "centroid": [19, 21, 77], "consecut": [19, 21], "diagnost": [19, 21], "messag": [19, 21, 65, 67], "dure": [19, 21, 30, 31], "barycent": [19, 20, 21], "n_iter_": [19, 21], "cluster_centers_": [19, 21], "labels_": [19, 21], "Not": [19, 21, 23, 24], "fit_predict": [19, 21, 23, 24], "present": [19, 21, 23, 24, 75, 77, 85], "consist": [19, 21, 23, 24, 28, 30, 31, 35, 36, 37, 38, 54, 55, 56, 59, 60, 80, 83, 84, 89], "convent": [19, 21, 23, 24, 64, 65, 67, 70, 73, 83, 84], "int64": [19, 21], "belong": [19, 21, 70, 77], "kmedoid": [19, 21], "fast": [19, 21, 34, 38, 48, 52, 54, 55, 79, 84], "30": [19, 21, 70, 79, 80, 83], "0001": [19, 21], "pam": [19, 21], "medoid": [19, 21, 27, 31, 77], "core": [19, 21, 23, 24, 34, 38, 45, 48, 49, 51, 52, 55, 80, 83], "medoid_indices_": [19, 21], "n_neighbor": [19, 21, 22, 24, 28, 31, 77], "classes_": [19, 21, 23, 24, 29, 31, 56, 57, 58, 59, 60, 77, 85], "shapel": [19, 21], "known": [19, 21, 28, 31], "multivarait": [19, 21], "kneighborclassifi": [19, 21], "sample_weight": [19, 20, 21, 22, 23, 24, 34, 35, 36, 37, 38, 40, 41, 56, 58, 59, 60, 85], "accuraci": [19, 21, 22, 23, 24, 34, 35, 36, 37, 38, 40, 41, 56, 58, 59, 60, 76, 77, 83, 84, 85], "multi": [19, 21, 22, 23, 24, 34, 35, 36, 37, 38, 49, 55, 56, 58, 59, 60, 65, 67, 76, 88], "harsh": [19, 21, 22, 23, 24, 34, 35, 36, 37, 38, 56, 58, 59, 60], "you": [19, 21, 22, 23, 24, 28, 31, 34, 35, 36, 37, 38, 56, 58, 59, 60, 70, 83, 91, 92, 93], "correctli": [19, 21, 22, 23, 24, 34, 35, 36, 37, 38, 56, 58, 59, 60], "align": [20, 25, 29, 32, 40, 41], "modul": [20, 21, 31, 70, 74, 76, 77, 88, 93], "sever": [20, 56, 58, 59, 60, 70, 79, 84, 85, 93], "ddtw_distanc": 20, "deriv": [20, 23, 40, 41, 79], "dynam": [20, 23, 24, 58, 59, 60, 77, 79, 80], "x_timestep": [20, 80], "y_timestep": [20, 80], "dtw_distanc": 20, "dtw_align": 20, "out": [20, 23, 24, 70, 76, 83, 90], "vector": [20, 65, 67], "penal": 20, "store": [20, 23, 24, 73, 77, 85], "path": [20, 30, 31, 56, 58, 59, 60, 75, 77, 85, 92], "dtw_averag": 20, "mm": 20, "max_stabl": 20, "learning_r": 20, "decai": 20, "1e": [20, 40, 41], "max_epoch": 20, "return_cost": 20, "averag": [20, 23, 24, 40, 41, 77, 89], "dba": 20, "exp": [20, 23, 24, 59, 60], "influenc": [20, 23, 24, 35, 36, 37, 38, 56, 59, 60], "much": [20, 40, 41, 93], "contribut": 20, "ssg": 20, "minim": [20, 36, 38, 54, 55, 80, 84], "equival": [20, 80, 83], "stochast": 20, "subgradi": 20, "epoch": 20, "cost": [20, 30, 31, 79, 80], "minmum": [20, 59, 60], "runtim": 20, "pseudo": [20, 26, 28, 30, 31], "27442791e": 20, "19807473e": 20, "02": [20, 49, 55], "77490053e": 20, "60441308e": 20, "31930140e": 20, "17437783e": 20, "43925941e": 20, "60983434e": 20, "72118437e": 20, "73352049e": 20, "56701557e": 20, "53269314e": 20, "33366128e": 20, "09010828e": 20, "97539989e": 20, "71443248e": 20, "42492836e": 20, "71408958e": 20, "82518334e": 20, "35671953e": 20, "26442901e": 20, "38342948e": 20, "11248815e": 20, "99355168e": 20, "00": [20, 49, 55], "08588712e": 20, "35954194e": 20, "78345146e": 20, "41023092e": 20, "99915956e": 20, "82717462e": 20, "71687181e": 20, "55819192e": 20, "28805337e": 20, "06653283e": 20, "25159669e": 20, "02389872e": 20, "39410523e": 20, "34687887e": 20, "03": 20, "98654485e": 20, "85832342e": 20, "56436416e": 20, "25302660e": 20, "77697444e": 20, "24606299e": 20, "76357782e": 20, "27083874e": 20, "44590342e": 20, "64184026e": 20, "03608265e": 20, "13964118e": 20, "33595675e": 20, "09954847e": 20, "61924171e": 20, "47433305e": 20, "29583168e": 20, "00425122e": 20, "80524683e": 20, "70210329e": 20, "40259039e": 20, "59657389e": 20, "52170730e": 20, "54666287e": 20, "93690730e": 20, "23968406e": 20, "dtw_envelop": 20, "envelop": 20, "lb_keogh": 20, "upper": [20, 23, 24, 36, 38, 42, 44, 51, 52, 54, 55, 58, 59, 60, 80, 84], "keogh": [20, 80], "2002": 20, "28th": 20, "veri": [20, 74, 79], "larg": [20, 73, 79, 83, 84, 89], "dtw_lb_keogh": 20, "bound": [20, 23, 24, 42, 44, 51, 54, 55, 58, 59, 60, 80, 84], "min_dist": 20, "cumul": 20, "step": [20, 28, 31, 36, 38, 54, 55, 70, 73, 74, 76, 77, 80, 89], "dtw_map": 20, "optim": [20, 22, 24, 80, 83, 85, 92], "precomput": [20, 23, 24, 35, 36, 37, 38, 56, 59, 60], "x_indic": 20, "y_indic": 20, "provid": [20, 28, 31, 49, 52, 70, 75, 77, 79, 85, 91], "jeong_weight": 20, "n": [20, 70, 80, 83, 84, 85, 88], "jeong": 20, "2011": 20, "omitaomu": 20, "o": [20, 23, 24, 29, 58, 60, 80, 83], "2021": [20, 28, 31, 40, 41, 84, 93], "pattern": [20, 36, 38, 54, 55, 79, 80, 84, 88], "recognit": [20, 36, 38, 54, 55, 79, 84], "44": 20, "2231": 20, "2240": 20, "wddtw_distanc": 20, "diagon": 20, "wdtw_align": 20, "wdtw_distanc": 20, "elasticensembleclassifi": [22, 24, 83], "grid": [22, 23, 24, 51, 54, 55, 58, 59, 60, 83], "over": [22, 23, 24, 25, 32, 40, 41, 46, 51, 54, 55, 58, 59, 60, 70, 79, 83], "elast": [22, 24, 80], "non_elast": [22, 24], "one": [22, 23, 24, 25, 32, 48, 51, 54, 55, 58, 59, 60, 63, 70, 73, 75, 77, 79, 80, 83, 84, 85, 89], "line": [22, 24, 66, 83, 92], "bagnal": [22, 24, 83], "2015": [22, 24, 54, 55, 83, 84], "slightli": [22, 24, 77], "smaller": [22, 24, 83], "custom": [22, 23, 24, 49, 55, 58, 60, 83], "paralel": [22, 24], "jason": [22, 24, 83], "anthoni": [22, 24, 83], "knowledg": [22, 23, 24, 27, 30, 31, 34, 38, 40, 41, 48, 49, 52, 55, 58, 60, 77, 79, 80, 83, 84], "29": [22, 24, 83], "min_r": [22, 23, 24, 51, 54, 55, 58, 59, 60, 79, 83], "max_r": [22, 23, 24, 51, 54, 55, 58, 59, 60, 79, 83], "ddtw": [22, 24, 79, 80, 83], "9866666666666667": [22, 24, 83], "baggingclassifi": [23, 24], "n_estim": [23, 24, 77], "max_sampl": [23, 24], "bootstrap": [23, 24], "oob_scor": [23, 24], "class_weight": [23, 24, 34, 35, 36, 37, 38, 58, 59, 60, 85], "warm_start": [23, 24], "base_estim": [23, 24], "deprec": [23, 24, 26, 31, 49, 55, 58, 59, 60, 67, 83, 93], "bag": [23, 24], "regressor": [23, 24, 32, 35, 36, 37, 38, 56, 59, 60, 64, 76, 83, 84], "meta": [23, 24], "shapelettreeregressor": [23, 24, 59, 60, 85], "drawn": [23, 24, 85], "replac": [23, 24, 28, 31, 40, 41, 75, 91, 92], "balanc": [23, 24, 34, 36, 38, 58, 59, 60], "associ": [23, 24, 34, 36, 38, 58, 59, 60], "invers": [23, 24, 58, 59, 60, 77], "proport": [23, 24, 58, 59, 60], "frequenc": [23, 24, 58, 59, 60, 66, 89], "reus": [23, 24, 70, 74, 77], "solut": [23, 24, 80], "previou": [23, 24, 74], "just": [23, 24, 72, 92], "whole": [23, 24], "resampl": [23, 24, 25, 32, 34, 38, 45, 52, 55], "estimators_samples_": [23, 24], "member": [23, 24], "footprint": [23, 24], "thu": [23, 24, 80], "fetch": [23, 24, 92], "slower": [23, 24], "expect": [23, 24, 35, 36, 37, 38, 50, 55, 56, 59, 60, 70, 74, 77, 88], "decision_funct": [23, 24, 40, 41], "decis": [23, 24, 30, 31, 56, 57, 58, 59, 60, 77, 83, 93], "spars": [23, 24, 34, 36, 38, 56, 58, 59, 60, 65, 67, 89], "matric": [23, 24, 84], "accept": [23, 24, 34, 38, 48, 55, 65, 67, 70, 73, 74, 75, 79, 80], "column": [23, 24, 65, 67, 75, 78, 84, 85], "appear": [23, 24, 77], "special": [23, 24, 70], "case": [23, 24, 28, 31, 57, 60, 79, 80], "build": [23, 24, 58, 60, 70, 80, 85, 91], "do": [23, 24, 56, 58, 59, 60, 79, 80, 92, 93], "resort": [23, 24], "vote": [23, 24], "predict_log_proba": [23, 24], "log": [23, 24, 49, 55, 59, 60], "repres": [23, 24, 67, 72, 77, 78, 79, 85], "baggingregressor": [23, 24], "coeffici": [23, 24, 35, 36, 37, 38, 39, 41, 56, 59, 60], "frac": [23, 24, 35, 36, 37, 38, 56, 59, 60], "u": [23, 24, 35, 36, 37, 38, 56, 59, 60], "v": [23, 24, 35, 36, 37, 38, 56, 59, 60, 75, 79], "residu": [23, 24, 35, 36, 37, 38, 56, 59, 60], "sum": [23, 24, 35, 36, 37, 38, 54, 55, 56, 59, 60], "squar": [23, 24, 25, 32, 35, 36, 37, 38, 56, 59, 60], "y_true": [23, 24, 35, 36, 37, 38, 56, 59, 60], "y_pred": [23, 24, 35, 36, 37, 38, 56, 59, 60, 77], "total": [23, 24, 35, 36, 37, 38, 56, 59, 60, 85], "becaus": [23, 24, 35, 36, 37, 38, 56, 59, 60], "arbitrarili": [23, 24, 35, 36, 37, 38, 56, 59, 60], "wors": [23, 24, 35, 36, 37, 38, 56, 59, 60], "constant": [23, 24, 35, 36, 37, 38, 56, 59, 60], "alwai": [23, 24, 27, 31, 35, 36, 37, 38, 42, 44, 56, 59, 60, 79], "disregard": [23, 24, 35, 36, 37, 38, 56, 59, 60], "featur": [23, 24, 35, 36, 37, 38, 45, 49, 52, 55, 56, 57, 59, 60, 63, 73, 74, 76, 83, 84, 85, 89, 92, 93], "some": [23, 24, 35, 36, 37, 38, 56, 59, 60, 64, 65, 67, 72, 73, 78, 79, 85, 91], "n_samples_fit": [23, 24, 35, 36, 37, 38, 56, 59, 60], "multioutput": [23, 24, 35, 36, 37, 38, 56, 59, 60], "uniform_averag": [23, 24, 35, 36, 37, 38, 56, 59, 60], "23": [23, 24, 35, 36, 37, 38, 56, 59, 60, 89], "r2_score": [23, 24, 35, 36, 37, 38, 56, 59, 60], "except": [23, 24, 35, 36, 37, 38, 56, 59, 60, 75, 88], "multioutputregressor": [23, 24, 35, 36, 37, 38, 56, 59, 60], "basebag": [23, 24], "baseforestclassifi": 23, "estimator_param": 23, "max_depth": [23, 24, 56, 57, 58, 59, 60, 77, 85], "min_samples_split": [23, 24, 56, 58, 59, 60], "min_samples_leaf": [23, 24, 56, 58, 59, 60], "min_impurity_decreas": [23, 24, 56, 58, 59, 60], "impurity_equality_toler": [23, 24, 56, 59, 60, 85, 93], "criterion": [23, 24, 58, 59, 60, 85], "entropi": [23, 24, 58, 59, 60], "tree": [23, 24, 77, 79, 83, 93], "baseforestregressor": 23, "squared_error": [23, 24, 59, 60], "baseshapeletforestclassifi": 23, "n_shapelet": [23, 24, 25, 32, 36, 38, 54, 55, 59, 60, 84, 85], "log2": [23, 24, 25, 32, 40, 41, 49, 53, 55, 59, 60], "min_shapelet_s": [23, 24, 25, 29, 31, 32, 36, 38, 54, 55, 59, 60, 84], "max_shapelet_s": [23, 24, 25, 29, 31, 32, 36, 38, 54, 55, 59, 60, 84, 85], "directli": [23, 75, 89], "baseshapeletforestregressor": 23, "extrashapelettreesclassifi": [23, 24], "extrem": [23, 24, 80], "depth": [23, 24, 58, 59, 60, 85, 92], "expand": [23, 24, 59, 60, 84], "until": [23, 24, 57, 59, 60], "leav": [23, 24, 56, 58, 59, 60, 83], "pure": [23, 24, 59, 60], "node": [23, 24, 52, 55, 56, 57, 58, 59, 60, 83, 85], "leaf": [23, 24, 56, 57, 58, 59, 60, 85], "impur": [23, 24, 58, 59, 60, 85, 93], "decreas": [23, 24, 58, 59, 60], "mandatori": [23, 24, 51, 54, 55, 58, 59, 60], "specifii": [23, 24, 51, 54, 55, 58, 59, 60], "give": [23, 24, 25, 32, 51, 54, 55, 58, 59, 60, 83], "follow": [23, 24, 37, 47, 49, 51, 52, 54, 55, 56, 58, 59, 60, 70, 73, 74, 75, 79, 80, 83, 85, 92], "num_r": [23, 24, 51, 54, 55, 58, 59, 60], "gini": [23, 24, 58, 59, 60], "scaled_euclidean": [23, 24, 59, 60, 79, 80, 85], "y_hat": [23, 24], "extrashapelettreesregressor": [23, 24], "mse": [23, 24, 59, 60], "v1": [23, 24, 59, 60, 73, 75], "forestmixin": 23, "intervalforestclassifi": [23, 24, 83], "n_interv": [23, 24, 25, 32, 40, 41, 49, 53, 55, 59, 60, 83], "sqrt": [23, 24, 25, 32, 40, 41, 49, 53, 55, 59, 60, 83], "summar": [23, 24, 49, 55, 59, 60, 83, 85], "mean_var_slop": [23, 24, 49, 55, 59, 60, 85], "sample_s": [23, 24, 39, 41, 49, 55, 59, 60, 83, 93], "min_siz": [23, 24, 49, 52, 55, 59, 60, 83], "max_siz": [23, 24, 49, 52, 55, 59, 60, 83], "renam": [23, 24, 26, 31, 49, 55], "fix": [23, 24, 49, 55, 59, 60, 83, 89, 93], "overlap": [23, 24, 40, 41, 49, 55, 59, 60, 83, 84], "possibli": [23, 24, 49, 55, 59, 60, 83], "_summar": [23, 24, 49, 55, 59, 60], "slope": [23, 24, 49, 55, 59, 60, 83, 85], "sub": [23, 24, 58, 60, 93], "intervalforestregressor": [23, 24], "isolationshapeletforest": [23, 24], "contamin": [23, 24, 43, 44], "isol": [23, 24, 92], "offset": [23, 24], "offset_": [23, 24], "model_select": [23, 24, 70, 77, 89], "outlier_train_test_split": [23, 24, 43, 44], "balanced_accuracy_scor": [23, 24], "test_siz": [23, 24, 42, 43, 44, 70], "anomalies_train_s": [23, 24, 43, 44], "8674": [23, 24], "outlier": [23, 24, 40, 41, 42, 43, 44, 75], "pivotforestclassifi": [23, 24], "n_pivot": [23, 24, 51, 55, 58, 59, 60], "proximityforestclassifi": [23, 24, 79, 83], "pivot_sampl": [23, 24, 58, 60], "metric_sampl": [23, 24, 51, 55, 58, 60], "metric_factori": [23, 24, 58, 60], "proxim": [23, 24, 26, 31, 40, 41, 58, 60], "uniform": [23, 24, 51, 52, 53, 55, 58, 60, 74, 80], "parameter": [23, 24, 58, 60, 79], "suggest": [23, 24, 58, 60, 83], "luca": [23, 24, 58, 60, 83], "2019": [23, 24, 49, 55, 58, 60, 83, 92], "2020": [23, 24, 27, 29, 30, 31, 40, 41, 52, 55, 58, 60, 77, 84], "combin": [23, 24, 29, 49, 55, 58, 60, 89], "benjamin": [23, 24, 58, 60, 83], "ahm": [23, 24, 58, 60, 83], "shifaz": [23, 24, 58, 60, 83], "charlott": [23, 24, 58, 60, 83], "pelleti": [23, 24, 58, 60, 83], "lachlan": [23, 24, 58, 60, 83], "neill": [23, 24, 58, 60, 83], "nayyar": [23, 24, 58, 60, 83], "zaidi": [23, 24, 58, 60, 83], "bart": [23, 24, 58, 60, 83], "goethal": [23, 24, 58, 60, 83], "fran\u00e7oi": [23, 24, 52, 55, 58, 60, 83], "petitjean": [23, 24, 52, 55, 58, 60, 83, 84], "geoffrei": [23, 24, 52, 55, 58, 60, 79, 83], "webb": [23, 24, 34, 38, 48, 52, 55, 58, 60, 79, 83, 84], "scalabl": [23, 24, 58, 60, 83], "rocketforestclassifi": [23, 24], "n_kernel": [23, 24, 34, 35, 38, 48, 52, 55, 59, 60, 89], "normal": [23, 24, 25, 32, 34, 35, 36, 37, 38, 43, 44, 48, 52, 53, 55, 59, 60, 74, 77, 79, 84, 89], "sampling_param": [23, 24, 34, 35, 38, 48, 52, 55, 59, 60], "kernel_s": [23, 24, 34, 35, 38, 46, 48, 52, 55, 59, 60], "bias_prob": [23, 24, 35, 38, 52, 55, 59, 60], "normalize_prob": [23, 24, 35, 36, 38, 52, 54, 55, 59, 60, 84], "padding_prob": [23, 24, 35, 38, 52, 55, 59, 60], "rocket": [23, 24, 35, 38, 52, 55, 70, 76], "convolut": [23, 24, 34, 38, 46, 48, 52, 55, 59, 60], "13": [23, 24, 52, 55], "bia": [23, 24, 46, 52, 55], "processor": [23, 24, 54, 55, 80, 83, 92], "rocketforestregressor": [23, 24], "shapeletforestclassifi": [23, 24, 70, 77, 83], "gap": [23, 24, 59, 60, 79, 93], "never": [23, 24, 59, 60, 65, 67, 79, 80, 89], "current": [23, 24, 28, 29, 31, 59, 60, 73, 74, 75, 92], "ab": [23, 24, 59, 60], "toward": [23, 24, 29, 59, 60, 64], "independeth": [23, 24, 59, 60], "shapeletforestembed": [23, 24], "sparse_output": [23, 24], "high": [23, 24], "dimension": [23, 24], "represent": [23, 24, 54, 55, 59, 60, 67, 70, 76, 77, 79, 83, 84, 85, 88, 89], "fall": [23, 24, 70, 79], "lead": [23, 24, 77, 84], "code": [23, 24, 74, 77, 80, 85, 93], "ones": [23, 24], "csr": [23, 24], "shapeletforestregressor": [23, 24, 83], "amplitudeimport": [25, 32], "bin": [25, 32, 53, 55, 66, 88, 91], "n_bin": [25, 32, 40, 41, 53, 55], "n_repeat": [25, 32], "equi": [25, 32], "amplitud": [25, 32, 66], "sax": [25, 32, 40, 41, 53, 55], "discret": [25, 32, 34, 36, 38, 54, 55, 66, 88], "permut": [25, 32], "show_bin": [25, 32], "show_grid": [25, 32], "boxplot": [25, 32], "scorer": [25, 32, 34, 36, 38], "were": [25, 32, 78], "annot": [25, 32], "axi": [25, 32, 56, 58, 59, 60, 63, 65, 67, 74, 80], "mappabl": [25, 32], "scalarmapp": [25, 32], "colorbar": [25, 32], "frequencyimport": [25, 32], "intervalimport": [25, 28, 31, 32, 70], "repeat": [25, 32, 42, 44], "specici": [25, 32], "least": [25, 32, 65, 67], "importances_": [25, 32], "components_": [25, 32], "end": [25, 32, 56, 58, 59, 60, 65, 67, 72, 74, 78], "permuteimport": 25, "shapeletimport": [25, 32], "kernel_scal": [25, 32], "25": [25, 32, 58, 60, 79, 88], "plot_import": [25, 32], "predictevalu": [26, 29], "probabilityevalu": [26, 29], "targetevalu": [26, 28, 29, 31], "train_x": [26, 31], "train_i": [26, 31], "valid_scor": [26, 31], "method_arg": [26, 31], "basecounterfactu": [26, 31], "infer": [26, 31], "most": [26, 28, 31, 72, 76, 77, 78, 80, 84, 88, 89, 91, 93], "appropri": [26, 31, 78], "_counterfactu": [26, 31], "success": [26, 31, 84], "stabl": [26, 31, 43, 44, 72], "x_counterfactu": [26, 31, 40, 41], "kneighborscounterfactu": [27, 31, 77], "wdtw": [27, 31, 79, 80], "karlsson": [27, 30, 31, 40, 41, 77], "reban": [27, 30, 31, 40, 41, 77], "j": [27, 30, 31, 40, 41, 77, 80, 84, 85], "papapetr": [27, 30, 31, 40, 41, 77], "gioni": [27, 30, 31, 40, 41, 77], "local": [27, 30, 31, 40, 41, 77], "tweak": [27, 30, 31, 40, 41, 77], "system": [27, 30, 31, 40, 41, 73, 75, 77, 91, 92], "62": [27, 30, 31, 40, 41, 77], "1671": [27, 30, 31, 40, 41, 77], "1700": [27, 30, 31, 40, 41, 77], "explainer_": [27, 31], "nativeguidecounterfactu": [28, 31, 93], "nativ": [28, 31, 39, 40, 41, 48, 55, 93], "exce": [28, 31, 85], "grow": [28, 31], "unfortun": [28, 31], "interpret": [28, 31, 40, 41, 49, 55, 85], "To": [28, 31, 73, 74, 75, 77, 78, 88, 91, 93], "exactli": [28, 31, 73, 78], "replic": [28, 31], "delanei": [28, 31, 40, 41, 93], "your": [28, 31, 56, 58, 59, 60, 91, 92, 93], "own": [28, 31, 49, 55], "recommend": [28, 31, 84, 91], "author": [28, 31], "gradcam": [28, 31], "green": [28, 31, 40, 41], "d": [28, 31, 34, 38, 40, 41, 48, 49, 55, 73, 79, 80, 83, 84, 85], "kean": [28, 31, 40, 41], "reason": [28, 31, 70], "research": [28, 31], "develop": [28, 31, 47, 55, 92, 93], "vol": [28, 31], "12877": [28, 31], "32": [28, 31, 48, 55, 73], "47": [28, 31], "springer": [28, 31, 84], "publish": [28, 31, 84, 88], "cham": [28, 31, 84], "scienc": [28, 31, 83], "ngc": [28, 31], "51": [28, 31], "float32": [28, 31, 83], "cf": [28, 31], "nfc": [28, 31], "target_": [28, 29, 31], "importance_": [28, 31, 70], "estimator_": [28, 29, 31], "clasess_": [28, 31], "dynamictimewarptransform": 29, "gamma": 29, "move": [29, 58, 60, 79], "euclideantransform": 29, "knearestprototypesampl": 29, "prototype_indici": 29, "metric_transform": 29, "prototyp": 29, "nearest_index": 29, "state": [29, 43, 44, 51, 55, 74], "sample_mov": 29, "sampla": 29, "knearestshapeletprototypesampl": 29, "shapeletprototypesampl": 29, "metrictransform": 29, "prototypecounterfactu": [29, 31], "step_siz": [29, 31], "n_prototyp": [29, 31], "approach": [29, 31, 34, 36, 38, 48, 54, 55, 70, 73, 76, 77, 84, 88, 91], "samsten": [29, 31, 84], "isak": [29, 31], "partitions_": [29, 31], "prototypesampl": [29, 31], "prototype_indic": 29, "refin": 29, "new_counterfactu": 29, "_o": 29, "sample_shapelet": 29, "uniformprototypesampl": 29, "uniformli": [29, 53, 55, 59, 60], "weighteddynamictimewarptransform": 29, "shapeletforestcounterfactu": [30, 31, 77], "aggreg": [30, 31, 53, 55, 83], "epsilon": [30, 31, 79], "batch_siz": [30, 31], "max_path": [30, 31], "cosin": [30, 31, 79, 80], "manhattan": [30, 31, 79, 80, 84], "degre": [30, 31], "batch": [30, 31, 61], "candid": [30, 31, 40, 41], "subsampl": [30, 31], "stdout": [30, 31], "execut": [30, 31, 61], "2018": [30, 31, 77], "via": [30, 31, 77], "irrevers": [30, 31, 77], "tempor": [30, 31, 33, 70, 72, 77, 90], "paths_": [30, 31], "numer": [31, 33, 65, 67, 70, 80, 89], "x_true": 31, "normalized_euclidean": [31, 40, 41, 79, 80], "librari": 33, "machin": [33, 70, 79, 90], "seamlessli": [33, 70], "integr": [33, 75], "scikit": [33, 37, 47, 48, 55, 56, 59, 64, 65, 67, 70, 76, 78, 89, 93], "hydraclassifi": [34, 38, 48, 55], "n_group": [34, 36, 38, 48, 54, 55, 84, 89], "64": [34, 36, 38, 48, 54, 55, 73, 84, 89, 92], "fit_intercept": [34, 35, 36, 37, 38], "group": [34, 36, 38, 42, 44, 48, 54, 55, 84, 89], "sampler": [34, 38, 48, 55], "convolv": [34, 36, 38, 46, 55], "n_alpha": [34, 36, 38], "try": [34, 36, 38, 63, 76, 77, 79, 83, 85, 89], "intercept": [34, 36, 38], "signatur": [34, 36, 38], "class_label": [34, 36, 38, 57, 60], "sparsescal": [34, 36, 38, 89], "disabl": [34, 36, 38, 65, 67, 70, 84, 93], "standardscal": [34, 36, 38, 89], "dempster": [34, 38, 48, 52, 55, 84], "schmidt": [34, 38, 48, 54, 55, 84], "2023": [34, 38, 48, 55, 79, 84], "hydra": [34, 38, 48, 55], "compet": [34, 36, 38, 48, 54, 55, 84], "accur": [34, 38, 48, 52, 55, 80, 82, 84], "rocketclassifi": [35, 38, 76], "10000": [35, 38, 89], "rocketregressor": [35, 38], "gcv_mode": [35, 36, 37, 38], "castorclassifi": [36, 38, 84], "shapelet_s": [36, 38, 54, 55, 59, 84], "soft_min": [36, 38, 54, 55], "soft_max": [36, 38, 54, 55], "soft_threshold": [36, 38, 54, 55], "count": [36, 38, 54, 55, 84, 85, 89], "dilatedshapeletclassifi": [36, 38, 84], "1000": [36, 38, 52, 54, 55, 59], "antoin": [36, 38, 54, 55], "guillaum": [36, 38, 54, 55, 84], "christel": [36, 38, 54, 55], "vrain": [36, 38, 54, 55, 84], "elloumi": [36, 38, 54, 55, 84], "wael": [36, 38, 54, 55], "artifici": [36, 38, 54, 55, 84], "intellig": [36, 38, 54, 55, 79, 84], "2022": [36, 38, 54, 55, 84], "randomshapeletclassifi": [36, 38, 84], "randomshapeletregressor": [36, 38], "basetransformclassifi": 37, "_estimator_typ": [37, 56, 59], "accuracy_scor": 37, "enforc": [37, 56, 59, 65, 67], "through": [37, 56, 59, 79, 83, 84, 85, 91], "requires_i": [37, 56, 59], "classifiermixin": 37, "left": [37, 56, 59, 85], "hand": [37, 56, 59], "side": [37, 46, 55, 56, 59], "mro": [37, 56, 59], "myestim": [37, 56, 59], "def": [37, 47, 55, 56, 59, 77, 80], "__init__": [37, 47, 55, 56, 59], "is_fitted_": [37, 56, 59], "fill_valu": [37, 47, 55, 56, 59], "66": [37, 52, 55], "basetransformestim": 37, "basetransformregressor": 37, "regressormixin": [37, 56, 59], "transformridgecv": 37, "transformridgeclassifiercv": 37, "linear": [38, 84], "silhouette_sampl": [39, 41], "silhouett": [39, 41], "silhouette_scor": [39, 41], "compactness_scor": [40, 41], "x_factual": [40, 41], "atol": [40, 41], "08": [40, 41], "compact": [40, 41], "n_timetep": [40, 41], "counterfacut": [40, 41], "factual": [40, 41], "plausability_scor": [40, 41], "x_plausibl": [40, 41], "y_plausibl": [40, 41], "y_counterfactu": [40, 41], "plausibl": [40, 41], "typic": [40, 41, 70, 80, 84], "m_sampl": [40, 41], "localoutlierfactor": [40, 41], "individu": [40, 41, 74], "plausabl": [40, 41], "incic": [40, 41], "better": [40, 41], "arxiv": [40, 41, 54, 55, 84], "2009": [40, 41], "13211v2": [40, 41], "proximity_scor": [40, 41], "redudancy_scor": [40, 41], "redud": [40, 41], "redund": [40, 41], "impact": [40, 41], "relative_proximity_scor": [40, 41], "x_nativ": [40, 41], "y_nativ": [40, 41], "captur": [40, 41, 70], "n_nativ": [40, 41], "n_counterfactu": [40, 41], "avareg": [40, 41], "smyth": [40, 41], "b": [40, 41, 77, 80, 83], "divers": [40, 41], "2101": [40, 41], "09056v1": [40, 41], "validity_scor": [40, 41], "y_predict": [40, 41], "repeatedoutliersplit": [42, 44], "n_split": [42, 44], "shuffl": [42, 44, 70], "total_n_outli": [42, 44], "psudo": [42, 43, 44], "contrari": [42, 44], "fold": [42, 44], "repeatedli": [42, 44, 70, 73], "get_n_split": [42, 44], "compat": [42, 44, 45, 48, 49, 51, 52, 54, 55], "train_idx": [42, 44], "test_idx": [42, 44], "normal_class": [43, 44], "anomal": [43, 44], "train_test_split": [43, 44, 70, 77, 89], "baseattributetransform": [45, 48, 49, 51, 52, 54, 55], "engin": [45, 79], "embedding_": [45, 48, 52, 54, 55], "embed": [45, 48, 49, 51, 52, 54, 55], "underli": [45, 48, 52, 54, 55], "n_dimens": [45, 48, 49, 51, 52, 54, 55, 65, 67], "stride": [46, 55], "implicit": [46, 55], "floor": [46, 55], "derivativetransform": [47, 55], "deleg": [47, 55, 64, 65, 67], "get_feature_names_out": [47, 55], "automat": [47, 55, 57, 60, 91], "wrap": [47, 55, 63], "onetoonefeaturemixin": [47, 55], "classnameprefixfeaturesoutmixin": [47, 55], "help": [47, 55, 77], "transformermixin": [47, 55], "mytransform": [47, 55], "difftransform": [47, 48, 55], "hydratransform": [48, 55, 89], "descret": [48, 55], "make_pipelin": [48, 55, 70, 76, 89], "make_union": [48, 55], "dempster_hydra": [48, 55], "featuretransform": [49, 55], "catch22": [49, 55, 83, 85], "x_t": [49, 55], "19633603e": [49, 55], "51047206e": [49, 55], "90000000e": [49, 55], "80000000e": [49, 55], "48441896e": [49, 55], "73293560e": [49, 55], "21476510e": [49, 55], "70000000e": [49, 55], "00000000e": [49, 55], "70502518e": [49, 55], "60000000e": [49, 55], "42857143e": [49, 55], "26666667e": [49, 55], "89974643e": [49, 55], "31570726e": [49, 55], "50000000e": [49, 55], "90873852e": [49, 55], "47311800e": [49, 55], "intervalmixin": 49, "It": [49, 70, 77, 83, 84, 90], "_get_gener": [49, 52], "emb": [49, 55], "releas": [49, 55, 85], "lock": [49, 55, 85], "gil": [49, 55], "As": [49, 55, 70, 73, 75, 79, 80, 89], "suit": [49, 55, 64, 80], "futur": [49, 55, 73, 93], "downstream": [49, 55], "project": [49, 55, 92], "cython": [49, 55, 80], "lubba": [49, 55, 83], "carl": [49, 55], "h": [49, 55, 83], "sarab": [49, 55], "sethi": [49, 55, 83], "philip": [49, 55], "knaut": [49, 55, 83], "simon": [49, 55], "schultz": [49, 55, 83], "ben": [49, 55], "fulcher": [49, 55, 83], "nick": [49, 55], "jone": [49, 55, 83], "canon": [49, 55, 83], "characterist": [49, 55, 83], "33": [49, 55, 83], "1821": [49, 55, 83], "1852": [49, 55, 83], "15": [49, 55], "timepoint": [49, 55], "std": [49, 55, 79], "12": [49, 55, 80], "matrixprofiletransform": [50, 55], "matrixprofil": [50, 55], "pivotmixin": 51, "pivottransform": [51, 55], "proximitytransform": [51, 55], "condit": [51, 55, 77], "rocketmixin": 52, "rockettransform": [52, 55, 70, 89], "angu": [52, 55], "exception": [52, 55, 84], "34": [52, 55, 70, 80, 84], "1454": [52, 55, 84], "1495": [52, 55, 84], "51333333": [52, 55], "11526939": [52, 55], "47333333": [52, 55], "04712544": [52, 55], "24": [52, 55], "82912261": [52, 55], "52666667": [52, 55], "26611524": [52, 55], "54": [52, 55, 80], "98047216": [52, 55], "81260641": [52, 55], "54666667": [52, 55], "71210092": [52, 55], "35333333": [52, 55], "28841158": [52, 55], "25333333": [52, 55], "82203705": [52, 55], "72938203": [52, 55], "45333333": [52, 55], "53756324": [52, 55], "24666667": [52, 55], "8380654": [52, 55], "68666667": [52, 55], "80533684": [52, 55], "26": [52, 55, 74], "41709413": [52, 55], "65634235": [52, 55], "94724793": [52, 55], "32666667": [52, 55], "85575661": [52, 55], "67630249": [52, 55], "symbol": [53, 55], "piecewic": 53, "get_threshold": 53, "normalbin": 53, "paa": [53, 55], "peicewis": [53, 55], "assum": [53, 55, 66, 72, 74, 75, 77, 78], "uniformbin": 53, "piecewice_aggregate_approxim": [53, 55], "symbolic_aggregate_approxim": [53, 55], "castortransform": [54, 55], "ignore_i": [54, 55], "dialat": [54, 55, 84], "dilatedshapelettransform": [54, 55], "three": [54, 55, 76, 77, 79, 80, 85], "randomshapelettransform": [54, 55], "tranform": [54, 55], "wistuba": [54, 55, 84], "martin": [54, 55], "josif": [54, 55], "grabocka": [54, 55, 84], "lar": [54, 55], "thiem": [54, 55, 84], "ultra": [54, 55, 84], "preprint": [54, 55, 84], "1503": [54, 55, 84], "05018": [54, 55, 84], "load_gunpoint": [54, 55], "erp": [54, 55, 79, 80], "min_g": [54, 55], "max_g": [54, 55], "shapeletmixin": 54, "estiom": 54, "tabular": 55, "basetre": 56, "check_input": [56, 58, 59, 60], "bypass": [56, 58, 59, 60], "sure": [56, 58, 59, 60, 65, 67], "up": [56, 58, 59, 60, 91], "node_count": [56, 58, 59, 60, 85], "shapelettreeclassifi": [56, 58, 59, 60, 85], "tree_": [56, 58, 59, 60, 85], "equvival": [56, 58, 59, 60], "decision_path": [56, 58, 59, 60, 85], "n_node": [56, 58, 59, 60], "nonzero": [56, 58, 59, 60], "travers": [56, 58, 59, 60, 77, 85], "basetreeclassifi": 56, "child": [56, 58, 59, 60], "net": [56, 58, 59, 60], "carri": [56, 58, 59, 60], "don": [56, 58, 59, 60, 91], "know": [56, 58, 59, 60], "what": [56, 58, 59, 60, 88, 90], "basetreeregressor": 56, "plot_tre": [57, 60, 85, 93], "bbox_arg": [57, 60], "arrow_arg": [57, 60], "arrowstyl": [57, 60], "fontsiz": [57, 60], "node_label": [57, 60], "box": [57, 60], "arrow": [57, 60], "branch": [57, 58, 60, 83, 85], "font": [57, 60], "children": [57, 60], "_attr": [57, 60], "n_node_sampl": [57, 60, 85], "reach": [57, 60, 85], "inspect": [57, 60, 89], "extract": [57, 60, 83], "proximitytreeclassifi": [58, 60, 79], "msm": [58, 60, 79, 80, 83], "min_c": [58, 60, 79, 83], "max_c": [58, 60, 79, 83], "num_c": [58, 60], "20": [58, 60, 80, 83], "basefeaturetreeclassifi": 59, "basefeaturetreeregressor": 59, "dilatedshapelettreeclassifi": 59, "extrashapelettreeclassifi": [59, 60, 85], "scaled_dtw": [59, 60, 79, 80], "extrashapelettreeregressor": [59, 60, 85], "intervaltreeclassifi": [59, 60, 85], "structur": [59, 60], "intervaltreeregressor": [59, 60], "pivottreeclassifi": [59, 60], "rockettreeclassifi": [59, 60], "rockettreeregressor": [59, 60], "n_classes_": [59, 60], "run_in_parallel": 61, "parallel_arg": 61, "assert_exhaustive_parameter_check": 62, "assert": 62, "ok": 62, "assert_parameter_check": 62, "skip": [62, 64], "extend": 62, "array_or_scalar": 63, "optional_f": 63, "item": 63, "singleton": 63, "recursivlei": 63, "unwrap": 63, "Such": 63, "unstabl": 63, "stabil": 63, "beta": 63, "unsat": 63, "check_estim": 64, "generate_onli": 64, "skip_scikit": 64, "adher": 64, "monkei": 64, "patch": 64, "relat": [64, 79], "silent": 64, "tailor": 64, "check_x_i": [65, 67], "copi": [65, 67, 80], "ensure_2d": [65, 67], "ensure_ts_arrai": [65, 67], "allow_3d": [65, 67], "allow_nd": [65, 67], "force_all_finit": [65, 67], "multi_output": [65, 67], "ensure_min_sampl": [65, 67], "ensure_min_timestep": [65, 67], "ensure_min_dim": [65, 67], "allow_eo": [65, 67], "y_numer": [65, 67], "y_contigu": [65, 67], "2d": [65, 67, 70, 78, 80], "3d": [65, 67, 70, 78, 80], "finit": [65, 67], "varial": [65, 67], "report": [65, 67, 80], "check_arrai": [65, 67], "ravel_1d": [65, 67], "input_nam": [65, 67], "convert": [65, 67, 73, 84, 88], "empti": [65, 67, 84], "attempt": [65, 67], "failur": [65, 67], "convers": [65, 67, 84, 85], "fortran": [65, 67], "style": [65, 67], "noth": [65, 67], "layout": [65, 67], "kept": [65, 67], "trigger": [65, 67], "might": [65, 67, 77], "ravel": [65, 67], "neither": [65, 67], "variable_len": [65, 67, 74, 78], "eo": [65, 67, 68, 72, 74, 78], "nan": [65, 67, 72, 78], "pd": [65, 67], "na": [65, 67], "cannot": [65, 67], "infinit": [65, 67], "row": [65, 67, 78, 84, 85], "reject": [65, 67], "plot_frequency_domain": 66, "jitter": 66, "sample_spac": 66, "cmap": 66, "dark2": 66, "freqenc": 66, "matplotlib": [66, 74], "colormap": 66, "plot_time_domain": 66, "linewidth": 66, "zorder": 66, "show_legend": 66, "opac": 66, "width": 66, "color": 66, "legend": 66, "metricopt": 67, "mark": 67, "is_satisfied_bi": 67, "val": 67, "is_satisfi": 67, "subsequencemetricopt": 67, "check_classification_target": 67, "valueerror": 67, "check_opt": 67, "option_valu": 67, "check_typ": 67, "target_typ": 67, "variabl": [68, 78, 92], "get_variable_length": 68, "lenght": 68, "is_end_of_seri": [68, 72, 74, 78], "is_variable_length": 68, "problem": [70, 79, 88], "involv": [70, 80], "forecast": 70, "unfamiliar": 70, "wildboar": [70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 88, 89, 90, 92, 93], "framework": 70, "focu": [70, 88], "chronolog": 70, "logic": 70, "solv": 70, "python": [70, 73, 75, 79, 80, 90, 91, 92, 93], "concern": 70, "categori": [70, 79], "supervis": 70, "nomin": 70, "goal": [70, 77, 82], "unlabel": 70, "task": [70, 77, 80, 83, 85, 88], "essenti": [70, 77, 92], "acquir": 70, "commun": 70, "access": [70, 91], "achiev": [70, 83, 89], "robust": [70, 79], "oper": [70, 73, 74, 75, 91, 92], "often": [70, 76, 84], "opt": 70, "prefer": 70, "irrespect": 70, "floodmodeling1": 70, "uea": 70, "extrins": 70, "snippet": [70, 74], "tsereg": 70, "interfac": [70, 75], "ensembl": [70, 77, 85, 88], "previous": [70, 73, 77, 82, 93], "unseen": [70, 82], "simplifi": [70, 74], "experiment": 70, "clone": [70, 92], "Then": [70, 89], "screen": 70, "document": [70, 76, 77, 79, 83, 85, 89, 91, 93], "despit": 70, "even": 70, "purpos": [70, 77, 80, 85, 89], "tabluar_x": 70, "One": [70, 73, 74, 77, 85], "design": [70, 84], "interoper": 70, "linear_model": [70, 76, 84], "logisticregress": 70, "bad": 70, "practic": 70, "proper": 70, "hold": [70, 79], "respons": 70, "break": 70, "continu": [70, 85], "reevalu": 70, "relianc": 70, "particular": [70, 77], "visual": [70, 85, 92], "31": [70, 79], "disk": [70, 75], "pickl": 70, "repr": 70, "dump": 70, "earlier": 70, "clf_": 70, "older": 70, "newer": 70, "vice": [70, 77], "versa": [70, 77], "secur": 70, "unpickl": 70, "trust": [70, 76, 77, 79, 83, 85, 89], "wherea": [72, 83, 85], "context": 72, "multivaret": 72, "howev": [72, 73, 75, 80, 84], "unequ": [72, 74, 79], "ieee754": 72, "treat": [72, 93], "isnan": [72, 78], "wb": 72, "t1": 72, "t2": 72, "t3": 72, "vstack": 72, "advanc": 73, "entri": 73, "hope": 73, "drawback": 73, "improv": [73, 80, 93], "asset": 73, "demand": [73, 75], "small": [73, 80, 85, 88, 93], "experi": 73, "brows": 73, "688": 73, "43": [73, 80], "kb": 73, "668": 73, "offer": [73, 89], "bit": [73, 92], "conform": 73, "common": [73, 74, 78, 79, 80, 91], "workflow": [73, 80], "comparis": 73, "explanatori": 73, "n_label": [73, 85], "greater": [73, 76, 85], "chain": 73, "large_multivari": 73, "large_multiclass": 73, "0x7f262ce95d00": 73, "predefin": 74, "contrast": [74, 77, 89], "our": 74, "applic": [74, 77, 89], "enumer": [74, 91], "could": [74, 77], "rewritten": 74, "crude": 74, "wai": 74, "deal": 74, "longer": 74, "accomplish": [74, 80], "argmax": 74, "pyplot": 74, "plt": 74, "iseo": 74, "fig": 74, "subplot": 74, "nrow": 74, "scatter": 74, "arang": 74, "marker": 74, "set_ylabel": 74, "spokenarabicdigit": 74, "ucrmt": 74, "figur": 74, "loss": 74, "togeth": [75, 85], "compos": 75, "written": 75, "letter": 75, "regular": 75, "alphanumer": 75, "charact": 75, "za": 75, "z0": 75, "z": [75, 79, 84], "exemplifi": 75, "hard": 75, "endpoint": 75, "http": [75, 92], "www": 75, "org": [75, 76, 77, 79, 83, 85, 89], "repo": 75, "addition": [75, 85], "offlin": 75, "localappdata": 75, "gnu": [75, 91, 92], "linux": [75, 91, 92], "xdg_cache_hom": 75, "unset": 75, "maco": [75, 91, 92], "librarycach": 75, "fallback": 75, "session": 75, "here": [75, 77, 80, 83, 84, 89, 91], "func": 75, "bundle_url": 75, "example1": 75, "altern": [75, 77, 92], "remot": 75, "sha": 75, "sha1": 75, "hash": 75, "npy": 75, "npz": 75, "save": 75, "savez": 75, "dataset_nam": 75, "_train": 75, "_test": 75, "That": 75, "dimension_select": [76, 93], "inspir": 76, "jupyt": [76, 77, 79, 83, 85, 89], "environ": [76, 77, 79, 83, 85, 89, 91, 92], "rerun": [76, 77, 79, 83, 85, 89], "cell": [76, 77, 79, 83, 85, 89], "html": [76, 77, 79, 83, 85, 89], "notebook": [76, 77, 79, 83, 85, 89], "On": [76, 77, 79, 80, 83, 85, 89], "github": [76, 77, 79, 80, 83, 85, 89, 92], "unabl": [76, 77, 79, 83, 85, 89], "render": [76, 77, 79, 83, 85, 89], "page": [76, 77, 79, 83, 85, 89], "nbviewer": [76, 77, 79, 83, 85, 89], "nbsp": [76, 77, 79, 83, 85, 89], "distancevariancethresholdifitteddistancevariancethreshold": 76, "third": [76, 80], "And": 76, "remain": 76, "sequentialdimensionselectorifittedsequentialdimensionselector": 76, "kneighborsclassifierkneighborsclassifi": 76, "rocketclassifierifittedrocketclassifi": 76, "92": 76, "x27": [76, 77, 79, 83, 85, 89], "pipelineifittedpipelin": [76, 89], "sequentialdimensionselectorsequentialdimensionselector": 76, "rocketclassifierrocketclassifi": 76, "98": 76, "led": 77, "outcom": 77, "need": [77, 79, 80, 92, 93], "alter": 77, "certain": [77, 80], "flip": 77, "These": [77, 79, 80, 84], "understand": 77, "highlight": 77, "critic": 77, "natur": 77, "facilit": 77, "delin": [77, 84], "emploi": [77, 80, 84, 89], "arithmet": 77, "incorpor": [77, 84], "although": 77, "former": 77, "minkowski": [77, 79, 80], "electrocardiogram": 77, "ecg": 77, "signal": 77, "record": [77, 85, 89], "distinguish": [77, 79], "heartbeat": 77, "abnorm": 77, "cardiac": 77, "heart": 77, "96": 77, "Of": [77, 89], "next": [77, 85], "five": 77, "nn": 77, "kneighborsclassifierifittedkneighborsclassifi": 77, "84": [77, 89], "compris": [77, 84], "primari": [77, 88], "interact": 77, "desired_label": 77, "modifi": [77, 84], "find_counterfactu": 77, "y_desir": 77, "empty_lik": 77, "x_cf": 77, "cf_pred": 77, "7757554": 77, "04521294": 77, "12209986": 77, "41066892": 77, "51301643": 77, "13364922": 77, "4545415": 77, "8152728": 77, "36613719": 77, "59799892": 77, "6364614": 77, "66240546": 77, "37925246": 77, "4975822": 77, "87851584": 77, "5716536": 77, "05212617": 77, "33645889": 77, "now": [77, 93], "36": 77, "alongsid": 77, "propos": [77, 93], "rsf": 77, "shapeletforestclassifierifittedshapeletforestclassifi": [77, 83], "met": 77, "64275557": 77, "96522188": 77, "90476179": 77, "09269015": 77, "12069088": 77, "34982908": 77, "5807386": 77, "09711063": 77, "74405634": 77, "28666866": 77, "32964692": 77, "14763103": 77, "5347352": 77, "15122819": 77, "66537309": 77, "31634668": 77, "43290016": 77, "38359833": 77, "29476759": 77, "86093158": 77, "41918778": 77, "16256033": 77, "0061831": 77, "56791544": 77, "66077834": 77, "7870391": 77, "20106232": 77, "18811169": 77, "37941185": 77, "32272574": 77, "74926655": 77, "33281894": 77, "20372777": 77, "41850936": 77, "25302505": 77, "48742855": 77, "novemb": 77, "207": 77, "216": 77, "embrac": 78, "asarrai": 78, "produc": [78, 82], "rank": 78, "arr": 78, "shorter": [78, 79], "loos": 79, "obei": 79, "inequ": [79, 85], "distinct": 79, "gt": [79, 85], "ne": 79, "symmetr": 79, "sai": 79, "triangl": [79, 80], "lt": [79, 85], "shortcut": 79, "lp": 79, "shift": 79, "min_": 79, "notat": 79, "_elastic_": 79, "eleasticensembl": 79, "parameter_nam": 79, "max_": 79, "num_": 79, "inclus": 79, "instanti": 79, "proximitytreeclassifierinot": 79, "fittedproximitytreeclassifi": 79, "slide": 79, "moreov": 79, "comment": 79, "undefin": [79, 85], "chebyshev": [79, 80], "angular": [79, 80], "phase": 79, "wddtw": [79, 80], "longest": 79, "lcss": [79, 80], "edit": [79, 92], "edr": [79, 80], "twe": [79, 80], "edit_penalti": 79, "stiff": [79, 80], "lambda": 79, "nu": 79, "amerc": 79, "matthieu": 79, "herrmann": 79, "intuit": 79, "volum": 79, "137": 79, "hirschberg": 79, "1977": 79, "journal": 79, "jacm": 79, "chen": 79, "l": [79, 84], "ng": 79, "2004": 79, "marriag": 79, "thirtieth": 79, "\u00f6zsu": 79, "oria": 79, "2005": 79, "trajectori": 79, "manag": 79, "stefan": 79, "athitso": 79, "transact": 79, "1425": 79, "1438": 79, "marteau": 79, "2008": 79, "adjust": [79, 84], "analysi": [79, 83, 89], "306": 79, "318": 79, "_euclidean": 80, "51158857": 80, "11514381": 80, "35905618": 80, "mirror": 80, "imag": 80, "halv": 80, "advis": [80, 83], "tri": 80, "smart": 80, "85497117": 80, "96086309": 80, "18777928": 80, "00606825": 80, "23060212": 80, "27419835": 80, "64445581": 80, "38965963": 80, "79102936": 80, "59756098": 80, "47560976": 80, "64634146": 80, "08536585": 80, "03658537": 80, "13414634": 80, "09756098": 80, "25609756": 80, "12195122": 80, "76": 80, "20881199": 80, "73": 80, "62554784": 80, "88": 80, "5536877": 80, "27": [80, 84], "49142159": 80, "56024904": 80, "24551102": 80, "45513015": 80, "81": 80, "60658533": 80, "06099416": 80, "multitud": 80, "115143810620726": 80, "86658733": 80, "75622584": 80, "29468998": 80, "06939656": 80, "48683192": 80, "60301954": 80, "34083722": 80, "35954558": 80, "50507001": 80, "90920635": 80, "27646127": 80, "60041068": 80, "60786006": 80, "75645164": 80, "26677146": 80, "24823344": 80, "sometim": 80, "_pairs_": 80, "50816474": 80, "3299048": 80, "55193242": 80, "queri": 80, "q": 80, "mathcal": 80, "naiv": 80, "argmin": 80, "Or": 80, "want": [80, 92], "argpartit": 80, "276": 80, "254": 80, "120": 80, "85": 80, "244": 80, "282": 80, "101": 80, "277": 80, "270": 80, "217": 80, "204": 80, "274": 80, "109": 80, "213": 80, "146": 80, "208": 80, "193": 80, "246": 80, "111": 80, "255": 80, "earli": 80, "abandon": 80, "avoid": [80, 91], "roughli": 80, "faster": 80, "interdimension": 80, "similarli": [80, 85], "interest": 80, "slice": 80, "unwant": 80, "limits_": 80, "le": 80, "counterpart": 80, "_threshold_": 80, "jag": 80, "66371456": 80, "11914265": 80, "13076667": 80, "99043671": 80, "73408875": 80, "84227457": 80, "2028058": 80, "17725071": 80, "85972633": 80, "81245725": 80, "85367621": 80, "59786396": 80, "86957415": 80, "65083422": 80, "64041732": 80, "38897019": 80, "33156061": 80, "06460666": 80, "56698045": 80, "99489626": 80, "6790517": 80, "16754772": 80, "10973127": 80, "50583639": 80, "pairwise_sd_ful": 80, "stack": 80, "21688671": 80, "83210644": 80, "50884094": 80, "18507116": 80, "11177626": 80, "15611733": 80, "21780536": 80, "13350353": 80, "09710811": 80, "75114125": 80, "13489775": 80, "09806374": 80, "idx": 80, "28": 80, "notabl": [80, 84], "crucial": 80, "encompass": 80, "cpu": 80, "effici": [80, 90, 93], "upon": [80, 85], "examin": 80, "variou": [80, 85], "theoret": 80, "complex": [80, 83], "evid": 80, "magnitud": 80, "97686": 80, "87686": 80, "98368": 80, "98282": 80, "11131": 80, "98268": 80, "95506": 80, "14157": 80, "96041": 80, "94631": 80, "83231": 80, "92207": 80, "55527": 80, "73285": 80, "55538": 80, "41892": 80, "40887": 80, "42778": 80, "00061": 80, "00104": 80, "00064": 80, "wlcss": 80, "00054": 80, "00091": 80, "00056": 80, "00030": 80, "00052": 80, "00032": 80, "00028": 80, "00048": 80, "00029": 80, "00021": 80, "00035": 80, "00022": 80, "00019": 80, "82372": 80, "49048": 80, "79202": 80, "66394": 80, "75967": 80, "67113": 80, "56287": 80, "61275": 80, "56196": 80, "text": 80, "49453": 80, "59627": 80, "49988": 80, "42765": 80, "58025": 80, "43553": 80, "42761": 80, "58982": 80, "43474": 80, "21051": 80, "33659": 80, "21757": 80, "06851": 80, "10321": 80, "07092": 80, "00216": 80, "00413": 80, "00226": 80, "00146": 80, "00278": 80, "00153": 80, "00102": 80, "00195": 80, "00107": 80, "00194": 80, "00106": 80, "00099": 80, "00190": 80, "00189": 80, "00103": 80, "00097": 80, "00185": 80, "00101": 80, "00096": 80, "00182": 80, "00100": 80, "00095": 80, "00181": 80, "00071": 80, "00136": 80, "00074": 80, "rakthanmanon": 80, "campana": 80, "mueen": 80, "batista": 80, "westov": 80, "zhu": 80, "zakaria": 80, "2012": 80, "august": 80, "trillion": 80, "under": [80, 92], "18th": 80, "262": 80, "concurr": 80, "consequ": [80, 84], "observ": [80, 85], "short": 80, "thread": 80, "actual": 80, "overal": 80, "ci": 80, "server": 80, "reflect": 80, "gain": 80, "discuss": 80, "far": 80, "enabl": [80, 84, 89, 93], "perf_count": 80, "0628119359998891": 80, "1281750540001667": 80, "my": 80, "laptop": 80, "macbook": 80, "equip": 80, "m2": 80, "40": 80, "millisecond": 80, "160": 80, "varieti": 83, "excel": 83, "baselin": [83, 93], "alloc": 83, "highli": 83, "proximityforestclassifierifittedproximityforestclassifi": 83, "paper": 83, "9666666666666667": 83, "8533333333333334": 83, "9733333333333334": 83, "elasticensembleclassifierifittedelasticensembleclassifi": 83, "superset": 83, "deng": 83, "formul": 83, "But": 83, "intervalforestclassifierifittedintervalforestclassifi": 83, "mention": 83, "9466666666666667": 83, "compar": 83, "runger": 83, "tuv": 83, "vladimir": 83, "239": 83, "142": 83, "153": 83, "ridgeclassifiercv": 84, "discriminatori": 84, "990342405618964": 84, "scaled_manhattan": 84, "metric_specif": 84, "limit": 84, "9991220368744512": 84, "character": 84, "recent": 84, "triad": 84, "rather": 84, "singular": 84, "furthermor": [84, 89], "dst": 84, "therebi": 84, "recept": 84, "field": 84, "9982440737489026": 84, "odd": 84, "likelihood": 84, "undergo": 84, "9929762949956101": 84, "ascertain": 84, "techniqu": 84, "analog": 84, "akin": 84, "princip": [84, 89], "tunabl": 84, "influenti": 84, "enhanc": [84, 93], "competit": 84, "1024": 84, "resembl": 84, "elimin": 84, "increment": 84, "doubl": 84, "128": 84, "june": 84, "653": 84, "664": 84, "lee": 84, "2024": 84, "forthcom": 84, "variant": 85, "fashion": 85, "correspondingli": 85, "shapelettreeclassifierifittedshapelettreeclassifi": 85, "built": [85, 91], "poor": 85, "77": 85, "89": 85, "intervaltreeclassifierifittedintervaltreeclassifi": 85, "83": 85, "78": 85, "94": 85, "0x7fe659947530": 85, "abl": 85, "degrad": 85, "entir": 85, "id": 85, "after": 85, "right": 85, "attr": 85, "weighted_n_node_sampl": 85, "wheight": 85, "obtain": 85, "termin": 85, "95": 85, "node_ind": 85, "leaf_id": 85, "sample_id": 85, "goe": 85, "node_index": 85, "indptr": 85, "node_id": 85, "threshold_sign": 85, "els": 85, "1344171278001063": 85, "9142979223080065": 85, "0061231459189364": 85, "8250243865539288": 85, "four": [85, 88, 93], "displai": 85, "leftmost": 85, "22": 85, "criteria": 85, "taken": 85, "91": 85, "signifi": 85, "chosen": 85, "pred": 85, "emmott_label": 88, "pip": [88, 91, 92], "oppos": 88, "perhap": 88, "minority_label": 88, "majority_label": 88, "sophist": 88, "randomforestclassifi": 88, "75": 88, "quantil": 88, "dempsar": 89, "sligtli": 89, "manner": 89, "activ": [89, 91], "exponenti": 89, "had": 89, "motestrain": 89, "954": 89, "510": 89, "444": 89, "wherein": 89, "dictat": 89, "stage": 89, "scaler": 89, "compens": 89, "sparsiti": 89, "induc": 89, "exhibit": 89, "ultim": 89, "ridg": 89, "hydratransformhydratransform": 89, "sparsescalersparsescal": 89, "x_test_transform": 89, "53921955": 89, "39192971": 89, "60035454": 89, "36929508": 89, "5286341": 89, "08999765": 89, "4096": 89, "pca": 89, "account": 89, "04": 89, "17": [89, 93], "process": [89, 92], "rockettransformrockettransform": 89, "standardscalerstandardscal": 89, "38903789": 89, "04428036": 89, "51839431": 89, "56898041": 89, "41221076": 89, "39563914": 89, "whose": 89, "35": 89, "59": 89, "familiar": 90, "introduct": 90, "concept": 90, "There": 91, "offici": 91, "pypi": 91, "compil": [91, 92], "fastest": 91, "platform": 91, "write": 91, "conflict": 91, "strongli": 91, "virtual": [91, 92], "venv": 91, "python3": [91, 92], "folder": 91, "ceavet": 91, "outsid": 91, "scope": 91, "issu": 91, "debian": [91, 92], "apt": [91, 92], "homebrew": 91, "brew": 91, "anaconda": 91, "miniconda": 91, "pull": 92, "git": 92, "com": 92, "isaksamsten": 92, "tool": 92, "studio": 92, "command": 92, "cmd": 92, "consol": 92, "distutils_use_sdk": 92, "program": 92, "x86": 92, "microsoft": 92, "buildtool": 92, "vc": 92, "auxiliari": 92, "vcvarsal": 92, "bat": 92, "x64": 92, "xcode": 92, "ubuntu": 92, "dev": 92, "txt": 92, "mode": 92, "eas": 92, "wildboar_build": 92, "architectur": 92, "someth": 93, "couldn": 93, "miscellan": 93, "didn": 93, "scipi": 93, "mult": 93, "hyper": 93}, "objects": {"": [[33, 0, 0, "-", "wildboar"]], "wildboar": [[3, 0, 0, "-", "annotate"], [4, 0, 0, "-", "base"], [7, 0, 0, "-", "datasets"], [14, 0, 0, "-", "dimension_selection"], [21, 0, 0, "-", "distance"], [24, 0, 0, "-", "ensemble"], [32, 0, 0, "-", "explain"], [38, 0, 0, "-", "linear_model"], [41, 0, 0, "-", "metrics"], [44, 0, 0, "-", "model_selection"], [55, 0, 0, "-", "transform"], [60, 0, 0, "-", "tree"], [65, 0, 0, "-", "utils"], [69, 0, 0, "-", "version"]], "wildboar.annotate": [[1, 0, 0, "-", "_motifs"], [2, 0, 0, "-", "_segment"], [3, 1, 1, "", "motifs"], [3, 1, 1, "", "segment"]], "wildboar.annotate._motifs": [[1, 1, 1, "", "motifs"]], "wildboar.annotate._segment": [[2, 1, 1, "", "segment"]], "wildboar.base": [[4, 2, 1, "", "BaseEstimator"], [4, 2, 1, "", "CounterfactualMixin"], [4, 2, 1, "", "ExplainerMixin"], [4, 1, 1, "", "is_counterfactual"], [4, 1, 1, "", "is_explainer"]], "wildboar.base.BaseEstimator": [[4, 3, 1, "", "get_metadata_routing"], [4, 3, 1, "", "get_params"], [4, 3, 1, "", "set_params"]], "wildboar.base.CounterfactualMixin": [[4, 3, 1, "", "score"]], "wildboar.base.ExplainerMixin": [[4, 3, 1, "", "fit_explain"], [4, 3, 1, "", "plot"]], "wildboar.datasets": [[7, 2, 1, "", "Bundle"], [7, 2, 1, "", "JSONRepository"], [7, 2, 1, "", "NpBundle"], [7, 2, 1, "", "Repository"], [5, 0, 0, "-", "_filter"], [6, 0, 0, "-", "_repository"], [7, 1, 1, "", "clear_cache"], [7, 1, 1, "", "get_bundles"], [7, 1, 1, "", "get_repository"], [7, 1, 1, "", "install_repository"], [7, 1, 1, "", "list_bundles"], [7, 1, 1, "", "list_collections"], [7, 1, 1, "", "list_datasets"], [7, 1, 1, "", "list_repositories"], [7, 1, 1, "", "load_articulary_word_recognition"], [7, 1, 1, "", "load_basic_motions"], [7, 1, 1, "", "load_dataset"], [7, 1, 1, "", "load_datasets"], [7, 1, 1, "", "load_ering"], [7, 1, 1, "", "load_gun_point"], [7, 1, 1, "", "load_synthetic_control"], [7, 1, 1, "", "load_two_lead_ecg"], [8, 0, 0, "-", "outlier"], [9, 0, 0, "-", "preprocess"], [7, 1, 1, "", "refresh_repositories"], [7, 1, 1, "", "set_cache_dir"]], "wildboar.datasets.Bundle": [[7, 3, 1, "", "get_collection"], [7, 3, 1, "", "get_filename"], [7, 3, 1, "", "list"], [7, 3, 1, "", "load"]], "wildboar.datasets.JSONRepository": [[7, 4, 1, "", "download_url"], [7, 3, 1, "", "get_bundle"], [7, 3, 1, "", "get_bundles"], [7, 4, 1, "", "name"], [7, 3, 1, "", "refresh"], [7, 4, 1, "", "version"], [7, 4, 1, "", "wildboar_requires"]], "wildboar.datasets.NpBundle": [[7, 3, 1, "", "get_collection"], [7, 3, 1, "", "get_filename"], [7, 3, 1, "", "list"], [7, 3, 1, "", "load"]], "wildboar.datasets.Repository": [[7, 4, 1, "", "download_url"], [7, 3, 1, "", "get_bundle"], [7, 3, 1, "", "get_bundles"], [7, 4, 1, "", "name"], [7, 3, 1, "", "refresh"], [7, 4, 1, "", "version"], [7, 4, 1, "", "wildboar_requires"]], "wildboar.datasets._filter": [[5, 1, 1, "", "make_dict_filter"], [5, 1, 1, "", "make_filter"], [5, 1, 1, "", "make_list_filter"], [5, 1, 1, "", "make_str_filter"]], "wildboar.datasets._repository": [[6, 2, 1, "", "Bundle"], [6, 2, 1, "", "JSONRepository"], [6, 2, 1, "", "NpBundle"], [6, 2, 1, "", "Repository"]], "wildboar.datasets._repository.Bundle": [[6, 3, 1, "", "get_collection"], [6, 3, 1, "", "get_filename"], [6, 3, 1, "", "list"], [6, 3, 1, "", "load"]], "wildboar.datasets._repository.JSONRepository": [[6, 4, 1, "", "download_url"], [6, 3, 1, "", "get_bundle"], [6, 3, 1, "", "get_bundles"], [6, 4, 1, "", "name"], [6, 3, 1, "", "refresh"], [6, 4, 1, "", "version"], [6, 4, 1, "", "wildboar_requires"]], "wildboar.datasets._repository.NpBundle": [[6, 3, 1, "", "get_collection"], [6, 3, 1, "", "get_filename"], [6, 3, 1, "", "list"], [6, 3, 1, "", "load"]], "wildboar.datasets._repository.Repository": [[6, 4, 1, "", "download_url"], [6, 3, 1, "", "get_bundle"], [6, 3, 1, "", "get_bundles"], [6, 4, 1, "", "name"], [6, 3, 1, "", "refresh"], [6, 4, 1, "", "version"], [6, 4, 1, "", "wildboar_requires"]], "wildboar.datasets.outlier": [[8, 1, 1, "", "density_outliers"], [8, 1, 1, "", "emmott_outliers"], [8, 1, 1, "", "kmeans_outliers"], [8, 1, 1, "", "majority_outliers"], [8, 1, 1, "", "minority_outliers"]], "wildboar.datasets.preprocess": [[9, 1, 1, "", "maxabs_scale"], [9, 1, 1, "", "minmax_scale"], [9, 1, 1, "", "named_preprocess"], [9, 1, 1, "", "standardize"], [9, 1, 1, "", "truncate"]], "wildboar.dimension_selection": [[14, 2, 1, "", "DistanceVarianceThreshold"], [14, 2, 1, "", "SelectDimensionPercentile"], [14, 2, 1, "", "SelectDimensionSignificance"], [14, 2, 1, "", "SelectDimensionTopK"], [14, 2, 1, "", "SequentialDimensionSelector"], [10, 0, 0, "-", "_base"], [11, 0, 0, "-", "_distance"], [12, 0, 0, "-", "_sequential"], [13, 0, 0, "-", "_variance"]], "wildboar.dimension_selection.DistanceVarianceThreshold": [[14, 3, 1, "", "fit"], [14, 3, 1, "", "fit_transform"], [14, 3, 1, "", "get_dimensions"], [14, 3, 1, "", "get_metadata_routing"], [14, 3, 1, "", "get_params"], [14, 3, 1, "", "inverse_transform"], [14, 3, 1, "", "set_output"], [14, 3, 1, "", "set_params"], [14, 3, 1, "", "transform"]], "wildboar.dimension_selection.SelectDimensionPercentile": [[14, 3, 1, "", "fit"], [14, 3, 1, "", "fit_transform"], [14, 3, 1, "", "get_dimensions"], [14, 3, 1, "", "get_metadata_routing"], [14, 3, 1, "", "get_params"], [14, 3, 1, "", "inverse_transform"], [14, 3, 1, "", "set_output"], [14, 3, 1, "", "set_params"], [14, 3, 1, "", "transform"]], "wildboar.dimension_selection.SelectDimensionSignificance": [[14, 3, 1, "", "fit"], [14, 3, 1, "", "fit_transform"], [14, 3, 1, "", "get_dimensions"], [14, 3, 1, "", "get_metadata_routing"], [14, 3, 1, "", "get_params"], [14, 3, 1, "", "inverse_transform"], [14, 3, 1, "", "set_output"], [14, 3, 1, "", "set_params"], [14, 3, 1, "", "transform"]], "wildboar.dimension_selection.SelectDimensionTopK": [[14, 3, 1, "", "fit"], [14, 3, 1, "", "fit_transform"], [14, 3, 1, "", "get_dimensions"], [14, 3, 1, "", "get_metadata_routing"], [14, 3, 1, "", "get_params"], [14, 3, 1, "", "inverse_transform"], [14, 3, 1, "", "set_output"], [14, 3, 1, "", "set_params"], [14, 3, 1, "", "transform"]], "wildboar.dimension_selection.SequentialDimensionSelector": [[14, 3, 1, "", "fit"], [14, 3, 1, "", "fit_transform"], [14, 3, 1, "", "get_dimensions"], [14, 3, 1, "", "get_metadata_routing"], [14, 3, 1, "", "get_params"], [14, 3, 1, "", "inverse_transform"], [14, 3, 1, "", "set_output"], [14, 3, 1, "", "set_params"], [14, 3, 1, "", "transform"]], "wildboar.dimension_selection._base": [[10, 2, 1, "", "BaseDistanceSelector"], [10, 2, 1, "", "DimensionSelectorMixin"]], "wildboar.dimension_selection._base.BaseDistanceSelector": [[10, 3, 1, "", "fit"], [10, 3, 1, "", "fit_transform"], [10, 3, 1, "", "get_dimensions"], [10, 3, 1, "", "get_metadata_routing"], [10, 3, 1, "", "get_params"], [10, 3, 1, "", "inverse_transform"], [10, 3, 1, "", "set_output"], [10, 3, 1, "", "set_params"], [10, 3, 1, "", "transform"]], "wildboar.dimension_selection._base.DimensionSelectorMixin": [[10, 3, 1, "", "fit_transform"], [10, 3, 1, "", "get_dimensions"], [10, 3, 1, "", "inverse_transform"], [10, 3, 1, "", "set_output"], [10, 3, 1, "", "transform"]], "wildboar.dimension_selection._distance": [[11, 2, 1, "", "SelectDimensionPercentile"], [11, 2, 1, "", "SelectDimensionSignificance"], [11, 2, 1, "", "SelectDimensionTopK"]], "wildboar.dimension_selection._distance.SelectDimensionPercentile": [[11, 3, 1, "", "fit"], [11, 3, 1, "", "fit_transform"], [11, 3, 1, "", "get_dimensions"], [11, 3, 1, "", "get_metadata_routing"], [11, 3, 1, "", "get_params"], [11, 3, 1, "", "inverse_transform"], [11, 3, 1, "", "set_output"], [11, 3, 1, "", "set_params"], [11, 3, 1, "", "transform"]], "wildboar.dimension_selection._distance.SelectDimensionSignificance": [[11, 3, 1, "", "fit"], [11, 3, 1, "", "fit_transform"], [11, 3, 1, "", "get_dimensions"], [11, 3, 1, "", "get_metadata_routing"], [11, 3, 1, "", "get_params"], [11, 3, 1, "", "inverse_transform"], [11, 3, 1, "", "set_output"], [11, 3, 1, "", "set_params"], [11, 3, 1, "", "transform"]], "wildboar.dimension_selection._distance.SelectDimensionTopK": [[11, 3, 1, "", "fit"], [11, 3, 1, "", "fit_transform"], [11, 3, 1, "", "get_dimensions"], [11, 3, 1, "", "get_metadata_routing"], [11, 3, 1, "", "get_params"], [11, 3, 1, "", "inverse_transform"], [11, 3, 1, "", "set_output"], [11, 3, 1, "", "set_params"], [11, 3, 1, "", "transform"]], "wildboar.dimension_selection._sequential": [[12, 2, 1, "", "SequentialDimensionSelector"]], "wildboar.dimension_selection._sequential.SequentialDimensionSelector": [[12, 3, 1, "", "fit"], [12, 3, 1, "", "fit_transform"], [12, 3, 1, "", "get_dimensions"], [12, 3, 1, "", "get_metadata_routing"], [12, 3, 1, "", "get_params"], [12, 3, 1, "", "inverse_transform"], [12, 3, 1, "", "set_output"], [12, 3, 1, "", "set_params"], [12, 3, 1, "", "transform"]], "wildboar.dimension_selection._variance": [[13, 2, 1, "", "DistanceVarianceThreshold"]], "wildboar.dimension_selection._variance.DistanceVarianceThreshold": [[13, 3, 1, "", "fit"], [13, 3, 1, "", "fit_transform"], [13, 3, 1, "", "get_dimensions"], [13, 3, 1, "", "get_metadata_routing"], [13, 3, 1, "", "get_params"], [13, 3, 1, "", "inverse_transform"], [13, 3, 1, "", "set_output"], [13, 3, 1, "", "set_params"], [13, 3, 1, "", "transform"]], "wildboar.distance": [[21, 2, 1, "", "KMeans"], [21, 2, 1, "", "KMedoids"], [21, 2, 1, "", "KNeighborsClassifier"], [21, 2, 1, "", "MDS"], [15, 0, 0, "-", "_distance"], [16, 0, 0, "-", "_manifold"], [17, 0, 0, "-", "_matrix_profile"], [18, 0, 0, "-", "_multi_metric"], [19, 0, 0, "-", "_neighbors"], [21, 1, 1, "", "argmin_distance"], [21, 1, 1, "", "argmin_subsequence_distance"], [21, 1, 1, "", "distance_profile"], [20, 0, 0, "-", "dtw"], [21, 1, 1, "", "matrix_profile"], [21, 1, 1, "", "paired_distance"], [21, 1, 1, "", "paired_subsequence_distance"], [21, 1, 1, "", "paired_subsequence_match"], [21, 1, 1, "", "pairwise_distance"], [21, 1, 1, "", "pairwise_subsequence_distance"], [21, 1, 1, "", "subsequence_match"]], "wildboar.distance.KMeans": [[21, 3, 1, "", "fit"], [21, 3, 1, "", "fit_predict"], [21, 3, 1, "", "fit_transform"], [21, 3, 1, "", "get_metadata_routing"], [21, 3, 1, "", "get_params"], [21, 3, 1, "", "predict"], [21, 3, 1, "", "set_output"], [21, 3, 1, "", "set_params"], [21, 3, 1, "", "transform"]], "wildboar.distance.KMedoids": [[21, 3, 1, "", "fit"], [21, 3, 1, "", "fit_predict"], [21, 3, 1, "", "fit_transform"], [21, 3, 1, "", "get_metadata_routing"], [21, 3, 1, "", "get_params"], [21, 3, 1, "", "predict"], [21, 3, 1, "", "set_output"], [21, 3, 1, "", "set_params"], [21, 3, 1, "", "transform"]], "wildboar.distance.KNeighborsClassifier": [[21, 3, 1, "", "fit"], [21, 3, 1, "", "get_metadata_routing"], [21, 3, 1, "", "get_params"], [21, 3, 1, "", "predict"], [21, 3, 1, "", "predict_proba"], [21, 3, 1, "", "score"], [21, 3, 1, "", "set_params"]], "wildboar.distance.MDS": [[21, 3, 1, "", "get_metadata_routing"], [21, 3, 1, "", "get_params"], [21, 3, 1, "", "set_params"]], "wildboar.distance._distance": [[15, 1, 1, "", "argmin_distance"], [15, 1, 1, "", "argmin_subsequence_distance"], [15, 1, 1, "", "distance_profile"], [15, 1, 1, "", "paired_distance"], [15, 1, 1, "", "paired_subsequence_distance"], [15, 1, 1, "", "paired_subsequence_match"], [15, 1, 1, "", "pairwise_distance"], [15, 1, 1, "", "pairwise_subsequence_distance"], [15, 1, 1, "", "subsequence_match"]], "wildboar.distance._manifold": [[16, 2, 1, "", "MDS"]], "wildboar.distance._manifold.MDS": [[16, 3, 1, "", "get_metadata_routing"], [16, 3, 1, "", "get_params"], [16, 3, 1, "", "set_params"]], "wildboar.distance._matrix_profile": [[17, 1, 1, "", "matrix_profile"]], "wildboar.distance._neighbors": [[19, 2, 1, "", "KMeans"], [19, 2, 1, "", "KMedoids"], [19, 2, 1, "", "KNeighborsClassifier"]], "wildboar.distance._neighbors.KMeans": [[19, 3, 1, "", "fit"], [19, 3, 1, "", "fit_predict"], [19, 3, 1, "", "fit_transform"], [19, 3, 1, "", "get_metadata_routing"], [19, 3, 1, "", "get_params"], [19, 3, 1, "", "predict"], [19, 3, 1, "", "set_output"], [19, 3, 1, "", "set_params"], [19, 3, 1, "", "transform"]], "wildboar.distance._neighbors.KMedoids": [[19, 3, 1, "", "fit"], [19, 3, 1, "", "fit_predict"], [19, 3, 1, "", "fit_transform"], [19, 3, 1, "", "get_metadata_routing"], [19, 3, 1, "", "get_params"], [19, 3, 1, "", "predict"], [19, 3, 1, "", "set_output"], [19, 3, 1, "", "set_params"], [19, 3, 1, "", "transform"]], "wildboar.distance._neighbors.KNeighborsClassifier": [[19, 3, 1, "", "fit"], [19, 3, 1, "", "get_metadata_routing"], [19, 3, 1, "", "get_params"], [19, 3, 1, "", "predict"], [19, 3, 1, "", "predict_proba"], [19, 3, 1, "", "score"], [19, 3, 1, "", "set_params"]], "wildboar.distance.dtw": [[20, 1, 1, "", "ddtw_distance"], [20, 1, 1, "", "dtw_alignment"], [20, 1, 1, "", "dtw_average"], [20, 1, 1, "", "dtw_distance"], [20, 1, 1, "", "dtw_envelop"], [20, 1, 1, "", "dtw_lb_keogh"], [20, 1, 1, "", "dtw_mapping"], [20, 1, 1, "", "jeong_weight"], [20, 1, 1, "", "wddtw_distance"], [20, 1, 1, "", "wdtw_alignment"], [20, 1, 1, "", "wdtw_distance"]], "wildboar.ensemble": [[24, 2, 1, "", "BaggingClassifier"], [24, 2, 1, "", "BaggingRegressor"], [24, 2, 1, "", "BaseBagging"], [24, 2, 1, "", "ElasticEnsembleClassifier"], [24, 2, 1, "", "ExtraShapeletTreesClassifier"], [24, 2, 1, "", "ExtraShapeletTreesRegressor"], [24, 2, 1, "", "IntervalForestClassifier"], [24, 2, 1, "", "IntervalForestRegressor"], [24, 2, 1, "", "IsolationShapeletForest"], [24, 2, 1, "", "PivotForestClassifier"], [24, 2, 1, "", "ProximityForestClassifier"], [24, 2, 1, "", "RocketForestClassifier"], [24, 2, 1, "", "RocketForestRegressor"], [24, 2, 1, "", "ShapeletForestClassifier"], [24, 2, 1, "", "ShapeletForestEmbedding"], [24, 2, 1, "", "ShapeletForestRegressor"], [22, 0, 0, "-", "_elastic"], [23, 0, 0, "-", "_ensemble"]], "wildboar.ensemble.BaggingClassifier": [[24, 3, 1, "", "decision_function"], [24, 4, 1, "", "estimators_samples_"], [24, 3, 1, "", "fit"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "predict"], [24, 3, 1, "", "predict_log_proba"], [24, 3, 1, "", "predict_proba"], [24, 3, 1, "", "score"], [24, 3, 1, "", "set_params"]], "wildboar.ensemble.BaggingRegressor": [[24, 4, 1, "", "estimators_samples_"], [24, 3, 1, "", "fit"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "predict"], [24, 3, 1, "", "score"], [24, 3, 1, "", "set_params"]], "wildboar.ensemble.BaseBagging": [[24, 4, 1, "", "estimators_samples_"], [24, 3, 1, "", "fit"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "set_params"]], "wildboar.ensemble.ElasticEnsembleClassifier": [[24, 3, 1, "", "fit"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "predict"], [24, 3, 1, "", "predict_proba"], [24, 3, 1, "", "score"], [24, 3, 1, "", "set_params"]], "wildboar.ensemble.ExtraShapeletTreesClassifier": [[24, 3, 1, "", "decision_function"], [24, 4, 1, "", "estimators_samples_"], [24, 3, 1, "", "fit"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "predict"], [24, 3, 1, "", "predict_log_proba"], [24, 3, 1, "", "predict_proba"], [24, 3, 1, "", "score"], [24, 3, 1, "", "set_params"]], "wildboar.ensemble.ExtraShapeletTreesRegressor": [[24, 4, 1, "", "estimators_samples_"], [24, 3, 1, "", "fit"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "predict"], [24, 3, 1, "", "score"], [24, 3, 1, "", "set_params"]], "wildboar.ensemble.IntervalForestClassifier": [[24, 3, 1, "", "decision_function"], [24, 4, 1, "", "estimators_samples_"], [24, 3, 1, "", "fit"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "predict"], [24, 3, 1, "", "predict_log_proba"], [24, 3, 1, "", "predict_proba"], [24, 3, 1, "", "score"], [24, 3, 1, "", "set_params"]], "wildboar.ensemble.IntervalForestRegressor": [[24, 4, 1, "", "estimators_samples_"], [24, 3, 1, "", "fit"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "predict"], [24, 3, 1, "", "score"], [24, 3, 1, "", "set_params"]], "wildboar.ensemble.IsolationShapeletForest": [[24, 4, 1, "", "estimators_samples_"], [24, 3, 1, "", "fit"], [24, 3, 1, "", "fit_predict"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "set_params"]], "wildboar.ensemble.PivotForestClassifier": [[24, 3, 1, "", "decision_function"], [24, 4, 1, "", "estimators_samples_"], [24, 3, 1, "", "fit"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "predict"], [24, 3, 1, "", "predict_log_proba"], [24, 3, 1, "", "predict_proba"], [24, 3, 1, "", "score"], [24, 3, 1, "", "set_params"]], "wildboar.ensemble.ProximityForestClassifier": [[24, 3, 1, "", "decision_function"], [24, 4, 1, "", "estimators_samples_"], [24, 3, 1, "", "fit"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "predict"], [24, 3, 1, "", "predict_log_proba"], [24, 3, 1, "", "predict_proba"], [24, 3, 1, "", "score"], [24, 3, 1, "", "set_params"]], "wildboar.ensemble.RocketForestClassifier": [[24, 3, 1, "", "decision_function"], [24, 4, 1, "", "estimators_samples_"], [24, 3, 1, "", "fit"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "predict"], [24, 3, 1, "", "predict_log_proba"], [24, 3, 1, "", "predict_proba"], [24, 3, 1, "", "score"], [24, 3, 1, "", "set_params"]], "wildboar.ensemble.RocketForestRegressor": [[24, 4, 1, "", "estimators_samples_"], [24, 3, 1, "", "fit"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "predict"], [24, 3, 1, "", "score"], [24, 3, 1, "", "set_params"]], "wildboar.ensemble.ShapeletForestClassifier": [[24, 3, 1, "", "decision_function"], [24, 4, 1, "", "estimators_samples_"], [24, 3, 1, "", "fit"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "predict"], [24, 3, 1, "", "predict_log_proba"], [24, 3, 1, "", "predict_proba"], [24, 3, 1, "", "score"], [24, 3, 1, "", "set_params"]], "wildboar.ensemble.ShapeletForestEmbedding": [[24, 4, 1, "", "estimators_samples_"], [24, 3, 1, "", "fit"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "predict"], [24, 3, 1, "", "score"], [24, 3, 1, "", "set_params"]], "wildboar.ensemble.ShapeletForestRegressor": [[24, 4, 1, "", "estimators_samples_"], [24, 3, 1, "", "fit"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "predict"], [24, 3, 1, "", "score"], [24, 3, 1, "", "set_params"]], "wildboar.ensemble._elastic": [[22, 2, 1, "", "ElasticEnsembleClassifier"]], "wildboar.ensemble._elastic.ElasticEnsembleClassifier": [[22, 3, 1, "", "fit"], [22, 3, 1, "", "get_metadata_routing"], [22, 3, 1, "", "get_params"], [22, 3, 1, "", "predict"], [22, 3, 1, "", "predict_proba"], [22, 3, 1, "", "score"], [22, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble": [[23, 2, 1, "", "BaggingClassifier"], [23, 2, 1, "", "BaggingRegressor"], [23, 2, 1, "", "BaseBagging"], [23, 2, 1, "", "BaseForestClassifier"], [23, 2, 1, "", "BaseForestRegressor"], [23, 2, 1, "", "BaseShapeletForestClassifier"], [23, 2, 1, "", "BaseShapeletForestRegressor"], [23, 2, 1, "", "ExtraShapeletTreesClassifier"], [23, 2, 1, "", "ExtraShapeletTreesRegressor"], [23, 2, 1, "", "ForestMixin"], [23, 2, 1, "", "IntervalForestClassifier"], [23, 2, 1, "", "IntervalForestRegressor"], [23, 2, 1, "", "IsolationShapeletForest"], [23, 2, 1, "", "PivotForestClassifier"], [23, 2, 1, "", "ProximityForestClassifier"], [23, 2, 1, "", "RocketForestClassifier"], [23, 2, 1, "", "RocketForestRegressor"], [23, 2, 1, "", "ShapeletForestClassifier"], [23, 2, 1, "", "ShapeletForestEmbedding"], [23, 2, 1, "", "ShapeletForestRegressor"]], "wildboar.ensemble._ensemble.BaggingClassifier": [[23, 3, 1, "", "decision_function"], [23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "predict"], [23, 3, 1, "", "predict_log_proba"], [23, 3, 1, "", "predict_proba"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.BaggingRegressor": [[23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "predict"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.BaseBagging": [[23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.BaseForestClassifier": [[23, 3, 1, "", "decision_function"], [23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "predict"], [23, 3, 1, "", "predict_log_proba"], [23, 3, 1, "", "predict_proba"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.BaseForestRegressor": [[23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "predict"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.BaseShapeletForestClassifier": [[23, 3, 1, "", "decision_function"], [23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "predict"], [23, 3, 1, "", "predict_log_proba"], [23, 3, 1, "", "predict_proba"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.BaseShapeletForestRegressor": [[23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "predict"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier": [[23, 3, 1, "", "decision_function"], [23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "predict"], [23, 3, 1, "", "predict_log_proba"], [23, 3, 1, "", "predict_proba"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.ExtraShapeletTreesRegressor": [[23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "predict"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.IntervalForestClassifier": [[23, 3, 1, "", "decision_function"], [23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "predict"], [23, 3, 1, "", "predict_log_proba"], [23, 3, 1, "", "predict_proba"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.IntervalForestRegressor": [[23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "predict"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.IsolationShapeletForest": [[23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "fit_predict"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.PivotForestClassifier": [[23, 3, 1, "", "decision_function"], [23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "predict"], [23, 3, 1, "", "predict_log_proba"], [23, 3, 1, "", "predict_proba"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.ProximityForestClassifier": [[23, 3, 1, "", "decision_function"], [23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "predict"], [23, 3, 1, "", "predict_log_proba"], [23, 3, 1, "", "predict_proba"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.RocketForestClassifier": [[23, 3, 1, "", "decision_function"], [23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "predict"], [23, 3, 1, "", "predict_log_proba"], [23, 3, 1, "", "predict_proba"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.RocketForestRegressor": [[23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "predict"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.ShapeletForestClassifier": [[23, 3, 1, "", "decision_function"], [23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "predict"], [23, 3, 1, "", "predict_log_proba"], [23, 3, 1, "", "predict_proba"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.ShapeletForestEmbedding": [[23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "predict"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.ShapeletForestRegressor": [[23, 4, 1, "", "estimators_samples_"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "predict"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.explain": [[32, 2, 1, "", "AmplitudeImportance"], [32, 2, 1, "", "FrequencyImportance"], [32, 2, 1, "", "IntervalImportance"], [32, 2, 1, "", "ShapeletImportance"], [25, 0, 0, "-", "_importance"], [31, 0, 0, "-", "counterfactual"], [32, 1, 1, "", "plot_importances"]], "wildboar.explain.AmplitudeImportance": [[32, 3, 1, "", "fit_explain"], [32, 3, 1, "", "get_metadata_routing"], [32, 3, 1, "", "get_params"], [32, 3, 1, "", "plot"], [32, 3, 1, "", "set_params"]], "wildboar.explain.FrequencyImportance": [[32, 3, 1, "", "fit_explain"], [32, 3, 1, "", "get_metadata_routing"], [32, 3, 1, "", "get_params"], [32, 3, 1, "", "plot"], [32, 3, 1, "", "set_params"]], "wildboar.explain.IntervalImportance": [[32, 3, 1, "", "fit_explain"], [32, 3, 1, "", "get_metadata_routing"], [32, 3, 1, "", "get_params"], [32, 3, 1, "", "plot"], [32, 3, 1, "", "set_params"]], "wildboar.explain.ShapeletImportance": [[32, 3, 1, "", "fit_explain"], [32, 3, 1, "", "get_metadata_routing"], [32, 3, 1, "", "get_params"], [32, 3, 1, "", "plot"], [32, 3, 1, "", "set_params"]], "wildboar.explain._importance": [[25, 2, 1, "", "AmplitudeImportance"], [25, 2, 1, "", "FrequencyImportance"], [25, 2, 1, "", "IntervalImportance"], [25, 2, 1, "", "PermuteImportance"], [25, 2, 1, "", "ShapeletImportance"], [25, 1, 1, "", "plot_importances"]], "wildboar.explain._importance.AmplitudeImportance": [[25, 3, 1, "", "fit_explain"], [25, 3, 1, "", "get_metadata_routing"], [25, 3, 1, "", "get_params"], [25, 3, 1, "", "plot"], [25, 3, 1, "", "set_params"]], "wildboar.explain._importance.FrequencyImportance": [[25, 3, 1, "", "fit_explain"], [25, 3, 1, "", "get_metadata_routing"], [25, 3, 1, "", "get_params"], [25, 3, 1, "", "plot"], [25, 3, 1, "", "set_params"]], "wildboar.explain._importance.IntervalImportance": [[25, 3, 1, "", "fit_explain"], [25, 3, 1, "", "get_metadata_routing"], [25, 3, 1, "", "get_params"], [25, 3, 1, "", "plot"], [25, 3, 1, "", "set_params"]], "wildboar.explain._importance.PermuteImportance": [[25, 3, 1, "", "get_metadata_routing"], [25, 3, 1, "", "get_params"], [25, 3, 1, "", "set_params"]], "wildboar.explain._importance.ShapeletImportance": [[25, 3, 1, "", "fit_explain"], [25, 3, 1, "", "get_metadata_routing"], [25, 3, 1, "", "get_params"], [25, 3, 1, "", "plot"], [25, 3, 1, "", "set_params"]], "wildboar.explain.counterfactual": [[31, 2, 1, "", "KNeighborsCounterfactual"], [31, 2, 1, "", "NativeGuideCounterfactual"], [31, 2, 1, "", "PrototypeCounterfactual"], [31, 2, 1, "", "ShapeletForestCounterfactual"], [26, 0, 0, "-", "_helper"], [27, 0, 0, "-", "_nn"], [28, 0, 0, "-", "_nun"], [29, 0, 0, "-", "_proto"], [30, 0, 0, "-", "_sf"], [31, 1, 1, "", "counterfactuals"], [31, 1, 1, "", "proximity"]], "wildboar.explain.counterfactual.KNeighborsCounterfactual": [[31, 3, 1, "", "fit_explain"], [31, 3, 1, "", "get_metadata_routing"], [31, 3, 1, "", "get_params"], [31, 3, 1, "", "plot"], [31, 3, 1, "", "score"], [31, 3, 1, "", "set_params"]], "wildboar.explain.counterfactual.NativeGuideCounterfactual": [[31, 3, 1, "", "fit_explain"], [31, 3, 1, "", "get_metadata_routing"], [31, 3, 1, "", "get_params"], [31, 3, 1, "", "plot"], [31, 3, 1, "", "score"], [31, 3, 1, "", "set_params"]], "wildboar.explain.counterfactual.PrototypeCounterfactual": [[31, 3, 1, "", "fit_explain"], [31, 3, 1, "", "get_metadata_routing"], [31, 3, 1, "", "get_params"], [31, 3, 1, "", "plot"], [31, 3, 1, "", "score"], [31, 3, 1, "", "set_params"]], "wildboar.explain.counterfactual.ShapeletForestCounterfactual": [[31, 3, 1, "", "fit_explain"], [31, 3, 1, "", "get_metadata_routing"], [31, 3, 1, "", "get_params"], [31, 3, 1, "", "plot"], [31, 3, 1, "", "score"], [31, 3, 1, "", "set_params"]], "wildboar.explain.counterfactual._helper": [[26, 2, 1, "", "PredictEvaluator"], [26, 2, 1, "", "ProbabilityEvaluator"], [26, 2, 1, "", "TargetEvaluator"], [26, 1, 1, "", "counterfactuals"]], "wildboar.explain.counterfactual._helper.PredictEvaluator": [[26, 3, 1, "", "is_counterfactual"]], "wildboar.explain.counterfactual._helper.ProbabilityEvaluator": [[26, 3, 1, "", "is_counterfactual"]], "wildboar.explain.counterfactual._helper.TargetEvaluator": [[26, 3, 1, "", "is_counterfactual"]], "wildboar.explain.counterfactual._nn": [[27, 2, 1, "", "KNeighborsCounterfactual"]], "wildboar.explain.counterfactual._nn.KNeighborsCounterfactual": [[27, 3, 1, "", "fit_explain"], [27, 3, 1, "", "get_metadata_routing"], [27, 3, 1, "", "get_params"], [27, 3, 1, "", "plot"], [27, 3, 1, "", "score"], [27, 3, 1, "", "set_params"]], "wildboar.explain.counterfactual._nun": [[28, 2, 1, "", "NativeGuideCounterfactual"]], "wildboar.explain.counterfactual._nun.NativeGuideCounterfactual": [[28, 3, 1, "", "fit_explain"], [28, 3, 1, "", "get_metadata_routing"], [28, 3, 1, "", "get_params"], [28, 3, 1, "", "plot"], [28, 3, 1, "", "score"], [28, 3, 1, "", "set_params"]], "wildboar.explain.counterfactual._proto": [[29, 2, 1, "", "DynamicTimeWarpTransform"], [29, 2, 1, "", "EuclideanTransform"], [29, 2, 1, "", "KNearestPrototypeSampler"], [29, 2, 1, "", "KNearestShapeletPrototypeSampler"], [29, 2, 1, "", "MetricTransform"], [29, 2, 1, "", "PredictEvaluator"], [29, 2, 1, "", "ProbabilityEvaluator"], [29, 2, 1, "", "PrototypeCounterfactual"], [29, 2, 1, "", "PrototypeSampler"], [29, 2, 1, "", "ShapeletPrototypeSampler"], [29, 2, 1, "", "TargetEvaluator"], [29, 2, 1, "", "UniformPrototypeSampler"], [29, 2, 1, "", "WeightedDynamicTimeWarpTransform"]], "wildboar.explain.counterfactual._proto.DynamicTimeWarpTransform": [[29, 3, 1, "", "move"]], "wildboar.explain.counterfactual._proto.EuclideanTransform": [[29, 3, 1, "", "move"]], "wildboar.explain.counterfactual._proto.KNearestPrototypeSampler": [[29, 3, 1, "", "move"], [29, 3, 1, "", "nearest_index"], [29, 3, 1, "", "sample"], [29, 3, 1, "", "sample_move"]], "wildboar.explain.counterfactual._proto.KNearestShapeletPrototypeSampler": [[29, 3, 1, "", "move"], [29, 3, 1, "", "sample"], [29, 3, 1, "", "sample_move"]], "wildboar.explain.counterfactual._proto.MetricTransform": [[29, 3, 1, "", "move"]], "wildboar.explain.counterfactual._proto.PredictEvaluator": [[29, 3, 1, "", "is_counterfactual"]], "wildboar.explain.counterfactual._proto.ProbabilityEvaluator": [[29, 3, 1, "", "is_counterfactual"]], "wildboar.explain.counterfactual._proto.PrototypeCounterfactual": [[29, 3, 1, "", "fit_explain"], [29, 3, 1, "", "get_metadata_routing"], [29, 3, 1, "", "get_params"], [29, 3, 1, "", "plot"], [29, 3, 1, "", "score"], [29, 3, 1, "", "set_params"]], "wildboar.explain.counterfactual._proto.PrototypeSampler": [[29, 3, 1, "", "move"], [29, 3, 1, "", "sample"], [29, 3, 1, "", "sample_move"]], "wildboar.explain.counterfactual._proto.ShapeletPrototypeSampler": [[29, 3, 1, "", "move"], [29, 3, 1, "", "sample"], [29, 3, 1, "", "sample_move"], [29, 3, 1, "", "sample_shapelet"]], "wildboar.explain.counterfactual._proto.TargetEvaluator": [[29, 3, 1, "", "is_counterfactual"]], "wildboar.explain.counterfactual._proto.UniformPrototypeSampler": [[29, 3, 1, "", "move"], [29, 3, 1, "", "sample"], [29, 3, 1, "", "sample_move"]], "wildboar.explain.counterfactual._proto.WeightedDynamicTimeWarpTransform": [[29, 3, 1, "", "move"]], "wildboar.explain.counterfactual._sf": [[30, 2, 1, "", "ShapeletForestCounterfactual"]], "wildboar.explain.counterfactual._sf.ShapeletForestCounterfactual": [[30, 3, 1, "", "fit_explain"], [30, 3, 1, "", "get_metadata_routing"], [30, 3, 1, "", "get_params"], [30, 3, 1, "", "plot"], [30, 3, 1, "", "score"], [30, 3, 1, "", "set_params"]], "wildboar.linear_model": [[38, 2, 1, "", "CastorClassifier"], [38, 2, 1, "", "DilatedShapeletClassifier"], [38, 2, 1, "", "HydraClassifier"], [38, 2, 1, "", "RandomShapeletClassifier"], [38, 2, 1, "", "RandomShapeletRegressor"], [38, 2, 1, "", "RocketClassifier"], [38, 2, 1, "", "RocketRegressor"], [34, 0, 0, "-", "_hydra"], [35, 0, 0, "-", "_rocket"], [36, 0, 0, "-", "_shapelet"], [37, 0, 0, "-", "_transform"]], "wildboar.linear_model.CastorClassifier": [[38, 3, 1, "", "get_metadata_routing"], [38, 3, 1, "", "get_params"], [38, 3, 1, "", "score"], [38, 3, 1, "", "set_params"]], "wildboar.linear_model.DilatedShapeletClassifier": [[38, 3, 1, "", "get_metadata_routing"], [38, 3, 1, "", "get_params"], [38, 3, 1, "", "score"], [38, 3, 1, "", "set_params"]], "wildboar.linear_model.HydraClassifier": [[38, 3, 1, "", "get_metadata_routing"], [38, 3, 1, "", "get_params"], [38, 3, 1, "", "score"], [38, 3, 1, "", "set_params"]], "wildboar.linear_model.RandomShapeletClassifier": [[38, 3, 1, "", "get_metadata_routing"], [38, 3, 1, "", "get_params"], [38, 3, 1, "", "score"], [38, 3, 1, "", "set_params"]], "wildboar.linear_model.RandomShapeletRegressor": [[38, 3, 1, "", "get_metadata_routing"], [38, 3, 1, "", "get_params"], [38, 3, 1, "", "score"], [38, 3, 1, "", "set_params"]], "wildboar.linear_model.RocketClassifier": [[38, 3, 1, "", "get_metadata_routing"], [38, 3, 1, "", "get_params"], [38, 3, 1, "", "score"], [38, 3, 1, "", "set_params"]], "wildboar.linear_model.RocketRegressor": [[38, 3, 1, "", "get_metadata_routing"], [38, 3, 1, "", "get_params"], [38, 3, 1, "", "score"], [38, 3, 1, "", "set_params"]], "wildboar.linear_model._hydra": [[34, 2, 1, "", "HydraClassifier"]], "wildboar.linear_model._hydra.HydraClassifier": [[34, 3, 1, "", "get_metadata_routing"], [34, 3, 1, "", "get_params"], [34, 3, 1, "", "score"], [34, 3, 1, "", "set_params"]], "wildboar.linear_model._rocket": [[35, 2, 1, "", "RocketClassifier"], [35, 2, 1, "", "RocketRegressor"]], "wildboar.linear_model._rocket.RocketClassifier": [[35, 3, 1, "", "get_metadata_routing"], [35, 3, 1, "", "get_params"], [35, 3, 1, "", "score"], [35, 3, 1, "", "set_params"]], "wildboar.linear_model._rocket.RocketRegressor": [[35, 3, 1, "", "get_metadata_routing"], [35, 3, 1, "", "get_params"], [35, 3, 1, "", "score"], [35, 3, 1, "", "set_params"]], "wildboar.linear_model._shapelet": [[36, 2, 1, "", "CastorClassifier"], [36, 2, 1, "", "DilatedShapeletClassifier"], [36, 2, 1, "", "RandomShapeletClassifier"], [36, 2, 1, "", "RandomShapeletRegressor"]], "wildboar.linear_model._shapelet.CastorClassifier": [[36, 3, 1, "", "get_metadata_routing"], [36, 3, 1, "", "get_params"], [36, 3, 1, "", "score"], [36, 3, 1, "", "set_params"]], "wildboar.linear_model._shapelet.DilatedShapeletClassifier": [[36, 3, 1, "", "get_metadata_routing"], [36, 3, 1, "", "get_params"], [36, 3, 1, "", "score"], [36, 3, 1, "", "set_params"]], "wildboar.linear_model._shapelet.RandomShapeletClassifier": [[36, 3, 1, "", "get_metadata_routing"], [36, 3, 1, "", "get_params"], [36, 3, 1, "", "score"], [36, 3, 1, "", "set_params"]], "wildboar.linear_model._shapelet.RandomShapeletRegressor": [[36, 3, 1, "", "get_metadata_routing"], [36, 3, 1, "", "get_params"], [36, 3, 1, "", "score"], [36, 3, 1, "", "set_params"]], "wildboar.linear_model._transform": [[37, 2, 1, "", "BaseTransformClassifier"], [37, 2, 1, "", "BaseTransformEstimator"], [37, 2, 1, "", "BaseTransformRegressor"], [37, 2, 1, "", "TransformRidgeCV"], [37, 2, 1, "", "TransformRidgeClassifierCV"]], "wildboar.linear_model._transform.BaseTransformClassifier": [[37, 3, 1, "", "get_metadata_routing"], [37, 3, 1, "", "get_params"], [37, 3, 1, "", "score"], [37, 3, 1, "", "set_params"]], "wildboar.linear_model._transform.BaseTransformEstimator": [[37, 3, 1, "", "get_metadata_routing"], [37, 3, 1, "", "get_params"], [37, 3, 1, "", "set_params"]], "wildboar.linear_model._transform.BaseTransformRegressor": [[37, 3, 1, "", "get_metadata_routing"], [37, 3, 1, "", "get_params"], [37, 3, 1, "", "score"], [37, 3, 1, "", "set_params"]], "wildboar.linear_model._transform.TransformRidgeCV": [[37, 3, 1, "", "get_metadata_routing"], [37, 3, 1, "", "get_params"], [37, 3, 1, "", "score"], [37, 3, 1, "", "set_params"]], "wildboar.linear_model._transform.TransformRidgeClassifierCV": [[37, 3, 1, "", "get_metadata_routing"], [37, 3, 1, "", "get_params"], [37, 3, 1, "", "score"], [37, 3, 1, "", "set_params"]], "wildboar.metrics": [[39, 0, 0, "-", "_cluster"], [40, 0, 0, "-", "_counterfactual"], [41, 1, 1, "", "compactness_score"], [41, 1, 1, "", "plausability_score"], [41, 1, 1, "", "proximity_score"], [41, 1, 1, "", "redudancy_score"], [41, 1, 1, "", "relative_proximity_score"], [41, 1, 1, "", "silhouette_samples"], [41, 1, 1, "", "silhouette_score"], [41, 1, 1, "", "validity_score"]], "wildboar.metrics._cluster": [[39, 1, 1, "", "silhouette_samples"], [39, 1, 1, "", "silhouette_score"]], "wildboar.metrics._counterfactual": [[40, 1, 1, "", "compactness_score"], [40, 1, 1, "", "plausability_score"], [40, 1, 1, "", "proximity_score"], [40, 1, 1, "", "redudancy_score"], [40, 1, 1, "", "relative_proximity_score"], [40, 1, 1, "", "validity_score"]], "wildboar.model_selection": [[44, 2, 1, "", "RepeatedOutlierSplit"], [42, 0, 0, "-", "_cv"], [43, 0, 0, "-", "_outlier"], [44, 1, 1, "", "outlier_train_test_split"]], "wildboar.model_selection.RepeatedOutlierSplit": [[44, 3, 1, "", "get_n_splits"], [44, 3, 1, "", "split"]], "wildboar.model_selection._cv": [[42, 2, 1, "", "RepeatedOutlierSplit"]], "wildboar.model_selection._cv.RepeatedOutlierSplit": [[42, 3, 1, "", "get_n_splits"], [42, 3, 1, "", "split"]], "wildboar.model_selection._outlier": [[43, 1, 1, "", "outlier_train_test_split"]], "wildboar.transform": [[55, 2, 1, "", "CastorTransform"], [55, 2, 1, "", "DerivativeTransform"], [55, 2, 1, "", "DiffTransform"], [55, 2, 1, "", "DilatedShapeletTransform"], [55, 2, 1, "", "FeatureTransform"], [55, 2, 1, "", "HydraTransform"], [55, 2, 1, "", "IntervalTransform"], [55, 2, 1, "", "MatrixProfileTransform"], [55, 2, 1, "", "PAA"], [55, 2, 1, "", "PivotTransform"], [55, 2, 1, "", "ProximityTransform"], [55, 2, 1, "", "RandomShapeletTransform"], [55, 2, 1, "", "RocketTransform"], [55, 2, 1, "", "SAX"], [45, 0, 0, "-", "_base"], [46, 0, 0, "-", "_conv"], [47, 0, 0, "-", "_diff"], [48, 0, 0, "-", "_hydra"], [49, 0, 0, "-", "_interval"], [50, 0, 0, "-", "_matrix_profile"], [51, 0, 0, "-", "_pivot"], [52, 0, 0, "-", "_rocket"], [53, 0, 0, "-", "_sax"], [54, 0, 0, "-", "_shapelet"], [55, 1, 1, "", "convolve"], [55, 1, 1, "", "piecewice_aggregate_approximation"], [55, 1, 1, "", "symbolic_aggregate_approximation"]], "wildboar.transform.CastorTransform": [[55, 3, 1, "", "fit"], [55, 3, 1, "", "fit_transform"], [55, 3, 1, "", "get_metadata_routing"], [55, 3, 1, "", "get_params"], [55, 3, 1, "", "set_output"], [55, 3, 1, "", "set_params"], [55, 3, 1, "", "transform"]], "wildboar.transform.DerivativeTransform": [[55, 3, 1, "", "fit_transform"], [55, 3, 1, "", "get_metadata_routing"], [55, 3, 1, "", "get_params"], [55, 3, 1, "", "set_output"], [55, 3, 1, "", "set_params"]], "wildboar.transform.DiffTransform": [[55, 3, 1, "", "fit_transform"], [55, 3, 1, "", "get_metadata_routing"], [55, 3, 1, "", "get_params"], [55, 3, 1, "", "set_output"], [55, 3, 1, "", "set_params"]], "wildboar.transform.DilatedShapeletTransform": [[55, 3, 1, "", "fit"], [55, 3, 1, "", "fit_transform"], [55, 3, 1, "", "get_metadata_routing"], [55, 3, 1, "", "get_params"], [55, 3, 1, "", "set_output"], [55, 3, 1, "", "set_params"], [55, 3, 1, "", "transform"]], "wildboar.transform.FeatureTransform": [[55, 3, 1, "", "fit"], [55, 3, 1, "", "fit_transform"], [55, 3, 1, "", "get_metadata_routing"], [55, 3, 1, "", "get_params"], [55, 3, 1, "", "set_output"], [55, 3, 1, "", "set_params"], [55, 3, 1, "", "transform"]], "wildboar.transform.HydraTransform": [[55, 3, 1, "", "fit"], [55, 3, 1, "", "fit_transform"], [55, 3, 1, "", "get_metadata_routing"], [55, 3, 1, "", "get_params"], [55, 3, 1, "", "set_output"], [55, 3, 1, "", "set_params"], [55, 3, 1, "", "transform"]], "wildboar.transform.IntervalTransform": [[55, 3, 1, "", "fit"], [55, 3, 1, "", "fit_transform"], [55, 3, 1, "", "get_metadata_routing"], [55, 3, 1, "", "get_params"], [55, 3, 1, "", "set_output"], [55, 3, 1, "", "set_params"], [55, 3, 1, "", "transform"]], "wildboar.transform.MatrixProfileTransform": [[55, 3, 1, "", "fit"], [55, 3, 1, "", "fit_transform"], [55, 3, 1, "", "get_metadata_routing"], [55, 3, 1, "", "get_params"], [55, 3, 1, "", "set_output"], [55, 3, 1, "", "set_params"], [55, 3, 1, "", "transform"]], "wildboar.transform.PAA": [[55, 3, 1, "", "fit_transform"], [55, 3, 1, "", "get_metadata_routing"], [55, 3, 1, "", "get_params"], [55, 3, 1, "", "set_output"], [55, 3, 1, "", "set_params"]], "wildboar.transform.PivotTransform": [[55, 3, 1, "", "fit"], [55, 3, 1, "", "fit_transform"], [55, 3, 1, "", "get_metadata_routing"], [55, 3, 1, "", "get_params"], [55, 3, 1, "", "set_output"], [55, 3, 1, "", "set_params"], [55, 3, 1, "", "transform"]], "wildboar.transform.ProximityTransform": [[55, 3, 1, "", "fit_transform"], [55, 3, 1, "", "get_metadata_routing"], [55, 3, 1, "", "get_params"], [55, 3, 1, "", "set_output"], [55, 3, 1, "", "set_params"]], "wildboar.transform.RandomShapeletTransform": [[55, 3, 1, "", "fit"], [55, 3, 1, "", "fit_transform"], [55, 3, 1, "", "get_metadata_routing"], [55, 3, 1, "", "get_params"], [55, 3, 1, "", "set_output"], [55, 3, 1, "", "set_params"], [55, 3, 1, "", "transform"]], "wildboar.transform.RocketTransform": [[55, 3, 1, "", "fit"], [55, 3, 1, "", "fit_transform"], [55, 3, 1, "", "get_metadata_routing"], [55, 3, 1, "", "get_params"], [55, 3, 1, "", "set_output"], [55, 3, 1, "", "set_params"], [55, 3, 1, "", "transform"]], "wildboar.transform.SAX": [[55, 3, 1, "", "fit_transform"], [55, 3, 1, "", "get_metadata_routing"], [55, 3, 1, "", "get_params"], [55, 3, 1, "", "set_output"], [55, 3, 1, "", "set_params"]], "wildboar.transform._base": [[45, 2, 1, "", "BaseAttributeTransform"]], "wildboar.transform._base.BaseAttributeTransform": [[45, 3, 1, "", "fit"], [45, 3, 1, "", "fit_transform"], [45, 3, 1, "", "get_metadata_routing"], [45, 3, 1, "", "get_params"], [45, 3, 1, "", "set_output"], [45, 3, 1, "", "set_params"], [45, 3, 1, "", "transform"]], "wildboar.transform._conv": [[46, 1, 1, "", "convolve"]], "wildboar.transform._diff": [[47, 2, 1, "", "DerivativeTransform"], [47, 2, 1, "", "DiffTransform"]], "wildboar.transform._diff.DerivativeTransform": [[47, 3, 1, "", "fit_transform"], [47, 3, 1, "", "get_metadata_routing"], [47, 3, 1, "", "get_params"], [47, 3, 1, "", "set_output"], [47, 3, 1, "", "set_params"]], "wildboar.transform._diff.DiffTransform": [[47, 3, 1, "", "fit_transform"], [47, 3, 1, "", "get_metadata_routing"], [47, 3, 1, "", "get_params"], [47, 3, 1, "", "set_output"], [47, 3, 1, "", "set_params"]], "wildboar.transform._hydra": [[48, 2, 1, "", "HydraTransform"]], "wildboar.transform._hydra.HydraTransform": [[48, 3, 1, "", "fit"], [48, 3, 1, "", "fit_transform"], [48, 3, 1, "", "get_metadata_routing"], [48, 3, 1, "", "get_params"], [48, 3, 1, "", "set_output"], [48, 3, 1, "", "set_params"], [48, 3, 1, "", "transform"]], "wildboar.transform._interval": [[49, 2, 1, "", "FeatureTransform"], [49, 2, 1, "", "IntervalMixin"], [49, 2, 1, "", "IntervalTransform"]], "wildboar.transform._interval.FeatureTransform": [[49, 3, 1, "", "fit"], [49, 3, 1, "", "fit_transform"], [49, 3, 1, "", "get_metadata_routing"], [49, 3, 1, "", "get_params"], [49, 3, 1, "", "set_output"], [49, 3, 1, "", "set_params"], [49, 3, 1, "", "transform"]], "wildboar.transform._interval.IntervalTransform": [[49, 3, 1, "", "fit"], [49, 3, 1, "", "fit_transform"], [49, 3, 1, "", "get_metadata_routing"], [49, 3, 1, "", "get_params"], [49, 3, 1, "", "set_output"], [49, 3, 1, "", "set_params"], [49, 3, 1, "", "transform"]], "wildboar.transform._matrix_profile": [[50, 2, 1, "", "MatrixProfileTransform"]], "wildboar.transform._matrix_profile.MatrixProfileTransform": [[50, 3, 1, "", "fit"], [50, 3, 1, "", "fit_transform"], [50, 3, 1, "", "get_metadata_routing"], [50, 3, 1, "", "get_params"], [50, 3, 1, "", "set_output"], [50, 3, 1, "", "set_params"], [50, 3, 1, "", "transform"]], "wildboar.transform._pivot": [[51, 2, 1, "", "PivotMixin"], [51, 2, 1, "", "PivotTransform"], [51, 2, 1, "", "ProximityTransform"]], "wildboar.transform._pivot.PivotTransform": [[51, 3, 1, "", "fit"], [51, 3, 1, "", "fit_transform"], [51, 3, 1, "", "get_metadata_routing"], [51, 3, 1, "", "get_params"], [51, 3, 1, "", "set_output"], [51, 3, 1, "", "set_params"], [51, 3, 1, "", "transform"]], "wildboar.transform._pivot.ProximityTransform": [[51, 3, 1, "", "fit_transform"], [51, 3, 1, "", "get_metadata_routing"], [51, 3, 1, "", "get_params"], [51, 3, 1, "", "set_output"], [51, 3, 1, "", "set_params"]], "wildboar.transform._rocket": [[52, 2, 1, "", "RocketMixin"], [52, 2, 1, "", "RocketTransform"]], "wildboar.transform._rocket.RocketTransform": [[52, 3, 1, "", "fit"], [52, 3, 1, "", "fit_transform"], [52, 3, 1, "", "get_metadata_routing"], [52, 3, 1, "", "get_params"], [52, 3, 1, "", "set_output"], [52, 3, 1, "", "set_params"], [52, 3, 1, "", "transform"]], "wildboar.transform._sax": [[53, 2, 1, "", "Binning"], [53, 2, 1, "", "NormalBinning"], [53, 2, 1, "", "PAA"], [53, 2, 1, "", "SAX"], [53, 2, 1, "", "UniformBinning"], [53, 1, 1, "", "piecewice_aggregate_approximation"], [53, 1, 1, "", "symbolic_aggregate_approximation"]], "wildboar.transform._sax.Binning": [[53, 3, 1, "", "get_thresholds"], [53, 3, 1, "", "scale"]], "wildboar.transform._sax.NormalBinning": [[53, 3, 1, "", "get_thresholds"], [53, 3, 1, "", "scale"]], "wildboar.transform._sax.PAA": [[53, 3, 1, "", "fit_transform"], [53, 3, 1, "", "get_metadata_routing"], [53, 3, 1, "", "get_params"], [53, 3, 1, "", "set_output"], [53, 3, 1, "", "set_params"]], "wildboar.transform._sax.SAX": [[53, 3, 1, "", "fit_transform"], [53, 3, 1, "", "get_metadata_routing"], [53, 3, 1, "", "get_params"], [53, 3, 1, "", "set_output"], [53, 3, 1, "", "set_params"]], "wildboar.transform._sax.UniformBinning": [[53, 3, 1, "", "get_thresholds"], [53, 3, 1, "", "scale"]], "wildboar.transform._shapelet": [[54, 2, 1, "", "CastorTransform"], [54, 2, 1, "", "DilatedShapeletTransform"], [54, 2, 1, "", "RandomShapeletTransform"], [54, 2, 1, "", "ShapeletMixin"]], "wildboar.transform._shapelet.CastorTransform": [[54, 3, 1, "", "fit"], [54, 3, 1, "", "fit_transform"], [54, 3, 1, "", "get_metadata_routing"], [54, 3, 1, "", "get_params"], [54, 3, 1, "", "set_output"], [54, 3, 1, "", "set_params"], [54, 3, 1, "", "transform"]], "wildboar.transform._shapelet.DilatedShapeletTransform": [[54, 3, 1, "", "fit"], [54, 3, 1, "", "fit_transform"], [54, 3, 1, "", "get_metadata_routing"], [54, 3, 1, "", "get_params"], [54, 3, 1, "", "set_output"], [54, 3, 1, "", "set_params"], [54, 3, 1, "", "transform"]], "wildboar.transform._shapelet.RandomShapeletTransform": [[54, 3, 1, "", "fit"], [54, 3, 1, "", "fit_transform"], [54, 3, 1, "", "get_metadata_routing"], [54, 3, 1, "", "get_params"], [54, 3, 1, "", "set_output"], [54, 3, 1, "", "set_params"], [54, 3, 1, "", "transform"]], "wildboar.tree": [[60, 2, 1, "", "ExtraShapeletTreeClassifier"], [60, 2, 1, "", "ExtraShapeletTreeRegressor"], [60, 2, 1, "", "IntervalTreeClassifier"], [60, 2, 1, "", "IntervalTreeRegressor"], [60, 2, 1, "", "PivotTreeClassifier"], [60, 2, 1, "", "ProximityTreeClassifier"], [60, 2, 1, "", "RocketTreeClassifier"], [60, 2, 1, "", "RocketTreeRegressor"], [60, 2, 1, "", "ShapeletTreeClassifier"], [60, 2, 1, "", "ShapeletTreeRegressor"], [56, 0, 0, "-", "_base"], [57, 0, 0, "-", "_plot"], [58, 0, 0, "-", "_ptree"], [59, 0, 0, "-", "_tree"], [60, 1, 1, "", "plot_tree"]], "wildboar.tree.ExtraShapeletTreeClassifier": [[60, 3, 1, "", "apply"], [60, 3, 1, "", "decision_path"], [60, 3, 1, "", "fit"], [60, 3, 1, "", "get_metadata_routing"], [60, 3, 1, "", "get_params"], [60, 3, 1, "", "predict"], [60, 3, 1, "", "predict_proba"], [60, 3, 1, "", "score"], [60, 3, 1, "", "set_params"]], "wildboar.tree.ExtraShapeletTreeRegressor": [[60, 3, 1, "", "apply"], [60, 3, 1, "", "decision_path"], [60, 3, 1, "", "fit"], [60, 3, 1, "", "get_metadata_routing"], [60, 3, 1, "", "get_params"], [60, 3, 1, "", "predict"], [60, 3, 1, "", "score"], [60, 3, 1, "", "set_params"]], "wildboar.tree.IntervalTreeClassifier": [[60, 3, 1, "", "apply"], [60, 3, 1, "", "decision_path"], [60, 3, 1, "", "fit"], [60, 3, 1, "", "get_metadata_routing"], [60, 3, 1, "", "get_params"], [60, 3, 1, "", "predict"], [60, 3, 1, "", "predict_proba"], [60, 3, 1, "", "score"], [60, 3, 1, "", "set_params"]], "wildboar.tree.IntervalTreeRegressor": [[60, 3, 1, "", "apply"], [60, 3, 1, "", "decision_path"], [60, 3, 1, "", "fit"], [60, 3, 1, "", "get_metadata_routing"], [60, 3, 1, "", "get_params"], [60, 3, 1, "", "predict"], [60, 3, 1, "", "score"], [60, 3, 1, "", "set_params"]], "wildboar.tree.PivotTreeClassifier": [[60, 3, 1, "", "apply"], [60, 3, 1, "", "decision_path"], [60, 3, 1, "", "fit"], [60, 3, 1, "", "get_metadata_routing"], [60, 3, 1, "", "get_params"], [60, 3, 1, "", "predict"], [60, 3, 1, "", "predict_proba"], [60, 3, 1, "", "score"], [60, 3, 1, "", "set_params"]], "wildboar.tree.ProximityTreeClassifier": [[60, 3, 1, "", "apply"], [60, 3, 1, "", "decision_path"], [60, 3, 1, "", "fit"], [60, 3, 1, "", "get_metadata_routing"], [60, 3, 1, "", "get_params"], [60, 3, 1, "", "predict"], [60, 3, 1, "", "predict_proba"], [60, 3, 1, "", "score"], [60, 3, 1, "", "set_params"]], "wildboar.tree.RocketTreeClassifier": [[60, 3, 1, "", "apply"], [60, 3, 1, "", "decision_path"], [60, 3, 1, "", "fit"], [60, 3, 1, "", "get_metadata_routing"], [60, 3, 1, "", "get_params"], [60, 3, 1, "", "predict"], [60, 3, 1, "", "predict_proba"], [60, 3, 1, "", "score"], [60, 3, 1, "", "set_params"]], "wildboar.tree.RocketTreeRegressor": [[60, 3, 1, "", "apply"], [60, 3, 1, "", "decision_path"], [60, 3, 1, "", "fit"], [60, 3, 1, "", "get_metadata_routing"], [60, 3, 1, "", "get_params"], [60, 3, 1, "", "predict"], [60, 3, 1, "", "score"], [60, 3, 1, "", "set_params"]], "wildboar.tree.ShapeletTreeClassifier": [[60, 3, 1, "", "apply"], [60, 3, 1, "", "decision_path"], [60, 3, 1, "", "fit"], [60, 3, 1, "", "get_metadata_routing"], [60, 3, 1, "", "get_params"], [60, 3, 1, "", "predict"], [60, 3, 1, "", "predict_proba"], [60, 3, 1, "", "score"], [60, 3, 1, "", "set_params"]], "wildboar.tree.ShapeletTreeRegressor": [[60, 3, 1, "", "apply"], [60, 3, 1, "", "decision_path"], [60, 3, 1, "", "fit"], [60, 3, 1, "", "get_metadata_routing"], [60, 3, 1, "", "get_params"], [60, 3, 1, "", "predict"], [60, 3, 1, "", "score"], [60, 3, 1, "", "set_params"]], "wildboar.tree._base": [[56, 2, 1, "", "BaseTree"], [56, 2, 1, "", "BaseTreeClassifier"], [56, 2, 1, "", "BaseTreeRegressor"]], "wildboar.tree._base.BaseTree": [[56, 3, 1, "", "apply"], [56, 3, 1, "", "decision_path"], [56, 3, 1, "", "get_metadata_routing"], [56, 3, 1, "", "get_params"], [56, 3, 1, "", "set_params"]], "wildboar.tree._base.BaseTreeClassifier": [[56, 3, 1, "", "apply"], [56, 3, 1, "", "decision_path"], [56, 3, 1, "", "fit"], [56, 3, 1, "", "get_metadata_routing"], [56, 3, 1, "", "get_params"], [56, 3, 1, "", "predict"], [56, 3, 1, "", "predict_proba"], [56, 3, 1, "", "score"], [56, 3, 1, "", "set_params"]], "wildboar.tree._base.BaseTreeRegressor": [[56, 3, 1, "", "apply"], [56, 3, 1, "", "decision_path"], [56, 3, 1, "", "fit"], [56, 3, 1, "", "get_metadata_routing"], [56, 3, 1, "", "get_params"], [56, 3, 1, "", "predict"], [56, 3, 1, "", "score"], [56, 3, 1, "", "set_params"]], "wildboar.tree._plot": [[57, 1, 1, "", "plot_tree"]], "wildboar.tree._ptree": [[58, 2, 1, "", "ProximityTreeClassifier"]], "wildboar.tree._ptree.ProximityTreeClassifier": [[58, 3, 1, "", "apply"], [58, 3, 1, "", "decision_path"], [58, 3, 1, "", "fit"], [58, 3, 1, "", "get_metadata_routing"], [58, 3, 1, "", "get_params"], [58, 3, 1, "", "predict"], [58, 3, 1, "", "predict_proba"], [58, 3, 1, "", "score"], [58, 3, 1, "", "set_params"]], "wildboar.tree._tree": [[59, 2, 1, "", "BaseFeatureTreeClassifier"], [59, 2, 1, "", "BaseFeatureTreeRegressor"], [59, 2, 1, "", "DilatedShapeletTreeClassifier"], [59, 2, 1, "", "ExtraShapeletTreeClassifier"], [59, 2, 1, "", "ExtraShapeletTreeRegressor"], [59, 2, 1, "", "IntervalTreeClassifier"], [59, 2, 1, "", "IntervalTreeRegressor"], [59, 2, 1, "", "PivotTreeClassifier"], [59, 2, 1, "", "RocketTreeClassifier"], [59, 2, 1, "", "RocketTreeRegressor"], [59, 2, 1, "", "ShapeletTreeClassifier"], [59, 2, 1, "", "ShapeletTreeRegressor"]], "wildboar.tree._tree.BaseFeatureTreeClassifier": [[59, 3, 1, "", "apply"], [59, 3, 1, "", "decision_path"], [59, 3, 1, "", "fit"], [59, 3, 1, "", "get_metadata_routing"], [59, 3, 1, "", "get_params"], [59, 3, 1, "", "predict"], [59, 3, 1, "", "predict_proba"], [59, 3, 1, "", "score"], [59, 3, 1, "", "set_params"]], "wildboar.tree._tree.BaseFeatureTreeRegressor": [[59, 3, 1, "", "apply"], [59, 3, 1, "", "decision_path"], [59, 3, 1, "", "fit"], [59, 3, 1, "", "get_metadata_routing"], [59, 3, 1, "", "get_params"], [59, 3, 1, "", "predict"], [59, 3, 1, "", "score"], [59, 3, 1, "", "set_params"]], "wildboar.tree._tree.DilatedShapeletTreeClassifier": [[59, 3, 1, "", "apply"], [59, 3, 1, "", "decision_path"], [59, 3, 1, "", "fit"], [59, 3, 1, "", "get_metadata_routing"], [59, 3, 1, "", "get_params"], [59, 3, 1, "", "predict"], [59, 3, 1, "", "predict_proba"], [59, 3, 1, "", "score"], [59, 3, 1, "", "set_params"]], "wildboar.tree._tree.ExtraShapeletTreeClassifier": [[59, 3, 1, "", "apply"], [59, 3, 1, "", "decision_path"], [59, 3, 1, "", "fit"], [59, 3, 1, "", "get_metadata_routing"], [59, 3, 1, "", "get_params"], [59, 3, 1, "", "predict"], [59, 3, 1, "", "predict_proba"], [59, 3, 1, "", "score"], [59, 3, 1, "", "set_params"]], "wildboar.tree._tree.ExtraShapeletTreeRegressor": [[59, 3, 1, "", "apply"], [59, 3, 1, "", "decision_path"], [59, 3, 1, "", "fit"], [59, 3, 1, "", "get_metadata_routing"], [59, 3, 1, "", "get_params"], [59, 3, 1, "", "predict"], [59, 3, 1, "", "score"], [59, 3, 1, "", "set_params"]], "wildboar.tree._tree.IntervalTreeClassifier": [[59, 3, 1, "", "apply"], [59, 3, 1, "", "decision_path"], [59, 3, 1, "", "fit"], [59, 3, 1, "", "get_metadata_routing"], [59, 3, 1, "", "get_params"], [59, 3, 1, "", "predict"], [59, 3, 1, "", "predict_proba"], [59, 3, 1, "", "score"], [59, 3, 1, "", "set_params"]], "wildboar.tree._tree.IntervalTreeRegressor": [[59, 3, 1, "", "apply"], [59, 3, 1, "", "decision_path"], [59, 3, 1, "", "fit"], [59, 3, 1, "", "get_metadata_routing"], [59, 3, 1, "", "get_params"], [59, 3, 1, "", "predict"], [59, 3, 1, "", "score"], [59, 3, 1, "", "set_params"]], "wildboar.tree._tree.PivotTreeClassifier": [[59, 3, 1, "", "apply"], [59, 3, 1, "", "decision_path"], [59, 3, 1, "", "fit"], [59, 3, 1, "", "get_metadata_routing"], [59, 3, 1, "", "get_params"], [59, 3, 1, "", "predict"], [59, 3, 1, "", "predict_proba"], [59, 3, 1, "", "score"], [59, 3, 1, "", "set_params"]], "wildboar.tree._tree.RocketTreeClassifier": [[59, 3, 1, "", "apply"], [59, 3, 1, "", "decision_path"], [59, 3, 1, "", "fit"], [59, 3, 1, "", "get_metadata_routing"], [59, 3, 1, "", "get_params"], [59, 3, 1, "", "predict"], [59, 3, 1, "", "predict_proba"], [59, 3, 1, "", "score"], [59, 3, 1, "", "set_params"]], "wildboar.tree._tree.RocketTreeRegressor": [[59, 3, 1, "", "apply"], [59, 3, 1, "", "decision_path"], [59, 3, 1, "", "fit"], [59, 3, 1, "", "get_metadata_routing"], [59, 3, 1, "", "get_params"], [59, 3, 1, "", "predict"], [59, 3, 1, "", "score"], [59, 3, 1, "", "set_params"]], "wildboar.tree._tree.ShapeletTreeClassifier": [[59, 3, 1, "", "apply"], [59, 3, 1, "", "decision_path"], [59, 3, 1, "", "fit"], [59, 3, 1, "", "get_metadata_routing"], [59, 3, 1, "", "get_params"], [59, 3, 1, "", "predict"], [59, 3, 1, "", "predict_proba"], [59, 3, 1, "", "score"], [59, 3, 1, "", "set_params"]], "wildboar.tree._tree.ShapeletTreeRegressor": [[59, 3, 1, "", "apply"], [59, 3, 1, "", "decision_path"], [59, 3, 1, "", "fit"], [59, 3, 1, "", "get_metadata_routing"], [59, 3, 1, "", "get_params"], [59, 3, 1, "", "predict"], [59, 3, 1, "", "score"], [59, 3, 1, "", "set_params"]], "wildboar.utils": [[61, 0, 0, "-", "_parallel"], [62, 0, 0, "-", "_testing"], [65, 1, 1, "", "check_X_y"], [65, 1, 1, "", "check_array"], [63, 0, 0, "-", "decorators"], [64, 0, 0, "-", "estimator_checks"], [66, 0, 0, "-", "plot"], [67, 0, 0, "-", "validation"], [68, 0, 0, "-", "variable_len"]], "wildboar.utils._parallel": [[61, 1, 1, "", "run_in_parallel"]], "wildboar.utils._testing": [[62, 1, 1, "", "assert_exhaustive_parameter_checks"], [62, 1, 1, "", "assert_parameter_checks"]], "wildboar.utils.decorators": [[63, 1, 1, "", "array_or_scalar"], [63, 1, 1, "", "singleton"], [63, 1, 1, "", "unstable"]], "wildboar.utils.estimator_checks": [[64, 1, 1, "", "check_estimator"]], "wildboar.utils.plot": [[66, 1, 1, "", "plot_frequency_domain"], [66, 1, 1, "", "plot_time_domain"]], "wildboar.utils.validation": [[67, 2, 1, "", "MetricOptions"], [67, 2, 1, "", "SubsequenceMetricOptions"], [67, 1, 1, "", "check_X_y"], [67, 1, 1, "", "check_array"], [67, 1, 1, "", "check_classification_targets"], [67, 1, 1, "", "check_option"], [67, 1, 1, "", "check_type"]], "wildboar.utils.validation.MetricOptions": [[67, 3, 1, "", "is_satisfied_by"]], "wildboar.utils.validation.SubsequenceMetricOptions": [[67, 3, 1, "", "is_satisfied_by"]], "wildboar.utils.variable_len": [[68, 1, 1, "", "get_variable_length"], [68, 1, 1, "", "is_end_of_series"], [68, 1, 1, "", "is_variable_length"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"]}, "titleterms": {"api": 0, "refer": [0, 77, 83, 84], "wildboar": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 91], "annot": [1, 2, 3, 71], "_motif": 1, "function": [1, 2, 3, 4, 5, 7, 8, 9, 15, 17, 20, 21, 25, 26, 31, 32, 39, 40, 41, 43, 44, 46, 53, 55, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68], "_segment": 2, "base": [4, 84, 85], "class": [4, 6, 7, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 67], "dataset": [5, 6, 7, 8, 9, 70, 73], "_filter": 5, "_repositori": 6, "outlier": [8, 87, 88], "preprocess": 9, "dimension_select": [10, 11, 12, 13, 14], "_base": [10, 45, 56], "_distanc": [11, 15], "_sequenti": 12, "_varianc": 13, "distanc": [15, 16, 17, 18, 19, 20, 21, 80, 81], "_manifold": 16, "_matrix_profil": [17, 50], "_multi_metr": 18, "_neighbor": 19, "dtw": 20, "ensembl": [22, 23, 24, 83], "_elast": 22, "_ensembl": 23, "explain": [25, 26, 27, 28, 29, 30, 31, 32], "_import": 25, "counterfactu": [26, 27, 28, 29, 30, 31, 77], "_helper": 26, "_nn": 27, "_nun": 28, "_proto": 29, "_sf": 30, "linear_model": [34, 35, 36, 37, 38], "_hydra": [34, 48], "_rocket": [35, 52], "_shapelet": [36, 54], "_transform": 37, "metric": [39, 40, 41, 79, 80, 81], "_cluster": 39, "_counterfactu": 40, "model_select": [42, 43, 44], "_cv": 42, "_outlier": 43, "transform": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 70, 84, 89], "_conv": 46, "_diff": 47, "_interv": 49, "_pivot": 51, "_sax": 53, "tree": [56, 57, 58, 59, 60, 85], "_plot": 57, "_ptree": 58, "_tree": 59, "util": [61, 62, 63, 64, 65, 66, 67, 68], "_parallel": 61, "_test": 62, "decor": 63, "estimator_check": 64, "plot": [66, 85], "valid": 67, "variable_len": 68, "version": [69, 93], "user": 70, "guid": 70, "load": [70, 73], "an": 70, "exampl": 70, "learn": [70, 82, 86], "predict": 70, "time": [70, 72, 81, 89], "seri": [70, 72, 89], "tabular": 70, "data": 70, "explor": 70, "model": [70, 93], "perform": 70, "persist": 70, "variabl": 72, "length": 72, "singl": 73, "multipl": 73, "filter": 73, "pre": 74, "process": 74, "repositori": 75, "definit": 75, "instal": [75, 91], "local": 75, "cach": 75, "json": 75, "dimens": 76, "select": 76, "varianc": 76, "threshold": 76, "sequenti": 76, "selector": 76, "explan": 77, "nearest": 77, "neighbour": 77, "shapelet": [77, 83, 84, 85], "forest": [77, 83], "glossari": 78, "specif": 79, "subsequ": [79, 80, 81], "elast": [79, 81, 83], "non": 79, "pairwis": 80, "pair": 80, "minimum": 80, "multivari": 80, "support": 80, "search": 80, "benchmark": [80, 88], "parallel": 80, "dynam": 81, "warp": 81, "longest": 81, "common": 81, "edit": 81, "real": 81, "penalti": 81, "sequenc": 81, "move": 81, "split": 81, "merg": 81, "supervis": 82, "estim": [83, 84, 85], "proxim": 83, "interv": [83, 85], "random": 84, "dilat": 84, "castor": 84, "classifi": 84, "convolut": [84, 89], "rocket": [84, 89], "hydra": [84, 89], "decis": 85, "structur": 85, "unsupervis": 86, "detect": [87, 88], "minor": 88, "label": 88, "major": 88, "emmott": 88, "build": 92, "from": 92, "sourc": 92, "what": 93, "": 93, "new": 93, "depend": 93, "1": 93, "3": 93, "0": 93, "chang": 93}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"API Reference": [[0, "api-reference"]], "wildboar.annotate._motifs": [[1, "module-wildboar.annotate._motifs"]], "Functions": [[1, "functions"], [2, "functions"], [3, "functions"], [4, "functions"], [5, "functions"], [7, "functions"], [8, "functions"], [9, "functions"], [15, "functions"], [17, "functions"], [20, "functions"], [21, "functions"], [25, "functions"], [26, "functions"], [31, "functions"], [32, "functions"], [39, "functions"], [40, "functions"], [41, "functions"], [43, "functions"], [44, "functions"], [46, "functions"], [53, "functions"], [55, "functions"], [57, "functions"], [60, "functions"], [61, "functions"], [62, "functions"], [63, "functions"], [64, "functions"], [65, "functions"], [66, "functions"], [67, "functions"], [68, "functions"]], "wildboar.annotate._segment": [[2, "module-wildboar.annotate._segment"]], "wildboar.annotate": [[3, "module-wildboar.annotate"]], "wildboar.base": [[4, "module-wildboar.base"]], "Classes": [[4, "classes"], [6, "classes"], [7, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [16, "classes"], [19, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [42, "classes"], [44, "classes"], [45, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [67, "classes"]], "wildboar.datasets._filter": [[5, "module-wildboar.datasets._filter"]], "wildboar.datasets._repository": [[6, "module-wildboar.datasets._repository"]], "wildboar.datasets": [[7, "module-wildboar.datasets"]], "wildboar.datasets.outlier": [[8, "module-wildboar.datasets.outlier"]], "wildboar.datasets.preprocess": [[9, "module-wildboar.datasets.preprocess"]], "wildboar.dimension_selection._base": [[10, "module-wildboar.dimension_selection._base"]], "wildboar.dimension_selection._distance": [[11, "module-wildboar.dimension_selection._distance"]], "wildboar.dimension_selection._sequential": [[12, "module-wildboar.dimension_selection._sequential"]], "wildboar.dimension_selection._variance": [[13, "module-wildboar.dimension_selection._variance"]], "wildboar.dimension_selection": [[14, "module-wildboar.dimension_selection"]], "wildboar.distance._distance": [[15, "module-wildboar.distance._distance"]], "wildboar.distance._manifold": [[16, "module-wildboar.distance._manifold"]], "wildboar.distance._matrix_profile": [[17, "module-wildboar.distance._matrix_profile"]], "wildboar.distance._multi_metric": [[18, "module-wildboar.distance._multi_metric"]], "wildboar.distance._neighbors": [[19, "module-wildboar.distance._neighbors"]], "wildboar.distance.dtw": [[20, "module-wildboar.distance.dtw"]], "wildboar.distance": [[21, "module-wildboar.distance"]], "wildboar.ensemble._elastic": [[22, "module-wildboar.ensemble._elastic"]], "wildboar.ensemble._ensemble": [[23, "module-wildboar.ensemble._ensemble"]], "wildboar.ensemble": [[24, "module-wildboar.ensemble"]], "wildboar.explain._importance": [[25, "module-wildboar.explain._importance"]], "wildboar.explain.counterfactual._helper": [[26, "module-wildboar.explain.counterfactual._helper"]], "wildboar.explain.counterfactual._nn": [[27, "module-wildboar.explain.counterfactual._nn"]], "wildboar.explain.counterfactual._nun": [[28, "module-wildboar.explain.counterfactual._nun"]], "wildboar.explain.counterfactual._proto": [[29, "module-wildboar.explain.counterfactual._proto"]], "wildboar.explain.counterfactual._sf": [[30, "module-wildboar.explain.counterfactual._sf"]], "wildboar.explain.counterfactual": [[31, "module-wildboar.explain.counterfactual"]], "wildboar.explain": [[32, "module-wildboar.explain"]], "wildboar": [[33, "module-wildboar"]], "wildboar.linear_model._hydra": [[34, "module-wildboar.linear_model._hydra"]], "wildboar.linear_model._rocket": [[35, "module-wildboar.linear_model._rocket"]], "wildboar.linear_model._shapelet": [[36, "module-wildboar.linear_model._shapelet"]], "wildboar.linear_model._transform": [[37, "module-wildboar.linear_model._transform"]], "wildboar.linear_model": [[38, "module-wildboar.linear_model"]], "wildboar.metrics._cluster": [[39, "module-wildboar.metrics._cluster"]], "wildboar.metrics._counterfactual": [[40, "module-wildboar.metrics._counterfactual"]], "wildboar.metrics": [[41, "module-wildboar.metrics"]], "wildboar.model_selection._cv": [[42, "module-wildboar.model_selection._cv"]], "wildboar.model_selection._outlier": [[43, "module-wildboar.model_selection._outlier"]], "wildboar.model_selection": [[44, "module-wildboar.model_selection"]], "wildboar.transform._base": [[45, "module-wildboar.transform._base"]], "wildboar.transform._conv": [[46, "module-wildboar.transform._conv"]], "wildboar.transform._diff": [[47, "module-wildboar.transform._diff"]], "wildboar.transform._hydra": [[48, "module-wildboar.transform._hydra"]], "wildboar.transform._interval": [[49, "module-wildboar.transform._interval"]], "wildboar.transform._matrix_profile": [[50, "module-wildboar.transform._matrix_profile"]], "wildboar.transform._pivot": [[51, "module-wildboar.transform._pivot"]], "wildboar.transform._rocket": [[52, "module-wildboar.transform._rocket"]], "wildboar.transform._sax": [[53, "module-wildboar.transform._sax"]], "wildboar.transform._shapelet": [[54, "module-wildboar.transform._shapelet"]], "wildboar.transform": [[55, "module-wildboar.transform"]], "wildboar.tree._base": [[56, "module-wildboar.tree._base"]], "wildboar.tree._plot": [[57, "module-wildboar.tree._plot"]], "wildboar.tree._ptree": [[58, "module-wildboar.tree._ptree"]], "wildboar.tree._tree": [[59, "module-wildboar.tree._tree"]], "wildboar.tree": [[60, "module-wildboar.tree"]], "wildboar.utils._parallel": [[61, "module-wildboar.utils._parallel"]], "wildboar.utils._testing": [[62, "module-wildboar.utils._testing"]], "wildboar.utils.decorators": [[63, "module-wildboar.utils.decorators"]], "wildboar.utils.estimator_checks": [[64, "module-wildboar.utils.estimator_checks"]], "wildboar.utils": [[65, "module-wildboar.utils"]], "wildboar.utils.plot": [[66, "module-wildboar.utils.plot"]], "wildboar.utils.validation": [[67, "module-wildboar.utils.validation"]], "wildboar.utils.variable_len": [[68, "module-wildboar.utils.variable_len"]], "wildboar.version": [[69, "module-wildboar.version"]], "User Guide": [[70, "user-guide"]], "Loading an example dataset": [[70, "loading-an-example-dataset"]], "Learning and predicting": [[70, "learning-and-predicting"]], "Transforming time series to tabular data": [[70, "transforming-time-series-to-tabular-data"]], "Exploring model performance": [[70, "exploring-model-performance"]], "Model persistence": [[70, "model-persistence"]], "Annotate": [[71, "annotate"]], "Time series": [[72, "time-series"]], "Variable length time series": [[72, "variable-length-time-series"]], "Datasets": [[73, "datasets"]], "Loading datasets": [[73, "loading-datasets"]], "Loading a single dataset": [[73, "loading-a-single-dataset"]], "Loading multiple datasets": [[73, "loading-multiple-datasets"]], "Filters": [[73, "filters"]], "Pre-processing": [[74, "pre-processing"]], "Repositories": [[75, "repositories"]], "Repository definitions": [[75, "repository-definitions"]], "Installing repositories": [[75, "installing-repositories"]], "Local cache": [[75, "local-cache"]], "JSON repositories": [[75, "json-repositories"]], "Dimension selection": [[76, "dimension-selection"]], "Dimension variance threshold": [[76, "dimension-variance-threshold"]], "Sequential dimension selector": [[76, "sequential-dimension-selector"]], "Counterfactual explanations": [[77, "counterfactual-explanations"]], "Nearest neighbour counterfactuals": [[77, "nearest-neighbour-counterfactuals"]], "Shapelet forest counterfactuals": [[77, "shapelet-forest-counterfactuals"]], "References": [[77, "references"], [83, "references"], [84, "references"]], "Glossary": [[78, "glossary"]], "Metrics": [[79, "metrics"], [80, "metrics"]], "Metric specification": [[79, "metric-specification"]], "Subsequence metrics": [[79, "subsequence-metrics"], [80, "subsequence-metrics"]], "Elastic and non-elastic metrics": [[79, "elastic-and-non-elastic-metrics"]], "Distance": [[80, "distance"]], "Pairwise distance": [[80, "pairwise-distance"]], "Paired distance": [[80, "paired-distance"]], "Minimum distance": [[80, "minimum-distance"]], "Multivariate support": [[80, "multivariate-support"]], "Subsequence search": [[80, "subsequence-search"]], "Pairwise subsequence distance": [[80, "pairwise-subsequence-distance"]], "Benchmark": [[80, "benchmark"]], "Parallelization": [[80, "parallelization"]], "Elastic metrics": [[81, "elastic-metrics"]], "Dynamic time warping": [[81, "dynamic-time-warping"]], "Longest common subsequence": [[81, "longest-common-subsequence"]], "Edit-distance with real penalty": [[81, "edit-distance-with-real-penalty"]], "Edit-distance for real sequence": [[81, "edit-distance-for-real-sequence"]], "Time-warp edit distance": [[81, "time-warp-edit-distance"]], "Move-split-merge": [[81, "move-split-merge"]], "Supervised learning": [[82, "supervised-learning"]], "Ensemble estimators": [[83, "ensemble-estimators"]], "Shapelet forests": [[83, "shapelet-forests"]], "Proximity forests": [[83, "proximity-forests"]], "Elastic Ensemble": [[83, "elastic-ensemble"]], "Interval Forest": [[83, "interval-forest"]], "Transform-based estimators": [[84, "transform-based-estimators"]], "Shapelet-based transform": [[84, "shapelet-based-transform"]], "Random shapelet transform": [[84, "random-shapelet-transform"]], "Dilated shapelet transform": [[84, "dilated-shapelet-transform"]], "Castor classifier": [[84, "castor-classifier"]], "Convolution-based transform": [[84, "convolution-based-transform"]], "Rocket": [[84, "rocket"]], "Hydra": [[84, "hydra"]], "Tree-based estimators": [[85, "tree-based-estimators"]], "Shapelet-based decision trees": [[85, "shapelet-based-decision-trees"]], "Interval-based decision trees": [[85, "interval-based-decision-trees"]], "Decision tree structure": [[85, "decision-tree-structure"]], "Plotting": [[85, "plotting"]], "Unsupervised learning": [[86, "unsupervised-learning"]], "Outlier detection": [[87, "outlier-detection"]], "Outlier detection benchmarks": [[88, "outlier-detection-benchmarks"]], "Minority labeler": [[88, "minority-labeler"]], "Majority labeler": [[88, "majority-labeler"]], "Emmott labeler": [[88, "emmott-labeler"]], "Time series transform": [[89, "time-series-transform"]], "Convolutional transform": [[89, "convolutional-transform"]], "Hydra transform": [[89, "hydra-transform"]], "Rocket transform": [[89, "rocket-transform"]], "Install wildboar": [[91, "install-wildboar"]], "Build from source": [[92, "build-from-source"]], "What\u2019s new": [[93, "what-s-new"]], "Dependencies": [[93, "dependencies"]], "Version 1.3.0": [[93, "version-1-3-0"]], "New and changed models": [[93, "new-and-changed-models"]]}, "indexentries": {"module": [[1, "module-wildboar.annotate._motifs"], [2, "module-wildboar.annotate._segment"], [3, "module-wildboar.annotate"], [4, "module-wildboar.base"], [5, "module-wildboar.datasets._filter"], [6, "module-wildboar.datasets._repository"], [7, "module-wildboar.datasets"], [8, "module-wildboar.datasets.outlier"], [9, "module-wildboar.datasets.preprocess"], [10, "module-wildboar.dimension_selection._base"], [11, "module-wildboar.dimension_selection._distance"], [12, "module-wildboar.dimension_selection._sequential"], [13, "module-wildboar.dimension_selection._variance"], [14, "module-wildboar.dimension_selection"], [15, "module-wildboar.distance._distance"], [16, "module-wildboar.distance._manifold"], [17, "module-wildboar.distance._matrix_profile"], [18, "module-wildboar.distance._multi_metric"], [19, "module-wildboar.distance._neighbors"], [20, "module-wildboar.distance.dtw"], [21, "module-wildboar.distance"], [22, "module-wildboar.ensemble._elastic"], [23, "module-wildboar.ensemble._ensemble"], [24, "module-wildboar.ensemble"], [25, "module-wildboar.explain._importance"], [26, "module-wildboar.explain.counterfactual._helper"], [27, "module-wildboar.explain.counterfactual._nn"], [28, "module-wildboar.explain.counterfactual._nun"], [29, "module-wildboar.explain.counterfactual._proto"], [30, "module-wildboar.explain.counterfactual._sf"], [31, "module-wildboar.explain.counterfactual"], [32, "module-wildboar.explain"], [33, "module-wildboar"], [34, "module-wildboar.linear_model._hydra"], [35, "module-wildboar.linear_model._rocket"], [36, "module-wildboar.linear_model._shapelet"], [37, "module-wildboar.linear_model._transform"], [38, "module-wildboar.linear_model"], [39, "module-wildboar.metrics._cluster"], [40, "module-wildboar.metrics._counterfactual"], [41, "module-wildboar.metrics"], [42, "module-wildboar.model_selection._cv"], [43, "module-wildboar.model_selection._outlier"], [44, "module-wildboar.model_selection"], [45, "module-wildboar.transform._base"], [46, "module-wildboar.transform._conv"], [47, "module-wildboar.transform._diff"], [48, "module-wildboar.transform._hydra"], [49, "module-wildboar.transform._interval"], [50, "module-wildboar.transform._matrix_profile"], [51, "module-wildboar.transform._pivot"], [52, "module-wildboar.transform._rocket"], [53, "module-wildboar.transform._sax"], [54, "module-wildboar.transform._shapelet"], [55, "module-wildboar.transform"], [56, "module-wildboar.tree._base"], [57, "module-wildboar.tree._plot"], [58, "module-wildboar.tree._ptree"], [59, "module-wildboar.tree._tree"], [60, "module-wildboar.tree"], [61, "module-wildboar.utils._parallel"], [62, "module-wildboar.utils._testing"], [63, "module-wildboar.utils.decorators"], [64, "module-wildboar.utils.estimator_checks"], [65, "module-wildboar.utils"], [66, "module-wildboar.utils.plot"], [67, "module-wildboar.utils.validation"], [68, "module-wildboar.utils.variable_len"], [69, "module-wildboar.version"]], "motifs() (in module wildboar.annotate._motifs)": [[1, "wildboar.annotate._motifs.motifs"]], "wildboar.annotate._motifs": [[1, "module-wildboar.annotate._motifs"]], "segment() (in module wildboar.annotate._segment)": [[2, "wildboar.annotate._segment.segment"]], "wildboar.annotate._segment": [[2, "module-wildboar.annotate._segment"]], "motifs() (in module wildboar.annotate)": [[3, "wildboar.annotate.motifs"]], "segment() (in module wildboar.annotate)": [[3, "wildboar.annotate.segment"]], "wildboar.annotate": [[3, "module-wildboar.annotate"]], "baseestimator (class in wildboar.base)": [[4, "wildboar.base.BaseEstimator"]], "counterfactualmixin (class in wildboar.base)": [[4, "wildboar.base.CounterfactualMixin"]], "explainermixin (class in wildboar.base)": [[4, "wildboar.base.ExplainerMixin"]], "fit_explain() (wildboar.base.explainermixin method)": [[4, "wildboar.base.ExplainerMixin.fit_explain"]], "get_metadata_routing() (wildboar.base.baseestimator method)": [[4, "wildboar.base.BaseEstimator.get_metadata_routing"]], "get_params() (wildboar.base.baseestimator method)": [[4, "wildboar.base.BaseEstimator.get_params"]], "is_counterfactual() (in module wildboar.base)": [[4, "wildboar.base.is_counterfactual"]], "is_explainer() (in module wildboar.base)": [[4, "wildboar.base.is_explainer"]], "plot() (wildboar.base.explainermixin method)": [[4, "wildboar.base.ExplainerMixin.plot"]], "score() (wildboar.base.counterfactualmixin method)": [[4, "wildboar.base.CounterfactualMixin.score"]], "set_params() (wildboar.base.baseestimator method)": [[4, "wildboar.base.BaseEstimator.set_params"]], "wildboar.base": [[4, "module-wildboar.base"]], "make_dict_filter() (in module wildboar.datasets._filter)": [[5, "wildboar.datasets._filter.make_dict_filter"]], "make_filter() (in module wildboar.datasets._filter)": [[5, "wildboar.datasets._filter.make_filter"]], "make_list_filter() (in module wildboar.datasets._filter)": [[5, "wildboar.datasets._filter.make_list_filter"]], "make_str_filter() (in module wildboar.datasets._filter)": [[5, "wildboar.datasets._filter.make_str_filter"]], "wildboar.datasets._filter": [[5, "module-wildboar.datasets._filter"]], "bundle (class in wildboar.datasets._repository)": [[6, "wildboar.datasets._repository.Bundle"]], "jsonrepository (class in wildboar.datasets._repository)": [[6, "wildboar.datasets._repository.JSONRepository"]], "npbundle (class in wildboar.datasets._repository)": [[6, "wildboar.datasets._repository.NpBundle"]], "repository (class in wildboar.datasets._repository)": [[6, "wildboar.datasets._repository.Repository"]], "download_url (wildboar.datasets._repository.jsonrepository property)": [[6, "wildboar.datasets._repository.JSONRepository.download_url"]], "download_url (wildboar.datasets._repository.repository property)": [[6, "wildboar.datasets._repository.Repository.download_url"]], "get_bundle() (wildboar.datasets._repository.jsonrepository method)": [[6, "wildboar.datasets._repository.JSONRepository.get_bundle"]], "get_bundle() (wildboar.datasets._repository.repository method)": [[6, "wildboar.datasets._repository.Repository.get_bundle"]], "get_bundles() (wildboar.datasets._repository.jsonrepository method)": [[6, "wildboar.datasets._repository.JSONRepository.get_bundles"]], "get_bundles() (wildboar.datasets._repository.repository method)": [[6, "wildboar.datasets._repository.Repository.get_bundles"]], "get_collection() (wildboar.datasets._repository.bundle method)": [[6, "wildboar.datasets._repository.Bundle.get_collection"]], "get_collection() (wildboar.datasets._repository.npbundle method)": [[6, "wildboar.datasets._repository.NpBundle.get_collection"]], "get_filename() (wildboar.datasets._repository.bundle method)": [[6, "wildboar.datasets._repository.Bundle.get_filename"]], "get_filename() (wildboar.datasets._repository.npbundle method)": [[6, "wildboar.datasets._repository.NpBundle.get_filename"]], "list() (wildboar.datasets._repository.bundle method)": [[6, "wildboar.datasets._repository.Bundle.list"]], "list() (wildboar.datasets._repository.npbundle method)": [[6, "wildboar.datasets._repository.NpBundle.list"]], "load() (wildboar.datasets._repository.bundle method)": [[6, "wildboar.datasets._repository.Bundle.load"]], "load() (wildboar.datasets._repository.npbundle method)": [[6, "wildboar.datasets._repository.NpBundle.load"]], "name (wildboar.datasets._repository.jsonrepository property)": [[6, "wildboar.datasets._repository.JSONRepository.name"]], "name (wildboar.datasets._repository.repository property)": [[6, "wildboar.datasets._repository.Repository.name"]], "refresh() (wildboar.datasets._repository.jsonrepository method)": [[6, "wildboar.datasets._repository.JSONRepository.refresh"]], "refresh() (wildboar.datasets._repository.repository method)": [[6, "wildboar.datasets._repository.Repository.refresh"]], "version (wildboar.datasets._repository.jsonrepository property)": [[6, "wildboar.datasets._repository.JSONRepository.version"]], "version (wildboar.datasets._repository.repository property)": [[6, "wildboar.datasets._repository.Repository.version"]], "wildboar.datasets._repository": [[6, "module-wildboar.datasets._repository"]], "wildboar_requires (wildboar.datasets._repository.jsonrepository property)": [[6, "wildboar.datasets._repository.JSONRepository.wildboar_requires"]], "wildboar_requires (wildboar.datasets._repository.repository property)": [[6, "wildboar.datasets._repository.Repository.wildboar_requires"]], "bundle (class in wildboar.datasets)": [[7, "wildboar.datasets.Bundle"]], "jsonrepository (class in wildboar.datasets)": [[7, "wildboar.datasets.JSONRepository"]], "npbundle (class in wildboar.datasets)": [[7, "wildboar.datasets.NpBundle"]], "repository (class in wildboar.datasets)": [[7, "wildboar.datasets.Repository"]], "clear_cache() (in module wildboar.datasets)": [[7, "wildboar.datasets.clear_cache"]], "download_url (wildboar.datasets.jsonrepository property)": [[7, "wildboar.datasets.JSONRepository.download_url"]], "download_url (wildboar.datasets.repository property)": [[7, "wildboar.datasets.Repository.download_url"]], "get_bundle() (wildboar.datasets.jsonrepository method)": [[7, "wildboar.datasets.JSONRepository.get_bundle"]], "get_bundle() (wildboar.datasets.repository method)": [[7, "wildboar.datasets.Repository.get_bundle"]], "get_bundles() (in module wildboar.datasets)": [[7, "wildboar.datasets.get_bundles"]], "get_bundles() (wildboar.datasets.jsonrepository method)": [[7, "wildboar.datasets.JSONRepository.get_bundles"]], "get_bundles() (wildboar.datasets.repository method)": [[7, "wildboar.datasets.Repository.get_bundles"]], "get_collection() (wildboar.datasets.bundle method)": [[7, "wildboar.datasets.Bundle.get_collection"]], "get_collection() (wildboar.datasets.npbundle method)": [[7, "wildboar.datasets.NpBundle.get_collection"]], "get_filename() (wildboar.datasets.bundle method)": [[7, "wildboar.datasets.Bundle.get_filename"]], "get_filename() (wildboar.datasets.npbundle method)": [[7, "wildboar.datasets.NpBundle.get_filename"]], "get_repository() (in module wildboar.datasets)": [[7, "wildboar.datasets.get_repository"]], "install_repository() (in module wildboar.datasets)": [[7, "wildboar.datasets.install_repository"]], "list() (wildboar.datasets.bundle method)": [[7, "wildboar.datasets.Bundle.list"]], "list() (wildboar.datasets.npbundle method)": [[7, "wildboar.datasets.NpBundle.list"]], "list_bundles() (in module wildboar.datasets)": [[7, "wildboar.datasets.list_bundles"]], "list_collections() (in module wildboar.datasets)": [[7, "wildboar.datasets.list_collections"]], "list_datasets() (in module wildboar.datasets)": [[7, "wildboar.datasets.list_datasets"]], "list_repositories() (in module wildboar.datasets)": [[7, "wildboar.datasets.list_repositories"]], "load() (wildboar.datasets.bundle method)": [[7, "wildboar.datasets.Bundle.load"]], "load() (wildboar.datasets.npbundle method)": [[7, "wildboar.datasets.NpBundle.load"]], "load_articulary_word_recognition() (in module wildboar.datasets)": [[7, "wildboar.datasets.load_articulary_word_recognition"]], "load_basic_motions() (in module wildboar.datasets)": [[7, "wildboar.datasets.load_basic_motions"]], "load_dataset() (in module wildboar.datasets)": [[7, "wildboar.datasets.load_dataset"]], "load_datasets() (in module wildboar.datasets)": [[7, "wildboar.datasets.load_datasets"]], "load_ering() (in module wildboar.datasets)": [[7, "wildboar.datasets.load_ering"]], "load_gun_point() (in module wildboar.datasets)": [[7, "wildboar.datasets.load_gun_point"]], "load_synthetic_control() (in module wildboar.datasets)": [[7, "wildboar.datasets.load_synthetic_control"]], "load_two_lead_ecg() (in module wildboar.datasets)": [[7, "wildboar.datasets.load_two_lead_ecg"]], "name (wildboar.datasets.jsonrepository property)": [[7, "wildboar.datasets.JSONRepository.name"]], "name (wildboar.datasets.repository property)": [[7, "wildboar.datasets.Repository.name"]], "refresh() (wildboar.datasets.jsonrepository method)": [[7, "wildboar.datasets.JSONRepository.refresh"]], "refresh() (wildboar.datasets.repository method)": [[7, "wildboar.datasets.Repository.refresh"]], "refresh_repositories() (in module wildboar.datasets)": [[7, "wildboar.datasets.refresh_repositories"]], "set_cache_dir() (in module wildboar.datasets)": [[7, "wildboar.datasets.set_cache_dir"]], "version (wildboar.datasets.jsonrepository property)": [[7, "wildboar.datasets.JSONRepository.version"]], "version (wildboar.datasets.repository property)": [[7, "wildboar.datasets.Repository.version"]], "wildboar.datasets": [[7, "module-wildboar.datasets"]], "wildboar_requires (wildboar.datasets.jsonrepository property)": [[7, "wildboar.datasets.JSONRepository.wildboar_requires"]], "wildboar_requires (wildboar.datasets.repository property)": [[7, "wildboar.datasets.Repository.wildboar_requires"]], "density_outliers() (in module wildboar.datasets.outlier)": [[8, "wildboar.datasets.outlier.density_outliers"]], "emmott_outliers() (in module wildboar.datasets.outlier)": [[8, "wildboar.datasets.outlier.emmott_outliers"]], "kmeans_outliers() (in module wildboar.datasets.outlier)": [[8, "wildboar.datasets.outlier.kmeans_outliers"]], "majority_outliers() (in module wildboar.datasets.outlier)": [[8, "wildboar.datasets.outlier.majority_outliers"]], "minority_outliers() (in module wildboar.datasets.outlier)": [[8, "wildboar.datasets.outlier.minority_outliers"]], "wildboar.datasets.outlier": [[8, "module-wildboar.datasets.outlier"]], "maxabs_scale() (in module wildboar.datasets.preprocess)": [[9, "wildboar.datasets.preprocess.maxabs_scale"]], "minmax_scale() (in module wildboar.datasets.preprocess)": [[9, "wildboar.datasets.preprocess.minmax_scale"]], "named_preprocess() (in module wildboar.datasets.preprocess)": [[9, "wildboar.datasets.preprocess.named_preprocess"]], "standardize() (in module wildboar.datasets.preprocess)": [[9, "wildboar.datasets.preprocess.standardize"]], "truncate() (in module wildboar.datasets.preprocess)": [[9, "wildboar.datasets.preprocess.truncate"]], "wildboar.datasets.preprocess": [[9, "module-wildboar.datasets.preprocess"]], "basedistanceselector (class in wildboar.dimension_selection._base)": [[10, "wildboar.dimension_selection._base.BaseDistanceSelector"]], "dimensionselectormixin (class in wildboar.dimension_selection._base)": [[10, "wildboar.dimension_selection._base.DimensionSelectorMixin"]], "fit() (wildboar.dimension_selection._base.basedistanceselector method)": [[10, "wildboar.dimension_selection._base.BaseDistanceSelector.fit"]], "fit_transform() (wildboar.dimension_selection._base.basedistanceselector method)": [[10, "wildboar.dimension_selection._base.BaseDistanceSelector.fit_transform"]], "fit_transform() (wildboar.dimension_selection._base.dimensionselectormixin method)": [[10, "wildboar.dimension_selection._base.DimensionSelectorMixin.fit_transform"]], "get_dimensions() (wildboar.dimension_selection._base.basedistanceselector method)": [[10, "wildboar.dimension_selection._base.BaseDistanceSelector.get_dimensions"]], "get_dimensions() (wildboar.dimension_selection._base.dimensionselectormixin method)": [[10, "wildboar.dimension_selection._base.DimensionSelectorMixin.get_dimensions"]], "get_metadata_routing() (wildboar.dimension_selection._base.basedistanceselector method)": [[10, "wildboar.dimension_selection._base.BaseDistanceSelector.get_metadata_routing"]], "get_params() (wildboar.dimension_selection._base.basedistanceselector method)": [[10, "wildboar.dimension_selection._base.BaseDistanceSelector.get_params"]], "inverse_transform() (wildboar.dimension_selection._base.basedistanceselector method)": [[10, "wildboar.dimension_selection._base.BaseDistanceSelector.inverse_transform"]], "inverse_transform() (wildboar.dimension_selection._base.dimensionselectormixin method)": [[10, "wildboar.dimension_selection._base.DimensionSelectorMixin.inverse_transform"]], "set_output() (wildboar.dimension_selection._base.basedistanceselector method)": [[10, "wildboar.dimension_selection._base.BaseDistanceSelector.set_output"]], "set_output() (wildboar.dimension_selection._base.dimensionselectormixin method)": [[10, "wildboar.dimension_selection._base.DimensionSelectorMixin.set_output"]], "set_params() (wildboar.dimension_selection._base.basedistanceselector method)": [[10, "wildboar.dimension_selection._base.BaseDistanceSelector.set_params"]], "transform() (wildboar.dimension_selection._base.basedistanceselector method)": [[10, "wildboar.dimension_selection._base.BaseDistanceSelector.transform"]], "transform() (wildboar.dimension_selection._base.dimensionselectormixin method)": [[10, "wildboar.dimension_selection._base.DimensionSelectorMixin.transform"]], "wildboar.dimension_selection._base": [[10, "module-wildboar.dimension_selection._base"]], "selectdimensionpercentile (class in wildboar.dimension_selection._distance)": [[11, "wildboar.dimension_selection._distance.SelectDimensionPercentile"]], "selectdimensionsignificance (class in wildboar.dimension_selection._distance)": [[11, "wildboar.dimension_selection._distance.SelectDimensionSignificance"]], "selectdimensiontopk (class in wildboar.dimension_selection._distance)": [[11, "wildboar.dimension_selection._distance.SelectDimensionTopK"]], "fit() (wildboar.dimension_selection._distance.selectdimensionpercentile method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionPercentile.fit"]], "fit() (wildboar.dimension_selection._distance.selectdimensionsignificance method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionSignificance.fit"]], "fit() (wildboar.dimension_selection._distance.selectdimensiontopk method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionTopK.fit"]], "fit_transform() (wildboar.dimension_selection._distance.selectdimensionpercentile method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionPercentile.fit_transform"]], "fit_transform() (wildboar.dimension_selection._distance.selectdimensionsignificance method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionSignificance.fit_transform"]], "fit_transform() (wildboar.dimension_selection._distance.selectdimensiontopk method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionTopK.fit_transform"]], "get_dimensions() (wildboar.dimension_selection._distance.selectdimensionpercentile method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionPercentile.get_dimensions"]], "get_dimensions() (wildboar.dimension_selection._distance.selectdimensionsignificance method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionSignificance.get_dimensions"]], "get_dimensions() (wildboar.dimension_selection._distance.selectdimensiontopk method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionTopK.get_dimensions"]], "get_metadata_routing() (wildboar.dimension_selection._distance.selectdimensionpercentile method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionPercentile.get_metadata_routing"]], "get_metadata_routing() (wildboar.dimension_selection._distance.selectdimensionsignificance method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionSignificance.get_metadata_routing"]], "get_metadata_routing() (wildboar.dimension_selection._distance.selectdimensiontopk method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionTopK.get_metadata_routing"]], "get_params() (wildboar.dimension_selection._distance.selectdimensionpercentile method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionPercentile.get_params"]], "get_params() (wildboar.dimension_selection._distance.selectdimensionsignificance method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionSignificance.get_params"]], "get_params() (wildboar.dimension_selection._distance.selectdimensiontopk method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionTopK.get_params"]], "inverse_transform() (wildboar.dimension_selection._distance.selectdimensionpercentile method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionPercentile.inverse_transform"]], "inverse_transform() (wildboar.dimension_selection._distance.selectdimensionsignificance method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionSignificance.inverse_transform"]], "inverse_transform() (wildboar.dimension_selection._distance.selectdimensiontopk method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionTopK.inverse_transform"]], "set_output() (wildboar.dimension_selection._distance.selectdimensionpercentile method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionPercentile.set_output"]], "set_output() (wildboar.dimension_selection._distance.selectdimensionsignificance method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionSignificance.set_output"]], "set_output() (wildboar.dimension_selection._distance.selectdimensiontopk method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionTopK.set_output"]], "set_params() (wildboar.dimension_selection._distance.selectdimensionpercentile method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionPercentile.set_params"]], "set_params() (wildboar.dimension_selection._distance.selectdimensionsignificance method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionSignificance.set_params"]], "set_params() (wildboar.dimension_selection._distance.selectdimensiontopk method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionTopK.set_params"]], "transform() (wildboar.dimension_selection._distance.selectdimensionpercentile method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionPercentile.transform"]], "transform() (wildboar.dimension_selection._distance.selectdimensionsignificance method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionSignificance.transform"]], "transform() (wildboar.dimension_selection._distance.selectdimensiontopk method)": [[11, "wildboar.dimension_selection._distance.SelectDimensionTopK.transform"]], "wildboar.dimension_selection._distance": [[11, "module-wildboar.dimension_selection._distance"]], "sequentialdimensionselector (class in wildboar.dimension_selection._sequential)": [[12, "wildboar.dimension_selection._sequential.SequentialDimensionSelector"]], "fit() (wildboar.dimension_selection._sequential.sequentialdimensionselector method)": [[12, "wildboar.dimension_selection._sequential.SequentialDimensionSelector.fit"]], "fit_transform() (wildboar.dimension_selection._sequential.sequentialdimensionselector method)": [[12, "wildboar.dimension_selection._sequential.SequentialDimensionSelector.fit_transform"]], "get_dimensions() (wildboar.dimension_selection._sequential.sequentialdimensionselector method)": [[12, "wildboar.dimension_selection._sequential.SequentialDimensionSelector.get_dimensions"]], "get_metadata_routing() (wildboar.dimension_selection._sequential.sequentialdimensionselector method)": [[12, "wildboar.dimension_selection._sequential.SequentialDimensionSelector.get_metadata_routing"]], "get_params() (wildboar.dimension_selection._sequential.sequentialdimensionselector method)": [[12, "wildboar.dimension_selection._sequential.SequentialDimensionSelector.get_params"]], "inverse_transform() (wildboar.dimension_selection._sequential.sequentialdimensionselector method)": [[12, "wildboar.dimension_selection._sequential.SequentialDimensionSelector.inverse_transform"]], "set_output() (wildboar.dimension_selection._sequential.sequentialdimensionselector method)": [[12, "wildboar.dimension_selection._sequential.SequentialDimensionSelector.set_output"]], "set_params() (wildboar.dimension_selection._sequential.sequentialdimensionselector method)": [[12, "wildboar.dimension_selection._sequential.SequentialDimensionSelector.set_params"]], "transform() (wildboar.dimension_selection._sequential.sequentialdimensionselector method)": [[12, "wildboar.dimension_selection._sequential.SequentialDimensionSelector.transform"]], "wildboar.dimension_selection._sequential": [[12, "module-wildboar.dimension_selection._sequential"]], "distancevariancethreshold (class in wildboar.dimension_selection._variance)": [[13, "wildboar.dimension_selection._variance.DistanceVarianceThreshold"]], "fit() (wildboar.dimension_selection._variance.distancevariancethreshold method)": [[13, "wildboar.dimension_selection._variance.DistanceVarianceThreshold.fit"]], "fit_transform() (wildboar.dimension_selection._variance.distancevariancethreshold method)": [[13, "wildboar.dimension_selection._variance.DistanceVarianceThreshold.fit_transform"]], "get_dimensions() (wildboar.dimension_selection._variance.distancevariancethreshold method)": [[13, "wildboar.dimension_selection._variance.DistanceVarianceThreshold.get_dimensions"]], "get_metadata_routing() (wildboar.dimension_selection._variance.distancevariancethreshold method)": [[13, "wildboar.dimension_selection._variance.DistanceVarianceThreshold.get_metadata_routing"]], "get_params() (wildboar.dimension_selection._variance.distancevariancethreshold method)": [[13, "wildboar.dimension_selection._variance.DistanceVarianceThreshold.get_params"]], "inverse_transform() (wildboar.dimension_selection._variance.distancevariancethreshold method)": [[13, "wildboar.dimension_selection._variance.DistanceVarianceThreshold.inverse_transform"]], "set_output() (wildboar.dimension_selection._variance.distancevariancethreshold method)": [[13, "wildboar.dimension_selection._variance.DistanceVarianceThreshold.set_output"]], "set_params() (wildboar.dimension_selection._variance.distancevariancethreshold method)": [[13, "wildboar.dimension_selection._variance.DistanceVarianceThreshold.set_params"]], "transform() (wildboar.dimension_selection._variance.distancevariancethreshold method)": [[13, "wildboar.dimension_selection._variance.DistanceVarianceThreshold.transform"]], "wildboar.dimension_selection._variance": [[13, "module-wildboar.dimension_selection._variance"]], "distancevariancethreshold (class in wildboar.dimension_selection)": [[14, "wildboar.dimension_selection.DistanceVarianceThreshold"]], "selectdimensionpercentile (class in wildboar.dimension_selection)": [[14, "wildboar.dimension_selection.SelectDimensionPercentile"]], "selectdimensionsignificance (class in wildboar.dimension_selection)": [[14, "wildboar.dimension_selection.SelectDimensionSignificance"]], "selectdimensiontopk (class in wildboar.dimension_selection)": [[14, "wildboar.dimension_selection.SelectDimensionTopK"]], "sequentialdimensionselector (class in wildboar.dimension_selection)": [[14, "wildboar.dimension_selection.SequentialDimensionSelector"]], "fit() (wildboar.dimension_selection.distancevariancethreshold method)": [[14, "wildboar.dimension_selection.DistanceVarianceThreshold.fit"]], "fit() (wildboar.dimension_selection.selectdimensionpercentile method)": [[14, "wildboar.dimension_selection.SelectDimensionPercentile.fit"]], "fit() (wildboar.dimension_selection.selectdimensionsignificance method)": [[14, "wildboar.dimension_selection.SelectDimensionSignificance.fit"]], "fit() (wildboar.dimension_selection.selectdimensiontopk method)": [[14, "wildboar.dimension_selection.SelectDimensionTopK.fit"]], "fit() (wildboar.dimension_selection.sequentialdimensionselector method)": [[14, "wildboar.dimension_selection.SequentialDimensionSelector.fit"]], "fit_transform() (wildboar.dimension_selection.distancevariancethreshold method)": [[14, "wildboar.dimension_selection.DistanceVarianceThreshold.fit_transform"]], "fit_transform() (wildboar.dimension_selection.selectdimensionpercentile method)": [[14, "wildboar.dimension_selection.SelectDimensionPercentile.fit_transform"]], "fit_transform() (wildboar.dimension_selection.selectdimensionsignificance method)": [[14, "wildboar.dimension_selection.SelectDimensionSignificance.fit_transform"]], "fit_transform() (wildboar.dimension_selection.selectdimensiontopk method)": [[14, "wildboar.dimension_selection.SelectDimensionTopK.fit_transform"]], "fit_transform() (wildboar.dimension_selection.sequentialdimensionselector method)": [[14, "wildboar.dimension_selection.SequentialDimensionSelector.fit_transform"]], "get_dimensions() (wildboar.dimension_selection.distancevariancethreshold method)": [[14, "wildboar.dimension_selection.DistanceVarianceThreshold.get_dimensions"]], "get_dimensions() (wildboar.dimension_selection.selectdimensionpercentile method)": [[14, "wildboar.dimension_selection.SelectDimensionPercentile.get_dimensions"]], "get_dimensions() (wildboar.dimension_selection.selectdimensionsignificance method)": [[14, "wildboar.dimension_selection.SelectDimensionSignificance.get_dimensions"]], "get_dimensions() (wildboar.dimension_selection.selectdimensiontopk method)": [[14, "wildboar.dimension_selection.SelectDimensionTopK.get_dimensions"]], "get_dimensions() (wildboar.dimension_selection.sequentialdimensionselector method)": [[14, "wildboar.dimension_selection.SequentialDimensionSelector.get_dimensions"]], "get_metadata_routing() (wildboar.dimension_selection.distancevariancethreshold method)": [[14, "wildboar.dimension_selection.DistanceVarianceThreshold.get_metadata_routing"]], "get_metadata_routing() (wildboar.dimension_selection.selectdimensionpercentile method)": [[14, "wildboar.dimension_selection.SelectDimensionPercentile.get_metadata_routing"]], "get_metadata_routing() (wildboar.dimension_selection.selectdimensionsignificance method)": [[14, "wildboar.dimension_selection.SelectDimensionSignificance.get_metadata_routing"]], "get_metadata_routing() (wildboar.dimension_selection.selectdimensiontopk method)": [[14, "wildboar.dimension_selection.SelectDimensionTopK.get_metadata_routing"]], "get_metadata_routing() (wildboar.dimension_selection.sequentialdimensionselector method)": [[14, "wildboar.dimension_selection.SequentialDimensionSelector.get_metadata_routing"]], "get_params() (wildboar.dimension_selection.distancevariancethreshold method)": [[14, "wildboar.dimension_selection.DistanceVarianceThreshold.get_params"]], "get_params() (wildboar.dimension_selection.selectdimensionpercentile method)": [[14, "wildboar.dimension_selection.SelectDimensionPercentile.get_params"]], "get_params() (wildboar.dimension_selection.selectdimensionsignificance method)": [[14, "wildboar.dimension_selection.SelectDimensionSignificance.get_params"]], "get_params() (wildboar.dimension_selection.selectdimensiontopk method)": [[14, "wildboar.dimension_selection.SelectDimensionTopK.get_params"]], "get_params() (wildboar.dimension_selection.sequentialdimensionselector method)": [[14, "wildboar.dimension_selection.SequentialDimensionSelector.get_params"]], "inverse_transform() (wildboar.dimension_selection.distancevariancethreshold method)": [[14, "wildboar.dimension_selection.DistanceVarianceThreshold.inverse_transform"]], "inverse_transform() (wildboar.dimension_selection.selectdimensionpercentile method)": [[14, "wildboar.dimension_selection.SelectDimensionPercentile.inverse_transform"]], "inverse_transform() (wildboar.dimension_selection.selectdimensionsignificance method)": [[14, "wildboar.dimension_selection.SelectDimensionSignificance.inverse_transform"]], "inverse_transform() (wildboar.dimension_selection.selectdimensiontopk method)": [[14, "wildboar.dimension_selection.SelectDimensionTopK.inverse_transform"]], "inverse_transform() (wildboar.dimension_selection.sequentialdimensionselector method)": [[14, "wildboar.dimension_selection.SequentialDimensionSelector.inverse_transform"]], "set_output() (wildboar.dimension_selection.distancevariancethreshold method)": [[14, "wildboar.dimension_selection.DistanceVarianceThreshold.set_output"]], "set_output() (wildboar.dimension_selection.selectdimensionpercentile method)": [[14, "wildboar.dimension_selection.SelectDimensionPercentile.set_output"]], "set_output() (wildboar.dimension_selection.selectdimensionsignificance method)": [[14, "wildboar.dimension_selection.SelectDimensionSignificance.set_output"]], "set_output() (wildboar.dimension_selection.selectdimensiontopk method)": [[14, "wildboar.dimension_selection.SelectDimensionTopK.set_output"]], "set_output() (wildboar.dimension_selection.sequentialdimensionselector method)": [[14, "wildboar.dimension_selection.SequentialDimensionSelector.set_output"]], "set_params() (wildboar.dimension_selection.distancevariancethreshold method)": [[14, "wildboar.dimension_selection.DistanceVarianceThreshold.set_params"]], "set_params() (wildboar.dimension_selection.selectdimensionpercentile method)": [[14, "wildboar.dimension_selection.SelectDimensionPercentile.set_params"]], "set_params() (wildboar.dimension_selection.selectdimensionsignificance method)": [[14, "wildboar.dimension_selection.SelectDimensionSignificance.set_params"]], "set_params() (wildboar.dimension_selection.selectdimensiontopk method)": [[14, "wildboar.dimension_selection.SelectDimensionTopK.set_params"]], "set_params() (wildboar.dimension_selection.sequentialdimensionselector method)": [[14, "wildboar.dimension_selection.SequentialDimensionSelector.set_params"]], "transform() (wildboar.dimension_selection.distancevariancethreshold method)": [[14, "wildboar.dimension_selection.DistanceVarianceThreshold.transform"]], "transform() (wildboar.dimension_selection.selectdimensionpercentile method)": [[14, "wildboar.dimension_selection.SelectDimensionPercentile.transform"]], "transform() (wildboar.dimension_selection.selectdimensionsignificance method)": [[14, "wildboar.dimension_selection.SelectDimensionSignificance.transform"]], "transform() (wildboar.dimension_selection.selectdimensiontopk method)": [[14, "wildboar.dimension_selection.SelectDimensionTopK.transform"]], "transform() (wildboar.dimension_selection.sequentialdimensionselector method)": [[14, "wildboar.dimension_selection.SequentialDimensionSelector.transform"]], "wildboar.dimension_selection": [[14, "module-wildboar.dimension_selection"]], "argmin_distance() (in module wildboar.distance._distance)": [[15, "wildboar.distance._distance.argmin_distance"]], "argmin_subsequence_distance() (in module wildboar.distance._distance)": [[15, "wildboar.distance._distance.argmin_subsequence_distance"]], "distance_profile() (in module wildboar.distance._distance)": [[15, "wildboar.distance._distance.distance_profile"]], "paired_distance() (in module wildboar.distance._distance)": [[15, "wildboar.distance._distance.paired_distance"]], "paired_subsequence_distance() (in module wildboar.distance._distance)": [[15, "wildboar.distance._distance.paired_subsequence_distance"]], "paired_subsequence_match() (in module wildboar.distance._distance)": [[15, "wildboar.distance._distance.paired_subsequence_match"]], "pairwise_distance() (in module wildboar.distance._distance)": [[15, "wildboar.distance._distance.pairwise_distance"]], "pairwise_subsequence_distance() (in module wildboar.distance._distance)": [[15, "wildboar.distance._distance.pairwise_subsequence_distance"]], "subsequence_match() (in module wildboar.distance._distance)": [[15, "wildboar.distance._distance.subsequence_match"]], "wildboar.distance._distance": [[15, "module-wildboar.distance._distance"]], "mds (class in wildboar.distance._manifold)": [[16, "wildboar.distance._manifold.MDS"]], "get_metadata_routing() (wildboar.distance._manifold.mds method)": [[16, "wildboar.distance._manifold.MDS.get_metadata_routing"]], "get_params() (wildboar.distance._manifold.mds method)": [[16, "wildboar.distance._manifold.MDS.get_params"]], "set_params() (wildboar.distance._manifold.mds method)": [[16, "wildboar.distance._manifold.MDS.set_params"]], "wildboar.distance._manifold": [[16, "module-wildboar.distance._manifold"]], "matrix_profile() (in module wildboar.distance._matrix_profile)": [[17, "wildboar.distance._matrix_profile.matrix_profile"]], "wildboar.distance._matrix_profile": [[17, "module-wildboar.distance._matrix_profile"]], "wildboar.distance._multi_metric": [[18, "module-wildboar.distance._multi_metric"]], "kmeans (class in wildboar.distance._neighbors)": [[19, "wildboar.distance._neighbors.KMeans"]], "kmedoids (class in wildboar.distance._neighbors)": [[19, "wildboar.distance._neighbors.KMedoids"]], "kneighborsclassifier (class in wildboar.distance._neighbors)": [[19, "wildboar.distance._neighbors.KNeighborsClassifier"]], "fit() (wildboar.distance._neighbors.kmeans method)": [[19, "wildboar.distance._neighbors.KMeans.fit"]], "fit() (wildboar.distance._neighbors.kmedoids method)": [[19, "wildboar.distance._neighbors.KMedoids.fit"]], "fit() (wildboar.distance._neighbors.kneighborsclassifier method)": [[19, "wildboar.distance._neighbors.KNeighborsClassifier.fit"]], "fit_predict() (wildboar.distance._neighbors.kmeans method)": [[19, "wildboar.distance._neighbors.KMeans.fit_predict"]], "fit_predict() (wildboar.distance._neighbors.kmedoids method)": [[19, "wildboar.distance._neighbors.KMedoids.fit_predict"]], "fit_transform() (wildboar.distance._neighbors.kmeans method)": [[19, "wildboar.distance._neighbors.KMeans.fit_transform"]], "fit_transform() (wildboar.distance._neighbors.kmedoids method)": [[19, "wildboar.distance._neighbors.KMedoids.fit_transform"]], "get_metadata_routing() (wildboar.distance._neighbors.kmeans method)": [[19, "wildboar.distance._neighbors.KMeans.get_metadata_routing"]], "get_metadata_routing() (wildboar.distance._neighbors.kmedoids method)": [[19, "wildboar.distance._neighbors.KMedoids.get_metadata_routing"]], "get_metadata_routing() (wildboar.distance._neighbors.kneighborsclassifier method)": [[19, "wildboar.distance._neighbors.KNeighborsClassifier.get_metadata_routing"]], "get_params() (wildboar.distance._neighbors.kmeans method)": [[19, "wildboar.distance._neighbors.KMeans.get_params"]], "get_params() (wildboar.distance._neighbors.kmedoids method)": [[19, "wildboar.distance._neighbors.KMedoids.get_params"]], "get_params() (wildboar.distance._neighbors.kneighborsclassifier method)": [[19, "wildboar.distance._neighbors.KNeighborsClassifier.get_params"]], "predict() (wildboar.distance._neighbors.kmeans method)": [[19, "wildboar.distance._neighbors.KMeans.predict"]], "predict() (wildboar.distance._neighbors.kmedoids method)": [[19, "wildboar.distance._neighbors.KMedoids.predict"]], "predict() (wildboar.distance._neighbors.kneighborsclassifier method)": [[19, "wildboar.distance._neighbors.KNeighborsClassifier.predict"]], "predict_proba() (wildboar.distance._neighbors.kneighborsclassifier method)": [[19, "wildboar.distance._neighbors.KNeighborsClassifier.predict_proba"]], "score() (wildboar.distance._neighbors.kneighborsclassifier method)": [[19, "wildboar.distance._neighbors.KNeighborsClassifier.score"]], "set_output() (wildboar.distance._neighbors.kmeans method)": [[19, "wildboar.distance._neighbors.KMeans.set_output"]], "set_output() (wildboar.distance._neighbors.kmedoids method)": [[19, "wildboar.distance._neighbors.KMedoids.set_output"]], "set_params() (wildboar.distance._neighbors.kmeans method)": [[19, "wildboar.distance._neighbors.KMeans.set_params"]], "set_params() (wildboar.distance._neighbors.kmedoids method)": [[19, "wildboar.distance._neighbors.KMedoids.set_params"]], "set_params() (wildboar.distance._neighbors.kneighborsclassifier method)": [[19, "wildboar.distance._neighbors.KNeighborsClassifier.set_params"]], "transform() (wildboar.distance._neighbors.kmeans method)": [[19, "wildboar.distance._neighbors.KMeans.transform"]], "transform() (wildboar.distance._neighbors.kmedoids method)": [[19, "wildboar.distance._neighbors.KMedoids.transform"]], "wildboar.distance._neighbors": [[19, "module-wildboar.distance._neighbors"]], "ddtw_distance() (in module wildboar.distance.dtw)": [[20, "wildboar.distance.dtw.ddtw_distance"]], "dtw_alignment() (in module wildboar.distance.dtw)": [[20, "wildboar.distance.dtw.dtw_alignment"]], "dtw_average() (in module wildboar.distance.dtw)": [[20, "wildboar.distance.dtw.dtw_average"]], "dtw_distance() (in module wildboar.distance.dtw)": [[20, "wildboar.distance.dtw.dtw_distance"]], "dtw_envelop() (in module wildboar.distance.dtw)": [[20, "wildboar.distance.dtw.dtw_envelop"]], "dtw_lb_keogh() (in module wildboar.distance.dtw)": [[20, "wildboar.distance.dtw.dtw_lb_keogh"]], "dtw_mapping() (in module wildboar.distance.dtw)": [[20, "wildboar.distance.dtw.dtw_mapping"]], "jeong_weight() (in module wildboar.distance.dtw)": [[20, "wildboar.distance.dtw.jeong_weight"]], "wddtw_distance() (in module wildboar.distance.dtw)": [[20, "wildboar.distance.dtw.wddtw_distance"]], "wdtw_alignment() (in module wildboar.distance.dtw)": [[20, "wildboar.distance.dtw.wdtw_alignment"]], "wdtw_distance() (in module wildboar.distance.dtw)": [[20, "wildboar.distance.dtw.wdtw_distance"]], "wildboar.distance.dtw": [[20, "module-wildboar.distance.dtw"]], "kmeans (class in wildboar.distance)": [[21, "wildboar.distance.KMeans"]], "kmedoids (class in wildboar.distance)": [[21, "wildboar.distance.KMedoids"]], "kneighborsclassifier (class in wildboar.distance)": [[21, "wildboar.distance.KNeighborsClassifier"]], "mds (class in wildboar.distance)": [[21, "wildboar.distance.MDS"]], "argmin_distance() (in module wildboar.distance)": [[21, "wildboar.distance.argmin_distance"]], "argmin_subsequence_distance() (in module wildboar.distance)": [[21, "wildboar.distance.argmin_subsequence_distance"]], "distance_profile() (in module wildboar.distance)": [[21, "wildboar.distance.distance_profile"]], "fit() (wildboar.distance.kmeans method)": [[21, "wildboar.distance.KMeans.fit"]], "fit() (wildboar.distance.kmedoids method)": [[21, "wildboar.distance.KMedoids.fit"]], "fit() (wildboar.distance.kneighborsclassifier method)": [[21, "wildboar.distance.KNeighborsClassifier.fit"]], "fit_predict() (wildboar.distance.kmeans method)": [[21, "wildboar.distance.KMeans.fit_predict"]], "fit_predict() (wildboar.distance.kmedoids method)": [[21, "wildboar.distance.KMedoids.fit_predict"]], "fit_transform() (wildboar.distance.kmeans method)": [[21, "wildboar.distance.KMeans.fit_transform"]], "fit_transform() (wildboar.distance.kmedoids method)": [[21, "wildboar.distance.KMedoids.fit_transform"]], "get_metadata_routing() (wildboar.distance.kmeans method)": [[21, "wildboar.distance.KMeans.get_metadata_routing"]], "get_metadata_routing() (wildboar.distance.kmedoids method)": [[21, "wildboar.distance.KMedoids.get_metadata_routing"]], "get_metadata_routing() (wildboar.distance.kneighborsclassifier method)": [[21, "wildboar.distance.KNeighborsClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.distance.mds method)": [[21, "wildboar.distance.MDS.get_metadata_routing"]], "get_params() (wildboar.distance.kmeans method)": [[21, "wildboar.distance.KMeans.get_params"]], "get_params() (wildboar.distance.kmedoids method)": [[21, "wildboar.distance.KMedoids.get_params"]], "get_params() (wildboar.distance.kneighborsclassifier method)": [[21, "wildboar.distance.KNeighborsClassifier.get_params"]], "get_params() (wildboar.distance.mds method)": [[21, "wildboar.distance.MDS.get_params"]], "matrix_profile() (in module wildboar.distance)": [[21, "wildboar.distance.matrix_profile"]], "paired_distance() (in module wildboar.distance)": [[21, "wildboar.distance.paired_distance"]], "paired_subsequence_distance() (in module wildboar.distance)": [[21, "wildboar.distance.paired_subsequence_distance"]], "paired_subsequence_match() (in module wildboar.distance)": [[21, "wildboar.distance.paired_subsequence_match"]], "pairwise_distance() (in module wildboar.distance)": [[21, "wildboar.distance.pairwise_distance"]], "pairwise_subsequence_distance() (in module wildboar.distance)": [[21, "wildboar.distance.pairwise_subsequence_distance"]], "predict() (wildboar.distance.kmeans method)": [[21, "wildboar.distance.KMeans.predict"]], "predict() (wildboar.distance.kmedoids method)": [[21, "wildboar.distance.KMedoids.predict"]], "predict() (wildboar.distance.kneighborsclassifier method)": [[21, "wildboar.distance.KNeighborsClassifier.predict"]], "predict_proba() (wildboar.distance.kneighborsclassifier method)": [[21, "wildboar.distance.KNeighborsClassifier.predict_proba"]], "score() (wildboar.distance.kneighborsclassifier method)": [[21, "wildboar.distance.KNeighborsClassifier.score"]], "set_output() (wildboar.distance.kmeans method)": [[21, "wildboar.distance.KMeans.set_output"]], "set_output() (wildboar.distance.kmedoids method)": [[21, "wildboar.distance.KMedoids.set_output"]], "set_params() (wildboar.distance.kmeans method)": [[21, "wildboar.distance.KMeans.set_params"]], "set_params() (wildboar.distance.kmedoids method)": [[21, "wildboar.distance.KMedoids.set_params"]], "set_params() (wildboar.distance.kneighborsclassifier method)": [[21, "wildboar.distance.KNeighborsClassifier.set_params"]], "set_params() (wildboar.distance.mds method)": [[21, "wildboar.distance.MDS.set_params"]], "subsequence_match() (in module wildboar.distance)": [[21, "wildboar.distance.subsequence_match"]], "transform() (wildboar.distance.kmeans method)": [[21, "wildboar.distance.KMeans.transform"]], "transform() (wildboar.distance.kmedoids method)": [[21, "wildboar.distance.KMedoids.transform"]], "wildboar.distance": [[21, "module-wildboar.distance"]], "elasticensembleclassifier (class in wildboar.ensemble._elastic)": [[22, "wildboar.ensemble._elastic.ElasticEnsembleClassifier"]], "fit() (wildboar.ensemble._elastic.elasticensembleclassifier method)": [[22, "wildboar.ensemble._elastic.ElasticEnsembleClassifier.fit"]], "get_metadata_routing() (wildboar.ensemble._elastic.elasticensembleclassifier method)": [[22, "wildboar.ensemble._elastic.ElasticEnsembleClassifier.get_metadata_routing"]], "get_params() (wildboar.ensemble._elastic.elasticensembleclassifier method)": [[22, "wildboar.ensemble._elastic.ElasticEnsembleClassifier.get_params"]], "predict() (wildboar.ensemble._elastic.elasticensembleclassifier method)": [[22, "wildboar.ensemble._elastic.ElasticEnsembleClassifier.predict"]], "predict_proba() (wildboar.ensemble._elastic.elasticensembleclassifier method)": [[22, "wildboar.ensemble._elastic.ElasticEnsembleClassifier.predict_proba"]], "score() (wildboar.ensemble._elastic.elasticensembleclassifier method)": [[22, "wildboar.ensemble._elastic.ElasticEnsembleClassifier.score"]], "set_params() (wildboar.ensemble._elastic.elasticensembleclassifier method)": [[22, "wildboar.ensemble._elastic.ElasticEnsembleClassifier.set_params"]], "wildboar.ensemble._elastic": [[22, "module-wildboar.ensemble._elastic"]], "baggingclassifier (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.BaggingClassifier"]], "baggingregressor (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.BaggingRegressor"]], "basebagging (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.BaseBagging"]], "baseforestclassifier (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.BaseForestClassifier"]], "baseforestregressor (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.BaseForestRegressor"]], "baseshapeletforestclassifier (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestClassifier"]], "baseshapeletforestregressor (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestRegressor"]], "extrashapelettreesclassifier (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier"]], "extrashapelettreesregressor (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesRegressor"]], "forestmixin (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.ForestMixin"]], "intervalforestclassifier (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.IntervalForestClassifier"]], "intervalforestregressor (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.IntervalForestRegressor"]], "isolationshapeletforest (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.IsolationShapeletForest"]], "pivotforestclassifier (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.PivotForestClassifier"]], "proximityforestclassifier (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.ProximityForestClassifier"]], "rocketforestclassifier (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.RocketForestClassifier"]], "rocketforestregressor (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.RocketForestRegressor"]], "shapeletforestclassifier (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.ShapeletForestClassifier"]], "shapeletforestembedding (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.ShapeletForestEmbedding"]], "shapeletforestregressor (class in wildboar.ensemble._ensemble)": [[23, "wildboar.ensemble._ensemble.ShapeletForestRegressor"]], "decision_function() (wildboar.ensemble._ensemble.baggingclassifier method)": [[23, "wildboar.ensemble._ensemble.BaggingClassifier.decision_function"]], "decision_function() (wildboar.ensemble._ensemble.baseforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseForestClassifier.decision_function"]], "decision_function() (wildboar.ensemble._ensemble.baseshapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestClassifier.decision_function"]], "decision_function() (wildboar.ensemble._ensemble.extrashapelettreesclassifier method)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier.decision_function"]], "decision_function() (wildboar.ensemble._ensemble.intervalforestclassifier method)": [[23, "wildboar.ensemble._ensemble.IntervalForestClassifier.decision_function"]], "decision_function() (wildboar.ensemble._ensemble.pivotforestclassifier method)": [[23, "wildboar.ensemble._ensemble.PivotForestClassifier.decision_function"]], "decision_function() (wildboar.ensemble._ensemble.proximityforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ProximityForestClassifier.decision_function"]], "decision_function() (wildboar.ensemble._ensemble.rocketforestclassifier method)": [[23, "wildboar.ensemble._ensemble.RocketForestClassifier.decision_function"]], "decision_function() (wildboar.ensemble._ensemble.shapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestClassifier.decision_function"]], "estimators_samples_ (wildboar.ensemble._ensemble.baggingclassifier property)": [[23, "wildboar.ensemble._ensemble.BaggingClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.baggingregressor property)": [[23, "wildboar.ensemble._ensemble.BaggingRegressor.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.basebagging property)": [[23, "wildboar.ensemble._ensemble.BaseBagging.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.baseforestclassifier property)": [[23, "wildboar.ensemble._ensemble.BaseForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.baseforestregressor property)": [[23, "wildboar.ensemble._ensemble.BaseForestRegressor.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.baseshapeletforestclassifier property)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.baseshapeletforestregressor property)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestRegressor.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.extrashapelettreesclassifier property)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.extrashapelettreesregressor property)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesRegressor.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.intervalforestclassifier property)": [[23, "wildboar.ensemble._ensemble.IntervalForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.intervalforestregressor property)": [[23, "wildboar.ensemble._ensemble.IntervalForestRegressor.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.isolationshapeletforest property)": [[23, "wildboar.ensemble._ensemble.IsolationShapeletForest.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.pivotforestclassifier property)": [[23, "wildboar.ensemble._ensemble.PivotForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.proximityforestclassifier property)": [[23, "wildboar.ensemble._ensemble.ProximityForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.rocketforestclassifier property)": [[23, "wildboar.ensemble._ensemble.RocketForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.rocketforestregressor property)": [[23, "wildboar.ensemble._ensemble.RocketForestRegressor.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.shapeletforestclassifier property)": [[23, "wildboar.ensemble._ensemble.ShapeletForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.shapeletforestembedding property)": [[23, "wildboar.ensemble._ensemble.ShapeletForestEmbedding.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.shapeletforestregressor property)": [[23, "wildboar.ensemble._ensemble.ShapeletForestRegressor.estimators_samples_"]], "fit() (wildboar.ensemble._ensemble.baggingclassifier method)": [[23, "wildboar.ensemble._ensemble.BaggingClassifier.fit"]], "fit() (wildboar.ensemble._ensemble.baggingregressor method)": [[23, "wildboar.ensemble._ensemble.BaggingRegressor.fit"]], "fit() (wildboar.ensemble._ensemble.basebagging method)": [[23, "wildboar.ensemble._ensemble.BaseBagging.fit"]], "fit() (wildboar.ensemble._ensemble.baseforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseForestClassifier.fit"]], "fit() (wildboar.ensemble._ensemble.baseforestregressor method)": [[23, "wildboar.ensemble._ensemble.BaseForestRegressor.fit"]], "fit() (wildboar.ensemble._ensemble.baseshapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestClassifier.fit"]], "fit() (wildboar.ensemble._ensemble.baseshapeletforestregressor method)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestRegressor.fit"]], "fit() (wildboar.ensemble._ensemble.extrashapelettreesclassifier method)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier.fit"]], "fit() (wildboar.ensemble._ensemble.extrashapelettreesregressor method)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesRegressor.fit"]], "fit() (wildboar.ensemble._ensemble.intervalforestclassifier method)": [[23, "wildboar.ensemble._ensemble.IntervalForestClassifier.fit"]], "fit() (wildboar.ensemble._ensemble.intervalforestregressor method)": [[23, "wildboar.ensemble._ensemble.IntervalForestRegressor.fit"]], "fit() (wildboar.ensemble._ensemble.isolationshapeletforest method)": [[23, "wildboar.ensemble._ensemble.IsolationShapeletForest.fit"]], "fit() (wildboar.ensemble._ensemble.pivotforestclassifier method)": [[23, "wildboar.ensemble._ensemble.PivotForestClassifier.fit"]], "fit() (wildboar.ensemble._ensemble.proximityforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ProximityForestClassifier.fit"]], "fit() (wildboar.ensemble._ensemble.rocketforestclassifier method)": [[23, "wildboar.ensemble._ensemble.RocketForestClassifier.fit"]], "fit() (wildboar.ensemble._ensemble.rocketforestregressor method)": [[23, "wildboar.ensemble._ensemble.RocketForestRegressor.fit"]], "fit() (wildboar.ensemble._ensemble.shapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestClassifier.fit"]], "fit() (wildboar.ensemble._ensemble.shapeletforestembedding method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestEmbedding.fit"]], "fit() (wildboar.ensemble._ensemble.shapeletforestregressor method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestRegressor.fit"]], "fit_predict() (wildboar.ensemble._ensemble.isolationshapeletforest method)": [[23, "wildboar.ensemble._ensemble.IsolationShapeletForest.fit_predict"]], "get_metadata_routing() (wildboar.ensemble._ensemble.baggingclassifier method)": [[23, "wildboar.ensemble._ensemble.BaggingClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.baggingregressor method)": [[23, "wildboar.ensemble._ensemble.BaggingRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.basebagging method)": [[23, "wildboar.ensemble._ensemble.BaseBagging.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.baseforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.baseforestregressor method)": [[23, "wildboar.ensemble._ensemble.BaseForestRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.baseshapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.baseshapeletforestregressor method)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.extrashapelettreesclassifier method)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.extrashapelettreesregressor method)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.intervalforestclassifier method)": [[23, "wildboar.ensemble._ensemble.IntervalForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.intervalforestregressor method)": [[23, "wildboar.ensemble._ensemble.IntervalForestRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.isolationshapeletforest method)": [[23, "wildboar.ensemble._ensemble.IsolationShapeletForest.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.pivotforestclassifier method)": [[23, "wildboar.ensemble._ensemble.PivotForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.proximityforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ProximityForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.rocketforestclassifier method)": [[23, "wildboar.ensemble._ensemble.RocketForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.rocketforestregressor method)": [[23, "wildboar.ensemble._ensemble.RocketForestRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.shapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.shapeletforestembedding method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestEmbedding.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.shapeletforestregressor method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestRegressor.get_metadata_routing"]], "get_params() (wildboar.ensemble._ensemble.baggingclassifier method)": [[23, "wildboar.ensemble._ensemble.BaggingClassifier.get_params"]], "get_params() (wildboar.ensemble._ensemble.baggingregressor method)": [[23, "wildboar.ensemble._ensemble.BaggingRegressor.get_params"]], "get_params() (wildboar.ensemble._ensemble.basebagging method)": [[23, "wildboar.ensemble._ensemble.BaseBagging.get_params"]], "get_params() (wildboar.ensemble._ensemble.baseforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseForestClassifier.get_params"]], "get_params() (wildboar.ensemble._ensemble.baseforestregressor method)": [[23, "wildboar.ensemble._ensemble.BaseForestRegressor.get_params"]], "get_params() (wildboar.ensemble._ensemble.baseshapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestClassifier.get_params"]], "get_params() (wildboar.ensemble._ensemble.baseshapeletforestregressor method)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestRegressor.get_params"]], "get_params() (wildboar.ensemble._ensemble.extrashapelettreesclassifier method)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier.get_params"]], "get_params() (wildboar.ensemble._ensemble.extrashapelettreesregressor method)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesRegressor.get_params"]], "get_params() (wildboar.ensemble._ensemble.intervalforestclassifier method)": [[23, "wildboar.ensemble._ensemble.IntervalForestClassifier.get_params"]], "get_params() (wildboar.ensemble._ensemble.intervalforestregressor method)": [[23, "wildboar.ensemble._ensemble.IntervalForestRegressor.get_params"]], "get_params() (wildboar.ensemble._ensemble.isolationshapeletforest method)": [[23, "wildboar.ensemble._ensemble.IsolationShapeletForest.get_params"]], "get_params() (wildboar.ensemble._ensemble.pivotforestclassifier method)": [[23, "wildboar.ensemble._ensemble.PivotForestClassifier.get_params"]], "get_params() (wildboar.ensemble._ensemble.proximityforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ProximityForestClassifier.get_params"]], "get_params() (wildboar.ensemble._ensemble.rocketforestclassifier method)": [[23, "wildboar.ensemble._ensemble.RocketForestClassifier.get_params"]], "get_params() (wildboar.ensemble._ensemble.rocketforestregressor method)": [[23, "wildboar.ensemble._ensemble.RocketForestRegressor.get_params"]], "get_params() (wildboar.ensemble._ensemble.shapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestClassifier.get_params"]], "get_params() (wildboar.ensemble._ensemble.shapeletforestembedding method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestEmbedding.get_params"]], "get_params() (wildboar.ensemble._ensemble.shapeletforestregressor method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestRegressor.get_params"]], "predict() (wildboar.ensemble._ensemble.baggingclassifier method)": [[23, "wildboar.ensemble._ensemble.BaggingClassifier.predict"]], "predict() (wildboar.ensemble._ensemble.baggingregressor method)": [[23, "wildboar.ensemble._ensemble.BaggingRegressor.predict"]], "predict() (wildboar.ensemble._ensemble.baseforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseForestClassifier.predict"]], "predict() (wildboar.ensemble._ensemble.baseforestregressor method)": [[23, "wildboar.ensemble._ensemble.BaseForestRegressor.predict"]], "predict() (wildboar.ensemble._ensemble.baseshapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestClassifier.predict"]], "predict() (wildboar.ensemble._ensemble.baseshapeletforestregressor method)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestRegressor.predict"]], "predict() (wildboar.ensemble._ensemble.extrashapelettreesclassifier method)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier.predict"]], "predict() (wildboar.ensemble._ensemble.extrashapelettreesregressor method)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesRegressor.predict"]], "predict() (wildboar.ensemble._ensemble.intervalforestclassifier method)": [[23, "wildboar.ensemble._ensemble.IntervalForestClassifier.predict"]], "predict() (wildboar.ensemble._ensemble.intervalforestregressor method)": [[23, "wildboar.ensemble._ensemble.IntervalForestRegressor.predict"]], "predict() (wildboar.ensemble._ensemble.pivotforestclassifier method)": [[23, "wildboar.ensemble._ensemble.PivotForestClassifier.predict"]], "predict() (wildboar.ensemble._ensemble.proximityforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ProximityForestClassifier.predict"]], "predict() (wildboar.ensemble._ensemble.rocketforestclassifier method)": [[23, "wildboar.ensemble._ensemble.RocketForestClassifier.predict"]], "predict() (wildboar.ensemble._ensemble.rocketforestregressor method)": [[23, "wildboar.ensemble._ensemble.RocketForestRegressor.predict"]], "predict() (wildboar.ensemble._ensemble.shapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestClassifier.predict"]], "predict() (wildboar.ensemble._ensemble.shapeletforestembedding method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestEmbedding.predict"]], "predict() (wildboar.ensemble._ensemble.shapeletforestregressor method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestRegressor.predict"]], "predict_log_proba() (wildboar.ensemble._ensemble.baggingclassifier method)": [[23, "wildboar.ensemble._ensemble.BaggingClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble._ensemble.baseforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseForestClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble._ensemble.baseshapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble._ensemble.extrashapelettreesclassifier method)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble._ensemble.intervalforestclassifier method)": [[23, "wildboar.ensemble._ensemble.IntervalForestClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble._ensemble.pivotforestclassifier method)": [[23, "wildboar.ensemble._ensemble.PivotForestClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble._ensemble.proximityforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ProximityForestClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble._ensemble.rocketforestclassifier method)": [[23, "wildboar.ensemble._ensemble.RocketForestClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble._ensemble.shapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestClassifier.predict_log_proba"]], "predict_proba() (wildboar.ensemble._ensemble.baggingclassifier method)": [[23, "wildboar.ensemble._ensemble.BaggingClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble._ensemble.baseforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseForestClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble._ensemble.baseshapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble._ensemble.extrashapelettreesclassifier method)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble._ensemble.intervalforestclassifier method)": [[23, "wildboar.ensemble._ensemble.IntervalForestClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble._ensemble.pivotforestclassifier method)": [[23, "wildboar.ensemble._ensemble.PivotForestClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble._ensemble.proximityforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ProximityForestClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble._ensemble.rocketforestclassifier method)": [[23, "wildboar.ensemble._ensemble.RocketForestClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble._ensemble.shapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestClassifier.predict_proba"]], "score() (wildboar.ensemble._ensemble.baggingclassifier method)": [[23, "wildboar.ensemble._ensemble.BaggingClassifier.score"]], "score() (wildboar.ensemble._ensemble.baggingregressor method)": [[23, "wildboar.ensemble._ensemble.BaggingRegressor.score"]], "score() (wildboar.ensemble._ensemble.baseforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseForestClassifier.score"]], "score() (wildboar.ensemble._ensemble.baseforestregressor method)": [[23, "wildboar.ensemble._ensemble.BaseForestRegressor.score"]], "score() (wildboar.ensemble._ensemble.baseshapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestClassifier.score"]], "score() (wildboar.ensemble._ensemble.baseshapeletforestregressor method)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestRegressor.score"]], "score() (wildboar.ensemble._ensemble.extrashapelettreesclassifier method)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier.score"]], "score() (wildboar.ensemble._ensemble.extrashapelettreesregressor method)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesRegressor.score"]], "score() (wildboar.ensemble._ensemble.intervalforestclassifier method)": [[23, "wildboar.ensemble._ensemble.IntervalForestClassifier.score"]], "score() (wildboar.ensemble._ensemble.intervalforestregressor method)": [[23, "wildboar.ensemble._ensemble.IntervalForestRegressor.score"]], "score() (wildboar.ensemble._ensemble.pivotforestclassifier method)": [[23, "wildboar.ensemble._ensemble.PivotForestClassifier.score"]], "score() (wildboar.ensemble._ensemble.proximityforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ProximityForestClassifier.score"]], "score() (wildboar.ensemble._ensemble.rocketforestclassifier method)": [[23, "wildboar.ensemble._ensemble.RocketForestClassifier.score"]], "score() (wildboar.ensemble._ensemble.rocketforestregressor method)": [[23, "wildboar.ensemble._ensemble.RocketForestRegressor.score"]], "score() (wildboar.ensemble._ensemble.shapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestClassifier.score"]], "score() (wildboar.ensemble._ensemble.shapeletforestembedding method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestEmbedding.score"]], "score() (wildboar.ensemble._ensemble.shapeletforestregressor method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestRegressor.score"]], "set_params() (wildboar.ensemble._ensemble.baggingclassifier method)": [[23, "wildboar.ensemble._ensemble.BaggingClassifier.set_params"]], "set_params() (wildboar.ensemble._ensemble.baggingregressor method)": [[23, "wildboar.ensemble._ensemble.BaggingRegressor.set_params"]], "set_params() (wildboar.ensemble._ensemble.basebagging method)": [[23, "wildboar.ensemble._ensemble.BaseBagging.set_params"]], "set_params() (wildboar.ensemble._ensemble.baseforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseForestClassifier.set_params"]], "set_params() (wildboar.ensemble._ensemble.baseforestregressor method)": [[23, "wildboar.ensemble._ensemble.BaseForestRegressor.set_params"]], "set_params() (wildboar.ensemble._ensemble.baseshapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestClassifier.set_params"]], "set_params() (wildboar.ensemble._ensemble.baseshapeletforestregressor method)": [[23, "wildboar.ensemble._ensemble.BaseShapeletForestRegressor.set_params"]], "set_params() (wildboar.ensemble._ensemble.extrashapelettreesclassifier method)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier.set_params"]], "set_params() (wildboar.ensemble._ensemble.extrashapelettreesregressor method)": [[23, "wildboar.ensemble._ensemble.ExtraShapeletTreesRegressor.set_params"]], "set_params() (wildboar.ensemble._ensemble.intervalforestclassifier method)": [[23, "wildboar.ensemble._ensemble.IntervalForestClassifier.set_params"]], "set_params() (wildboar.ensemble._ensemble.intervalforestregressor method)": [[23, "wildboar.ensemble._ensemble.IntervalForestRegressor.set_params"]], "set_params() (wildboar.ensemble._ensemble.isolationshapeletforest method)": [[23, "wildboar.ensemble._ensemble.IsolationShapeletForest.set_params"]], "set_params() (wildboar.ensemble._ensemble.pivotforestclassifier method)": [[23, "wildboar.ensemble._ensemble.PivotForestClassifier.set_params"]], "set_params() (wildboar.ensemble._ensemble.proximityforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ProximityForestClassifier.set_params"]], "set_params() (wildboar.ensemble._ensemble.rocketforestclassifier method)": [[23, "wildboar.ensemble._ensemble.RocketForestClassifier.set_params"]], "set_params() (wildboar.ensemble._ensemble.rocketforestregressor method)": [[23, "wildboar.ensemble._ensemble.RocketForestRegressor.set_params"]], "set_params() (wildboar.ensemble._ensemble.shapeletforestclassifier method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestClassifier.set_params"]], "set_params() (wildboar.ensemble._ensemble.shapeletforestembedding method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestEmbedding.set_params"]], "set_params() (wildboar.ensemble._ensemble.shapeletforestregressor method)": [[23, "wildboar.ensemble._ensemble.ShapeletForestRegressor.set_params"]], "wildboar.ensemble._ensemble": [[23, "module-wildboar.ensemble._ensemble"]], "baggingclassifier (class in wildboar.ensemble)": [[24, "wildboar.ensemble.BaggingClassifier"]], "baggingregressor (class in wildboar.ensemble)": [[24, "wildboar.ensemble.BaggingRegressor"]], "basebagging (class in wildboar.ensemble)": [[24, "wildboar.ensemble.BaseBagging"]], "elasticensembleclassifier (class in wildboar.ensemble)": [[24, "wildboar.ensemble.ElasticEnsembleClassifier"]], "extrashapelettreesclassifier (class in wildboar.ensemble)": [[24, "wildboar.ensemble.ExtraShapeletTreesClassifier"]], "extrashapelettreesregressor (class in wildboar.ensemble)": [[24, "wildboar.ensemble.ExtraShapeletTreesRegressor"]], "intervalforestclassifier (class in wildboar.ensemble)": [[24, "wildboar.ensemble.IntervalForestClassifier"]], "intervalforestregressor (class in wildboar.ensemble)": [[24, "wildboar.ensemble.IntervalForestRegressor"]], "isolationshapeletforest (class in wildboar.ensemble)": [[24, "wildboar.ensemble.IsolationShapeletForest"]], "pivotforestclassifier (class in wildboar.ensemble)": [[24, "wildboar.ensemble.PivotForestClassifier"]], "proximityforestclassifier (class in wildboar.ensemble)": [[24, "wildboar.ensemble.ProximityForestClassifier"]], "rocketforestclassifier (class in wildboar.ensemble)": [[24, "wildboar.ensemble.RocketForestClassifier"]], "rocketforestregressor (class in wildboar.ensemble)": [[24, "wildboar.ensemble.RocketForestRegressor"]], "shapeletforestclassifier (class in wildboar.ensemble)": [[24, "wildboar.ensemble.ShapeletForestClassifier"]], "shapeletforestembedding (class in wildboar.ensemble)": [[24, "wildboar.ensemble.ShapeletForestEmbedding"]], "shapeletforestregressor (class in wildboar.ensemble)": [[24, "wildboar.ensemble.ShapeletForestRegressor"]], "decision_function() (wildboar.ensemble.baggingclassifier method)": [[24, "wildboar.ensemble.BaggingClassifier.decision_function"]], "decision_function() (wildboar.ensemble.extrashapelettreesclassifier method)": [[24, "wildboar.ensemble.ExtraShapeletTreesClassifier.decision_function"]], "decision_function() (wildboar.ensemble.intervalforestclassifier method)": [[24, "wildboar.ensemble.IntervalForestClassifier.decision_function"]], "decision_function() (wildboar.ensemble.pivotforestclassifier method)": [[24, "wildboar.ensemble.PivotForestClassifier.decision_function"]], "decision_function() (wildboar.ensemble.proximityforestclassifier method)": [[24, "wildboar.ensemble.ProximityForestClassifier.decision_function"]], "decision_function() (wildboar.ensemble.rocketforestclassifier method)": [[24, "wildboar.ensemble.RocketForestClassifier.decision_function"]], "decision_function() (wildboar.ensemble.shapeletforestclassifier method)": [[24, "wildboar.ensemble.ShapeletForestClassifier.decision_function"]], "estimators_samples_ (wildboar.ensemble.baggingclassifier property)": [[24, "wildboar.ensemble.BaggingClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.baggingregressor property)": [[24, "wildboar.ensemble.BaggingRegressor.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.basebagging property)": [[24, "wildboar.ensemble.BaseBagging.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.extrashapelettreesclassifier property)": [[24, "wildboar.ensemble.ExtraShapeletTreesClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.extrashapelettreesregressor property)": [[24, "wildboar.ensemble.ExtraShapeletTreesRegressor.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.intervalforestclassifier property)": [[24, "wildboar.ensemble.IntervalForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.intervalforestregressor property)": [[24, "wildboar.ensemble.IntervalForestRegressor.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.isolationshapeletforest property)": [[24, "wildboar.ensemble.IsolationShapeletForest.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.pivotforestclassifier property)": [[24, "wildboar.ensemble.PivotForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.proximityforestclassifier property)": [[24, "wildboar.ensemble.ProximityForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.rocketforestclassifier property)": [[24, "wildboar.ensemble.RocketForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.rocketforestregressor property)": [[24, "wildboar.ensemble.RocketForestRegressor.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.shapeletforestclassifier property)": [[24, "wildboar.ensemble.ShapeletForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.shapeletforestembedding property)": [[24, "wildboar.ensemble.ShapeletForestEmbedding.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.shapeletforestregressor property)": [[24, "wildboar.ensemble.ShapeletForestRegressor.estimators_samples_"]], "fit() (wildboar.ensemble.baggingclassifier method)": [[24, "wildboar.ensemble.BaggingClassifier.fit"]], "fit() (wildboar.ensemble.baggingregressor method)": [[24, "wildboar.ensemble.BaggingRegressor.fit"]], "fit() (wildboar.ensemble.basebagging method)": [[24, "wildboar.ensemble.BaseBagging.fit"]], "fit() (wildboar.ensemble.elasticensembleclassifier method)": [[24, "wildboar.ensemble.ElasticEnsembleClassifier.fit"]], "fit() (wildboar.ensemble.extrashapelettreesclassifier method)": [[24, "wildboar.ensemble.ExtraShapeletTreesClassifier.fit"]], "fit() (wildboar.ensemble.extrashapelettreesregressor method)": [[24, "wildboar.ensemble.ExtraShapeletTreesRegressor.fit"]], "fit() (wildboar.ensemble.intervalforestclassifier method)": [[24, "wildboar.ensemble.IntervalForestClassifier.fit"]], "fit() (wildboar.ensemble.intervalforestregressor method)": [[24, "wildboar.ensemble.IntervalForestRegressor.fit"]], "fit() (wildboar.ensemble.isolationshapeletforest method)": [[24, "wildboar.ensemble.IsolationShapeletForest.fit"]], "fit() (wildboar.ensemble.pivotforestclassifier method)": [[24, "wildboar.ensemble.PivotForestClassifier.fit"]], "fit() (wildboar.ensemble.proximityforestclassifier method)": [[24, "wildboar.ensemble.ProximityForestClassifier.fit"]], "fit() (wildboar.ensemble.rocketforestclassifier method)": [[24, "wildboar.ensemble.RocketForestClassifier.fit"]], "fit() (wildboar.ensemble.rocketforestregressor method)": [[24, "wildboar.ensemble.RocketForestRegressor.fit"]], "fit() (wildboar.ensemble.shapeletforestclassifier method)": [[24, "wildboar.ensemble.ShapeletForestClassifier.fit"]], "fit() (wildboar.ensemble.shapeletforestembedding method)": [[24, "wildboar.ensemble.ShapeletForestEmbedding.fit"]], "fit() (wildboar.ensemble.shapeletforestregressor method)": [[24, "wildboar.ensemble.ShapeletForestRegressor.fit"]], "fit_predict() (wildboar.ensemble.isolationshapeletforest method)": [[24, "wildboar.ensemble.IsolationShapeletForest.fit_predict"]], "get_metadata_routing() (wildboar.ensemble.baggingclassifier method)": [[24, "wildboar.ensemble.BaggingClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.baggingregressor method)": [[24, "wildboar.ensemble.BaggingRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.basebagging method)": [[24, "wildboar.ensemble.BaseBagging.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.elasticensembleclassifier method)": [[24, "wildboar.ensemble.ElasticEnsembleClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.extrashapelettreesclassifier method)": [[24, "wildboar.ensemble.ExtraShapeletTreesClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.extrashapelettreesregressor method)": [[24, "wildboar.ensemble.ExtraShapeletTreesRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.intervalforestclassifier method)": [[24, "wildboar.ensemble.IntervalForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.intervalforestregressor method)": [[24, "wildboar.ensemble.IntervalForestRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.isolationshapeletforest method)": [[24, "wildboar.ensemble.IsolationShapeletForest.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.pivotforestclassifier method)": [[24, "wildboar.ensemble.PivotForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.proximityforestclassifier method)": [[24, "wildboar.ensemble.ProximityForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.rocketforestclassifier method)": [[24, "wildboar.ensemble.RocketForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.rocketforestregressor method)": [[24, "wildboar.ensemble.RocketForestRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.shapeletforestclassifier method)": [[24, "wildboar.ensemble.ShapeletForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.shapeletforestembedding method)": [[24, "wildboar.ensemble.ShapeletForestEmbedding.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.shapeletforestregressor method)": [[24, "wildboar.ensemble.ShapeletForestRegressor.get_metadata_routing"]], "get_params() (wildboar.ensemble.baggingclassifier method)": [[24, "wildboar.ensemble.BaggingClassifier.get_params"]], "get_params() (wildboar.ensemble.baggingregressor method)": [[24, "wildboar.ensemble.BaggingRegressor.get_params"]], "get_params() (wildboar.ensemble.basebagging method)": [[24, "wildboar.ensemble.BaseBagging.get_params"]], "get_params() (wildboar.ensemble.elasticensembleclassifier method)": [[24, "wildboar.ensemble.ElasticEnsembleClassifier.get_params"]], "get_params() (wildboar.ensemble.extrashapelettreesclassifier method)": [[24, "wildboar.ensemble.ExtraShapeletTreesClassifier.get_params"]], "get_params() (wildboar.ensemble.extrashapelettreesregressor method)": [[24, "wildboar.ensemble.ExtraShapeletTreesRegressor.get_params"]], "get_params() (wildboar.ensemble.intervalforestclassifier method)": [[24, "wildboar.ensemble.IntervalForestClassifier.get_params"]], "get_params() (wildboar.ensemble.intervalforestregressor method)": [[24, "wildboar.ensemble.IntervalForestRegressor.get_params"]], "get_params() (wildboar.ensemble.isolationshapeletforest method)": [[24, "wildboar.ensemble.IsolationShapeletForest.get_params"]], "get_params() (wildboar.ensemble.pivotforestclassifier method)": [[24, "wildboar.ensemble.PivotForestClassifier.get_params"]], "get_params() (wildboar.ensemble.proximityforestclassifier method)": [[24, "wildboar.ensemble.ProximityForestClassifier.get_params"]], "get_params() (wildboar.ensemble.rocketforestclassifier method)": [[24, "wildboar.ensemble.RocketForestClassifier.get_params"]], "get_params() (wildboar.ensemble.rocketforestregressor method)": [[24, "wildboar.ensemble.RocketForestRegressor.get_params"]], "get_params() (wildboar.ensemble.shapeletforestclassifier method)": [[24, "wildboar.ensemble.ShapeletForestClassifier.get_params"]], "get_params() (wildboar.ensemble.shapeletforestembedding method)": [[24, "wildboar.ensemble.ShapeletForestEmbedding.get_params"]], "get_params() (wildboar.ensemble.shapeletforestregressor method)": [[24, "wildboar.ensemble.ShapeletForestRegressor.get_params"]], "predict() (wildboar.ensemble.baggingclassifier method)": [[24, "wildboar.ensemble.BaggingClassifier.predict"]], "predict() (wildboar.ensemble.baggingregressor method)": [[24, "wildboar.ensemble.BaggingRegressor.predict"]], "predict() (wildboar.ensemble.elasticensembleclassifier method)": [[24, "wildboar.ensemble.ElasticEnsembleClassifier.predict"]], "predict() (wildboar.ensemble.extrashapelettreesclassifier method)": [[24, "wildboar.ensemble.ExtraShapeletTreesClassifier.predict"]], "predict() (wildboar.ensemble.extrashapelettreesregressor method)": [[24, "wildboar.ensemble.ExtraShapeletTreesRegressor.predict"]], "predict() (wildboar.ensemble.intervalforestclassifier method)": [[24, "wildboar.ensemble.IntervalForestClassifier.predict"]], "predict() (wildboar.ensemble.intervalforestregressor method)": [[24, "wildboar.ensemble.IntervalForestRegressor.predict"]], "predict() (wildboar.ensemble.pivotforestclassifier method)": [[24, "wildboar.ensemble.PivotForestClassifier.predict"]], "predict() (wildboar.ensemble.proximityforestclassifier method)": [[24, "wildboar.ensemble.ProximityForestClassifier.predict"]], "predict() (wildboar.ensemble.rocketforestclassifier method)": [[24, "wildboar.ensemble.RocketForestClassifier.predict"]], "predict() (wildboar.ensemble.rocketforestregressor method)": [[24, "wildboar.ensemble.RocketForestRegressor.predict"]], "predict() (wildboar.ensemble.shapeletforestclassifier method)": [[24, "wildboar.ensemble.ShapeletForestClassifier.predict"]], "predict() (wildboar.ensemble.shapeletforestembedding method)": [[24, "wildboar.ensemble.ShapeletForestEmbedding.predict"]], "predict() (wildboar.ensemble.shapeletforestregressor method)": [[24, "wildboar.ensemble.ShapeletForestRegressor.predict"]], "predict_log_proba() (wildboar.ensemble.baggingclassifier method)": [[24, "wildboar.ensemble.BaggingClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble.extrashapelettreesclassifier method)": [[24, "wildboar.ensemble.ExtraShapeletTreesClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble.intervalforestclassifier method)": [[24, "wildboar.ensemble.IntervalForestClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble.pivotforestclassifier method)": [[24, "wildboar.ensemble.PivotForestClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble.proximityforestclassifier method)": [[24, "wildboar.ensemble.ProximityForestClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble.rocketforestclassifier method)": [[24, "wildboar.ensemble.RocketForestClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble.shapeletforestclassifier method)": [[24, "wildboar.ensemble.ShapeletForestClassifier.predict_log_proba"]], "predict_proba() (wildboar.ensemble.baggingclassifier method)": [[24, "wildboar.ensemble.BaggingClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble.elasticensembleclassifier method)": [[24, "wildboar.ensemble.ElasticEnsembleClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble.extrashapelettreesclassifier method)": [[24, "wildboar.ensemble.ExtraShapeletTreesClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble.intervalforestclassifier method)": [[24, "wildboar.ensemble.IntervalForestClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble.pivotforestclassifier method)": [[24, "wildboar.ensemble.PivotForestClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble.proximityforestclassifier method)": [[24, "wildboar.ensemble.ProximityForestClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble.rocketforestclassifier method)": [[24, "wildboar.ensemble.RocketForestClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble.shapeletforestclassifier method)": [[24, "wildboar.ensemble.ShapeletForestClassifier.predict_proba"]], "score() (wildboar.ensemble.baggingclassifier method)": [[24, "wildboar.ensemble.BaggingClassifier.score"]], "score() (wildboar.ensemble.baggingregressor method)": [[24, "wildboar.ensemble.BaggingRegressor.score"]], "score() (wildboar.ensemble.elasticensembleclassifier method)": [[24, "wildboar.ensemble.ElasticEnsembleClassifier.score"]], "score() (wildboar.ensemble.extrashapelettreesclassifier method)": [[24, "wildboar.ensemble.ExtraShapeletTreesClassifier.score"]], "score() (wildboar.ensemble.extrashapelettreesregressor method)": [[24, "wildboar.ensemble.ExtraShapeletTreesRegressor.score"]], "score() (wildboar.ensemble.intervalforestclassifier method)": [[24, "wildboar.ensemble.IntervalForestClassifier.score"]], "score() (wildboar.ensemble.intervalforestregressor method)": [[24, "wildboar.ensemble.IntervalForestRegressor.score"]], "score() (wildboar.ensemble.pivotforestclassifier method)": [[24, "wildboar.ensemble.PivotForestClassifier.score"]], "score() (wildboar.ensemble.proximityforestclassifier method)": [[24, "wildboar.ensemble.ProximityForestClassifier.score"]], "score() (wildboar.ensemble.rocketforestclassifier method)": [[24, "wildboar.ensemble.RocketForestClassifier.score"]], "score() (wildboar.ensemble.rocketforestregressor method)": [[24, "wildboar.ensemble.RocketForestRegressor.score"]], "score() (wildboar.ensemble.shapeletforestclassifier method)": [[24, "wildboar.ensemble.ShapeletForestClassifier.score"]], "score() (wildboar.ensemble.shapeletforestembedding method)": [[24, "wildboar.ensemble.ShapeletForestEmbedding.score"]], "score() (wildboar.ensemble.shapeletforestregressor method)": [[24, "wildboar.ensemble.ShapeletForestRegressor.score"]], "set_params() (wildboar.ensemble.baggingclassifier method)": [[24, "wildboar.ensemble.BaggingClassifier.set_params"]], "set_params() (wildboar.ensemble.baggingregressor method)": [[24, "wildboar.ensemble.BaggingRegressor.set_params"]], "set_params() (wildboar.ensemble.basebagging method)": [[24, "wildboar.ensemble.BaseBagging.set_params"]], "set_params() (wildboar.ensemble.elasticensembleclassifier method)": [[24, "wildboar.ensemble.ElasticEnsembleClassifier.set_params"]], "set_params() (wildboar.ensemble.extrashapelettreesclassifier method)": [[24, "wildboar.ensemble.ExtraShapeletTreesClassifier.set_params"]], "set_params() (wildboar.ensemble.extrashapelettreesregressor method)": [[24, "wildboar.ensemble.ExtraShapeletTreesRegressor.set_params"]], "set_params() (wildboar.ensemble.intervalforestclassifier method)": [[24, "wildboar.ensemble.IntervalForestClassifier.set_params"]], "set_params() (wildboar.ensemble.intervalforestregressor method)": [[24, "wildboar.ensemble.IntervalForestRegressor.set_params"]], "set_params() (wildboar.ensemble.isolationshapeletforest method)": [[24, "wildboar.ensemble.IsolationShapeletForest.set_params"]], "set_params() (wildboar.ensemble.pivotforestclassifier method)": [[24, "wildboar.ensemble.PivotForestClassifier.set_params"]], "set_params() (wildboar.ensemble.proximityforestclassifier method)": [[24, "wildboar.ensemble.ProximityForestClassifier.set_params"]], "set_params() (wildboar.ensemble.rocketforestclassifier method)": [[24, "wildboar.ensemble.RocketForestClassifier.set_params"]], "set_params() (wildboar.ensemble.rocketforestregressor method)": [[24, "wildboar.ensemble.RocketForestRegressor.set_params"]], "set_params() (wildboar.ensemble.shapeletforestclassifier method)": [[24, "wildboar.ensemble.ShapeletForestClassifier.set_params"]], "set_params() (wildboar.ensemble.shapeletforestembedding method)": [[24, "wildboar.ensemble.ShapeletForestEmbedding.set_params"]], "set_params() (wildboar.ensemble.shapeletforestregressor method)": [[24, "wildboar.ensemble.ShapeletForestRegressor.set_params"]], "wildboar.ensemble": [[24, "module-wildboar.ensemble"]], "amplitudeimportance (class in wildboar.explain._importance)": [[25, "wildboar.explain._importance.AmplitudeImportance"]], "frequencyimportance (class in wildboar.explain._importance)": [[25, "wildboar.explain._importance.FrequencyImportance"]], "intervalimportance (class in wildboar.explain._importance)": [[25, "wildboar.explain._importance.IntervalImportance"]], "permuteimportance (class in wildboar.explain._importance)": [[25, "wildboar.explain._importance.PermuteImportance"]], "shapeletimportance (class in wildboar.explain._importance)": [[25, "wildboar.explain._importance.ShapeletImportance"]], "fit_explain() (wildboar.explain._importance.amplitudeimportance method)": [[25, "wildboar.explain._importance.AmplitudeImportance.fit_explain"]], "fit_explain() (wildboar.explain._importance.frequencyimportance method)": [[25, "wildboar.explain._importance.FrequencyImportance.fit_explain"]], "fit_explain() (wildboar.explain._importance.intervalimportance method)": [[25, "wildboar.explain._importance.IntervalImportance.fit_explain"]], "fit_explain() (wildboar.explain._importance.shapeletimportance method)": [[25, "wildboar.explain._importance.ShapeletImportance.fit_explain"]], "get_metadata_routing() (wildboar.explain._importance.amplitudeimportance method)": [[25, "wildboar.explain._importance.AmplitudeImportance.get_metadata_routing"]], "get_metadata_routing() (wildboar.explain._importance.frequencyimportance method)": [[25, "wildboar.explain._importance.FrequencyImportance.get_metadata_routing"]], "get_metadata_routing() (wildboar.explain._importance.intervalimportance method)": [[25, "wildboar.explain._importance.IntervalImportance.get_metadata_routing"]], "get_metadata_routing() (wildboar.explain._importance.permuteimportance method)": [[25, "wildboar.explain._importance.PermuteImportance.get_metadata_routing"]], "get_metadata_routing() (wildboar.explain._importance.shapeletimportance method)": [[25, "wildboar.explain._importance.ShapeletImportance.get_metadata_routing"]], "get_params() (wildboar.explain._importance.amplitudeimportance method)": [[25, "wildboar.explain._importance.AmplitudeImportance.get_params"]], "get_params() (wildboar.explain._importance.frequencyimportance method)": [[25, "wildboar.explain._importance.FrequencyImportance.get_params"]], "get_params() (wildboar.explain._importance.intervalimportance method)": [[25, "wildboar.explain._importance.IntervalImportance.get_params"]], "get_params() (wildboar.explain._importance.permuteimportance method)": [[25, "wildboar.explain._importance.PermuteImportance.get_params"]], "get_params() (wildboar.explain._importance.shapeletimportance method)": [[25, "wildboar.explain._importance.ShapeletImportance.get_params"]], "plot() (wildboar.explain._importance.amplitudeimportance method)": [[25, "wildboar.explain._importance.AmplitudeImportance.plot"]], "plot() (wildboar.explain._importance.frequencyimportance method)": [[25, "wildboar.explain._importance.FrequencyImportance.plot"]], "plot() (wildboar.explain._importance.intervalimportance method)": [[25, "wildboar.explain._importance.IntervalImportance.plot"]], "plot() (wildboar.explain._importance.shapeletimportance method)": [[25, "wildboar.explain._importance.ShapeletImportance.plot"]], "plot_importances() (in module wildboar.explain._importance)": [[25, "wildboar.explain._importance.plot_importances"]], "set_params() (wildboar.explain._importance.amplitudeimportance method)": [[25, "wildboar.explain._importance.AmplitudeImportance.set_params"]], "set_params() (wildboar.explain._importance.frequencyimportance method)": [[25, "wildboar.explain._importance.FrequencyImportance.set_params"]], "set_params() (wildboar.explain._importance.intervalimportance method)": [[25, "wildboar.explain._importance.IntervalImportance.set_params"]], "set_params() (wildboar.explain._importance.permuteimportance method)": [[25, "wildboar.explain._importance.PermuteImportance.set_params"]], "set_params() (wildboar.explain._importance.shapeletimportance method)": [[25, "wildboar.explain._importance.ShapeletImportance.set_params"]], "wildboar.explain._importance": [[25, "module-wildboar.explain._importance"]], "predictevaluator (class in wildboar.explain.counterfactual._helper)": [[26, "wildboar.explain.counterfactual._helper.PredictEvaluator"]], "probabilityevaluator (class in wildboar.explain.counterfactual._helper)": [[26, "wildboar.explain.counterfactual._helper.ProbabilityEvaluator"]], "targetevaluator (class in wildboar.explain.counterfactual._helper)": [[26, "wildboar.explain.counterfactual._helper.TargetEvaluator"]], "counterfactuals() (in module wildboar.explain.counterfactual._helper)": [[26, "wildboar.explain.counterfactual._helper.counterfactuals"]], "is_counterfactual() (wildboar.explain.counterfactual._helper.predictevaluator method)": [[26, "wildboar.explain.counterfactual._helper.PredictEvaluator.is_counterfactual"]], "is_counterfactual() (wildboar.explain.counterfactual._helper.probabilityevaluator method)": [[26, "wildboar.explain.counterfactual._helper.ProbabilityEvaluator.is_counterfactual"]], "is_counterfactual() (wildboar.explain.counterfactual._helper.targetevaluator method)": [[26, "wildboar.explain.counterfactual._helper.TargetEvaluator.is_counterfactual"]], "wildboar.explain.counterfactual._helper": [[26, "module-wildboar.explain.counterfactual._helper"]], "kneighborscounterfactual (class in wildboar.explain.counterfactual._nn)": [[27, "wildboar.explain.counterfactual._nn.KNeighborsCounterfactual"]], "fit_explain() (wildboar.explain.counterfactual._nn.kneighborscounterfactual method)": [[27, "wildboar.explain.counterfactual._nn.KNeighborsCounterfactual.fit_explain"]], "get_metadata_routing() (wildboar.explain.counterfactual._nn.kneighborscounterfactual method)": [[27, "wildboar.explain.counterfactual._nn.KNeighborsCounterfactual.get_metadata_routing"]], "get_params() (wildboar.explain.counterfactual._nn.kneighborscounterfactual method)": [[27, "wildboar.explain.counterfactual._nn.KNeighborsCounterfactual.get_params"]], "plot() (wildboar.explain.counterfactual._nn.kneighborscounterfactual method)": [[27, "wildboar.explain.counterfactual._nn.KNeighborsCounterfactual.plot"]], "score() (wildboar.explain.counterfactual._nn.kneighborscounterfactual method)": [[27, "wildboar.explain.counterfactual._nn.KNeighborsCounterfactual.score"]], "set_params() (wildboar.explain.counterfactual._nn.kneighborscounterfactual method)": [[27, "wildboar.explain.counterfactual._nn.KNeighborsCounterfactual.set_params"]], "wildboar.explain.counterfactual._nn": [[27, "module-wildboar.explain.counterfactual._nn"]], "nativeguidecounterfactual (class in wildboar.explain.counterfactual._nun)": [[28, "wildboar.explain.counterfactual._nun.NativeGuideCounterfactual"]], "fit_explain() (wildboar.explain.counterfactual._nun.nativeguidecounterfactual method)": [[28, "wildboar.explain.counterfactual._nun.NativeGuideCounterfactual.fit_explain"]], "get_metadata_routing() (wildboar.explain.counterfactual._nun.nativeguidecounterfactual method)": [[28, "wildboar.explain.counterfactual._nun.NativeGuideCounterfactual.get_metadata_routing"]], "get_params() (wildboar.explain.counterfactual._nun.nativeguidecounterfactual method)": [[28, "wildboar.explain.counterfactual._nun.NativeGuideCounterfactual.get_params"]], "plot() (wildboar.explain.counterfactual._nun.nativeguidecounterfactual method)": [[28, "wildboar.explain.counterfactual._nun.NativeGuideCounterfactual.plot"]], "score() (wildboar.explain.counterfactual._nun.nativeguidecounterfactual method)": [[28, "wildboar.explain.counterfactual._nun.NativeGuideCounterfactual.score"]], "set_params() (wildboar.explain.counterfactual._nun.nativeguidecounterfactual method)": [[28, "wildboar.explain.counterfactual._nun.NativeGuideCounterfactual.set_params"]], "wildboar.explain.counterfactual._nun": [[28, "module-wildboar.explain.counterfactual._nun"]], "dynamictimewarptransform (class in wildboar.explain.counterfactual._proto)": [[29, "wildboar.explain.counterfactual._proto.DynamicTimeWarpTransform"]], "euclideantransform (class in wildboar.explain.counterfactual._proto)": [[29, "wildboar.explain.counterfactual._proto.EuclideanTransform"]], "knearestprototypesampler (class in wildboar.explain.counterfactual._proto)": [[29, "wildboar.explain.counterfactual._proto.KNearestPrototypeSampler"]], "knearestshapeletprototypesampler (class in wildboar.explain.counterfactual._proto)": [[29, "wildboar.explain.counterfactual._proto.KNearestShapeletPrototypeSampler"]], "metrictransform (class in wildboar.explain.counterfactual._proto)": [[29, "wildboar.explain.counterfactual._proto.MetricTransform"]], "predictevaluator (class in wildboar.explain.counterfactual._proto)": [[29, "wildboar.explain.counterfactual._proto.PredictEvaluator"]], "probabilityevaluator (class in wildboar.explain.counterfactual._proto)": [[29, "wildboar.explain.counterfactual._proto.ProbabilityEvaluator"]], "prototypecounterfactual (class in wildboar.explain.counterfactual._proto)": [[29, "wildboar.explain.counterfactual._proto.PrototypeCounterfactual"]], "prototypesampler (class in wildboar.explain.counterfactual._proto)": [[29, "wildboar.explain.counterfactual._proto.PrototypeSampler"]], "shapeletprototypesampler (class in wildboar.explain.counterfactual._proto)": [[29, "wildboar.explain.counterfactual._proto.ShapeletPrototypeSampler"]], "targetevaluator (class in wildboar.explain.counterfactual._proto)": [[29, "wildboar.explain.counterfactual._proto.TargetEvaluator"]], "uniformprototypesampler (class in wildboar.explain.counterfactual._proto)": [[29, "wildboar.explain.counterfactual._proto.UniformPrototypeSampler"]], "weighteddynamictimewarptransform (class in wildboar.explain.counterfactual._proto)": [[29, "wildboar.explain.counterfactual._proto.WeightedDynamicTimeWarpTransform"]], "fit_explain() (wildboar.explain.counterfactual._proto.prototypecounterfactual method)": [[29, "wildboar.explain.counterfactual._proto.PrototypeCounterfactual.fit_explain"]], "get_metadata_routing() (wildboar.explain.counterfactual._proto.prototypecounterfactual method)": [[29, "wildboar.explain.counterfactual._proto.PrototypeCounterfactual.get_metadata_routing"]], "get_params() (wildboar.explain.counterfactual._proto.prototypecounterfactual method)": [[29, "wildboar.explain.counterfactual._proto.PrototypeCounterfactual.get_params"]], "is_counterfactual() (wildboar.explain.counterfactual._proto.predictevaluator method)": [[29, "wildboar.explain.counterfactual._proto.PredictEvaluator.is_counterfactual"]], "is_counterfactual() (wildboar.explain.counterfactual._proto.probabilityevaluator method)": [[29, "wildboar.explain.counterfactual._proto.ProbabilityEvaluator.is_counterfactual"]], "is_counterfactual() (wildboar.explain.counterfactual._proto.targetevaluator method)": [[29, "wildboar.explain.counterfactual._proto.TargetEvaluator.is_counterfactual"]], "move() (wildboar.explain.counterfactual._proto.dynamictimewarptransform method)": [[29, "wildboar.explain.counterfactual._proto.DynamicTimeWarpTransform.move"]], "move() (wildboar.explain.counterfactual._proto.euclideantransform method)": [[29, "wildboar.explain.counterfactual._proto.EuclideanTransform.move"]], "move() (wildboar.explain.counterfactual._proto.knearestprototypesampler method)": [[29, "wildboar.explain.counterfactual._proto.KNearestPrototypeSampler.move"]], "move() (wildboar.explain.counterfactual._proto.knearestshapeletprototypesampler method)": [[29, "wildboar.explain.counterfactual._proto.KNearestShapeletPrototypeSampler.move"]], "move() (wildboar.explain.counterfactual._proto.metrictransform method)": [[29, "wildboar.explain.counterfactual._proto.MetricTransform.move"]], "move() (wildboar.explain.counterfactual._proto.prototypesampler method)": [[29, "wildboar.explain.counterfactual._proto.PrototypeSampler.move"]], "move() (wildboar.explain.counterfactual._proto.shapeletprototypesampler method)": [[29, "wildboar.explain.counterfactual._proto.ShapeletPrototypeSampler.move"]], "move() (wildboar.explain.counterfactual._proto.uniformprototypesampler method)": [[29, "wildboar.explain.counterfactual._proto.UniformPrototypeSampler.move"]], "move() (wildboar.explain.counterfactual._proto.weighteddynamictimewarptransform method)": [[29, "wildboar.explain.counterfactual._proto.WeightedDynamicTimeWarpTransform.move"]], "nearest_index() (wildboar.explain.counterfactual._proto.knearestprototypesampler method)": [[29, "wildboar.explain.counterfactual._proto.KNearestPrototypeSampler.nearest_index"]], "plot() (wildboar.explain.counterfactual._proto.prototypecounterfactual method)": [[29, "wildboar.explain.counterfactual._proto.PrototypeCounterfactual.plot"]], "sample() (wildboar.explain.counterfactual._proto.knearestprototypesampler method)": [[29, "wildboar.explain.counterfactual._proto.KNearestPrototypeSampler.sample"]], "sample() (wildboar.explain.counterfactual._proto.knearestshapeletprototypesampler method)": [[29, "wildboar.explain.counterfactual._proto.KNearestShapeletPrototypeSampler.sample"]], "sample() (wildboar.explain.counterfactual._proto.prototypesampler method)": [[29, "wildboar.explain.counterfactual._proto.PrototypeSampler.sample"]], "sample() (wildboar.explain.counterfactual._proto.shapeletprototypesampler method)": [[29, "wildboar.explain.counterfactual._proto.ShapeletPrototypeSampler.sample"]], "sample() (wildboar.explain.counterfactual._proto.uniformprototypesampler method)": [[29, "wildboar.explain.counterfactual._proto.UniformPrototypeSampler.sample"]], "sample_move() (wildboar.explain.counterfactual._proto.knearestprototypesampler method)": [[29, "wildboar.explain.counterfactual._proto.KNearestPrototypeSampler.sample_move"]], "sample_move() (wildboar.explain.counterfactual._proto.knearestshapeletprototypesampler method)": [[29, "wildboar.explain.counterfactual._proto.KNearestShapeletPrototypeSampler.sample_move"]], "sample_move() (wildboar.explain.counterfactual._proto.prototypesampler method)": [[29, "wildboar.explain.counterfactual._proto.PrototypeSampler.sample_move"]], "sample_move() (wildboar.explain.counterfactual._proto.shapeletprototypesampler method)": [[29, "wildboar.explain.counterfactual._proto.ShapeletPrototypeSampler.sample_move"]], "sample_move() (wildboar.explain.counterfactual._proto.uniformprototypesampler method)": [[29, "wildboar.explain.counterfactual._proto.UniformPrototypeSampler.sample_move"]], "sample_shapelet() (wildboar.explain.counterfactual._proto.shapeletprototypesampler method)": [[29, "wildboar.explain.counterfactual._proto.ShapeletPrototypeSampler.sample_shapelet"]], "score() (wildboar.explain.counterfactual._proto.prototypecounterfactual method)": [[29, "wildboar.explain.counterfactual._proto.PrototypeCounterfactual.score"]], "set_params() (wildboar.explain.counterfactual._proto.prototypecounterfactual method)": [[29, "wildboar.explain.counterfactual._proto.PrototypeCounterfactual.set_params"]], "wildboar.explain.counterfactual._proto": [[29, "module-wildboar.explain.counterfactual._proto"]], "shapeletforestcounterfactual (class in wildboar.explain.counterfactual._sf)": [[30, "wildboar.explain.counterfactual._sf.ShapeletForestCounterfactual"]], "fit_explain() (wildboar.explain.counterfactual._sf.shapeletforestcounterfactual method)": [[30, "wildboar.explain.counterfactual._sf.ShapeletForestCounterfactual.fit_explain"]], "get_metadata_routing() (wildboar.explain.counterfactual._sf.shapeletforestcounterfactual method)": [[30, "wildboar.explain.counterfactual._sf.ShapeletForestCounterfactual.get_metadata_routing"]], "get_params() (wildboar.explain.counterfactual._sf.shapeletforestcounterfactual method)": [[30, "wildboar.explain.counterfactual._sf.ShapeletForestCounterfactual.get_params"]], "plot() (wildboar.explain.counterfactual._sf.shapeletforestcounterfactual method)": [[30, "wildboar.explain.counterfactual._sf.ShapeletForestCounterfactual.plot"]], "score() (wildboar.explain.counterfactual._sf.shapeletforestcounterfactual method)": [[30, "wildboar.explain.counterfactual._sf.ShapeletForestCounterfactual.score"]], "set_params() (wildboar.explain.counterfactual._sf.shapeletforestcounterfactual method)": [[30, "wildboar.explain.counterfactual._sf.ShapeletForestCounterfactual.set_params"]], "wildboar.explain.counterfactual._sf": [[30, "module-wildboar.explain.counterfactual._sf"]], "kneighborscounterfactual (class in wildboar.explain.counterfactual)": [[31, "wildboar.explain.counterfactual.KNeighborsCounterfactual"]], "nativeguidecounterfactual (class in wildboar.explain.counterfactual)": [[31, "wildboar.explain.counterfactual.NativeGuideCounterfactual"]], "prototypecounterfactual (class in wildboar.explain.counterfactual)": [[31, "wildboar.explain.counterfactual.PrototypeCounterfactual"]], "shapeletforestcounterfactual (class in wildboar.explain.counterfactual)": [[31, "wildboar.explain.counterfactual.ShapeletForestCounterfactual"]], "counterfactuals() (in module wildboar.explain.counterfactual)": [[31, "wildboar.explain.counterfactual.counterfactuals"]], "fit_explain() (wildboar.explain.counterfactual.kneighborscounterfactual method)": [[31, "wildboar.explain.counterfactual.KNeighborsCounterfactual.fit_explain"]], "fit_explain() (wildboar.explain.counterfactual.nativeguidecounterfactual method)": [[31, "wildboar.explain.counterfactual.NativeGuideCounterfactual.fit_explain"]], "fit_explain() (wildboar.explain.counterfactual.prototypecounterfactual method)": [[31, "wildboar.explain.counterfactual.PrototypeCounterfactual.fit_explain"]], "fit_explain() (wildboar.explain.counterfactual.shapeletforestcounterfactual method)": [[31, "wildboar.explain.counterfactual.ShapeletForestCounterfactual.fit_explain"]], "get_metadata_routing() (wildboar.explain.counterfactual.kneighborscounterfactual method)": [[31, "wildboar.explain.counterfactual.KNeighborsCounterfactual.get_metadata_routing"]], "get_metadata_routing() (wildboar.explain.counterfactual.nativeguidecounterfactual method)": [[31, "wildboar.explain.counterfactual.NativeGuideCounterfactual.get_metadata_routing"]], "get_metadata_routing() (wildboar.explain.counterfactual.prototypecounterfactual method)": [[31, "wildboar.explain.counterfactual.PrototypeCounterfactual.get_metadata_routing"]], "get_metadata_routing() (wildboar.explain.counterfactual.shapeletforestcounterfactual method)": [[31, "wildboar.explain.counterfactual.ShapeletForestCounterfactual.get_metadata_routing"]], "get_params() (wildboar.explain.counterfactual.kneighborscounterfactual method)": [[31, "wildboar.explain.counterfactual.KNeighborsCounterfactual.get_params"]], "get_params() (wildboar.explain.counterfactual.nativeguidecounterfactual method)": [[31, "wildboar.explain.counterfactual.NativeGuideCounterfactual.get_params"]], "get_params() (wildboar.explain.counterfactual.prototypecounterfactual method)": [[31, "wildboar.explain.counterfactual.PrototypeCounterfactual.get_params"]], "get_params() (wildboar.explain.counterfactual.shapeletforestcounterfactual method)": [[31, "wildboar.explain.counterfactual.ShapeletForestCounterfactual.get_params"]], "plot() (wildboar.explain.counterfactual.kneighborscounterfactual method)": [[31, "wildboar.explain.counterfactual.KNeighborsCounterfactual.plot"]], "plot() (wildboar.explain.counterfactual.nativeguidecounterfactual method)": [[31, "wildboar.explain.counterfactual.NativeGuideCounterfactual.plot"]], "plot() (wildboar.explain.counterfactual.prototypecounterfactual method)": [[31, "wildboar.explain.counterfactual.PrototypeCounterfactual.plot"]], "plot() (wildboar.explain.counterfactual.shapeletforestcounterfactual method)": [[31, "wildboar.explain.counterfactual.ShapeletForestCounterfactual.plot"]], "proximity() (in module wildboar.explain.counterfactual)": [[31, "wildboar.explain.counterfactual.proximity"]], "score() (wildboar.explain.counterfactual.kneighborscounterfactual method)": [[31, "wildboar.explain.counterfactual.KNeighborsCounterfactual.score"]], "score() (wildboar.explain.counterfactual.nativeguidecounterfactual method)": [[31, "wildboar.explain.counterfactual.NativeGuideCounterfactual.score"]], "score() (wildboar.explain.counterfactual.prototypecounterfactual method)": [[31, "wildboar.explain.counterfactual.PrototypeCounterfactual.score"]], "score() (wildboar.explain.counterfactual.shapeletforestcounterfactual method)": [[31, "wildboar.explain.counterfactual.ShapeletForestCounterfactual.score"]], "set_params() (wildboar.explain.counterfactual.kneighborscounterfactual method)": [[31, "wildboar.explain.counterfactual.KNeighborsCounterfactual.set_params"]], "set_params() (wildboar.explain.counterfactual.nativeguidecounterfactual method)": [[31, "wildboar.explain.counterfactual.NativeGuideCounterfactual.set_params"]], "set_params() (wildboar.explain.counterfactual.prototypecounterfactual method)": [[31, "wildboar.explain.counterfactual.PrototypeCounterfactual.set_params"]], "set_params() (wildboar.explain.counterfactual.shapeletforestcounterfactual method)": [[31, "wildboar.explain.counterfactual.ShapeletForestCounterfactual.set_params"]], "wildboar.explain.counterfactual": [[31, "module-wildboar.explain.counterfactual"]], "amplitudeimportance (class in wildboar.explain)": [[32, "wildboar.explain.AmplitudeImportance"]], "frequencyimportance (class in wildboar.explain)": [[32, "wildboar.explain.FrequencyImportance"]], "intervalimportance (class in wildboar.explain)": [[32, "wildboar.explain.IntervalImportance"]], "shapeletimportance (class in wildboar.explain)": [[32, "wildboar.explain.ShapeletImportance"]], "fit_explain() (wildboar.explain.amplitudeimportance method)": [[32, "wildboar.explain.AmplitudeImportance.fit_explain"]], "fit_explain() (wildboar.explain.frequencyimportance method)": [[32, "wildboar.explain.FrequencyImportance.fit_explain"]], "fit_explain() (wildboar.explain.intervalimportance method)": [[32, "wildboar.explain.IntervalImportance.fit_explain"]], "fit_explain() (wildboar.explain.shapeletimportance method)": [[32, "wildboar.explain.ShapeletImportance.fit_explain"]], "get_metadata_routing() (wildboar.explain.amplitudeimportance method)": [[32, "wildboar.explain.AmplitudeImportance.get_metadata_routing"]], "get_metadata_routing() (wildboar.explain.frequencyimportance method)": [[32, "wildboar.explain.FrequencyImportance.get_metadata_routing"]], "get_metadata_routing() (wildboar.explain.intervalimportance method)": [[32, "wildboar.explain.IntervalImportance.get_metadata_routing"]], "get_metadata_routing() (wildboar.explain.shapeletimportance method)": [[32, "wildboar.explain.ShapeletImportance.get_metadata_routing"]], "get_params() (wildboar.explain.amplitudeimportance method)": [[32, "wildboar.explain.AmplitudeImportance.get_params"]], "get_params() (wildboar.explain.frequencyimportance method)": [[32, "wildboar.explain.FrequencyImportance.get_params"]], "get_params() (wildboar.explain.intervalimportance method)": [[32, "wildboar.explain.IntervalImportance.get_params"]], "get_params() (wildboar.explain.shapeletimportance method)": [[32, "wildboar.explain.ShapeletImportance.get_params"]], "plot() (wildboar.explain.amplitudeimportance method)": [[32, "wildboar.explain.AmplitudeImportance.plot"]], "plot() (wildboar.explain.frequencyimportance method)": [[32, "wildboar.explain.FrequencyImportance.plot"]], "plot() (wildboar.explain.intervalimportance method)": [[32, "wildboar.explain.IntervalImportance.plot"]], "plot() (wildboar.explain.shapeletimportance method)": [[32, "wildboar.explain.ShapeletImportance.plot"]], "plot_importances() (in module wildboar.explain)": [[32, "wildboar.explain.plot_importances"]], "set_params() (wildboar.explain.amplitudeimportance method)": [[32, "wildboar.explain.AmplitudeImportance.set_params"]], "set_params() (wildboar.explain.frequencyimportance method)": [[32, "wildboar.explain.FrequencyImportance.set_params"]], "set_params() (wildboar.explain.intervalimportance method)": [[32, "wildboar.explain.IntervalImportance.set_params"]], "set_params() (wildboar.explain.shapeletimportance method)": [[32, "wildboar.explain.ShapeletImportance.set_params"]], "wildboar.explain": [[32, "module-wildboar.explain"]], "wildboar": [[33, "module-wildboar"]], "hydraclassifier (class in wildboar.linear_model._hydra)": [[34, "wildboar.linear_model._hydra.HydraClassifier"]], "get_metadata_routing() (wildboar.linear_model._hydra.hydraclassifier method)": [[34, "wildboar.linear_model._hydra.HydraClassifier.get_metadata_routing"]], "get_params() (wildboar.linear_model._hydra.hydraclassifier method)": [[34, "wildboar.linear_model._hydra.HydraClassifier.get_params"]], "score() (wildboar.linear_model._hydra.hydraclassifier method)": [[34, "wildboar.linear_model._hydra.HydraClassifier.score"]], "set_params() (wildboar.linear_model._hydra.hydraclassifier method)": [[34, "wildboar.linear_model._hydra.HydraClassifier.set_params"]], "wildboar.linear_model._hydra": [[34, "module-wildboar.linear_model._hydra"]], "rocketclassifier (class in wildboar.linear_model._rocket)": [[35, "wildboar.linear_model._rocket.RocketClassifier"]], "rocketregressor (class in wildboar.linear_model._rocket)": [[35, "wildboar.linear_model._rocket.RocketRegressor"]], "get_metadata_routing() (wildboar.linear_model._rocket.rocketclassifier method)": [[35, "wildboar.linear_model._rocket.RocketClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model._rocket.rocketregressor method)": [[35, "wildboar.linear_model._rocket.RocketRegressor.get_metadata_routing"]], "get_params() (wildboar.linear_model._rocket.rocketclassifier method)": [[35, "wildboar.linear_model._rocket.RocketClassifier.get_params"]], "get_params() (wildboar.linear_model._rocket.rocketregressor method)": [[35, "wildboar.linear_model._rocket.RocketRegressor.get_params"]], "score() (wildboar.linear_model._rocket.rocketclassifier method)": [[35, "wildboar.linear_model._rocket.RocketClassifier.score"]], "score() (wildboar.linear_model._rocket.rocketregressor method)": [[35, "wildboar.linear_model._rocket.RocketRegressor.score"]], "set_params() (wildboar.linear_model._rocket.rocketclassifier method)": [[35, "wildboar.linear_model._rocket.RocketClassifier.set_params"]], "set_params() (wildboar.linear_model._rocket.rocketregressor method)": [[35, "wildboar.linear_model._rocket.RocketRegressor.set_params"]], "wildboar.linear_model._rocket": [[35, "module-wildboar.linear_model._rocket"]], "castorclassifier (class in wildboar.linear_model._shapelet)": [[36, "wildboar.linear_model._shapelet.CastorClassifier"]], "dilatedshapeletclassifier (class in wildboar.linear_model._shapelet)": [[36, "wildboar.linear_model._shapelet.DilatedShapeletClassifier"]], "randomshapeletclassifier (class in wildboar.linear_model._shapelet)": [[36, "wildboar.linear_model._shapelet.RandomShapeletClassifier"]], "randomshapeletregressor (class in wildboar.linear_model._shapelet)": [[36, "wildboar.linear_model._shapelet.RandomShapeletRegressor"]], "get_metadata_routing() (wildboar.linear_model._shapelet.castorclassifier method)": [[36, "wildboar.linear_model._shapelet.CastorClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model._shapelet.dilatedshapeletclassifier method)": [[36, "wildboar.linear_model._shapelet.DilatedShapeletClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model._shapelet.randomshapeletclassifier method)": [[36, "wildboar.linear_model._shapelet.RandomShapeletClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model._shapelet.randomshapeletregressor method)": [[36, "wildboar.linear_model._shapelet.RandomShapeletRegressor.get_metadata_routing"]], "get_params() (wildboar.linear_model._shapelet.castorclassifier method)": [[36, "wildboar.linear_model._shapelet.CastorClassifier.get_params"]], "get_params() (wildboar.linear_model._shapelet.dilatedshapeletclassifier method)": [[36, "wildboar.linear_model._shapelet.DilatedShapeletClassifier.get_params"]], "get_params() (wildboar.linear_model._shapelet.randomshapeletclassifier method)": [[36, "wildboar.linear_model._shapelet.RandomShapeletClassifier.get_params"]], "get_params() (wildboar.linear_model._shapelet.randomshapeletregressor method)": [[36, "wildboar.linear_model._shapelet.RandomShapeletRegressor.get_params"]], "score() (wildboar.linear_model._shapelet.castorclassifier method)": [[36, "wildboar.linear_model._shapelet.CastorClassifier.score"]], "score() (wildboar.linear_model._shapelet.dilatedshapeletclassifier method)": [[36, "wildboar.linear_model._shapelet.DilatedShapeletClassifier.score"]], "score() (wildboar.linear_model._shapelet.randomshapeletclassifier method)": [[36, "wildboar.linear_model._shapelet.RandomShapeletClassifier.score"]], "score() (wildboar.linear_model._shapelet.randomshapeletregressor method)": [[36, "wildboar.linear_model._shapelet.RandomShapeletRegressor.score"]], "set_params() (wildboar.linear_model._shapelet.castorclassifier method)": [[36, "wildboar.linear_model._shapelet.CastorClassifier.set_params"]], "set_params() (wildboar.linear_model._shapelet.dilatedshapeletclassifier method)": [[36, "wildboar.linear_model._shapelet.DilatedShapeletClassifier.set_params"]], "set_params() (wildboar.linear_model._shapelet.randomshapeletclassifier method)": [[36, "wildboar.linear_model._shapelet.RandomShapeletClassifier.set_params"]], "set_params() (wildboar.linear_model._shapelet.randomshapeletregressor method)": [[36, "wildboar.linear_model._shapelet.RandomShapeletRegressor.set_params"]], "wildboar.linear_model._shapelet": [[36, "module-wildboar.linear_model._shapelet"]], "basetransformclassifier (class in wildboar.linear_model._transform)": [[37, "wildboar.linear_model._transform.BaseTransformClassifier"]], "basetransformestimator (class in wildboar.linear_model._transform)": [[37, "wildboar.linear_model._transform.BaseTransformEstimator"]], "basetransformregressor (class in wildboar.linear_model._transform)": [[37, "wildboar.linear_model._transform.BaseTransformRegressor"]], "transformridgecv (class in wildboar.linear_model._transform)": [[37, "wildboar.linear_model._transform.TransformRidgeCV"]], "transformridgeclassifiercv (class in wildboar.linear_model._transform)": [[37, "wildboar.linear_model._transform.TransformRidgeClassifierCV"]], "get_metadata_routing() (wildboar.linear_model._transform.basetransformclassifier method)": [[37, "wildboar.linear_model._transform.BaseTransformClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model._transform.basetransformestimator method)": [[37, "wildboar.linear_model._transform.BaseTransformEstimator.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model._transform.basetransformregressor method)": [[37, "wildboar.linear_model._transform.BaseTransformRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model._transform.transformridgecv method)": [[37, "wildboar.linear_model._transform.TransformRidgeCV.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model._transform.transformridgeclassifiercv method)": [[37, "wildboar.linear_model._transform.TransformRidgeClassifierCV.get_metadata_routing"]], "get_params() (wildboar.linear_model._transform.basetransformclassifier method)": [[37, "wildboar.linear_model._transform.BaseTransformClassifier.get_params"]], "get_params() (wildboar.linear_model._transform.basetransformestimator method)": [[37, "wildboar.linear_model._transform.BaseTransformEstimator.get_params"]], "get_params() (wildboar.linear_model._transform.basetransformregressor method)": [[37, "wildboar.linear_model._transform.BaseTransformRegressor.get_params"]], "get_params() (wildboar.linear_model._transform.transformridgecv method)": [[37, "wildboar.linear_model._transform.TransformRidgeCV.get_params"]], "get_params() (wildboar.linear_model._transform.transformridgeclassifiercv method)": [[37, "wildboar.linear_model._transform.TransformRidgeClassifierCV.get_params"]], "score() (wildboar.linear_model._transform.basetransformclassifier method)": [[37, "wildboar.linear_model._transform.BaseTransformClassifier.score"]], "score() (wildboar.linear_model._transform.basetransformregressor method)": [[37, "wildboar.linear_model._transform.BaseTransformRegressor.score"]], "score() (wildboar.linear_model._transform.transformridgecv method)": [[37, "wildboar.linear_model._transform.TransformRidgeCV.score"]], "score() (wildboar.linear_model._transform.transformridgeclassifiercv method)": [[37, "wildboar.linear_model._transform.TransformRidgeClassifierCV.score"]], "set_params() (wildboar.linear_model._transform.basetransformclassifier method)": [[37, "wildboar.linear_model._transform.BaseTransformClassifier.set_params"]], "set_params() (wildboar.linear_model._transform.basetransformestimator method)": [[37, "wildboar.linear_model._transform.BaseTransformEstimator.set_params"]], "set_params() (wildboar.linear_model._transform.basetransformregressor method)": [[37, "wildboar.linear_model._transform.BaseTransformRegressor.set_params"]], "set_params() (wildboar.linear_model._transform.transformridgecv method)": [[37, "wildboar.linear_model._transform.TransformRidgeCV.set_params"]], "set_params() (wildboar.linear_model._transform.transformridgeclassifiercv method)": [[37, "wildboar.linear_model._transform.TransformRidgeClassifierCV.set_params"]], "wildboar.linear_model._transform": [[37, "module-wildboar.linear_model._transform"]], "castorclassifier (class in wildboar.linear_model)": [[38, "wildboar.linear_model.CastorClassifier"]], "dilatedshapeletclassifier (class in wildboar.linear_model)": [[38, "wildboar.linear_model.DilatedShapeletClassifier"]], "hydraclassifier (class in wildboar.linear_model)": [[38, "wildboar.linear_model.HydraClassifier"]], "randomshapeletclassifier (class in wildboar.linear_model)": [[38, "wildboar.linear_model.RandomShapeletClassifier"]], "randomshapeletregressor (class in wildboar.linear_model)": [[38, "wildboar.linear_model.RandomShapeletRegressor"]], "rocketclassifier (class in wildboar.linear_model)": [[38, "wildboar.linear_model.RocketClassifier"]], "rocketregressor (class in wildboar.linear_model)": [[38, "wildboar.linear_model.RocketRegressor"]], "get_metadata_routing() (wildboar.linear_model.castorclassifier method)": [[38, "wildboar.linear_model.CastorClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model.dilatedshapeletclassifier method)": [[38, "wildboar.linear_model.DilatedShapeletClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model.hydraclassifier method)": [[38, "wildboar.linear_model.HydraClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model.randomshapeletclassifier method)": [[38, "wildboar.linear_model.RandomShapeletClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model.randomshapeletregressor method)": [[38, "wildboar.linear_model.RandomShapeletRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model.rocketclassifier method)": [[38, "wildboar.linear_model.RocketClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model.rocketregressor method)": [[38, "wildboar.linear_model.RocketRegressor.get_metadata_routing"]], "get_params() (wildboar.linear_model.castorclassifier method)": [[38, "wildboar.linear_model.CastorClassifier.get_params"]], "get_params() (wildboar.linear_model.dilatedshapeletclassifier method)": [[38, "wildboar.linear_model.DilatedShapeletClassifier.get_params"]], "get_params() (wildboar.linear_model.hydraclassifier method)": [[38, "wildboar.linear_model.HydraClassifier.get_params"]], "get_params() (wildboar.linear_model.randomshapeletclassifier method)": [[38, "wildboar.linear_model.RandomShapeletClassifier.get_params"]], "get_params() (wildboar.linear_model.randomshapeletregressor method)": [[38, "wildboar.linear_model.RandomShapeletRegressor.get_params"]], "get_params() (wildboar.linear_model.rocketclassifier method)": [[38, "wildboar.linear_model.RocketClassifier.get_params"]], "get_params() (wildboar.linear_model.rocketregressor method)": [[38, "wildboar.linear_model.RocketRegressor.get_params"]], "score() (wildboar.linear_model.castorclassifier method)": [[38, "wildboar.linear_model.CastorClassifier.score"]], "score() (wildboar.linear_model.dilatedshapeletclassifier method)": [[38, "wildboar.linear_model.DilatedShapeletClassifier.score"]], "score() (wildboar.linear_model.hydraclassifier method)": [[38, "wildboar.linear_model.HydraClassifier.score"]], "score() (wildboar.linear_model.randomshapeletclassifier method)": [[38, "wildboar.linear_model.RandomShapeletClassifier.score"]], "score() (wildboar.linear_model.randomshapeletregressor method)": [[38, "wildboar.linear_model.RandomShapeletRegressor.score"]], "score() (wildboar.linear_model.rocketclassifier method)": [[38, "wildboar.linear_model.RocketClassifier.score"]], "score() (wildboar.linear_model.rocketregressor method)": [[38, "wildboar.linear_model.RocketRegressor.score"]], "set_params() (wildboar.linear_model.castorclassifier method)": [[38, "wildboar.linear_model.CastorClassifier.set_params"]], "set_params() (wildboar.linear_model.dilatedshapeletclassifier method)": [[38, "wildboar.linear_model.DilatedShapeletClassifier.set_params"]], "set_params() (wildboar.linear_model.hydraclassifier method)": [[38, "wildboar.linear_model.HydraClassifier.set_params"]], "set_params() (wildboar.linear_model.randomshapeletclassifier method)": [[38, "wildboar.linear_model.RandomShapeletClassifier.set_params"]], "set_params() (wildboar.linear_model.randomshapeletregressor method)": [[38, "wildboar.linear_model.RandomShapeletRegressor.set_params"]], "set_params() (wildboar.linear_model.rocketclassifier method)": [[38, "wildboar.linear_model.RocketClassifier.set_params"]], "set_params() (wildboar.linear_model.rocketregressor method)": [[38, "wildboar.linear_model.RocketRegressor.set_params"]], "wildboar.linear_model": [[38, "module-wildboar.linear_model"]], "silhouette_samples() (in module wildboar.metrics._cluster)": [[39, "wildboar.metrics._cluster.silhouette_samples"]], "silhouette_score() (in module wildboar.metrics._cluster)": [[39, "wildboar.metrics._cluster.silhouette_score"]], "wildboar.metrics._cluster": [[39, "module-wildboar.metrics._cluster"]], "compactness_score() (in module wildboar.metrics._counterfactual)": [[40, "wildboar.metrics._counterfactual.compactness_score"]], "plausability_score() (in module wildboar.metrics._counterfactual)": [[40, "wildboar.metrics._counterfactual.plausability_score"]], "proximity_score() (in module wildboar.metrics._counterfactual)": [[40, "wildboar.metrics._counterfactual.proximity_score"]], "redudancy_score() (in module wildboar.metrics._counterfactual)": [[40, "wildboar.metrics._counterfactual.redudancy_score"]], "relative_proximity_score() (in module wildboar.metrics._counterfactual)": [[40, "wildboar.metrics._counterfactual.relative_proximity_score"]], "validity_score() (in module wildboar.metrics._counterfactual)": [[40, "wildboar.metrics._counterfactual.validity_score"]], "wildboar.metrics._counterfactual": [[40, "module-wildboar.metrics._counterfactual"]], "compactness_score() (in module wildboar.metrics)": [[41, "wildboar.metrics.compactness_score"]], "plausability_score() (in module wildboar.metrics)": [[41, "wildboar.metrics.plausability_score"]], "proximity_score() (in module wildboar.metrics)": [[41, "wildboar.metrics.proximity_score"]], "redudancy_score() (in module wildboar.metrics)": [[41, "wildboar.metrics.redudancy_score"]], "relative_proximity_score() (in module wildboar.metrics)": [[41, "wildboar.metrics.relative_proximity_score"]], "silhouette_samples() (in module wildboar.metrics)": [[41, "wildboar.metrics.silhouette_samples"]], "silhouette_score() (in module wildboar.metrics)": [[41, "wildboar.metrics.silhouette_score"]], "validity_score() (in module wildboar.metrics)": [[41, "wildboar.metrics.validity_score"]], "wildboar.metrics": [[41, "module-wildboar.metrics"]], "repeatedoutliersplit (class in wildboar.model_selection._cv)": [[42, "wildboar.model_selection._cv.RepeatedOutlierSplit"]], "get_n_splits() (wildboar.model_selection._cv.repeatedoutliersplit method)": [[42, "wildboar.model_selection._cv.RepeatedOutlierSplit.get_n_splits"]], "split() (wildboar.model_selection._cv.repeatedoutliersplit method)": [[42, "wildboar.model_selection._cv.RepeatedOutlierSplit.split"]], "wildboar.model_selection._cv": [[42, "module-wildboar.model_selection._cv"]], "outlier_train_test_split() (in module wildboar.model_selection._outlier)": [[43, "wildboar.model_selection._outlier.outlier_train_test_split"]], "wildboar.model_selection._outlier": [[43, "module-wildboar.model_selection._outlier"]], "repeatedoutliersplit (class in wildboar.model_selection)": [[44, "wildboar.model_selection.RepeatedOutlierSplit"]], "get_n_splits() (wildboar.model_selection.repeatedoutliersplit method)": [[44, "wildboar.model_selection.RepeatedOutlierSplit.get_n_splits"]], "outlier_train_test_split() (in module wildboar.model_selection)": [[44, "wildboar.model_selection.outlier_train_test_split"]], "split() (wildboar.model_selection.repeatedoutliersplit method)": [[44, "wildboar.model_selection.RepeatedOutlierSplit.split"]], "wildboar.model_selection": [[44, "module-wildboar.model_selection"]], "baseattributetransform (class in wildboar.transform._base)": [[45, "wildboar.transform._base.BaseAttributeTransform"]], "fit() (wildboar.transform._base.baseattributetransform method)": [[45, "wildboar.transform._base.BaseAttributeTransform.fit"]], "fit_transform() (wildboar.transform._base.baseattributetransform method)": [[45, "wildboar.transform._base.BaseAttributeTransform.fit_transform"]], "get_metadata_routing() (wildboar.transform._base.baseattributetransform method)": [[45, "wildboar.transform._base.BaseAttributeTransform.get_metadata_routing"]], "get_params() (wildboar.transform._base.baseattributetransform method)": [[45, "wildboar.transform._base.BaseAttributeTransform.get_params"]], "set_output() (wildboar.transform._base.baseattributetransform method)": [[45, "wildboar.transform._base.BaseAttributeTransform.set_output"]], "set_params() (wildboar.transform._base.baseattributetransform method)": [[45, "wildboar.transform._base.BaseAttributeTransform.set_params"]], "transform() (wildboar.transform._base.baseattributetransform method)": [[45, "wildboar.transform._base.BaseAttributeTransform.transform"]], "wildboar.transform._base": [[45, "module-wildboar.transform._base"]], "convolve() (in module wildboar.transform._conv)": [[46, "wildboar.transform._conv.convolve"]], "wildboar.transform._conv": [[46, "module-wildboar.transform._conv"]], "derivativetransform (class in wildboar.transform._diff)": [[47, "wildboar.transform._diff.DerivativeTransform"]], "difftransform (class in wildboar.transform._diff)": [[47, "wildboar.transform._diff.DiffTransform"]], "fit_transform() (wildboar.transform._diff.derivativetransform method)": [[47, "wildboar.transform._diff.DerivativeTransform.fit_transform"]], "fit_transform() (wildboar.transform._diff.difftransform method)": [[47, "wildboar.transform._diff.DiffTransform.fit_transform"]], "get_metadata_routing() (wildboar.transform._diff.derivativetransform method)": [[47, "wildboar.transform._diff.DerivativeTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform._diff.difftransform method)": [[47, "wildboar.transform._diff.DiffTransform.get_metadata_routing"]], "get_params() (wildboar.transform._diff.derivativetransform method)": [[47, "wildboar.transform._diff.DerivativeTransform.get_params"]], "get_params() (wildboar.transform._diff.difftransform method)": [[47, "wildboar.transform._diff.DiffTransform.get_params"]], "set_output() (wildboar.transform._diff.derivativetransform method)": [[47, "wildboar.transform._diff.DerivativeTransform.set_output"]], "set_output() (wildboar.transform._diff.difftransform method)": [[47, "wildboar.transform._diff.DiffTransform.set_output"]], "set_params() (wildboar.transform._diff.derivativetransform method)": [[47, "wildboar.transform._diff.DerivativeTransform.set_params"]], "set_params() (wildboar.transform._diff.difftransform method)": [[47, "wildboar.transform._diff.DiffTransform.set_params"]], "wildboar.transform._diff": [[47, "module-wildboar.transform._diff"]], "hydratransform (class in wildboar.transform._hydra)": [[48, "wildboar.transform._hydra.HydraTransform"]], "fit() (wildboar.transform._hydra.hydratransform method)": [[48, "wildboar.transform._hydra.HydraTransform.fit"]], "fit_transform() (wildboar.transform._hydra.hydratransform method)": [[48, "wildboar.transform._hydra.HydraTransform.fit_transform"]], "get_metadata_routing() (wildboar.transform._hydra.hydratransform method)": [[48, "wildboar.transform._hydra.HydraTransform.get_metadata_routing"]], "get_params() (wildboar.transform._hydra.hydratransform method)": [[48, "wildboar.transform._hydra.HydraTransform.get_params"]], "set_output() (wildboar.transform._hydra.hydratransform method)": [[48, "wildboar.transform._hydra.HydraTransform.set_output"]], "set_params() (wildboar.transform._hydra.hydratransform method)": [[48, "wildboar.transform._hydra.HydraTransform.set_params"]], "transform() (wildboar.transform._hydra.hydratransform method)": [[48, "wildboar.transform._hydra.HydraTransform.transform"]], "wildboar.transform._hydra": [[48, "module-wildboar.transform._hydra"]], "featuretransform (class in wildboar.transform._interval)": [[49, "wildboar.transform._interval.FeatureTransform"]], "intervalmixin (class in wildboar.transform._interval)": [[49, "wildboar.transform._interval.IntervalMixin"]], "intervaltransform (class in wildboar.transform._interval)": [[49, "wildboar.transform._interval.IntervalTransform"]], "fit() (wildboar.transform._interval.featuretransform method)": [[49, "wildboar.transform._interval.FeatureTransform.fit"]], "fit() (wildboar.transform._interval.intervaltransform method)": [[49, "wildboar.transform._interval.IntervalTransform.fit"]], "fit_transform() (wildboar.transform._interval.featuretransform method)": [[49, "wildboar.transform._interval.FeatureTransform.fit_transform"]], "fit_transform() (wildboar.transform._interval.intervaltransform method)": [[49, "wildboar.transform._interval.IntervalTransform.fit_transform"]], "get_metadata_routing() (wildboar.transform._interval.featuretransform method)": [[49, "wildboar.transform._interval.FeatureTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform._interval.intervaltransform method)": [[49, "wildboar.transform._interval.IntervalTransform.get_metadata_routing"]], "get_params() (wildboar.transform._interval.featuretransform method)": [[49, "wildboar.transform._interval.FeatureTransform.get_params"]], "get_params() (wildboar.transform._interval.intervaltransform method)": [[49, "wildboar.transform._interval.IntervalTransform.get_params"]], "set_output() (wildboar.transform._interval.featuretransform method)": [[49, "wildboar.transform._interval.FeatureTransform.set_output"]], "set_output() (wildboar.transform._interval.intervaltransform method)": [[49, "wildboar.transform._interval.IntervalTransform.set_output"]], "set_params() (wildboar.transform._interval.featuretransform method)": [[49, "wildboar.transform._interval.FeatureTransform.set_params"]], "set_params() (wildboar.transform._interval.intervaltransform method)": [[49, "wildboar.transform._interval.IntervalTransform.set_params"]], "transform() (wildboar.transform._interval.featuretransform method)": [[49, "wildboar.transform._interval.FeatureTransform.transform"]], "transform() (wildboar.transform._interval.intervaltransform method)": [[49, "wildboar.transform._interval.IntervalTransform.transform"]], "wildboar.transform._interval": [[49, "module-wildboar.transform._interval"]], "matrixprofiletransform (class in wildboar.transform._matrix_profile)": [[50, "wildboar.transform._matrix_profile.MatrixProfileTransform"]], "fit() (wildboar.transform._matrix_profile.matrixprofiletransform method)": [[50, "wildboar.transform._matrix_profile.MatrixProfileTransform.fit"]], "fit_transform() (wildboar.transform._matrix_profile.matrixprofiletransform method)": [[50, "wildboar.transform._matrix_profile.MatrixProfileTransform.fit_transform"]], "get_metadata_routing() (wildboar.transform._matrix_profile.matrixprofiletransform method)": [[50, "wildboar.transform._matrix_profile.MatrixProfileTransform.get_metadata_routing"]], "get_params() (wildboar.transform._matrix_profile.matrixprofiletransform method)": [[50, "wildboar.transform._matrix_profile.MatrixProfileTransform.get_params"]], "set_output() (wildboar.transform._matrix_profile.matrixprofiletransform method)": [[50, "wildboar.transform._matrix_profile.MatrixProfileTransform.set_output"]], "set_params() (wildboar.transform._matrix_profile.matrixprofiletransform method)": [[50, "wildboar.transform._matrix_profile.MatrixProfileTransform.set_params"]], "transform() (wildboar.transform._matrix_profile.matrixprofiletransform method)": [[50, "wildboar.transform._matrix_profile.MatrixProfileTransform.transform"]], "wildboar.transform._matrix_profile": [[50, "module-wildboar.transform._matrix_profile"]], "pivotmixin (class in wildboar.transform._pivot)": [[51, "wildboar.transform._pivot.PivotMixin"]], "pivottransform (class in wildboar.transform._pivot)": [[51, "wildboar.transform._pivot.PivotTransform"]], "proximitytransform (class in wildboar.transform._pivot)": [[51, "wildboar.transform._pivot.ProximityTransform"]], "fit() (wildboar.transform._pivot.pivottransform method)": [[51, "wildboar.transform._pivot.PivotTransform.fit"]], "fit_transform() (wildboar.transform._pivot.pivottransform method)": [[51, "wildboar.transform._pivot.PivotTransform.fit_transform"]], "fit_transform() (wildboar.transform._pivot.proximitytransform method)": [[51, "wildboar.transform._pivot.ProximityTransform.fit_transform"]], "get_metadata_routing() (wildboar.transform._pivot.pivottransform method)": [[51, "wildboar.transform._pivot.PivotTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform._pivot.proximitytransform method)": [[51, "wildboar.transform._pivot.ProximityTransform.get_metadata_routing"]], "get_params() (wildboar.transform._pivot.pivottransform method)": [[51, "wildboar.transform._pivot.PivotTransform.get_params"]], "get_params() (wildboar.transform._pivot.proximitytransform method)": [[51, "wildboar.transform._pivot.ProximityTransform.get_params"]], "set_output() (wildboar.transform._pivot.pivottransform method)": [[51, "wildboar.transform._pivot.PivotTransform.set_output"]], "set_output() (wildboar.transform._pivot.proximitytransform method)": [[51, "wildboar.transform._pivot.ProximityTransform.set_output"]], "set_params() (wildboar.transform._pivot.pivottransform method)": [[51, "wildboar.transform._pivot.PivotTransform.set_params"]], "set_params() (wildboar.transform._pivot.proximitytransform method)": [[51, "wildboar.transform._pivot.ProximityTransform.set_params"]], "transform() (wildboar.transform._pivot.pivottransform method)": [[51, "wildboar.transform._pivot.PivotTransform.transform"]], "wildboar.transform._pivot": [[51, "module-wildboar.transform._pivot"]], "rocketmixin (class in wildboar.transform._rocket)": [[52, "wildboar.transform._rocket.RocketMixin"]], "rockettransform (class in wildboar.transform._rocket)": [[52, "wildboar.transform._rocket.RocketTransform"]], "fit() (wildboar.transform._rocket.rockettransform method)": [[52, "wildboar.transform._rocket.RocketTransform.fit"]], "fit_transform() (wildboar.transform._rocket.rockettransform method)": [[52, "wildboar.transform._rocket.RocketTransform.fit_transform"]], "get_metadata_routing() (wildboar.transform._rocket.rockettransform method)": [[52, "wildboar.transform._rocket.RocketTransform.get_metadata_routing"]], "get_params() (wildboar.transform._rocket.rockettransform method)": [[52, "wildboar.transform._rocket.RocketTransform.get_params"]], "set_output() (wildboar.transform._rocket.rockettransform method)": [[52, "wildboar.transform._rocket.RocketTransform.set_output"]], "set_params() (wildboar.transform._rocket.rockettransform method)": [[52, "wildboar.transform._rocket.RocketTransform.set_params"]], "transform() (wildboar.transform._rocket.rockettransform method)": [[52, "wildboar.transform._rocket.RocketTransform.transform"]], "wildboar.transform._rocket": [[52, "module-wildboar.transform._rocket"]], "binning (class in wildboar.transform._sax)": [[53, "wildboar.transform._sax.Binning"]], "normalbinning (class in wildboar.transform._sax)": [[53, "wildboar.transform._sax.NormalBinning"]], "paa (class in wildboar.transform._sax)": [[53, "wildboar.transform._sax.PAA"]], "sax (class in wildboar.transform._sax)": [[53, "wildboar.transform._sax.SAX"]], "uniformbinning (class in wildboar.transform._sax)": [[53, "wildboar.transform._sax.UniformBinning"]], "fit_transform() (wildboar.transform._sax.paa method)": [[53, "wildboar.transform._sax.PAA.fit_transform"]], "fit_transform() (wildboar.transform._sax.sax method)": [[53, "wildboar.transform._sax.SAX.fit_transform"]], "get_metadata_routing() (wildboar.transform._sax.paa method)": [[53, "wildboar.transform._sax.PAA.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform._sax.sax method)": [[53, "wildboar.transform._sax.SAX.get_metadata_routing"]], "get_params() (wildboar.transform._sax.paa method)": [[53, "wildboar.transform._sax.PAA.get_params"]], "get_params() (wildboar.transform._sax.sax method)": [[53, "wildboar.transform._sax.SAX.get_params"]], "get_thresholds() (wildboar.transform._sax.binning method)": [[53, "wildboar.transform._sax.Binning.get_thresholds"]], "get_thresholds() (wildboar.transform._sax.normalbinning method)": [[53, "wildboar.transform._sax.NormalBinning.get_thresholds"]], "get_thresholds() (wildboar.transform._sax.uniformbinning method)": [[53, "wildboar.transform._sax.UniformBinning.get_thresholds"]], "piecewice_aggregate_approximation() (in module wildboar.transform._sax)": [[53, "wildboar.transform._sax.piecewice_aggregate_approximation"]], "scale() (wildboar.transform._sax.binning method)": [[53, "wildboar.transform._sax.Binning.scale"]], "scale() (wildboar.transform._sax.normalbinning method)": [[53, "wildboar.transform._sax.NormalBinning.scale"]], "scale() (wildboar.transform._sax.uniformbinning method)": [[53, "wildboar.transform._sax.UniformBinning.scale"]], "set_output() (wildboar.transform._sax.paa method)": [[53, "wildboar.transform._sax.PAA.set_output"]], "set_output() (wildboar.transform._sax.sax method)": [[53, "wildboar.transform._sax.SAX.set_output"]], "set_params() (wildboar.transform._sax.paa method)": [[53, "wildboar.transform._sax.PAA.set_params"]], "set_params() (wildboar.transform._sax.sax method)": [[53, "wildboar.transform._sax.SAX.set_params"]], "symbolic_aggregate_approximation() (in module wildboar.transform._sax)": [[53, "wildboar.transform._sax.symbolic_aggregate_approximation"]], "wildboar.transform._sax": [[53, "module-wildboar.transform._sax"]], "castortransform (class in wildboar.transform._shapelet)": [[54, "wildboar.transform._shapelet.CastorTransform"]], "dilatedshapelettransform (class in wildboar.transform._shapelet)": [[54, "wildboar.transform._shapelet.DilatedShapeletTransform"]], "randomshapelettransform (class in wildboar.transform._shapelet)": [[54, "wildboar.transform._shapelet.RandomShapeletTransform"]], "shapeletmixin (class in wildboar.transform._shapelet)": [[54, "wildboar.transform._shapelet.ShapeletMixin"]], "fit() (wildboar.transform._shapelet.castortransform method)": [[54, "wildboar.transform._shapelet.CastorTransform.fit"]], "fit() (wildboar.transform._shapelet.dilatedshapelettransform method)": [[54, "wildboar.transform._shapelet.DilatedShapeletTransform.fit"]], "fit() (wildboar.transform._shapelet.randomshapelettransform method)": [[54, "wildboar.transform._shapelet.RandomShapeletTransform.fit"]], "fit_transform() (wildboar.transform._shapelet.castortransform method)": [[54, "wildboar.transform._shapelet.CastorTransform.fit_transform"]], "fit_transform() (wildboar.transform._shapelet.dilatedshapelettransform method)": [[54, "wildboar.transform._shapelet.DilatedShapeletTransform.fit_transform"]], "fit_transform() (wildboar.transform._shapelet.randomshapelettransform method)": [[54, "wildboar.transform._shapelet.RandomShapeletTransform.fit_transform"]], "get_metadata_routing() (wildboar.transform._shapelet.castortransform method)": [[54, "wildboar.transform._shapelet.CastorTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform._shapelet.dilatedshapelettransform method)": [[54, "wildboar.transform._shapelet.DilatedShapeletTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform._shapelet.randomshapelettransform method)": [[54, "wildboar.transform._shapelet.RandomShapeletTransform.get_metadata_routing"]], "get_params() (wildboar.transform._shapelet.castortransform method)": [[54, "wildboar.transform._shapelet.CastorTransform.get_params"]], "get_params() (wildboar.transform._shapelet.dilatedshapelettransform method)": [[54, "wildboar.transform._shapelet.DilatedShapeletTransform.get_params"]], "get_params() (wildboar.transform._shapelet.randomshapelettransform method)": [[54, "wildboar.transform._shapelet.RandomShapeletTransform.get_params"]], "set_output() (wildboar.transform._shapelet.castortransform method)": [[54, "wildboar.transform._shapelet.CastorTransform.set_output"]], "set_output() (wildboar.transform._shapelet.dilatedshapelettransform method)": [[54, "wildboar.transform._shapelet.DilatedShapeletTransform.set_output"]], "set_output() (wildboar.transform._shapelet.randomshapelettransform method)": [[54, "wildboar.transform._shapelet.RandomShapeletTransform.set_output"]], "set_params() (wildboar.transform._shapelet.castortransform method)": [[54, "wildboar.transform._shapelet.CastorTransform.set_params"]], "set_params() (wildboar.transform._shapelet.dilatedshapelettransform method)": [[54, "wildboar.transform._shapelet.DilatedShapeletTransform.set_params"]], "set_params() (wildboar.transform._shapelet.randomshapelettransform method)": [[54, "wildboar.transform._shapelet.RandomShapeletTransform.set_params"]], "transform() (wildboar.transform._shapelet.castortransform method)": [[54, "wildboar.transform._shapelet.CastorTransform.transform"]], "transform() (wildboar.transform._shapelet.dilatedshapelettransform method)": [[54, "wildboar.transform._shapelet.DilatedShapeletTransform.transform"]], "transform() (wildboar.transform._shapelet.randomshapelettransform method)": [[54, "wildboar.transform._shapelet.RandomShapeletTransform.transform"]], "wildboar.transform._shapelet": [[54, "module-wildboar.transform._shapelet"]], "castortransform (class in wildboar.transform)": [[55, "wildboar.transform.CastorTransform"]], "derivativetransform (class in wildboar.transform)": [[55, "wildboar.transform.DerivativeTransform"]], "difftransform (class in wildboar.transform)": [[55, "wildboar.transform.DiffTransform"]], "dilatedshapelettransform (class in wildboar.transform)": [[55, "wildboar.transform.DilatedShapeletTransform"]], "featuretransform (class in wildboar.transform)": [[55, "wildboar.transform.FeatureTransform"]], "hydratransform (class in wildboar.transform)": [[55, "wildboar.transform.HydraTransform"]], "intervaltransform (class in wildboar.transform)": [[55, "wildboar.transform.IntervalTransform"]], "matrixprofiletransform (class in wildboar.transform)": [[55, "wildboar.transform.MatrixProfileTransform"]], "paa (class in wildboar.transform)": [[55, "wildboar.transform.PAA"]], "pivottransform (class in wildboar.transform)": [[55, "wildboar.transform.PivotTransform"]], "proximitytransform (class in wildboar.transform)": [[55, "wildboar.transform.ProximityTransform"]], "randomshapelettransform (class in wildboar.transform)": [[55, "wildboar.transform.RandomShapeletTransform"]], "rockettransform (class in wildboar.transform)": [[55, "wildboar.transform.RocketTransform"]], "sax (class in wildboar.transform)": [[55, "wildboar.transform.SAX"]], "convolve() (in module wildboar.transform)": [[55, "wildboar.transform.convolve"]], "fit() (wildboar.transform.castortransform method)": [[55, "wildboar.transform.CastorTransform.fit"]], "fit() (wildboar.transform.dilatedshapelettransform method)": [[55, "wildboar.transform.DilatedShapeletTransform.fit"]], "fit() (wildboar.transform.featuretransform method)": [[55, "wildboar.transform.FeatureTransform.fit"]], "fit() (wildboar.transform.hydratransform method)": [[55, "wildboar.transform.HydraTransform.fit"]], "fit() (wildboar.transform.intervaltransform method)": [[55, "wildboar.transform.IntervalTransform.fit"]], "fit() (wildboar.transform.matrixprofiletransform method)": [[55, "wildboar.transform.MatrixProfileTransform.fit"]], "fit() (wildboar.transform.pivottransform method)": [[55, "wildboar.transform.PivotTransform.fit"]], "fit() (wildboar.transform.randomshapelettransform method)": [[55, "wildboar.transform.RandomShapeletTransform.fit"]], "fit() (wildboar.transform.rockettransform method)": [[55, "wildboar.transform.RocketTransform.fit"]], "fit_transform() (wildboar.transform.castortransform method)": [[55, "wildboar.transform.CastorTransform.fit_transform"]], "fit_transform() (wildboar.transform.derivativetransform method)": [[55, "wildboar.transform.DerivativeTransform.fit_transform"]], "fit_transform() (wildboar.transform.difftransform method)": [[55, "wildboar.transform.DiffTransform.fit_transform"]], "fit_transform() (wildboar.transform.dilatedshapelettransform method)": [[55, "wildboar.transform.DilatedShapeletTransform.fit_transform"]], "fit_transform() (wildboar.transform.featuretransform method)": [[55, "wildboar.transform.FeatureTransform.fit_transform"]], "fit_transform() (wildboar.transform.hydratransform method)": [[55, "wildboar.transform.HydraTransform.fit_transform"]], "fit_transform() (wildboar.transform.intervaltransform method)": [[55, "wildboar.transform.IntervalTransform.fit_transform"]], "fit_transform() (wildboar.transform.matrixprofiletransform method)": [[55, "wildboar.transform.MatrixProfileTransform.fit_transform"]], "fit_transform() (wildboar.transform.paa method)": [[55, "wildboar.transform.PAA.fit_transform"]], "fit_transform() (wildboar.transform.pivottransform method)": [[55, "wildboar.transform.PivotTransform.fit_transform"]], "fit_transform() (wildboar.transform.proximitytransform method)": [[55, "wildboar.transform.ProximityTransform.fit_transform"]], "fit_transform() (wildboar.transform.randomshapelettransform method)": [[55, "wildboar.transform.RandomShapeletTransform.fit_transform"]], "fit_transform() (wildboar.transform.rockettransform method)": [[55, "wildboar.transform.RocketTransform.fit_transform"]], "fit_transform() (wildboar.transform.sax method)": [[55, "wildboar.transform.SAX.fit_transform"]], "get_metadata_routing() (wildboar.transform.castortransform method)": [[55, "wildboar.transform.CastorTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.derivativetransform method)": [[55, "wildboar.transform.DerivativeTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.difftransform method)": [[55, "wildboar.transform.DiffTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.dilatedshapelettransform method)": [[55, "wildboar.transform.DilatedShapeletTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.featuretransform method)": [[55, "wildboar.transform.FeatureTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.hydratransform method)": [[55, "wildboar.transform.HydraTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.intervaltransform method)": [[55, "wildboar.transform.IntervalTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.matrixprofiletransform method)": [[55, "wildboar.transform.MatrixProfileTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.paa method)": [[55, "wildboar.transform.PAA.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.pivottransform method)": [[55, "wildboar.transform.PivotTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.proximitytransform method)": [[55, "wildboar.transform.ProximityTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.randomshapelettransform method)": [[55, "wildboar.transform.RandomShapeletTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.rockettransform method)": [[55, "wildboar.transform.RocketTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.sax method)": [[55, "wildboar.transform.SAX.get_metadata_routing"]], "get_params() (wildboar.transform.castortransform method)": [[55, "wildboar.transform.CastorTransform.get_params"]], "get_params() (wildboar.transform.derivativetransform method)": [[55, "wildboar.transform.DerivativeTransform.get_params"]], "get_params() (wildboar.transform.difftransform method)": [[55, "wildboar.transform.DiffTransform.get_params"]], "get_params() (wildboar.transform.dilatedshapelettransform method)": [[55, "wildboar.transform.DilatedShapeletTransform.get_params"]], "get_params() (wildboar.transform.featuretransform method)": [[55, "wildboar.transform.FeatureTransform.get_params"]], "get_params() (wildboar.transform.hydratransform method)": [[55, "wildboar.transform.HydraTransform.get_params"]], "get_params() (wildboar.transform.intervaltransform method)": [[55, "wildboar.transform.IntervalTransform.get_params"]], "get_params() (wildboar.transform.matrixprofiletransform method)": [[55, "wildboar.transform.MatrixProfileTransform.get_params"]], "get_params() (wildboar.transform.paa method)": [[55, "wildboar.transform.PAA.get_params"]], "get_params() (wildboar.transform.pivottransform method)": [[55, "wildboar.transform.PivotTransform.get_params"]], "get_params() (wildboar.transform.proximitytransform method)": [[55, "wildboar.transform.ProximityTransform.get_params"]], "get_params() (wildboar.transform.randomshapelettransform method)": [[55, "wildboar.transform.RandomShapeletTransform.get_params"]], "get_params() (wildboar.transform.rockettransform method)": [[55, "wildboar.transform.RocketTransform.get_params"]], "get_params() (wildboar.transform.sax method)": [[55, "wildboar.transform.SAX.get_params"]], "piecewice_aggregate_approximation() (in module wildboar.transform)": [[55, "wildboar.transform.piecewice_aggregate_approximation"]], "set_output() (wildboar.transform.castortransform method)": [[55, "wildboar.transform.CastorTransform.set_output"]], "set_output() (wildboar.transform.derivativetransform method)": [[55, "wildboar.transform.DerivativeTransform.set_output"]], "set_output() (wildboar.transform.difftransform method)": [[55, "wildboar.transform.DiffTransform.set_output"]], "set_output() (wildboar.transform.dilatedshapelettransform method)": [[55, "wildboar.transform.DilatedShapeletTransform.set_output"]], "set_output() (wildboar.transform.featuretransform method)": [[55, "wildboar.transform.FeatureTransform.set_output"]], "set_output() (wildboar.transform.hydratransform method)": [[55, "wildboar.transform.HydraTransform.set_output"]], "set_output() (wildboar.transform.intervaltransform method)": [[55, "wildboar.transform.IntervalTransform.set_output"]], "set_output() (wildboar.transform.matrixprofiletransform method)": [[55, "wildboar.transform.MatrixProfileTransform.set_output"]], "set_output() (wildboar.transform.paa method)": [[55, "wildboar.transform.PAA.set_output"]], "set_output() (wildboar.transform.pivottransform method)": [[55, "wildboar.transform.PivotTransform.set_output"]], "set_output() (wildboar.transform.proximitytransform method)": [[55, "wildboar.transform.ProximityTransform.set_output"]], "set_output() (wildboar.transform.randomshapelettransform method)": [[55, "wildboar.transform.RandomShapeletTransform.set_output"]], "set_output() (wildboar.transform.rockettransform method)": [[55, "wildboar.transform.RocketTransform.set_output"]], "set_output() (wildboar.transform.sax method)": [[55, "wildboar.transform.SAX.set_output"]], "set_params() (wildboar.transform.castortransform method)": [[55, "wildboar.transform.CastorTransform.set_params"]], "set_params() (wildboar.transform.derivativetransform method)": [[55, "wildboar.transform.DerivativeTransform.set_params"]], "set_params() (wildboar.transform.difftransform method)": [[55, "wildboar.transform.DiffTransform.set_params"]], "set_params() (wildboar.transform.dilatedshapelettransform method)": [[55, "wildboar.transform.DilatedShapeletTransform.set_params"]], "set_params() (wildboar.transform.featuretransform method)": [[55, "wildboar.transform.FeatureTransform.set_params"]], "set_params() (wildboar.transform.hydratransform method)": [[55, "wildboar.transform.HydraTransform.set_params"]], "set_params() (wildboar.transform.intervaltransform method)": [[55, "wildboar.transform.IntervalTransform.set_params"]], "set_params() (wildboar.transform.matrixprofiletransform method)": [[55, "wildboar.transform.MatrixProfileTransform.set_params"]], "set_params() (wildboar.transform.paa method)": [[55, "wildboar.transform.PAA.set_params"]], "set_params() (wildboar.transform.pivottransform method)": [[55, "wildboar.transform.PivotTransform.set_params"]], "set_params() (wildboar.transform.proximitytransform method)": [[55, "wildboar.transform.ProximityTransform.set_params"]], "set_params() (wildboar.transform.randomshapelettransform method)": [[55, "wildboar.transform.RandomShapeletTransform.set_params"]], "set_params() (wildboar.transform.rockettransform method)": [[55, "wildboar.transform.RocketTransform.set_params"]], "set_params() (wildboar.transform.sax method)": [[55, "wildboar.transform.SAX.set_params"]], "symbolic_aggregate_approximation() (in module wildboar.transform)": [[55, "wildboar.transform.symbolic_aggregate_approximation"]], "transform() (wildboar.transform.castortransform method)": [[55, "wildboar.transform.CastorTransform.transform"]], "transform() (wildboar.transform.dilatedshapelettransform method)": [[55, "wildboar.transform.DilatedShapeletTransform.transform"]], "transform() (wildboar.transform.featuretransform method)": [[55, "wildboar.transform.FeatureTransform.transform"]], "transform() (wildboar.transform.hydratransform method)": [[55, "wildboar.transform.HydraTransform.transform"]], "transform() (wildboar.transform.intervaltransform method)": [[55, "wildboar.transform.IntervalTransform.transform"]], "transform() (wildboar.transform.matrixprofiletransform method)": [[55, "wildboar.transform.MatrixProfileTransform.transform"]], "transform() (wildboar.transform.pivottransform method)": [[55, "wildboar.transform.PivotTransform.transform"]], "transform() (wildboar.transform.randomshapelettransform method)": [[55, "wildboar.transform.RandomShapeletTransform.transform"]], "transform() (wildboar.transform.rockettransform method)": [[55, "wildboar.transform.RocketTransform.transform"]], "wildboar.transform": [[55, "module-wildboar.transform"]], "basetree (class in wildboar.tree._base)": [[56, "wildboar.tree._base.BaseTree"]], "basetreeclassifier (class in wildboar.tree._base)": [[56, "wildboar.tree._base.BaseTreeClassifier"]], "basetreeregressor (class in wildboar.tree._base)": [[56, "wildboar.tree._base.BaseTreeRegressor"]], "apply() (wildboar.tree._base.basetree method)": [[56, "wildboar.tree._base.BaseTree.apply"]], "apply() (wildboar.tree._base.basetreeclassifier method)": [[56, "wildboar.tree._base.BaseTreeClassifier.apply"]], "apply() (wildboar.tree._base.basetreeregressor method)": [[56, "wildboar.tree._base.BaseTreeRegressor.apply"]], "decision_path() (wildboar.tree._base.basetree method)": [[56, "wildboar.tree._base.BaseTree.decision_path"]], "decision_path() (wildboar.tree._base.basetreeclassifier method)": [[56, "wildboar.tree._base.BaseTreeClassifier.decision_path"]], "decision_path() (wildboar.tree._base.basetreeregressor method)": [[56, "wildboar.tree._base.BaseTreeRegressor.decision_path"]], "fit() (wildboar.tree._base.basetreeclassifier method)": [[56, "wildboar.tree._base.BaseTreeClassifier.fit"]], "fit() (wildboar.tree._base.basetreeregressor method)": [[56, "wildboar.tree._base.BaseTreeRegressor.fit"]], "get_metadata_routing() (wildboar.tree._base.basetree method)": [[56, "wildboar.tree._base.BaseTree.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._base.basetreeclassifier method)": [[56, "wildboar.tree._base.BaseTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._base.basetreeregressor method)": [[56, "wildboar.tree._base.BaseTreeRegressor.get_metadata_routing"]], "get_params() (wildboar.tree._base.basetree method)": [[56, "wildboar.tree._base.BaseTree.get_params"]], "get_params() (wildboar.tree._base.basetreeclassifier method)": [[56, "wildboar.tree._base.BaseTreeClassifier.get_params"]], "get_params() (wildboar.tree._base.basetreeregressor method)": [[56, "wildboar.tree._base.BaseTreeRegressor.get_params"]], "predict() (wildboar.tree._base.basetreeclassifier method)": [[56, "wildboar.tree._base.BaseTreeClassifier.predict"]], "predict() (wildboar.tree._base.basetreeregressor method)": [[56, "wildboar.tree._base.BaseTreeRegressor.predict"]], "predict_proba() (wildboar.tree._base.basetreeclassifier method)": [[56, "wildboar.tree._base.BaseTreeClassifier.predict_proba"]], "score() (wildboar.tree._base.basetreeclassifier method)": [[56, "wildboar.tree._base.BaseTreeClassifier.score"]], "score() (wildboar.tree._base.basetreeregressor method)": [[56, "wildboar.tree._base.BaseTreeRegressor.score"]], "set_params() (wildboar.tree._base.basetree method)": [[56, "wildboar.tree._base.BaseTree.set_params"]], "set_params() (wildboar.tree._base.basetreeclassifier method)": [[56, "wildboar.tree._base.BaseTreeClassifier.set_params"]], "set_params() (wildboar.tree._base.basetreeregressor method)": [[56, "wildboar.tree._base.BaseTreeRegressor.set_params"]], "wildboar.tree._base": [[56, "module-wildboar.tree._base"]], "plot_tree() (in module wildboar.tree._plot)": [[57, "wildboar.tree._plot.plot_tree"]], "wildboar.tree._plot": [[57, "module-wildboar.tree._plot"]], "proximitytreeclassifier (class in wildboar.tree._ptree)": [[58, "wildboar.tree._ptree.ProximityTreeClassifier"]], "apply() (wildboar.tree._ptree.proximitytreeclassifier method)": [[58, "wildboar.tree._ptree.ProximityTreeClassifier.apply"]], "decision_path() (wildboar.tree._ptree.proximitytreeclassifier method)": [[58, "wildboar.tree._ptree.ProximityTreeClassifier.decision_path"]], "fit() (wildboar.tree._ptree.proximitytreeclassifier method)": [[58, "wildboar.tree._ptree.ProximityTreeClassifier.fit"]], "get_metadata_routing() (wildboar.tree._ptree.proximitytreeclassifier method)": [[58, "wildboar.tree._ptree.ProximityTreeClassifier.get_metadata_routing"]], "get_params() (wildboar.tree._ptree.proximitytreeclassifier method)": [[58, "wildboar.tree._ptree.ProximityTreeClassifier.get_params"]], "predict() (wildboar.tree._ptree.proximitytreeclassifier method)": [[58, "wildboar.tree._ptree.ProximityTreeClassifier.predict"]], "predict_proba() (wildboar.tree._ptree.proximitytreeclassifier method)": [[58, "wildboar.tree._ptree.ProximityTreeClassifier.predict_proba"]], "score() (wildboar.tree._ptree.proximitytreeclassifier method)": [[58, "wildboar.tree._ptree.ProximityTreeClassifier.score"]], "set_params() (wildboar.tree._ptree.proximitytreeclassifier method)": [[58, "wildboar.tree._ptree.ProximityTreeClassifier.set_params"]], "wildboar.tree._ptree": [[58, "module-wildboar.tree._ptree"]], "basefeaturetreeclassifier (class in wildboar.tree._tree)": [[59, "wildboar.tree._tree.BaseFeatureTreeClassifier"]], "basefeaturetreeregressor (class in wildboar.tree._tree)": [[59, "wildboar.tree._tree.BaseFeatureTreeRegressor"]], "dilatedshapelettreeclassifier (class in wildboar.tree._tree)": [[59, "wildboar.tree._tree.DilatedShapeletTreeClassifier"]], "extrashapelettreeclassifier (class in wildboar.tree._tree)": [[59, "wildboar.tree._tree.ExtraShapeletTreeClassifier"]], "extrashapelettreeregressor (class in wildboar.tree._tree)": [[59, "wildboar.tree._tree.ExtraShapeletTreeRegressor"]], "intervaltreeclassifier (class in wildboar.tree._tree)": [[59, "wildboar.tree._tree.IntervalTreeClassifier"]], "intervaltreeregressor (class in wildboar.tree._tree)": [[59, "wildboar.tree._tree.IntervalTreeRegressor"]], "pivottreeclassifier (class in wildboar.tree._tree)": [[59, "wildboar.tree._tree.PivotTreeClassifier"]], "rockettreeclassifier (class in wildboar.tree._tree)": [[59, "wildboar.tree._tree.RocketTreeClassifier"]], "rockettreeregressor (class in wildboar.tree._tree)": [[59, "wildboar.tree._tree.RocketTreeRegressor"]], "shapelettreeclassifier (class in wildboar.tree._tree)": [[59, "wildboar.tree._tree.ShapeletTreeClassifier"]], "shapelettreeregressor (class in wildboar.tree._tree)": [[59, "wildboar.tree._tree.ShapeletTreeRegressor"]], "apply() (wildboar.tree._tree.basefeaturetreeclassifier method)": [[59, "wildboar.tree._tree.BaseFeatureTreeClassifier.apply"]], "apply() (wildboar.tree._tree.basefeaturetreeregressor method)": [[59, "wildboar.tree._tree.BaseFeatureTreeRegressor.apply"]], "apply() (wildboar.tree._tree.dilatedshapelettreeclassifier method)": [[59, "wildboar.tree._tree.DilatedShapeletTreeClassifier.apply"]], "apply() (wildboar.tree._tree.extrashapelettreeclassifier method)": [[59, "wildboar.tree._tree.ExtraShapeletTreeClassifier.apply"]], "apply() (wildboar.tree._tree.extrashapelettreeregressor method)": [[59, "wildboar.tree._tree.ExtraShapeletTreeRegressor.apply"]], "apply() (wildboar.tree._tree.intervaltreeclassifier method)": [[59, "wildboar.tree._tree.IntervalTreeClassifier.apply"]], "apply() (wildboar.tree._tree.intervaltreeregressor method)": [[59, "wildboar.tree._tree.IntervalTreeRegressor.apply"]], "apply() (wildboar.tree._tree.pivottreeclassifier method)": [[59, "wildboar.tree._tree.PivotTreeClassifier.apply"]], "apply() (wildboar.tree._tree.rockettreeclassifier method)": [[59, "wildboar.tree._tree.RocketTreeClassifier.apply"]], "apply() (wildboar.tree._tree.rockettreeregressor method)": [[59, "wildboar.tree._tree.RocketTreeRegressor.apply"]], "apply() (wildboar.tree._tree.shapelettreeclassifier method)": [[59, "wildboar.tree._tree.ShapeletTreeClassifier.apply"]], "apply() (wildboar.tree._tree.shapelettreeregressor method)": [[59, "wildboar.tree._tree.ShapeletTreeRegressor.apply"]], "decision_path() (wildboar.tree._tree.basefeaturetreeclassifier method)": [[59, "wildboar.tree._tree.BaseFeatureTreeClassifier.decision_path"]], "decision_path() (wildboar.tree._tree.basefeaturetreeregressor method)": [[59, "wildboar.tree._tree.BaseFeatureTreeRegressor.decision_path"]], "decision_path() (wildboar.tree._tree.dilatedshapelettreeclassifier method)": [[59, "wildboar.tree._tree.DilatedShapeletTreeClassifier.decision_path"]], "decision_path() (wildboar.tree._tree.extrashapelettreeclassifier method)": [[59, "wildboar.tree._tree.ExtraShapeletTreeClassifier.decision_path"]], "decision_path() (wildboar.tree._tree.extrashapelettreeregressor method)": [[59, "wildboar.tree._tree.ExtraShapeletTreeRegressor.decision_path"]], "decision_path() (wildboar.tree._tree.intervaltreeclassifier method)": [[59, "wildboar.tree._tree.IntervalTreeClassifier.decision_path"]], "decision_path() (wildboar.tree._tree.intervaltreeregressor method)": [[59, "wildboar.tree._tree.IntervalTreeRegressor.decision_path"]], "decision_path() (wildboar.tree._tree.pivottreeclassifier method)": [[59, "wildboar.tree._tree.PivotTreeClassifier.decision_path"]], "decision_path() (wildboar.tree._tree.rockettreeclassifier method)": [[59, "wildboar.tree._tree.RocketTreeClassifier.decision_path"]], "decision_path() (wildboar.tree._tree.rockettreeregressor method)": [[59, "wildboar.tree._tree.RocketTreeRegressor.decision_path"]], "decision_path() (wildboar.tree._tree.shapelettreeclassifier method)": [[59, "wildboar.tree._tree.ShapeletTreeClassifier.decision_path"]], "decision_path() (wildboar.tree._tree.shapelettreeregressor method)": [[59, "wildboar.tree._tree.ShapeletTreeRegressor.decision_path"]], "fit() (wildboar.tree._tree.basefeaturetreeclassifier method)": [[59, "wildboar.tree._tree.BaseFeatureTreeClassifier.fit"]], "fit() (wildboar.tree._tree.basefeaturetreeregressor method)": [[59, "wildboar.tree._tree.BaseFeatureTreeRegressor.fit"]], "fit() (wildboar.tree._tree.dilatedshapelettreeclassifier method)": [[59, "wildboar.tree._tree.DilatedShapeletTreeClassifier.fit"]], "fit() (wildboar.tree._tree.extrashapelettreeclassifier method)": [[59, "wildboar.tree._tree.ExtraShapeletTreeClassifier.fit"]], "fit() (wildboar.tree._tree.extrashapelettreeregressor method)": [[59, "wildboar.tree._tree.ExtraShapeletTreeRegressor.fit"]], "fit() (wildboar.tree._tree.intervaltreeclassifier method)": [[59, "wildboar.tree._tree.IntervalTreeClassifier.fit"]], "fit() (wildboar.tree._tree.intervaltreeregressor method)": [[59, "wildboar.tree._tree.IntervalTreeRegressor.fit"]], "fit() (wildboar.tree._tree.pivottreeclassifier method)": [[59, "wildboar.tree._tree.PivotTreeClassifier.fit"]], "fit() (wildboar.tree._tree.rockettreeclassifier method)": [[59, "wildboar.tree._tree.RocketTreeClassifier.fit"]], "fit() (wildboar.tree._tree.rockettreeregressor method)": [[59, "wildboar.tree._tree.RocketTreeRegressor.fit"]], "fit() (wildboar.tree._tree.shapelettreeclassifier method)": [[59, "wildboar.tree._tree.ShapeletTreeClassifier.fit"]], "fit() (wildboar.tree._tree.shapelettreeregressor method)": [[59, "wildboar.tree._tree.ShapeletTreeRegressor.fit"]], "get_metadata_routing() (wildboar.tree._tree.basefeaturetreeclassifier method)": [[59, "wildboar.tree._tree.BaseFeatureTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._tree.basefeaturetreeregressor method)": [[59, "wildboar.tree._tree.BaseFeatureTreeRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._tree.dilatedshapelettreeclassifier method)": [[59, "wildboar.tree._tree.DilatedShapeletTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._tree.extrashapelettreeclassifier method)": [[59, "wildboar.tree._tree.ExtraShapeletTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._tree.extrashapelettreeregressor method)": [[59, "wildboar.tree._tree.ExtraShapeletTreeRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._tree.intervaltreeclassifier method)": [[59, "wildboar.tree._tree.IntervalTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._tree.intervaltreeregressor method)": [[59, "wildboar.tree._tree.IntervalTreeRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._tree.pivottreeclassifier method)": [[59, "wildboar.tree._tree.PivotTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._tree.rockettreeclassifier method)": [[59, "wildboar.tree._tree.RocketTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._tree.rockettreeregressor method)": [[59, "wildboar.tree._tree.RocketTreeRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._tree.shapelettreeclassifier method)": [[59, "wildboar.tree._tree.ShapeletTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._tree.shapelettreeregressor method)": [[59, "wildboar.tree._tree.ShapeletTreeRegressor.get_metadata_routing"]], "get_params() (wildboar.tree._tree.basefeaturetreeclassifier method)": [[59, "wildboar.tree._tree.BaseFeatureTreeClassifier.get_params"]], "get_params() (wildboar.tree._tree.basefeaturetreeregressor method)": [[59, "wildboar.tree._tree.BaseFeatureTreeRegressor.get_params"]], "get_params() (wildboar.tree._tree.dilatedshapelettreeclassifier method)": [[59, "wildboar.tree._tree.DilatedShapeletTreeClassifier.get_params"]], "get_params() (wildboar.tree._tree.extrashapelettreeclassifier method)": [[59, "wildboar.tree._tree.ExtraShapeletTreeClassifier.get_params"]], "get_params() (wildboar.tree._tree.extrashapelettreeregressor method)": [[59, "wildboar.tree._tree.ExtraShapeletTreeRegressor.get_params"]], "get_params() (wildboar.tree._tree.intervaltreeclassifier method)": [[59, "wildboar.tree._tree.IntervalTreeClassifier.get_params"]], "get_params() (wildboar.tree._tree.intervaltreeregressor method)": [[59, "wildboar.tree._tree.IntervalTreeRegressor.get_params"]], "get_params() (wildboar.tree._tree.pivottreeclassifier method)": [[59, "wildboar.tree._tree.PivotTreeClassifier.get_params"]], "get_params() (wildboar.tree._tree.rockettreeclassifier method)": [[59, "wildboar.tree._tree.RocketTreeClassifier.get_params"]], "get_params() (wildboar.tree._tree.rockettreeregressor method)": [[59, "wildboar.tree._tree.RocketTreeRegressor.get_params"]], "get_params() (wildboar.tree._tree.shapelettreeclassifier method)": [[59, "wildboar.tree._tree.ShapeletTreeClassifier.get_params"]], "get_params() (wildboar.tree._tree.shapelettreeregressor method)": [[59, "wildboar.tree._tree.ShapeletTreeRegressor.get_params"]], "predict() (wildboar.tree._tree.basefeaturetreeclassifier method)": [[59, "wildboar.tree._tree.BaseFeatureTreeClassifier.predict"]], "predict() (wildboar.tree._tree.basefeaturetreeregressor method)": [[59, "wildboar.tree._tree.BaseFeatureTreeRegressor.predict"]], "predict() (wildboar.tree._tree.dilatedshapelettreeclassifier method)": [[59, "wildboar.tree._tree.DilatedShapeletTreeClassifier.predict"]], "predict() (wildboar.tree._tree.extrashapelettreeclassifier method)": [[59, "wildboar.tree._tree.ExtraShapeletTreeClassifier.predict"]], "predict() (wildboar.tree._tree.extrashapelettreeregressor method)": [[59, "wildboar.tree._tree.ExtraShapeletTreeRegressor.predict"]], "predict() (wildboar.tree._tree.intervaltreeclassifier method)": [[59, "wildboar.tree._tree.IntervalTreeClassifier.predict"]], "predict() (wildboar.tree._tree.intervaltreeregressor method)": [[59, "wildboar.tree._tree.IntervalTreeRegressor.predict"]], "predict() (wildboar.tree._tree.pivottreeclassifier method)": [[59, "wildboar.tree._tree.PivotTreeClassifier.predict"]], "predict() (wildboar.tree._tree.rockettreeclassifier method)": [[59, "wildboar.tree._tree.RocketTreeClassifier.predict"]], "predict() (wildboar.tree._tree.rockettreeregressor method)": [[59, "wildboar.tree._tree.RocketTreeRegressor.predict"]], "predict() (wildboar.tree._tree.shapelettreeclassifier method)": [[59, "wildboar.tree._tree.ShapeletTreeClassifier.predict"]], "predict() (wildboar.tree._tree.shapelettreeregressor method)": [[59, "wildboar.tree._tree.ShapeletTreeRegressor.predict"]], "predict_proba() (wildboar.tree._tree.basefeaturetreeclassifier method)": [[59, "wildboar.tree._tree.BaseFeatureTreeClassifier.predict_proba"]], "predict_proba() (wildboar.tree._tree.dilatedshapelettreeclassifier method)": [[59, "wildboar.tree._tree.DilatedShapeletTreeClassifier.predict_proba"]], "predict_proba() (wildboar.tree._tree.extrashapelettreeclassifier method)": [[59, "wildboar.tree._tree.ExtraShapeletTreeClassifier.predict_proba"]], "predict_proba() (wildboar.tree._tree.intervaltreeclassifier method)": [[59, "wildboar.tree._tree.IntervalTreeClassifier.predict_proba"]], "predict_proba() (wildboar.tree._tree.pivottreeclassifier method)": [[59, "wildboar.tree._tree.PivotTreeClassifier.predict_proba"]], "predict_proba() (wildboar.tree._tree.rockettreeclassifier method)": [[59, "wildboar.tree._tree.RocketTreeClassifier.predict_proba"]], "predict_proba() (wildboar.tree._tree.shapelettreeclassifier method)": [[59, "wildboar.tree._tree.ShapeletTreeClassifier.predict_proba"]], "score() (wildboar.tree._tree.basefeaturetreeclassifier method)": [[59, "wildboar.tree._tree.BaseFeatureTreeClassifier.score"]], "score() (wildboar.tree._tree.basefeaturetreeregressor method)": [[59, "wildboar.tree._tree.BaseFeatureTreeRegressor.score"]], "score() (wildboar.tree._tree.dilatedshapelettreeclassifier method)": [[59, "wildboar.tree._tree.DilatedShapeletTreeClassifier.score"]], "score() (wildboar.tree._tree.extrashapelettreeclassifier method)": [[59, "wildboar.tree._tree.ExtraShapeletTreeClassifier.score"]], "score() (wildboar.tree._tree.extrashapelettreeregressor method)": [[59, "wildboar.tree._tree.ExtraShapeletTreeRegressor.score"]], "score() (wildboar.tree._tree.intervaltreeclassifier method)": [[59, "wildboar.tree._tree.IntervalTreeClassifier.score"]], "score() (wildboar.tree._tree.intervaltreeregressor method)": [[59, "wildboar.tree._tree.IntervalTreeRegressor.score"]], "score() (wildboar.tree._tree.pivottreeclassifier method)": [[59, "wildboar.tree._tree.PivotTreeClassifier.score"]], "score() (wildboar.tree._tree.rockettreeclassifier method)": [[59, "wildboar.tree._tree.RocketTreeClassifier.score"]], "score() (wildboar.tree._tree.rockettreeregressor method)": [[59, "wildboar.tree._tree.RocketTreeRegressor.score"]], "score() (wildboar.tree._tree.shapelettreeclassifier method)": [[59, "wildboar.tree._tree.ShapeletTreeClassifier.score"]], "score() (wildboar.tree._tree.shapelettreeregressor method)": [[59, "wildboar.tree._tree.ShapeletTreeRegressor.score"]], "set_params() (wildboar.tree._tree.basefeaturetreeclassifier method)": [[59, "wildboar.tree._tree.BaseFeatureTreeClassifier.set_params"]], "set_params() (wildboar.tree._tree.basefeaturetreeregressor method)": [[59, "wildboar.tree._tree.BaseFeatureTreeRegressor.set_params"]], "set_params() (wildboar.tree._tree.dilatedshapelettreeclassifier method)": [[59, "wildboar.tree._tree.DilatedShapeletTreeClassifier.set_params"]], "set_params() (wildboar.tree._tree.extrashapelettreeclassifier method)": [[59, "wildboar.tree._tree.ExtraShapeletTreeClassifier.set_params"]], "set_params() (wildboar.tree._tree.extrashapelettreeregressor method)": [[59, "wildboar.tree._tree.ExtraShapeletTreeRegressor.set_params"]], "set_params() (wildboar.tree._tree.intervaltreeclassifier method)": [[59, "wildboar.tree._tree.IntervalTreeClassifier.set_params"]], "set_params() (wildboar.tree._tree.intervaltreeregressor method)": [[59, "wildboar.tree._tree.IntervalTreeRegressor.set_params"]], "set_params() (wildboar.tree._tree.pivottreeclassifier method)": [[59, "wildboar.tree._tree.PivotTreeClassifier.set_params"]], "set_params() (wildboar.tree._tree.rockettreeclassifier method)": [[59, "wildboar.tree._tree.RocketTreeClassifier.set_params"]], "set_params() (wildboar.tree._tree.rockettreeregressor method)": [[59, "wildboar.tree._tree.RocketTreeRegressor.set_params"]], "set_params() (wildboar.tree._tree.shapelettreeclassifier method)": [[59, "wildboar.tree._tree.ShapeletTreeClassifier.set_params"]], "set_params() (wildboar.tree._tree.shapelettreeregressor method)": [[59, "wildboar.tree._tree.ShapeletTreeRegressor.set_params"]], "wildboar.tree._tree": [[59, "module-wildboar.tree._tree"]], "extrashapelettreeclassifier (class in wildboar.tree)": [[60, "wildboar.tree.ExtraShapeletTreeClassifier"]], "extrashapelettreeregressor (class in wildboar.tree)": [[60, "wildboar.tree.ExtraShapeletTreeRegressor"]], "intervaltreeclassifier (class in wildboar.tree)": [[60, "wildboar.tree.IntervalTreeClassifier"]], "intervaltreeregressor (class in wildboar.tree)": [[60, "wildboar.tree.IntervalTreeRegressor"]], "pivottreeclassifier (class in wildboar.tree)": [[60, "wildboar.tree.PivotTreeClassifier"]], "proximitytreeclassifier (class in wildboar.tree)": [[60, "wildboar.tree.ProximityTreeClassifier"]], "rockettreeclassifier (class in wildboar.tree)": [[60, "wildboar.tree.RocketTreeClassifier"]], "rockettreeregressor (class in wildboar.tree)": [[60, "wildboar.tree.RocketTreeRegressor"]], "shapelettreeclassifier (class in wildboar.tree)": [[60, "wildboar.tree.ShapeletTreeClassifier"]], "shapelettreeregressor (class in wildboar.tree)": [[60, "wildboar.tree.ShapeletTreeRegressor"]], "apply() (wildboar.tree.extrashapelettreeclassifier method)": [[60, "wildboar.tree.ExtraShapeletTreeClassifier.apply"]], "apply() (wildboar.tree.extrashapelettreeregressor method)": [[60, "wildboar.tree.ExtraShapeletTreeRegressor.apply"]], "apply() (wildboar.tree.intervaltreeclassifier method)": [[60, "wildboar.tree.IntervalTreeClassifier.apply"]], "apply() (wildboar.tree.intervaltreeregressor method)": [[60, "wildboar.tree.IntervalTreeRegressor.apply"]], "apply() (wildboar.tree.pivottreeclassifier method)": [[60, "wildboar.tree.PivotTreeClassifier.apply"]], "apply() (wildboar.tree.proximitytreeclassifier method)": [[60, "wildboar.tree.ProximityTreeClassifier.apply"]], "apply() (wildboar.tree.rockettreeclassifier method)": [[60, "wildboar.tree.RocketTreeClassifier.apply"]], "apply() (wildboar.tree.rockettreeregressor method)": [[60, "wildboar.tree.RocketTreeRegressor.apply"]], "apply() (wildboar.tree.shapelettreeclassifier method)": [[60, "wildboar.tree.ShapeletTreeClassifier.apply"]], "apply() (wildboar.tree.shapelettreeregressor method)": [[60, "wildboar.tree.ShapeletTreeRegressor.apply"]], "decision_path() (wildboar.tree.extrashapelettreeclassifier method)": [[60, "wildboar.tree.ExtraShapeletTreeClassifier.decision_path"]], "decision_path() (wildboar.tree.extrashapelettreeregressor method)": [[60, "wildboar.tree.ExtraShapeletTreeRegressor.decision_path"]], "decision_path() (wildboar.tree.intervaltreeclassifier method)": [[60, "wildboar.tree.IntervalTreeClassifier.decision_path"]], "decision_path() (wildboar.tree.intervaltreeregressor method)": [[60, "wildboar.tree.IntervalTreeRegressor.decision_path"]], "decision_path() (wildboar.tree.pivottreeclassifier method)": [[60, "wildboar.tree.PivotTreeClassifier.decision_path"]], "decision_path() (wildboar.tree.proximitytreeclassifier method)": [[60, "wildboar.tree.ProximityTreeClassifier.decision_path"]], "decision_path() (wildboar.tree.rockettreeclassifier method)": [[60, "wildboar.tree.RocketTreeClassifier.decision_path"]], "decision_path() (wildboar.tree.rockettreeregressor method)": [[60, "wildboar.tree.RocketTreeRegressor.decision_path"]], "decision_path() (wildboar.tree.shapelettreeclassifier method)": [[60, "wildboar.tree.ShapeletTreeClassifier.decision_path"]], "decision_path() (wildboar.tree.shapelettreeregressor method)": [[60, "wildboar.tree.ShapeletTreeRegressor.decision_path"]], "fit() (wildboar.tree.extrashapelettreeclassifier method)": [[60, "wildboar.tree.ExtraShapeletTreeClassifier.fit"]], "fit() (wildboar.tree.extrashapelettreeregressor method)": [[60, "wildboar.tree.ExtraShapeletTreeRegressor.fit"]], "fit() (wildboar.tree.intervaltreeclassifier method)": [[60, "wildboar.tree.IntervalTreeClassifier.fit"]], "fit() (wildboar.tree.intervaltreeregressor method)": [[60, "wildboar.tree.IntervalTreeRegressor.fit"]], "fit() (wildboar.tree.pivottreeclassifier method)": [[60, "wildboar.tree.PivotTreeClassifier.fit"]], "fit() (wildboar.tree.proximitytreeclassifier method)": [[60, "wildboar.tree.ProximityTreeClassifier.fit"]], "fit() (wildboar.tree.rockettreeclassifier method)": [[60, "wildboar.tree.RocketTreeClassifier.fit"]], "fit() (wildboar.tree.rockettreeregressor method)": [[60, "wildboar.tree.RocketTreeRegressor.fit"]], "fit() (wildboar.tree.shapelettreeclassifier method)": [[60, "wildboar.tree.ShapeletTreeClassifier.fit"]], "fit() (wildboar.tree.shapelettreeregressor method)": [[60, "wildboar.tree.ShapeletTreeRegressor.fit"]], "get_metadata_routing() (wildboar.tree.extrashapelettreeclassifier method)": [[60, "wildboar.tree.ExtraShapeletTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree.extrashapelettreeregressor method)": [[60, "wildboar.tree.ExtraShapeletTreeRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree.intervaltreeclassifier method)": [[60, "wildboar.tree.IntervalTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree.intervaltreeregressor method)": [[60, "wildboar.tree.IntervalTreeRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree.pivottreeclassifier method)": [[60, "wildboar.tree.PivotTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree.proximitytreeclassifier method)": [[60, "wildboar.tree.ProximityTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree.rockettreeclassifier method)": [[60, "wildboar.tree.RocketTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree.rockettreeregressor method)": [[60, "wildboar.tree.RocketTreeRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree.shapelettreeclassifier method)": [[60, "wildboar.tree.ShapeletTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree.shapelettreeregressor method)": [[60, "wildboar.tree.ShapeletTreeRegressor.get_metadata_routing"]], "get_params() (wildboar.tree.extrashapelettreeclassifier method)": [[60, "wildboar.tree.ExtraShapeletTreeClassifier.get_params"]], "get_params() (wildboar.tree.extrashapelettreeregressor method)": [[60, "wildboar.tree.ExtraShapeletTreeRegressor.get_params"]], "get_params() (wildboar.tree.intervaltreeclassifier method)": [[60, "wildboar.tree.IntervalTreeClassifier.get_params"]], "get_params() (wildboar.tree.intervaltreeregressor method)": [[60, "wildboar.tree.IntervalTreeRegressor.get_params"]], "get_params() (wildboar.tree.pivottreeclassifier method)": [[60, "wildboar.tree.PivotTreeClassifier.get_params"]], "get_params() (wildboar.tree.proximitytreeclassifier method)": [[60, "wildboar.tree.ProximityTreeClassifier.get_params"]], "get_params() (wildboar.tree.rockettreeclassifier method)": [[60, "wildboar.tree.RocketTreeClassifier.get_params"]], "get_params() (wildboar.tree.rockettreeregressor method)": [[60, "wildboar.tree.RocketTreeRegressor.get_params"]], "get_params() (wildboar.tree.shapelettreeclassifier method)": [[60, "wildboar.tree.ShapeletTreeClassifier.get_params"]], "get_params() (wildboar.tree.shapelettreeregressor method)": [[60, "wildboar.tree.ShapeletTreeRegressor.get_params"]], "plot_tree() (in module wildboar.tree)": [[60, "wildboar.tree.plot_tree"]], "predict() (wildboar.tree.extrashapelettreeclassifier method)": [[60, "wildboar.tree.ExtraShapeletTreeClassifier.predict"]], "predict() (wildboar.tree.extrashapelettreeregressor method)": [[60, "wildboar.tree.ExtraShapeletTreeRegressor.predict"]], "predict() (wildboar.tree.intervaltreeclassifier method)": [[60, "wildboar.tree.IntervalTreeClassifier.predict"]], "predict() (wildboar.tree.intervaltreeregressor method)": [[60, "wildboar.tree.IntervalTreeRegressor.predict"]], "predict() (wildboar.tree.pivottreeclassifier method)": [[60, "wildboar.tree.PivotTreeClassifier.predict"]], "predict() (wildboar.tree.proximitytreeclassifier method)": [[60, "wildboar.tree.ProximityTreeClassifier.predict"]], "predict() (wildboar.tree.rockettreeclassifier method)": [[60, "wildboar.tree.RocketTreeClassifier.predict"]], "predict() (wildboar.tree.rockettreeregressor method)": [[60, "wildboar.tree.RocketTreeRegressor.predict"]], "predict() (wildboar.tree.shapelettreeclassifier method)": [[60, "wildboar.tree.ShapeletTreeClassifier.predict"]], "predict() (wildboar.tree.shapelettreeregressor method)": [[60, "wildboar.tree.ShapeletTreeRegressor.predict"]], "predict_proba() (wildboar.tree.extrashapelettreeclassifier method)": [[60, "wildboar.tree.ExtraShapeletTreeClassifier.predict_proba"]], "predict_proba() (wildboar.tree.intervaltreeclassifier method)": [[60, "wildboar.tree.IntervalTreeClassifier.predict_proba"]], "predict_proba() (wildboar.tree.pivottreeclassifier method)": [[60, "wildboar.tree.PivotTreeClassifier.predict_proba"]], "predict_proba() (wildboar.tree.proximitytreeclassifier method)": [[60, "wildboar.tree.ProximityTreeClassifier.predict_proba"]], "predict_proba() (wildboar.tree.rockettreeclassifier method)": [[60, "wildboar.tree.RocketTreeClassifier.predict_proba"]], "predict_proba() (wildboar.tree.shapelettreeclassifier method)": [[60, "wildboar.tree.ShapeletTreeClassifier.predict_proba"]], "score() (wildboar.tree.extrashapelettreeclassifier method)": [[60, "wildboar.tree.ExtraShapeletTreeClassifier.score"]], "score() (wildboar.tree.extrashapelettreeregressor method)": [[60, "wildboar.tree.ExtraShapeletTreeRegressor.score"]], "score() (wildboar.tree.intervaltreeclassifier method)": [[60, "wildboar.tree.IntervalTreeClassifier.score"]], "score() (wildboar.tree.intervaltreeregressor method)": [[60, "wildboar.tree.IntervalTreeRegressor.score"]], "score() (wildboar.tree.pivottreeclassifier method)": [[60, "wildboar.tree.PivotTreeClassifier.score"]], "score() (wildboar.tree.proximitytreeclassifier method)": [[60, "wildboar.tree.ProximityTreeClassifier.score"]], "score() (wildboar.tree.rockettreeclassifier method)": [[60, "wildboar.tree.RocketTreeClassifier.score"]], "score() (wildboar.tree.rockettreeregressor method)": [[60, "wildboar.tree.RocketTreeRegressor.score"]], "score() (wildboar.tree.shapelettreeclassifier method)": [[60, "wildboar.tree.ShapeletTreeClassifier.score"]], "score() (wildboar.tree.shapelettreeregressor method)": [[60, "wildboar.tree.ShapeletTreeRegressor.score"]], "set_params() (wildboar.tree.extrashapelettreeclassifier method)": [[60, "wildboar.tree.ExtraShapeletTreeClassifier.set_params"]], "set_params() (wildboar.tree.extrashapelettreeregressor method)": [[60, "wildboar.tree.ExtraShapeletTreeRegressor.set_params"]], "set_params() (wildboar.tree.intervaltreeclassifier method)": [[60, "wildboar.tree.IntervalTreeClassifier.set_params"]], "set_params() (wildboar.tree.intervaltreeregressor method)": [[60, "wildboar.tree.IntervalTreeRegressor.set_params"]], "set_params() (wildboar.tree.pivottreeclassifier method)": [[60, "wildboar.tree.PivotTreeClassifier.set_params"]], "set_params() (wildboar.tree.proximitytreeclassifier method)": [[60, "wildboar.tree.ProximityTreeClassifier.set_params"]], "set_params() (wildboar.tree.rockettreeclassifier method)": [[60, "wildboar.tree.RocketTreeClassifier.set_params"]], "set_params() (wildboar.tree.rockettreeregressor method)": [[60, "wildboar.tree.RocketTreeRegressor.set_params"]], "set_params() (wildboar.tree.shapelettreeclassifier method)": [[60, "wildboar.tree.ShapeletTreeClassifier.set_params"]], "set_params() (wildboar.tree.shapelettreeregressor method)": [[60, "wildboar.tree.ShapeletTreeRegressor.set_params"]], "wildboar.tree": [[60, "module-wildboar.tree"]], "run_in_parallel() (in module wildboar.utils._parallel)": [[61, "wildboar.utils._parallel.run_in_parallel"]], "wildboar.utils._parallel": [[61, "module-wildboar.utils._parallel"]], "assert_exhaustive_parameter_checks() (in module wildboar.utils._testing)": [[62, "wildboar.utils._testing.assert_exhaustive_parameter_checks"]], "assert_parameter_checks() (in module wildboar.utils._testing)": [[62, "wildboar.utils._testing.assert_parameter_checks"]], "wildboar.utils._testing": [[62, "module-wildboar.utils._testing"]], "array_or_scalar() (in module wildboar.utils.decorators)": [[63, "wildboar.utils.decorators.array_or_scalar"]], "singleton() (in module wildboar.utils.decorators)": [[63, "wildboar.utils.decorators.singleton"]], "unstable() (in module wildboar.utils.decorators)": [[63, "wildboar.utils.decorators.unstable"]], "wildboar.utils.decorators": [[63, "module-wildboar.utils.decorators"]], "check_estimator() (in module wildboar.utils.estimator_checks)": [[64, "wildboar.utils.estimator_checks.check_estimator"]], "wildboar.utils.estimator_checks": [[64, "module-wildboar.utils.estimator_checks"]], "check_x_y() (in module wildboar.utils)": [[65, "wildboar.utils.check_X_y"]], "check_array() (in module wildboar.utils)": [[65, "wildboar.utils.check_array"]], "wildboar.utils": [[65, "module-wildboar.utils"]], "plot_frequency_domain() (in module wildboar.utils.plot)": [[66, "wildboar.utils.plot.plot_frequency_domain"]], "plot_time_domain() (in module wildboar.utils.plot)": [[66, "wildboar.utils.plot.plot_time_domain"]], "wildboar.utils.plot": [[66, "module-wildboar.utils.plot"]], "metricoptions (class in wildboar.utils.validation)": [[67, "wildboar.utils.validation.MetricOptions"]], "subsequencemetricoptions (class in wildboar.utils.validation)": [[67, "wildboar.utils.validation.SubsequenceMetricOptions"]], "check_x_y() (in module wildboar.utils.validation)": [[67, "wildboar.utils.validation.check_X_y"]], "check_array() (in module wildboar.utils.validation)": [[67, "wildboar.utils.validation.check_array"]], "check_classification_targets() (in module wildboar.utils.validation)": [[67, "wildboar.utils.validation.check_classification_targets"]], "check_option() (in module wildboar.utils.validation)": [[67, "wildboar.utils.validation.check_option"]], "check_type() (in module wildboar.utils.validation)": [[67, "wildboar.utils.validation.check_type"]], "is_satisfied_by() (wildboar.utils.validation.metricoptions method)": [[67, "wildboar.utils.validation.MetricOptions.is_satisfied_by"]], "is_satisfied_by() (wildboar.utils.validation.subsequencemetricoptions method)": [[67, "wildboar.utils.validation.SubsequenceMetricOptions.is_satisfied_by"]], "wildboar.utils.validation": [[67, "module-wildboar.utils.validation"]], "get_variable_length() (in module wildboar.utils.variable_len)": [[68, "wildboar.utils.variable_len.get_variable_length"]], "is_end_of_series() (in module wildboar.utils.variable_len)": [[68, "wildboar.utils.variable_len.is_end_of_series"]], "is_variable_length() (in module wildboar.utils.variable_len)": [[68, "wildboar.utils.variable_len.is_variable_length"]], "wildboar.utils.variable_len": [[68, "module-wildboar.utils.variable_len"]], "wildboar.version": [[69, "module-wildboar.version"]]}})