Search.setIndex({"docnames": ["api/index", "api/wildboar/annotate/_motifs/index", "api/wildboar/annotate/_segment/index", "api/wildboar/annotate/index", "api/wildboar/base/index", "api/wildboar/datasets/_filter/index", "api/wildboar/datasets/_repository/index", "api/wildboar/datasets/index", "api/wildboar/datasets/outlier/index", "api/wildboar/datasets/preprocess/index", "api/wildboar/distance/_distance/index", "api/wildboar/distance/_matrix_profile/index", "api/wildboar/distance/_multi_metric/index", "api/wildboar/distance/_neighbors/index", "api/wildboar/distance/dtw/index", "api/wildboar/distance/index", "api/wildboar/ensemble/_elastic/index", "api/wildboar/ensemble/_ensemble/index", "api/wildboar/ensemble/index", "api/wildboar/explain/_importance/index", "api/wildboar/explain/counterfactual/_helper/index", "api/wildboar/explain/counterfactual/_nn/index", "api/wildboar/explain/counterfactual/_proto/index", "api/wildboar/explain/counterfactual/_sf/index", "api/wildboar/explain/counterfactual/index", "api/wildboar/explain/index", "api/wildboar/index", "api/wildboar/linear_model/_hydra/index", "api/wildboar/linear_model/_rocket/index", "api/wildboar/linear_model/_shapelet/index", "api/wildboar/linear_model/_transform/index", "api/wildboar/linear_model/index", "api/wildboar/metrics/_cluster/index", "api/wildboar/metrics/_counterfactual/index", "api/wildboar/metrics/index", "api/wildboar/model_selection/_cv/index", "api/wildboar/model_selection/_outlier/index", "api/wildboar/model_selection/index", "api/wildboar/transform/_base/index", "api/wildboar/transform/_conv/index", "api/wildboar/transform/_diff/index", "api/wildboar/transform/_hydra/index", "api/wildboar/transform/_interval/index", "api/wildboar/transform/_matrix_profile/index", "api/wildboar/transform/_pivot/index", "api/wildboar/transform/_rocket/index", "api/wildboar/transform/_sax/index", "api/wildboar/transform/_shapelet/index", "api/wildboar/transform/index", "api/wildboar/tree/_base/index", "api/wildboar/tree/_ptree/index", "api/wildboar/tree/_tree/index", "api/wildboar/tree/index", "api/wildboar/utils/_parallel/index", "api/wildboar/utils/_testing/index", "api/wildboar/utils/decorators/index", "api/wildboar/utils/estimator_checks/index", "api/wildboar/utils/index", "api/wildboar/utils/plot/index", "api/wildboar/utils/validation/index", "api/wildboar/utils/variable_len/index", "api/wildboar/version/index", "examples", "examples/hydra", "guide", "guide/annotate", "guide/basics", "guide/datasets", "guide/datasets/preprocess", "guide/datasets/repositories", "guide/glossary", "guide/metrics", "guide/metrics/distance", "guide/metrics/elastic", "guide/supervised", "guide/supervised/ensemble", "guide/supervised/transform", "guide/supervised/trees", "guide/unsupervised", "guide/unsupervised/outlier", "guide/unsupervised/outlier/generation", "index", "more/whatsnew", "quickstart", "quickstart/getting-started", "quickstart/install"], "filenames": ["api/index.rst", "api/wildboar/annotate/_motifs/index.rst", "api/wildboar/annotate/_segment/index.rst", "api/wildboar/annotate/index.rst", "api/wildboar/base/index.rst", "api/wildboar/datasets/_filter/index.rst", "api/wildboar/datasets/_repository/index.rst", "api/wildboar/datasets/index.rst", "api/wildboar/datasets/outlier/index.rst", "api/wildboar/datasets/preprocess/index.rst", "api/wildboar/distance/_distance/index.rst", "api/wildboar/distance/_matrix_profile/index.rst", "api/wildboar/distance/_multi_metric/index.rst", "api/wildboar/distance/_neighbors/index.rst", "api/wildboar/distance/dtw/index.rst", "api/wildboar/distance/index.rst", "api/wildboar/ensemble/_elastic/index.rst", "api/wildboar/ensemble/_ensemble/index.rst", "api/wildboar/ensemble/index.rst", "api/wildboar/explain/_importance/index.rst", "api/wildboar/explain/counterfactual/_helper/index.rst", "api/wildboar/explain/counterfactual/_nn/index.rst", "api/wildboar/explain/counterfactual/_proto/index.rst", "api/wildboar/explain/counterfactual/_sf/index.rst", "api/wildboar/explain/counterfactual/index.rst", "api/wildboar/explain/index.rst", "api/wildboar/index.rst", "api/wildboar/linear_model/_hydra/index.rst", "api/wildboar/linear_model/_rocket/index.rst", "api/wildboar/linear_model/_shapelet/index.rst", "api/wildboar/linear_model/_transform/index.rst", "api/wildboar/linear_model/index.rst", "api/wildboar/metrics/_cluster/index.rst", "api/wildboar/metrics/_counterfactual/index.rst", "api/wildboar/metrics/index.rst", "api/wildboar/model_selection/_cv/index.rst", "api/wildboar/model_selection/_outlier/index.rst", "api/wildboar/model_selection/index.rst", "api/wildboar/transform/_base/index.rst", "api/wildboar/transform/_conv/index.rst", "api/wildboar/transform/_diff/index.rst", "api/wildboar/transform/_hydra/index.rst", "api/wildboar/transform/_interval/index.rst", "api/wildboar/transform/_matrix_profile/index.rst", "api/wildboar/transform/_pivot/index.rst", "api/wildboar/transform/_rocket/index.rst", "api/wildboar/transform/_sax/index.rst", "api/wildboar/transform/_shapelet/index.rst", "api/wildboar/transform/index.rst", "api/wildboar/tree/_base/index.rst", "api/wildboar/tree/_ptree/index.rst", "api/wildboar/tree/_tree/index.rst", "api/wildboar/tree/index.rst", "api/wildboar/utils/_parallel/index.rst", "api/wildboar/utils/_testing/index.rst", "api/wildboar/utils/decorators/index.rst", "api/wildboar/utils/estimator_checks/index.rst", "api/wildboar/utils/index.rst", "api/wildboar/utils/plot/index.rst", "api/wildboar/utils/validation/index.rst", "api/wildboar/utils/variable_len/index.rst", "api/wildboar/version/index.rst", "examples.rst", "examples/hydra.ipynb", "guide.rst", "guide/annotate.rst", "guide/basics.rst", "guide/datasets.rst", "guide/datasets/preprocess.rst", "guide/datasets/repositories.rst", "guide/glossary.rst", "guide/metrics.rst", "guide/metrics/distance.rst", "guide/metrics/elastic.rst", "guide/supervised.rst", "guide/supervised/ensemble.rst", "guide/supervised/transform.rst", "guide/supervised/trees.rst", "guide/unsupervised.rst", "guide/unsupervised/outlier.rst", "guide/unsupervised/outlier/generation.rst", "index.rst", "more/whatsnew.rst", "quickstart.rst", "quickstart/getting-started.rst", "quickstart/install.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.annotate._motifs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.annotate._segment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.annotate</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.datasets._filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.datasets._repository</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.datasets.outlier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.datasets.preprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.distance._distance</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.distance._matrix_profile</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.distance._multi_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.distance._neighbors</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.distance.dtw</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.distance</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.ensemble._elastic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.ensemble._ensemble</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.ensemble</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.explain._importance</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.explain.counterfactual._helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.explain.counterfactual._nn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.explain.counterfactual._proto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.explain.counterfactual._sf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.explain.counterfactual</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.explain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.linear_model._hydra</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.linear_model._rocket</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.linear_model._shapelet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.linear_model._transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.linear_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.metrics._cluster</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.metrics._counterfactual</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.metrics</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.model_selection._cv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.model_selection._outlier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.model_selection</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.transform._base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.transform._conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.transform._diff</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.transform._hydra</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.transform._interval</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.transform._matrix_profile</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.transform._pivot</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.transform._rocket</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.transform._sax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.transform._shapelet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.tree._base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.tree._ptree</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.tree._tree</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.tree</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.utils._parallel</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.utils._testing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.utils.decorators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.utils.estimator_checks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.utils.plot</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.utils.validation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.utils.variable_len</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wildboar.version</span></code>", "Examples", "Convolution transforms", "User guide", "Annotate", "Time series", "Datasets", "Pre-processing", "Repositories", "Glossary", "Metrics", "Distance", "Elastic metrics", "Supervised learning", "Ensemble estimators", "Transform-based estimators", "Tree-based estimators", "Unsupervised learning", "Outlier detection", "Outlier detection benchmarks", "Wildboar", "What\u2019s new", "Quickstart", "Getting started", "Install wildboar"], "terms": {"librari": [0, 26, 81], "tempor": [0, 23, 24, 26, 66, 81, 84], "machin": [0, 26, 71, 81], "learn": [0, 14, 26, 30, 40, 41, 48, 49, 51, 56, 57, 59, 63, 70, 81, 82], "includ": [0, 1, 3, 8, 11, 15, 24, 26, 57, 59, 72, 77, 81, 82, 84], "numer": [0, 24, 26, 57, 59, 81, 84], "algorithm": [0, 8, 13, 14, 15, 23, 24, 26, 63, 66, 68, 71, 81, 82], "seamlessli": [0, 26, 81, 84], "integr": [0, 26, 69, 72, 81], "them": [0, 8, 26, 58, 66, 68, 69, 81], "scikit": [0, 26, 30, 40, 41, 48, 49, 51, 56, 57, 59, 63, 70, 81, 82, 84], "iseo": [0, 26, 66, 68, 81], "boolean": [0, 14, 26, 60, 81], "indic": [0, 7, 10, 14, 15, 17, 18, 20, 24, 26, 33, 34, 49, 50, 51, 52, 60, 70, 81, 82], "valu": [0, 4, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 63, 66, 67, 68, 69, 70, 72, 75, 81, 82, 84], "i": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 71, 72, 74, 75, 80, 81, 82, 84, 85], "end": [0, 19, 25, 26, 49, 50, 51, 52, 57, 59, 66, 68, 70, 81], "sequenc": [0, 9, 26, 57, 58, 59, 66, 68, 71, 81], "time": [0, 1, 2, 3, 4, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 29, 31, 32, 33, 34, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 63, 67, 68, 69, 70, 71, 72, 74, 75, 76, 80, 81, 82], "seri": [0, 1, 2, 3, 4, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 29, 31, 32, 33, 34, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 59, 60, 63, 67, 68, 69, 70, 71, 72, 74, 75, 76, 80, 81, 82], "see": [0, 3, 7, 8, 10, 13, 15, 20, 24, 29, 31, 33, 34, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 63, 72, 81, 82], "section": [0, 3, 7, 19, 25, 81], "user": [0, 3, 4, 7, 8, 10, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 69, 72, 80, 81, 84, 85], "guid": [0, 3, 4, 7, 8, 10, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 81], "more": [0, 3, 7, 8, 10, 13, 15, 17, 18, 19, 24, 25, 29, 31, 32, 33, 34, 44, 47, 48, 50, 51, 52, 57, 59, 63, 69, 71, 72, 80, 81, 82, 84], "detail": [0, 3, 7, 8, 15, 40, 48, 72, 81, 82], "exampl": [0, 3, 7, 8, 10, 13, 14, 15, 16, 17, 18, 20, 22, 24, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 58, 60, 63, 66, 67, 68, 69, 72, 81], "motif": [0, 1, 3, 11, 15, 81], "find": [0, 1, 2, 3, 10, 15, 67, 81, 82, 85], "segment": [0, 2, 3, 81], "chang": [0, 2, 3, 7, 14, 17, 18, 20, 23, 24, 33, 34, 51, 52, 66, 67, 69, 72, 81], "regim": [0, 2, 3, 81], "all": [0, 1, 3, 4, 6, 7, 8, 10, 11, 13, 15, 16, 17, 18, 19, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 40, 41, 45, 47, 48, 49, 51, 52, 54, 56, 57, 58, 59, 67, 68, 69, 71, 72, 81, 82, 84, 85], "estim": [0, 4, 8, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 59, 64, 67, 70, 72, 74, 80, 81, 82, 84], "baseestim": [0, 4, 40, 48, 54, 81], "counterfactualmixin": [0, 4, 81], "mixin": [0, 4, 17, 30, 40, 42, 44, 45, 47, 48, 49, 51, 81], "explainermixin": [0, 4, 81], "is_counterfactu": [0, 4, 22, 81], "check": [0, 4, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 59, 68, 70, 81], "is_explain": [0, 4, 81], "an": [0, 4, 8, 10, 13, 15, 16, 17, 18, 22, 27, 29, 31, 33, 34, 35, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 57, 59, 66, 67, 69, 70, 71, 72, 74, 75, 80, 81, 82, 85], "load": [0, 6, 7, 63, 69, 81], "from": [0, 1, 3, 6, 7, 8, 10, 14, 15, 16, 17, 18, 20, 22, 23, 24, 27, 28, 29, 30, 31, 33, 34, 36, 37, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 55, 58, 60, 63, 67, 68, 69, 71, 72, 80, 81, 82, 84], "import": [0, 7, 10, 14, 15, 16, 17, 18, 19, 25, 36, 37, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 58, 60, 63, 66, 67, 68, 69, 72, 80, 81, 84], "load_dataset": [0, 7, 10, 15, 42, 48, 50, 52, 63, 67, 68, 69, 72, 81, 84], "x": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 63, 66, 67, 68, 69, 71, 72, 80, 81, 82, 84], "y": [0, 4, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 63, 67, 68, 69, 71, 72, 80, 81, 82, 84], "gunpoint": [0, 7, 42, 48, 50, 52, 67, 68, 69, 81], "shape": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 58, 66, 67, 68, 70, 71, 72, 81, 84], "200": [0, 7, 67, 81], "60": [0, 7, 67, 72, 81], "bundl": [0, 6, 7, 67, 69, 80, 81], "handl": [0, 6, 7, 67, 81], "jsonrepositori": [0, 6, 7, 69, 81], "A": [0, 4, 5, 6, 7, 8, 10, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 58, 66, 67, 68, 69, 70, 71, 72, 80, 81, 82, 84], "repositori": [0, 6, 7, 67, 81, 84], "collect": [0, 6, 7, 20, 24, 42, 48, 69, 74, 80, 81, 82, 84, 85], "npbundl": [0, 6, 7, 81], "numpi": [0, 6, 7, 17, 18, 19, 25, 27, 29, 31, 38, 41, 42, 45, 47, 48, 51, 52, 66, 68, 69, 70, 72, 81, 82, 84, 85], "binari": [0, 6, 7, 8, 17, 18, 59, 80, 81, 85], "file": [0, 6, 7, 69, 81, 85], "clear_cach": [0, 7, 81], "clear": [0, 7, 81], "cach": [0, 6, 7, 67, 81], "delet": [0, 7, 81], "get_bundl": [0, 6, 7, 81], "get": [0, 4, 6, 7, 9, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 68, 81], "get_repositori": [0, 7, 81], "name": [0, 4, 6, 7, 9, 10, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 59, 67, 68, 69, 71, 72, 81, 84], "install_repositori": [0, 7, 69, 81], "instal": [0, 7, 67, 80, 81], "list_bundl": [0, 7, 69, 81], "list": [0, 1, 3, 5, 6, 7, 10, 15, 17, 18, 19, 20, 24, 25, 28, 29, 30, 31, 33, 34, 42, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 59, 67, 69, 72, 80, 81, 82], "specifi": [0, 6, 7, 17, 18, 19, 25, 33, 34, 44, 47, 48, 51, 52, 58, 67, 68, 69, 71, 72, 80, 81, 84, 85], "list_collect": [0, 7, 81], "list_dataset": [0, 7, 69, 81], "list_repositori": [0, 7, 69, 81], "kei": [0, 6, 7, 10, 15, 17, 18, 20, 24, 29, 31, 33, 34, 42, 44, 47, 48, 50, 51, 52, 59, 69, 81], "gener": [0, 7, 8, 13, 14, 15, 17, 18, 19, 20, 21, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 41, 42, 45, 47, 48, 49, 50, 51, 52, 56, 67, 80, 81, 84], "load_gun_point": [0, 7, 16, 18, 41, 42, 45, 48, 49, 50, 51, 52, 58, 67, 81], "load_synthetic_control": [0, 7, 17, 18, 81, 84], "synthetic_control": [0, 7, 81, 84], "load_two_lead_ecg": [0, 7, 14, 17, 18, 36, 37, 43, 48, 72, 81, 84], "twoleadecg": [0, 7, 67, 69, 72, 81, 84], "refresh_repositori": [0, 7, 69, 81], "refresh": [0, 6, 7, 69, 81], "set_cache_dir": [0, 7, 69, 81], "global": [0, 7, 21, 23, 24, 33, 34, 42, 48, 69, 81], "directori": [0, 7, 69, 81, 85], "synthet": [0, 8, 80, 81], "us": [0, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 57, 58, 59, 63, 67, 68, 69, 70, 71, 72, 76, 80, 81, 82, 84, 85], "density_outli": [0, 8, 81], "densitii": [0, 8, 81], "emmott_outli": [0, 8, 80, 81], "difficulti": [0, 8, 80, 81], "kmeans_outli": [0, 8, 81], "k": [0, 8, 10, 13, 15, 17, 18, 19, 21, 24, 25, 50, 52, 75, 80, 81, 82], "mean": [0, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 21, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 38, 41, 42, 45, 47, 48, 49, 50, 51, 52, 68, 71, 72, 81, 82, 84], "majority_outli": [0, 8, 81], "label": [0, 4, 6, 7, 8, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 43, 48, 49, 50, 51, 52, 57, 58, 59, 67, 69, 74, 79, 81, 84], "major": [0, 8, 14, 69, 79, 81], "inlier": [0, 8, 17, 18, 35, 37, 80, 81], "minority_outli": [0, 8, 80, 81], "fraction": [0, 1, 2, 3, 8, 11, 14, 15, 17, 18, 19, 23, 24, 25, 33, 34, 35, 37, 43, 48, 49, 50, 51, 52, 80, 81], "minor": [0, 8, 69, 79, 81, 82], "maxabs_scal": [0, 9, 68, 81], "scale": [0, 8, 9, 17, 18, 27, 31, 41, 45, 46, 48, 58, 63, 68, 71, 80, 81], "each": [0, 2, 3, 4, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 60, 63, 66, 68, 69, 70, 71, 72, 81, 82, 84], "its": [0, 9, 11, 15, 42, 43, 48, 57, 58, 59, 67, 81, 85], "maximum": [0, 1, 3, 9, 13, 14, 15, 17, 18, 19, 22, 25, 29, 31, 35, 37, 42, 45, 47, 48, 50, 51, 52, 58, 63, 68, 70, 72, 81], "absolut": [0, 9, 33, 34, 68, 81], "minmax_scal": [0, 9, 46, 48, 67, 68, 81], "along": [0, 9, 19, 25, 27, 31, 68, 81], "dimens": [0, 9, 10, 14, 15, 27, 31, 33, 34, 43, 48, 57, 59, 66, 67, 68, 70, 72, 81, 82, 84], "named_preprocess": [0, 9, 81], "preprocessor": [0, 9, 68, 81], "standard": [0, 9, 17, 18, 27, 29, 31, 41, 42, 47, 48, 63, 68, 81, 84], "truncat": [0, 9, 68, 81], "shortest": [0, 9, 68, 81], "fast": [0, 13, 15, 27, 31, 41, 45, 47, 48, 71, 81], "comput": [0, 1, 2, 3, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 32, 33, 34, 43, 44, 48, 49, 50, 51, 52, 63, 71, 72, 76, 81, 82], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 63, 64, 66, 67, 68, 69, 70, 71, 72, 80, 81, 82, 84, 85], "modul": [0, 15, 24, 67, 68, 80, 81, 82, 84], "pair": [0, 1, 3, 7, 11, 15, 17, 18, 33, 34, 44, 47, 48, 50, 51, 52, 59, 81], "pairwis": [0, 15, 81], "between": [0, 1, 3, 9, 10, 13, 14, 15, 20, 23, 24, 32, 33, 34, 39, 47, 48, 68, 71, 72, 80, 81, 84], "subsequ": [0, 1, 3, 10, 11, 15, 17, 18, 43, 45, 47, 48, 63, 81, 82], "kmean": [0, 13, 15, 81, 82], "cluster": [0, 8, 13, 15, 80, 81, 82], "support": [0, 8, 10, 13, 15, 17, 18, 23, 24, 29, 31, 33, 34, 42, 45, 47, 48, 51, 52, 66, 67, 68, 69, 71, 80, 81, 82, 84], "weight": [0, 13, 14, 15, 16, 17, 18, 27, 28, 29, 30, 31, 33, 34, 41, 44, 48, 49, 50, 51, 52, 71, 81], "kmedoid": [0, 13, 15, 81, 82], "kneighborsclassifi": [0, 13, 15, 16, 18, 81, 82], "classifi": [0, 8, 13, 15, 16, 17, 18, 21, 23, 24, 25, 28, 29, 30, 31, 41, 48, 50, 51, 52, 56, 63, 75, 81, 82, 84], "implement": [0, 13, 14, 15, 17, 18, 19, 23, 24, 25, 28, 31, 33, 34, 41, 42, 45, 48, 63, 68, 69, 71, 72, 75, 80, 81, 82, 84], "nearest": [0, 11, 13, 15, 21, 22, 24, 81], "neighbor": [0, 11, 13, 15, 16, 18, 21, 22, 24, 81, 82], "argmin_dist": [0, 10, 15, 81, 82], "indici": [0, 1, 3, 10, 15, 35, 37, 81], "sampl": [0, 4, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 66, 67, 68, 69, 70, 72, 77, 80, 81, 82, 84], "lowest": [0, 10, 14, 15, 63, 81], "distance_profil": [0, 10, 15, 81, 82], "profil": [0, 1, 2, 3, 10, 11, 15, 43, 48, 81], "matrix_profil": [0, 1, 2, 3, 11, 15, 81], "matrix": [0, 1, 2, 3, 11, 14, 15, 17, 18, 20, 22, 24, 28, 29, 30, 31, 43, 48, 49, 50, 51, 52, 72, 81, 84], "paired_dist": [0, 10, 15, 72, 81, 82], "th": [0, 10, 15, 17, 18, 33, 34, 81, 82], "paired_subsequence_dist": [0, 10, 15, 72, 81], "minimum": [0, 1, 3, 6, 7, 9, 10, 14, 15, 17, 18, 19, 22, 25, 29, 31, 42, 45, 47, 48, 50, 51, 52, 57, 59, 69, 71, 72, 81], "paired_subsequence_match": [0, 10, 15, 81], "match": [0, 1, 3, 10, 11, 15, 22, 69, 71, 72, 81, 82], "subsequnc": [0, 10, 15, 81], "pairwise_dist": [0, 10, 15, 71, 72, 81, 82], "pairwise_subsequence_dist": [0, 10, 15, 71, 72, 81], "subsequence_match": [0, 1, 3, 10, 15, 72, 81, 82], "align": [0, 14, 19, 22, 25, 33, 34, 81], "sever": [0, 14, 49, 50, 51, 52, 71, 81, 82, 84], "ddtw_distanc": [0, 14, 81], "deriv": [0, 14, 17, 33, 34, 71, 81], "dynam": [0, 14, 17, 18, 50, 51, 52, 71, 72, 81, 82], "warp": [0, 13, 14, 15, 50, 52, 71, 72, 81, 82], "dtw_align": [0, 14, 81], "dtw_averag": [0, 14, 81], "barycent": [0, 13, 14, 15, 81], "averag": [0, 14, 17, 18, 33, 34, 63, 81], "dba": [0, 14, 81], "dtw_distanc": [0, 14, 81], "dtw_envelop": [0, 14, 81], "envelop": [0, 14, 81], "lb_keogh": [0, 14, 81], "dtw_lb_keogh": [0, 14, 81], "lower": [0, 8, 10, 14, 15, 17, 18, 29, 31, 33, 34, 44, 45, 47, 48, 50, 51, 52, 58, 72, 81], "bound": [0, 14, 17, 18, 35, 37, 44, 47, 48, 50, 51, 52, 72, 81], "dtw_map": [0, 14, 81], "optim": [0, 14, 16, 18, 72, 81, 82, 85], "path": [0, 14, 23, 24, 49, 50, 51, 52, 69, 81, 85], "two": [0, 13, 14, 15, 17, 18, 27, 31, 41, 42, 44, 47, 48, 50, 51, 52, 58, 63, 69, 71, 72, 77, 81, 82, 84], "given": [0, 2, 3, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 25, 27, 28, 29, 30, 31, 39, 46, 48, 49, 50, 51, 52, 70, 74, 81], "jeong_weight": [0, 14, 81], "describ": [0, 8, 14, 16, 18, 23, 24, 41, 48, 63, 67, 69, 72, 81, 82], "jeong": [0, 14, 81], "et": [0, 1, 2, 3, 8, 11, 14, 15, 17, 18, 41, 48, 50, 52, 63, 80, 81, 82], "al": [0, 1, 2, 3, 8, 11, 14, 15, 17, 18, 41, 48, 50, 52, 63, 80, 81, 82], "2011": [0, 14, 81], "r4bf7d056babf": [0, 14, 81], "1": [0, 1, 2, 3, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 71, 72, 80, 81, 84, 85], "_": [0, 10, 14, 15, 81], "wddtw_distanc": [0, 14, 81], "wdtw_align": [0, 14, 81], "wdtw_distanc": [0, 14, 81], "method": [0, 4, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 63, 64, 75, 81, 82, 84], "classif": [0, 8, 13, 14, 15, 16, 17, 18, 27, 28, 29, 30, 31, 33, 34, 36, 37, 41, 45, 47, 48, 49, 50, 51, 52, 59, 77, 80, 81, 84], "regress": [0, 8, 17, 18, 30, 31, 49, 50, 51, 52, 76, 80, 81, 84], "detect": [0, 8, 18, 72, 81], "baggingclassifi": [0, 17, 18, 81, 82], "bag": [0, 17, 18, 81], "baggingregressor": [0, 17, 18, 81, 82], "regressor": [0, 17, 18, 25, 28, 29, 30, 31, 49, 51, 52, 56, 75, 81], "basebag": [0, 17, 18, 81], "elasticensembleclassifi": [0, 16, 18, 81, 82], "extrashapelettreesclassifi": [0, 17, 18, 81], "extrem": [0, 17, 18, 81], "random": [0, 8, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 31, 32, 34, 35, 36, 37, 38, 41, 42, 44, 45, 47, 48, 50, 51, 52, 63, 75, 76, 81, 84], "shapelet": [0, 1, 3, 10, 11, 15, 17, 18, 19, 22, 23, 24, 25, 29, 31, 45, 47, 48, 51, 52, 77, 81, 82, 84], "extrashapelettreesregressor": [0, 17, 18, 81, 82], "intervalforestclassifi": [0, 17, 18, 81], "interv": [0, 8, 17, 18, 19, 25, 33, 34, 42, 46, 48, 51, 52, 80, 81, 84], "intervalforestregressor": [0, 17, 18, 81], "isolationshapeletforest": [0, 17, 18, 81], "isol": [0, 17, 18, 81, 85], "forest": [0, 8, 17, 18, 23, 24, 50, 52, 81, 84], "pivotforestclassifi": [0, 17, 18, 81], "proximityforestclassifi": [0, 17, 18, 75, 81], "proxim": [0, 17, 18, 20, 24, 33, 34, 50, 52, 81], "rocketforestclassifi": [0, 17, 18, 81, 82], "rocket": [0, 17, 18, 28, 31, 45, 48, 81, 84], "rocketforestregressor": [0, 17, 18, 81, 82], "shapeletforestclassifi": [0, 17, 18, 63, 75, 81, 82, 84], "shapeletforestembed": [0, 17, 18, 81], "shapeletforestregressor": [0, 17, 18, 75, 81, 82], "explan": [0, 4, 19, 20, 21, 22, 23, 24, 25, 33, 34, 81], "amplitudeimport": [0, 19, 25, 81], "equi": [0, 19, 25, 81], "probabl": [0, 4, 8, 13, 15, 16, 17, 18, 19, 22, 25, 29, 31, 44, 45, 47, 48, 49, 50, 51, 52, 81], "amplitud": [0, 19, 25, 58, 81], "intervalimport": [0, 19, 25, 81, 84], "shapeletimport": [0, 19, 25, 81], "plot_import": [0, 19, 25, 81], "plot": [0, 4, 19, 21, 22, 23, 24, 25, 68, 81, 84], "boxplot": [0, 19, 25, 81], "kneighborscounterfactu": [0, 21, 24, 81, 82], "fit": [0, 4, 8, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 63, 67, 76, 81, 82, 84], "prototypecounterfactu": [0, 22, 24, 81], "model": [0, 8, 17, 18, 22, 24, 27, 28, 29, 30, 31, 37, 49, 51, 52, 76, 80, 81], "agnost": [0, 2, 3, 22, 24, 81], "approach": [0, 22, 24, 27, 29, 31, 41, 47, 48, 67, 80, 81, 84, 85], "construct": [0, 8, 22, 24, 33, 34, 46, 48, 51, 52, 57, 59, 63, 75, 80, 81], "shapeletforestcounterfactu": [0, 23, 24, 81], "singl": [0, 10, 13, 15, 17, 18, 20, 24, 27, 31, 33, 34, 38, 41, 45, 48, 49, 50, 51, 52, 55, 63, 66, 69, 70, 72, 81, 82], "linear": [0, 31, 81], "both": [0, 8, 10, 11, 14, 15, 16, 18, 31, 39, 48, 57, 59, 63, 66, 68, 69, 71, 72, 77, 80, 81], "dilatedshapeletclassifi": [0, 29, 31, 81, 82], "dilat": [0, 29, 31, 39, 47, 48, 63, 81], "hydraclassifi": [0, 27, 31, 41, 48, 76, 81, 82], "dictionari": [0, 6, 7, 17, 18, 22, 23, 24, 27, 31, 41, 44, 47, 48, 50, 51, 52, 59, 69, 81, 82], "convolut": [0, 17, 18, 27, 31, 39, 41, 45, 48, 51, 52, 76, 81, 82], "kernel": [0, 8, 17, 18, 27, 28, 29, 30, 31, 39, 41, 45, 47, 48, 49, 51, 52, 63, 76, 80, 81], "randomshapeletclassifi": [0, 29, 31, 81], "randomshapeletregressor": [0, 29, 31, 81], "rocketclassifi": [0, 28, 31, 76, 81, 82], "rocketregressor": [0, 28, 31, 76, 81, 82], "evalu": [0, 17, 18, 22, 23, 24, 33, 34, 51, 52, 56, 63, 67, 81, 84], "compactness_scor": [0, 33, 34, 81], "compact": [0, 33, 34, 81], "score": [0, 4, 8, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 49, 50, 51, 52, 63, 80, 81, 84], "plausability_scor": [0, 33, 34, 81], "plausibl": [0, 33, 34, 81], "proximity_scor": [0, 33, 34, 81], "redudancy_scor": [0, 33, 34, 81], "redud": [0, 33, 34, 81], "relative_proximity_scor": [0, 33, 34, 81], "rel": [0, 13, 15, 33, 34, 72, 81], "silhouette_sampl": [0, 32, 34, 81], "silhouett": [0, 32, 34, 81], "coeffici": [0, 17, 18, 28, 29, 30, 31, 32, 34, 49, 51, 52, 81], "silhouette_scor": [0, 32, 34, 81], "validity_scor": [0, 33, 34, 81], "valid": [0, 7, 20, 22, 24, 27, 29, 31, 33, 34, 35, 37, 49, 50, 51, 52, 57, 66, 67, 69, 81, 82], "select": [0, 8, 10, 13, 15, 20, 24, 32, 34, 37, 42, 47, 48, 67, 68, 80, 81, 82, 84, 85], "repeatedoutliersplit": [0, 35, 37, 81], "repeat": [0, 19, 25, 35, 37, 81], "cross": [0, 27, 29, 31, 35, 37, 81], "outlier_train_test_split": [0, 17, 18, 36, 37, 81], "train": [0, 6, 7, 13, 15, 17, 18, 20, 24, 33, 34, 35, 36, 37, 45, 48, 49, 50, 51, 52, 67, 68, 69, 81, 84], "test": [0, 7, 13, 15, 16, 17, 18, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 49, 50, 51, 52, 54, 56, 60, 67, 68, 69, 72, 75, 81, 84], "split": [0, 7, 17, 18, 27, 29, 31, 35, 36, 37, 49, 50, 51, 52, 63, 69, 71, 81, 84], "raw": [0, 48, 81], "tabular": [0, 48, 81], "represent": [0, 17, 18, 47, 48, 51, 52, 63, 76, 80, 81, 84], "difftransform": [0, 40, 41, 48, 63, 81], "dilatedshapelettransform": [0, 47, 48, 81, 82], "featuretransform": [0, 42, 48, 81], "number": [0, 1, 2, 3, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 58, 59, 63, 67, 70, 72, 81, 84], "featur": [0, 17, 18, 28, 29, 30, 31, 38, 42, 45, 48, 49, 51, 52, 55, 63, 67, 68, 76, 81, 82, 85], "hydratransform": [0, 41, 48, 63, 81, 82], "intervaltransform": [0, 8, 42, 48, 80, 81, 82], "emb": [0, 42, 48, 81], "per": [0, 8, 19, 23, 24, 25, 27, 31, 41, 42, 44, 47, 48, 81], "matrixprofiletransform": [0, 43, 48, 81], "paa": [0, 46, 48, 81], "peicewis": [0, 46, 48, 81], "aggreg": [0, 23, 24, 46, 48, 81], "approxim": [0, 8, 46, 48, 81], "pivottransform": [0, 44, 48, 81, 82], "pivot": [0, 8, 17, 18, 44, 48, 50, 51, 52, 75, 81], "proximitytransform": [0, 44, 48, 81], "condit": [0, 44, 48, 81], "randomshapelettransform": [0, 47, 48, 81, 82], "tranform": [0, 47, 48, 81], "rockettransform": [0, 45, 48, 63, 81, 82, 84], "sax": [0, 19, 25, 33, 34, 46, 48, 81], "symbol": [0, 46, 48, 81], "convolv": [0, 27, 31, 39, 48, 81], "appli": [0, 7, 8, 39, 48, 49, 50, 51, 52, 63, 67, 81], "1d": [0, 39, 48, 57, 59, 70, 72, 81], "over": [0, 16, 17, 18, 19, 25, 33, 34, 39, 44, 47, 48, 50, 51, 52, 71, 81, 82, 84], "piecewice_aggregate_approxim": [0, 46, 48, 81], "symbolic_aggregate_approxim": [0, 46, 48, 81], "extrashapelettreeclassifi": [0, 51, 52, 77, 81], "extra": [0, 4, 6, 7, 19, 21, 22, 23, 24, 25, 51, 52, 69, 72, 81], "extrashapelettreeregressor": [0, 51, 52, 77, 81, 82], "intervaltreeclassifi": [0, 51, 52, 81], "intervaltreeregressor": [0, 51, 52, 81], "pivottreeclassifi": [0, 51, 52, 81], "proximitytreeclassifi": [0, 50, 52, 81, 82], "branch": [0, 50, 52, 75, 81], "rockettreeclassifi": [0, 51, 52, 81, 82], "rockettreeregressor": [0, 51, 52, 81, 82], "shapelettreeclassifi": [0, 49, 50, 51, 52, 77, 81, 82], "shapelettreeregressor": [0, 17, 18, 51, 52, 77, 81, 82], "check_arrai": [0, 57, 59, 81], "input": [0, 4, 8, 10, 11, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 34, 36, 37, 39, 40, 43, 44, 46, 48, 49, 50, 51, 52, 57, 58, 59, 60, 63, 70, 72, 81, 82, 84], "check_x_i": [0, 57, 59, 81], "mp": [1, 3, 11, 15], "none": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 69, 72], "window": [1, 2, 3, 11, 13, 14, 15, 19, 25, 33, 34, 43, 46, 48, 69, 71, 85], "auto": [1, 3, 10, 13, 15, 16, 17, 18, 21, 22, 24, 44, 48, 50, 52, 82], "exclud": [1, 2, 3, 10, 11, 15, 43, 48], "0": [1, 2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 35, 36, 37, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 63, 66, 67, 68, 69, 71, 72, 80, 84, 85], "2": [1, 2, 3, 8, 10, 11, 14, 15, 17, 18, 19, 20, 21, 24, 25, 28, 29, 30, 31, 35, 36, 37, 39, 42, 43, 45, 48, 49, 50, 51, 52, 57, 59, 60, 63, 66, 67, 69, 70, 71, 72, 84], "max_dist": [1, 3], "best": [1, 3, 10, 15, 17, 18, 20, 22, 24, 28, 29, 30, 31, 47, 48, 49, 51, 52, 72, 82], "max_neighbour": [1, 3], "10": [1, 3, 10, 15, 17, 18, 19, 25, 27, 28, 29, 30, 31, 42, 44, 45, 47, 48, 50, 51, 52, 58, 63, 72, 85], "min_neighbour": [1, 3], "max_motif": [1, 3], "return_dist": [1, 3, 10, 15], "fals": [1, 2, 3, 7, 10, 11, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 29, 31, 33, 34, 46, 48, 56, 57, 58, 59, 66, 67, 69, 84], "sourc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 84], "paramet": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 67, 68, 69, 71, 72, 80, 82, 84], "arrai": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 57, 58, 59, 60, 66, 68, 69, 70, 72, 82, 84], "like": [1, 2, 3, 4, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 70], "n_sampl": [1, 2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 66, 67, 68, 70, 72, 82, 84], "n_timestep": [1, 2, 3, 4, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 66, 67, 68, 70, 72, 84], "ndarrai": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 57, 59, 60, 68, 84], "profile_s": [1, 2, 3, 11, 15], "option": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 67, 69, 72, 80, 84, 85], "int": [1, 2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 57, 58, 59, 67, 72, 80], "float": [1, 2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 66, 67, 71], "size": [1, 2, 3, 9, 10, 11, 13, 14, 15, 17, 18, 19, 22, 23, 24, 25, 27, 29, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 45, 46, 47, 48, 67, 84], "math": [1, 3, 10, 15, 72], "ceil": [1, 3, 10, 15, 51, 52], "exact": [1, 2, 3, 10, 11, 13, 14, 15, 17, 18, 19, 25, 27, 31, 38, 41, 43, 45, 48], "exclus": [1, 2, 3, 10, 11, 15, 43, 48], "zone": [1, 3, 10, 11, 15, 43, 48], "str": [1, 3, 5, 6, 7, 8, 9, 10, 13, 15, 17, 18, 19, 20, 24, 25, 27, 29, 31, 32, 33, 34, 42, 44, 46, 47, 48, 50, 51, 52, 55, 57, 58, 59, 67], "distanc": [1, 2, 3, 8, 16, 17, 18, 19, 23, 24, 25, 26, 29, 31, 32, 33, 34, 44, 47, 48, 50, 51, 52, 71, 75, 77, 82], "neighbour": [1, 3], "return": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60, 67, 68, 69, 70, 72, 80, 82, 84], "bool": [1, 2, 3, 4, 7, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60], "main": [1, 3, 67, 84], "motif_indici": [1, 3], "motif_dist": [1, 3], "refer": [1, 2, 3, 8, 11, 14, 15, 16, 17, 18, 21, 22, 23, 24, 27, 29, 31, 33, 34, 41, 42, 45, 47, 48, 50, 52, 72, 81], "yeh": [1, 3, 11, 15], "c": [1, 3, 11, 15, 17, 18, 57, 59, 71, 84, 85], "m": [1, 3, 11, 14, 15, 33, 34, 71, 72, 85], "2016": [1, 3, 11, 15], "similar": [1, 3, 11, 15, 20, 24, 43, 48, 68, 71, 72, 76, 84], "join": [1, 2, 3, 11, 15, 43, 48], "unifi": [1, 3, 11, 15], "view": [1, 3, 11, 15], "discord": [1, 3, 11, 15], "In": [1, 2, 3, 8, 11, 13, 14, 15, 16, 17, 18, 23, 24, 27, 28, 29, 30, 31, 42, 48, 49, 50, 51, 52, 63, 66, 67, 68, 69, 71, 72, 74, 80, 82, 84], "ieee": [1, 3, 11, 15, 23, 24, 71], "16th": [1, 3, 11, 15], "intern": [1, 2, 3, 11, 14, 15, 17, 18, 23, 24, 51, 52, 71, 72], "confer": [1, 2, 3, 11, 14, 15, 23, 24, 71, 72], "data": [1, 2, 3, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 20, 22, 23, 24, 27, 28, 29, 30, 31, 32, 34, 36, 37, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 57, 59, 67, 68, 69, 71, 72, 80], "mine": [1, 2, 3, 11, 15, 16, 17, 18, 23, 24, 27, 31, 41, 42, 45, 48, 50, 52, 72], "icdm": [1, 3, 11, 15, 23, 24], "mpi": [2, 3, 11, 15], "n_segment": [2, 3], "boundri": [2, 3], "return_arc_curv": [2, 3], "If": [2, 3, 4, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 67, 69, 72, 80, 85], "index": [2, 3, 10, 11, 13, 14, 15, 17, 18, 19, 22, 25, 47, 48, 49, 50, 51, 52, 66, 70, 72], "must": [2, 3, 8, 14, 19, 25, 33, 34, 42, 45, 69, 71, 80, 85], "unless": [2, 3, 17, 18, 44, 47, 48, 49, 50, 51, 52, 57, 59, 69, 71], "identifi": [2, 3, 17, 18, 47, 48, 51, 52, 57, 59, 66, 69, 72, 84], "ignor": [2, 3, 10, 13, 14, 15, 17, 18, 19, 25, 33, 34, 35, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 66], "self": [2, 3, 4, 11, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 67], "region": [2, 3, 84], "around": [2, 3, 13, 15, 32, 34], "express": [2, 3, 8, 11, 15, 17, 18, 33, 34, 43, 48, 51, 52, 67, 69], "arc": [2, 3], "curv": [2, 3], "start": [2, 3, 10, 15, 19, 25], "arc_curv": [2, 3], "gharghabi": [2, 3], "shaghayegh": [2, 3], "2017": [2, 3], "viii": [2, 3], "domain": [2, 3, 58], "onlin": [2, 3], "semant": [2, 3], "superhuman": [2, 3], "perform": [2, 3, 13, 15, 17, 18, 33, 34, 42, 45, 48, 56, 57, 59, 63, 67, 68, 72, 76], "level": [2, 3], "proceed": [2, 3, 8, 71, 72, 80], "get_metadata_rout": [4, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "metadata": [4, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "rout": [4, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "thi": [4, 6, 7, 8, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 59, 63, 67, 68, 72, 76, 81, 82, 84, 85], "object": [4, 8, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 35, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 67, 71, 72, 84], "pleas": [4, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 63], "how": [4, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 84], "mechan": [4, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "work": [4, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 82, 84, 85], "metadatarequest": [4, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "encapsul": [4, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "inform": [4, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 84], "get_param": [4, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "deep": [4, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "true": [4, 7, 10, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 59, 60, 66, 67, 70, 71, 72], "default": [4, 7, 8, 10, 11, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 63, 67, 68, 69, 71, 72, 80, 82, 84], "contain": [4, 7, 8, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 59, 60, 66, 69, 72], "subobject": [4, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "ar": [4, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 63, 66, 67, 68, 69, 71, 72, 74, 75, 77, 80, 82, 84, 85], "param": [4, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "dict": [4, 5, 6, 7, 10, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 59, 67, 69], "map": [4, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 74], "set_param": [4, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "set": [4, 7, 8, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 67, 69, 72, 82, 84, 85], "simpl": [4, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 80, 85], "well": [4, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 63], "nest": [4, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "pipelin": [4, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 63, 84], "latter": [4, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "have": [4, 9, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 59, 66, 67, 68, 70, 71, 82, 84, 85], "form": [4, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 84], "compon": [4, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 69], "__": [4, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "so": [4, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 67, 84], "": [4, 8, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 59, 71, 72, 80, 84], "possibl": [4, 11, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 74, 85], "updat": [4, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "instanc": [4, 8, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 59, 69], "counterfactu": [4, 25, 26, 33, 34, 82, 84], "explain": [4, 26, 33, 34, 82, 84], "term": [4, 17, 18, 21, 22, 23, 24, 45, 48, 70, 71], "close": [4, 21, 22, 23, 24, 57, 59], "desir": [4, 8, 20, 21, 22, 23, 24, 33, 34, 41, 48, 72, 80], "counterfact": [4, 21, 22, 23, 24], "closensess": [4, 21, 22, 23, 24], "fit_explain": [4, 19, 21, 22, 23, 24, 25], "kwarg": [4, 7, 19, 21, 22, 23, 24, 25], "argument": [4, 7, 17, 18, 19, 20, 21, 22, 23, 24, 25, 44, 47, 48, 50, 51, 52, 55, 69, 71, 72, 82, 84, 85], "ax": [4, 19, 21, 22, 23, 24, 25, 58, 68], "make_dict_filt": 5, "filter": [5, 7, 17, 18, 45, 48, 84], "make": [5, 57, 59, 63, 71], "new": [5, 7, 13, 15, 17, 18, 20, 21, 22, 23, 24, 29, 31, 35, 37, 47, 48, 56, 63, 68, 84, 85], "subject": 5, "op": 5, "verb": 5, "callabl": [5, 7, 9, 10, 15, 19, 20, 23, 24, 25, 27, 29, 31, 32, 33, 34, 47, 48, 55], "make_filt": 5, "creat": [5, 7, 8, 17, 18, 49, 50, 51, 52, 63, 66, 69, 85], "make_list_filt": 5, "base": [5, 6, 7, 8, 14, 17, 18, 19, 20, 24, 26, 27, 30, 31, 33, 34, 38, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 69, 71, 82, 85], "string": [5, 7, 17, 18, 27, 29, 31, 44, 47, 48, 50, 51, 52, 67, 68, 69], "make_str_filt": 5, "version": [6, 7, 13, 15, 17, 18, 20, 21, 23, 24, 28, 29, 30, 31, 40, 42, 43, 44, 46, 48, 49, 50, 51, 52, 69, 80, 84, 85], "tag": [6, 7, 56, 69], "descript": [6, 7, 8, 55, 69, 80], "uniqu": [6, 7, 33, 34, 69], "human": [6, 7], "readabl": [6, 7], "get_collect": [6, 7], "get_filenam": [6, 7], "ext": [6, 7], "extens": [6, 7, 69], "filenam": [6, 7], "archiv": [6, 7, 63], "zipfil": [6, 7], "sort": [6, 7, 10, 15, 17, 18], "zip": [6, 7, 67, 69], "n_training_sampl": [6, 7], "url": [6, 7, 69], "properti": [6, 7, 17, 18, 42, 45], "download_url": [6, 7], "templat": [6, 7], "download": [6, 7, 67, 69, 85], "wildboar_requir": [6, 7, 69], "requir": [6, 7, 8, 13, 14, 15, 16, 17, 18, 20, 24, 27, 28, 29, 30, 31, 49, 50, 51, 52, 57, 59, 67, 69, 72, 80, 82, 85], "min": [6, 7, 9, 13, 14, 15, 51, 52, 58, 66, 72], "timeout": [6, 7, 69], "abstract": [6, 7, 22, 46], "util": [7, 8, 9, 17, 18, 26, 51, 52, 70, 72], "outlier": [7, 17, 18, 26, 33, 34, 35, 36, 37, 69], "preprocess": [7, 19, 25, 26, 46, 48, 63, 67, 68, 84], "cache_dir": [7, 69], "keep_last_vers": 7, "keep": [7, 17, 18, 28, 29, 30, 31, 49, 51, 52], "latest": [7, 69], "json": 7, "request": [7, 8, 67, 69, 72, 80, 85], "ucr": [7, 63, 67, 69, 72, 84], "tini": [7, 67, 69], "format": [7, 13, 15, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 69], "bake": [7, 84], "off": [7, 84], "create_cache_dir": 7, "progress": 7, "forc": [7, 57, 59, 67], "where": [7, 8, 10, 14, 15, 17, 18, 28, 29, 30, 31, 33, 34, 36, 37, 39, 42, 44, 47, 48, 49, 50, 51, 52, 58, 63, 66, 69, 71, 72, 82, 84, 85], "wildboar_cach": 7, "miss": [7, 66, 70], "show": [7, 14, 58, 63], "bar": 7, "while": [7, 17, 18, 49, 50, 51, 52, 67, 69, 84, 85], "re": [7, 13, 15, 17, 18, 67], "we": [7, 16, 17, 18, 33, 34, 42, 44, 47, 48, 50, 51, 52, 56, 57, 58, 59, 63, 66, 67, 68, 69, 71, 72, 74, 80, 82, 84, 85], "can": [7, 8, 17, 18, 28, 29, 30, 31, 41, 48, 49, 50, 51, 52, 55, 58, 63, 66, 67, 68, 69, 70, 71, 72, 74, 80, 84, 85], "also": [7, 33, 34, 49, 50, 51, 52, 56, 63, 67, 70, 71, 72, 77, 80, 82, 84, 85], "ani": [7, 8, 49, 50, 51, 52, 69, 70, 71, 82], "newli": 7, "ad": [7, 17, 18, 51, 52], "still": [7, 85], "pend": 7, "dtype": [7, 13, 15, 57, 58, 59, 66, 67], "contigu": [7, 57, 59, 84], "merge_train_test": [7, 16, 18, 67, 69, 84], "return_extra": 7, "read": [7, 10, 13, 15, 17, 18, 24, 29, 31, 32, 33, 34, 44, 47, 48, 50, 51, 52, 72, 84], "type": [7, 57, 58, 59, 77, 84], "_preprocess": 7, "take": [7, 42, 48, 49, 50, 51, 52, 69, 71, 82], "np": [7, 8, 10, 13, 14, 15, 17, 18, 19, 21, 24, 25, 33, 34, 42, 44, 47, 48, 50, 51, 52, 57, 58, 59, 60, 66, 68, 72], "ensur": [7, 20, 24, 35, 37, 57, 59, 69], "memori": [7, 17, 18, 57, 59, 72, 82, 84], "merg": [7, 50, 52, 69, 71], "exist": [7, 35, 37, 67, 82, 84], "partit": [7, 13, 15, 63, 84], "alreadi": [7, 67, 85], "4": [7, 8, 10, 14, 15, 17, 18, 19, 25, 41, 42, 45, 46, 48, 60, 63, 66, 71, 72, 80, 82], "x_train": [7, 16, 17, 18, 36, 37, 63, 67, 69, 84], "x_test": [7, 16, 17, 18, 36, 37, 63, 67, 69, 84], "y_train": [7, 16, 17, 18, 36, 37, 63, 67, 69, 84], "y_test": [7, 16, 17, 18, 36, 37, 63, 67, 69, 84], "syntheticcontrol": [7, 67, 69], "600": [7, 67], "origin": [7, 17, 18, 19, 20, 24, 25, 27, 31, 33, 34, 38, 45, 48, 57, 59, 63, 82, 84], "preserv": [7, 57, 58, 59, 84], "specif": [7, 16, 17, 18, 44, 47, 48, 50, 51, 52, 56, 57, 59, 67, 68, 69, 82, 85], "doe": [7, 8, 35, 37, 41, 48, 72, 84], "shown": [7, 19, 25], "onli": [7, 11, 14, 15, 17, 18, 19, 20, 23, 24, 25, 49, 50, 51, 52, 57, 59, 63, 67, 68, 69, 71, 72, 82, 84, 85], "yield": [7, 35, 37, 56, 68], "those": 7, "which": [7, 8, 13, 14, 15, 16, 17, 18, 21, 22, 24, 27, 28, 29, 30, 31, 33, 34, 42, 48, 49, 50, 51, 52, 63, 67, 69, 70, 71, 72, 80, 82, 84, 85], "f": [7, 8, 17, 18, 27, 31, 41, 42, 48, 50, 52, 55, 57, 59, 68, 71, 80, 84], "attribut": [7, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 38, 41, 45, 47, 48, 49, 50, 51, 52, 54, 67, 69, 75, 84], "comparison": [7, 67], "spec": 7, "conjunct": 7, "part": [7, 63, 67, 68, 69, 70, 72], "depend": [7, 8, 10, 11, 15, 42, 48, 66, 72, 84, 85], "tupl": [7, 14, 17, 18, 44, 47, 48, 50, 51, 52, 56, 59, 82], "last": [7, 68, 69, 72, 84], "element": [7, 10, 15, 17, 18, 39, 44, 47, 48, 50, 51, 52, 55, 60], "print": [7, 13, 15, 23, 24, 67, 84], "beef": [7, 67, 69], "470": [7, 67], "coffe": [7, 67, 69], "56": [7, 67], "286": [7, 67], "150": [7, 42, 48, 67], "1162": [7, 67], "82": [7, 67], "than": [7, 8, 10, 15, 17, 18, 21, 24, 51, 52, 58, 67, 70, 71, 72, 84], "call": [7, 17, 18, 28, 29, 30, 31, 49, 51, 52, 56, 69], "without": [7, 55, 63, 66, 69, 71], "reset": [7, 69], "root": [7, 19, 25], "n_outlier": [8, 35, 37, 80], "05": [8, 14, 17, 18, 22, 24, 29, 31, 35, 36, 37, 42, 47, 48, 51, 71, 80], "dbscan": 8, "ep": 8, "min_sampl": 8, "5": [8, 10, 11, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 25, 28, 31, 33, 34, 42, 45, 47, 48, 51, 52, 58, 63, 71, 72, 80], "metric": [8, 10, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 44, 47, 48, 49, 50, 51, 52, 82], "euclidean": [8, 10, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 29, 31, 32, 33, 34, 47, 48, 51, 52, 71, 72], "max_ep": 8, "inf": [8, 57, 59], "random_st": [8, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 41, 42, 44, 45, 47, 48, 50, 51, 52, 63], "densiti": 8, "fail": [8, 21, 24], "assign": [8, 13, 15, 80, 84], "By": [8, 17, 18, 19, 25, 27, 31, 41, 44, 46, 48, 50, 52, 57, 58, 59, 66, 69, 72, 80, 82, 84], "class": [8, 36, 69, 80, 84], "consid": [8, 10, 15, 17, 18, 33, 34, 36, 37, 50, 52, 84], "optic": 8, "when": [8, 11, 13, 15, 17, 18, 19, 23, 24, 25, 28, 29, 30, 31, 32, 34, 43, 46, 48, 49, 51, 52, 56, 57, 58, 59, 67, 69, 71, 72, 82, 84], "cluter": 8, "randomst": [8, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 31, 32, 34, 35, 36, 37, 38, 41, 42, 44, 45, 47, 48, 50, 51, 52], "seed": [8, 17, 18, 19, 21, 24, 25, 27, 29, 31, 38, 41, 42, 45, 47, 48, 50, 51, 52, 84], "x_outlier": [8, 80], "n_inlier": [8, 35, 37], "y_outlier": [8, 80], "labl": 8, "confusion_estim": 8, "difficulty_estim": 8, "transform": [8, 9, 13, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 29, 31, 33, 34, 51, 52, 56, 80, 82], "simplest": [8, 67, 80], "variat": [8, 80], "tight": [8, 80], "emmott": [8, 79], "2013": [8, 71, 80], "reliabl": [8, 84], "multiclass": [8, 59, 80], "For": [8, 17, 18, 28, 29, 30, 31, 38, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 63, 67, 68, 69, 70, 72, 75, 76, 77, 82, 84, 85], "maxim": 8, "confus": [8, 80], "measur": [8, 16, 17, 18, 33, 34, 44, 47, 48, 50, 51, 52, 71, 82], "digit": 8, "rang": [8, 17, 18, 44, 47, 48, 49, 50, 51, 52, 68, 72, 80], "accord": [8, 10, 11, 15, 17, 18, 45, 46, 48, 51, 52, 58, 69, 80], "final": [8, 17, 18, 56, 63], "either": [8, 14, 36, 37, 47, 48, 49, 50, 51, 52, 59, 67, 69, 72, 80, 84], "dispers": [8, 80], "guarante": [8, 84], "error": [8, 17, 18, 57, 59], "rais": [8, 57, 59], "ha": [8, 17, 18, 33, 34, 42, 46, 48, 50, 51, 52, 55, 57, 58, 59, 63, 64, 66, 69, 71, 72, 82], "few": [8, 33, 34, 85], "n_class": [8, 13, 15, 16, 17, 18, 49, 50, 51, 52], "predict_proba": [8, 13, 15, 16, 17, 18, 49, 50, 51, 52], "logist": [8, 80], "rbf": [8, 80], "befor": [8, 13, 15, 27, 29, 31, 82, 85], "otherwis": [8, 17, 18, 21, 24, 33, 34, 57, 59], "suppli": [8, 19, 20, 24, 25], "hardest": [8, 80], "point": [8, 10, 14, 15, 49, 51, 52, 67, 69, 71, 80, 84], "quantiz": [8, 80], "should": [8, 17, 33, 34, 36, 37, 68, 69, 71, 84], "len": [8, 10, 13, 15, 19, 25], "denot": [8, 36, 37, 68, 71, 72], "simpler": 8, "multipl": [8, 17, 18, 19, 25, 44, 47, 48, 51, 52, 66, 69, 72, 80, 82, 84], "e": [8, 14, 17, 18, 23, 24, 33, 34, 51, 52, 57, 59, 66, 67, 68, 69, 71, 72, 80, 84, 85], "g": [8, 13, 14, 15, 22, 24, 27, 31, 41, 47, 48, 67, 68, 71, 72, 80, 84, 85], "would": [8, 17, 18, 28, 29, 30, 31, 44, 47, 48, 49, 50, 51, 52, 68], "mix": 8, "easi": [8, 58, 67], "difficult": [8, 80], "16": [8, 80], "3": [8, 10, 14, 15, 16, 17, 18, 42, 45, 48, 57, 59, 60, 63, 66, 68, 70, 71, 72, 80, 82], "percentil": [8, 17, 18, 29, 31, 47, 48, 80], "procedur": 8, "effect": [8, 17, 18, 46, 48, 50, 52, 57, 59, 71, 82], "closest": [8, 10, 13, 15, 22, 33, 34], "facil": 8, "locat": [8, 69, 72, 85], "thei": [8, 17, 18, 44, 48, 49, 50, 51, 52, 69, 72], "distribut": [8, 17, 18, 27, 31, 41, 45, 46, 48, 49, 50, 51, 52, 67, 85], "among": [8, 22], "avail": [8, 69, 77], "suffici": 8, "fewer": [8, 33, 34], "mai": [8, 17, 18, 28, 29, 30, 31, 49, 51, 52, 82], "note": [8, 11, 14, 15, 17, 18, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 37, 41, 42, 48, 49, 51, 52, 58, 68, 72], "packag": [8, 67, 80, 85], "networkx": [8, 80], "da": [8, 71, 80], "dietterich": [8, 80], "t": [8, 13, 15, 16, 17, 18, 27, 28, 29, 30, 31, 33, 34, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 57, 59, 71, 72, 80, 82, 85], "fern": [8, 80], "wong": [8, 80], "w": [8, 13, 14, 15, 16, 17, 18, 27, 28, 29, 30, 31, 49, 50, 51, 52, 67, 69, 80], "systemat": [8, 80], "anomali": [8, 36, 37, 80], "benchmark": [8, 67, 76, 79], "real": [8, 17, 18, 66, 71, 80], "acm": [8, 71, 72, 80], "sigkdd": [8, 72, 80], "workshop": [8, 80], "pp": [8, 72, 80], "21": [8, 80], "n_cluster": [8, 13, 15], "farther": 8, "other": [8, 13, 15, 21, 24, 35, 37, 63, 67, 69, 72, 80, 84], "satisfi": [8, 71], "constraint": [8, 54, 71], "allow": [8, 42, 48, 49, 50, 51, 52, 56, 57, 59, 69, 80, 82, 84], "n_dim": [9, 10, 11, 15, 16, 18, 33, 34, 36, 37, 43, 48, 49, 50, 51, 52, 66, 67, 68, 70, 72, 82, 84], "max": [9, 14, 51, 52, 58, 71, 72], "result": [9, 17, 18, 20, 22, 24, 36, 37, 39, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 63, 68, 71, 80, 82], "zero": [9, 17, 18, 27, 29, 31, 41, 45, 47, 48, 49, 50, 51, 52, 68, 71, 84], "unit": [9, 27, 29, 31, 41, 47, 48, 68, 71, 84], "deviat": [9, 14, 27, 29, 31, 41, 42, 47, 48, 80], "n_shortest": 9, "dim": [10, 11, 15, 68, 72, 82], "metric_param": [10, 13, 15, 17, 18, 19, 24, 25, 29, 31, 32, 33, 34, 44, 47, 48, 50, 51, 52, 71, 72, 82], "n_job": [10, 11, 13, 15, 16, 17, 18, 27, 28, 29, 30, 31, 38, 41, 42, 43, 44, 45, 47, 48, 53, 63, 82], "univari": [10, 13, 15, 32, 34, 66, 70, 72, 84], "multivari": [10, 13, 15, 23, 24, 32, 34, 66, 68, 70, 84], "needl": [10, 15], "haystack": [10, 15], "_metric": [10, 15, 24, 29, 31, 33, 34, 47, 48], "about": [10, 13, 15, 17, 18, 24, 29, 31, 32, 33, 34, 42, 44, 45, 47, 48, 50, 51, 52, 57, 59, 72, 84], "smallest": [10, 13, 15, 82], "largest": [10, 15], "parallel": [10, 13, 15, 17, 18, 27, 29, 31, 38, 41, 45, 47, 48, 53], "job": [10, 11, 13, 15, 16, 17, 18, 27, 29, 31, 38, 41, 43, 45, 47, 48, 53], "wildoar": [10, 15], "11": [10, 15, 17, 18, 45, 48, 63], "6": [10, 14, 15, 42, 48, 63, 66, 71, 72, 84], "7": [10, 14, 15, 17, 18, 42, 45, 48, 63, 72], "8": [10, 13, 14, 15, 27, 29, 31, 41, 42, 48, 51, 58, 63, 82], "24621125": [10, 15], "79583152": [10, 15], "24695077": [10, 15], "mass": [10, 15, 71, 72], "yn_timestep": [10, 11, 15], "correspond": [10, 15, 17, 18, 27, 31, 33, 34, 49, 50, 51, 52, 63], "everi": [10, 11, 15, 49, 50, 51, 52, 57, 59, 72], "search": [10, 15, 49, 50, 51, 52, 71], "_subsequence_metr": [10, 15], "run": [10, 13, 15, 17, 18, 23, 24, 27, 31, 38, 41, 45, 47, 48, 56, 67, 68, 85], "dataset": [10, 14, 15, 16, 17, 18, 19, 25, 26, 27, 31, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 63, 66, 68, 69, 72, 80], "ecg200": [10, 15], "reshap": [10, 15, 72], "14": [10, 15, 63, 72], "00120332": [10, 15], "41943788": [10, 15], "81597243": [10, 15], "75219094": [10, 15], "72681005": [10, 15], "70155561": [10, 15], "warn": [10, 15, 57, 59, 82], "broadcast": [10, 11, 15, 20, 24, 72], "full": [10, 15, 33, 34, 42, 48, 67, 72, 82, 84], "ndim": [10, 15, 57, 59, 84], "scalar": [10, 15, 55, 58, 72], "return_index": [10, 11, 14, 15, 72], "m_timestep": [10, 14, 15], "mani": [10, 15, 17, 18, 57, 59, 63, 68, 72], "equal": [10, 15, 17, 18, 44, 48, 49, 50, 51, 52, 66, 67, 71, 80], "good": [10, 15, 23, 24, 33, 34, 80], "first": [10, 11, 14, 15, 17, 18, 41, 44, 47, 48, 50, 51, 52, 57, 59, 69, 70, 72, 80, 85], "dist": [10, 15, 51, 52, 72], "minumum": [10, 15, 58], "posit": [10, 13, 15, 17, 18, 19, 23, 24, 25, 27, 31, 38, 41, 45, 48, 63, 71], "threshold": [10, 15, 17, 18, 19, 22, 23, 24, 25, 29, 31, 46, 47, 48, 51, 52, 75, 77, 82], "max_match": [10, 15], "less": [10, 15, 17, 18, 51, 52, 67, 68, 84], "behaviour": [10, 15], "order": [10, 15, 17, 18, 27, 31, 33, 34, 40, 41, 48, 49, 50, 51, 52, 57, 58, 59, 66, 72, 84], "occurr": [10, 15], "top": [10, 15, 19, 25], "length": [10, 15, 17, 18, 51, 52, 55, 57, 59, 60, 68, 70, 71, 82], "below": [10, 15, 29, 31, 47, 48, 69], "x_sampl": [10, 15, 72], "y_sampl": [10, 15, 72], "n_subsequ": [10, 15, 72], "closer": [10, 15, 22, 33, 34], "treshold": [10, 15], "trivial": [10, 11, 15], "vicin": [10, 15], "within": [10, 15, 72], "timestep": [10, 15, 33, 34, 45, 47, 48, 57, 59, 66, 67, 68, 70, 72, 84], "anoth": [10, 15, 69, 80], "higher": [10, 15], "n_match": [10, 15], "found": [10, 15], "subsequenec": [11, 15], "xn_timestep": [11, 15], "second": [11, 14, 15, 17, 18, 44, 47, 48, 50, 51, 52, 69, 72], "r": [13, 14, 15, 16, 17, 18, 22, 24, 27, 28, 29, 30, 31, 42, 44, 47, 48, 49, 50, 51, 52, 71, 85], "init": [13, 14, 15], "n_init": [13, 15], "max_it": [13, 15, 22, 24], "300": [13, 15, 84], "tol": [13, 14, 15], "001": [13, 15, 71], "verbos": [13, 14, 15, 17, 18, 22, 23, 24, 85], "dtw": [13, 15, 16, 18, 21, 22, 24, 26, 47, 48, 50, 51, 52, 71, 72, 82], "softdtw": [13, 15], "penalti": [13, 14, 15, 71], "tradit": [13, 15, 63, 68, 71, 80, 82], "initi": [13, 14, 15, 22, 69], "randomli": [13, 15, 42, 47, 48, 77], "centroid": [13, 15, 82], "iter": [13, 15, 27, 29, 31, 35, 37, 67], "toler": [13, 15, 33, 34, 71], "declar": [13, 15, 69], "converg": [13, 15], "consecut": [13, 15], "diagnost": [13, 15], "messag": [13, 15, 57, 59], "dure": [13, 15, 23, 24], "determin": [13, 15, 17, 18, 20, 23, 24, 27, 28, 29, 30, 31, 32, 34, 35, 37, 42, 48, 49, 51, 52, 69, 80], "n_iter_": [13, 15], "cluster_centers_": [13, 15], "center": [13, 15], "labels_": [13, 15], "Not": [13, 15, 17, 18], "fit_predict": [13, 15, 17, 18], "n_featur": [13, 15, 16, 17, 18, 27, 28, 29, 30, 31, 40, 43, 44, 46, 48, 49, 50, 51, 52], "present": [13, 15, 17, 18, 69], "api": [13, 15, 17, 18, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 66, 81, 82, 84], "consist": [13, 15, 17, 18, 23, 24, 28, 29, 30, 31, 47, 48, 49, 51, 52, 63, 72], "convent": [13, 15, 17, 18, 56, 57, 59, 67, 75, 84], "int64": [13, 15], "fit_transform": [13, 15, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48], "fit_param": [13, 15, 40, 43, 44, 46, 48], "n_output": [13, 15, 16, 17, 18, 27, 28, 29, 30, 31, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "target": [13, 15, 17, 18, 22, 24, 40, 43, 44, 46, 48, 49, 50, 51, 52, 59, 85], "unsupervis": [13, 15, 17, 18, 40, 43, 44, 46, 48], "addit": [13, 15, 40, 43, 44, 46, 48, 67, 70, 72, 84], "x_new": [13, 15, 40, 43, 44, 46, 48], "n_features_new": [13, 15, 40, 43, 44, 46, 48], "predict": [13, 15, 16, 17, 18, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 49, 50, 51, 52, 63, 76], "belong": [13, 15, 84], "set_output": [13, 15, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48], "output": [13, 15, 17, 18, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 57, 59, 63, 72, 84], "introduc": [13, 15, 17, 18, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 63, 64, 82], "panda": [13, 15, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48], "configur": [13, 15, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 72, 76, 84, 85], "datafram": [13, 15, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48], "unchang": [13, 14, 15, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48], "space": [13, 15, 22, 39, 48, 58, 63, 72], "30": [13, 15, 71, 72, 84], "0001": [13, 15], "pam": [13, 15], "medoid": [13, 15, 21, 24, 82], "core": [13, 15, 17, 18, 27, 31, 38, 41, 42, 44, 45, 48], "integ": [13, 15, 17, 18, 27, 31, 38, 41, 45, 48, 58, 80], "medoid_indices_": [13, 15], "n_neighbor": [13, 15, 16, 18, 82], "classes_": [13, 15, 17, 18, 22, 24, 49, 50, 51, 52], "shapel": [13, 15], "known": [13, 15], "multivarait": [13, 15], "kneighborclassifi": [13, 15], "sample_weight": [13, 14, 15, 16, 17, 18, 27, 28, 29, 30, 31, 33, 34, 49, 50, 51, 52], "accuraci": [13, 15, 16, 17, 18, 27, 28, 29, 30, 31, 33, 34, 49, 50, 51, 52], "multi": [13, 15, 16, 17, 18, 27, 28, 29, 30, 31, 42, 48, 49, 50, 51, 52, 57, 59, 80], "subset": [13, 15, 16, 17, 18, 27, 28, 29, 30, 31, 32, 34, 49, 50, 51, 52], "harsh": [13, 15, 16, 17, 18, 27, 28, 29, 30, 31, 49, 50, 51, 52], "sinc": [13, 15, 16, 17, 18, 20, 24, 27, 28, 29, 30, 31, 42, 48, 49, 50, 51, 52, 68, 72, 80, 84], "you": [13, 15, 16, 17, 18, 27, 28, 29, 30, 31, 49, 50, 51, 52, 82, 84, 85], "correctli": [13, 15, 16, 17, 18, 27, 28, 29, 30, 31, 49, 50, 51, 52, 82], "x_timestep": [14, 72], "y_timestep": [14, 72], "out": [14, 17, 18, 84], "vector": [14, 57, 59], "penal": 14, "store": [14, 17, 18, 67], "instead": [14, 17, 18, 28, 29, 30, 31, 35, 37, 49, 51, 52, 63, 72, 76, 84], "mm": 14, "max_stabl": 14, "learning_r": 14, "decai": 14, "9": [14, 27, 31, 41, 42, 48, 63, 69], "1e": [14, 33, 34], "max_epoch": 14, "50": [14, 67, 72], "return_cost": 14, "control": [14, 17, 18, 19, 23, 24, 25, 27, 29, 31, 38, 41, 44, 45, 47, 48, 85], "exp": [14, 17, 18, 51, 52], "influenc": [14, 17, 18, 28, 29, 30, 31, 49, 51, 52], "much": [14, 33, 34, 82], "contribut": 14, "ssg": 14, "minim": [14, 47, 48], "equival": 14, "stochast": 14, "subgradi": 14, "epoch": 14, "cost": [14, 23, 24, 71, 72], "rate": 14, "minmum": 14, "runtim": 14, "pseudo": [14, 20, 23, 24], "27442791e": 14, "01": [14, 42, 48], "19807473e": 14, "02": [14, 42, 48], "77490053e": 14, "60441308e": 14, "31930140e": 14, "17437783e": 14, "43925941e": 14, "60983434e": 14, "72118437e": 14, "73352049e": 14, "56701557e": 14, "53269314e": 14, "33366128e": 14, "09010828e": 14, "97539989e": 14, "71443248e": 14, "42492836e": 14, "71408958e": 14, "82518334e": 14, "35671953e": 14, "26442901e": 14, "38342948e": 14, "11248815e": 14, "99355168e": 14, "00": [14, 42, 48], "08588712e": 14, "35954194e": 14, "78345146e": 14, "41023092e": 14, "99915956e": 14, "82717462e": 14, "71687181e": 14, "55819192e": 14, "28805337e": 14, "06653283e": 14, "25159669e": 14, "02389872e": 14, "39410523e": 14, "34687887e": 14, "03": 14, "98654485e": 14, "85832342e": 14, "56436416e": 14, "25302660e": 14, "77697444e": 14, "24606299e": 14, "76357782e": 14, "27083874e": 14, "44590342e": 14, "64184026e": 14, "03608265e": 14, "13964118e": 14, "33595675e": 14, "09954847e": 14, "61924171e": 14, "47433305e": 14, "29583168e": 14, "00425122e": 14, "80524683e": 14, "70210329e": 14, "40259039e": 14, "59657389e": 14, "52170730e": 14, "54666287e": 14, "93690730e": 14, "23968406e": 14, "upper": [14, 17, 18, 29, 31, 35, 37, 44, 45, 47, 48, 50, 51, 52, 72], "keogh": [14, 72], "2002": 14, "28th": 14, "veri": [14, 63, 68, 71], "larg": [14, 58, 67, 71, 75], "same": [14, 17, 18, 19, 25, 33, 34, 49, 50, 51, 52, 58, 63, 68, 69, 71, 72, 82, 84], "min_dist": 14, "cumul": 14, "step": [14, 63, 67, 68, 84], "precomput": [14, 17, 18, 28, 29, 30, 31, 49, 51, 52], "x_indic": 14, "y_indic": 14, "provid": [14, 42, 45, 69, 71, 84, 85], "n": [14, 72, 80, 84], "omitaomu": 14, "o": [14, 17, 18, 22, 50, 52, 72], "2021": [14, 33, 34], "pattern": [14, 29, 31, 47, 48, 71, 80], "recognit": [14, 29, 31, 47, 48, 71], "44": 14, "2231": 14, "2240": 14, "diagon": 14, "raec1aca773": 14, "grid": [16, 17, 18, 44, 47, 48, 50, 51, 52], "elast": [16, 18, 72, 82], "non_elast": [16, 18], "one": [16, 17, 18, 19, 25, 41, 44, 47, 48, 50, 51, 52, 55, 63, 67, 72, 75, 84], "line": [16, 18, 58, 82, 85], "bagnal": [16, 18, 82], "2015": [16, 18, 47, 48, 82], "slightli": [16, 18], "smaller": [16, 18, 58], "non": [16, 18, 33, 34, 42, 48, 57, 59, 72], "custom": [16, 17, 18, 42, 48, 50, 52], "paralel": [16, 18, 42, 48], "jason": [16, 18], "anthoni": [16, 18], "knowledg": [16, 17, 18, 21, 23, 24, 27, 31, 33, 34, 41, 42, 45, 48, 50, 52, 71, 72], "discoveri": [16, 17, 18, 27, 31, 41, 42, 45, 48, 50, 52, 72], "29": [16, 18], "clf": [16, 18, 84], "min_r": [16, 17, 18, 44, 47, 48, 50, 51, 52], "max_r": [16, 17, 18, 44, 47, 48, 50, 51, 52], "ddtw": [16, 18, 71, 72], "9866666666666667": [16, 18], "n_estim": [17, 18], "max_sampl": [17, 18], "bootstrap": [17, 18], "oob_scor": [17, 18], "class_weight": [17, 18, 27, 28, 29, 30, 31, 50, 51, 52], "warm_start": [17, 18], "base_estim": [17, 18, 82], "deprec": [17, 18, 20, 24, 42, 48, 50, 51, 52, 82], "meta": [17, 18], "draw": [17, 18, 29, 31, 47, 48], "drawn": [17, 18], "replac": [17, 18, 33, 34, 69, 85], "balanc": [17, 18, 27, 29, 31, 50, 51, 52], "associ": [17, 18, 27, 29, 31, 50, 51, 52], "invers": [17, 18, 50, 51, 52], "proport": [17, 18, 50, 51, 52], "frequenc": [17, 18, 50, 51, 52, 58], "reus": [17, 18, 68, 84], "solut": [17, 18], "previou": [17, 18, 68], "add": [17, 18, 23, 24, 56, 58, 82], "just": [17, 18, 66, 85], "whole": [17, 18], "resampl": [17, 18, 19, 25, 27, 31, 38, 45, 48], "been": [17, 18, 42, 48, 58, 71, 82], "remov": [17, 18, 20, 24, 51, 52, 55, 82], "base_estimator_": [17, 18], "grow": [17, 18], "estimators_samples_": [17, 18], "member": [17, 18], "reduc": [17, 18, 42, 48, 67], "footprint": [17, 18], "thu": [17, 18], "fetch": [17, 18, 85], "slower": [17, 18, 72], "expect": [17, 18, 28, 29, 30, 31, 43, 48, 49, 51, 52, 68, 80, 84], "decision_funct": [17, 18, 33, 34], "decis": [17, 18, 23, 24, 49, 50, 51, 52, 75], "function": [17, 18, 23, 41, 42, 63, 67, 68, 69, 71, 72, 82, 84], "spars": [17, 18, 49, 50, 51, 52, 57, 59, 63], "matric": [17, 18], "accept": [17, 18, 27, 31, 41, 48, 57, 59, 67, 68, 69, 72, 84], "column": [17, 18, 57, 59, 69, 70], "appear": [17, 18], "special": [17, 18, 84], "case": [17, 18, 71], "build": [17, 18, 50, 52, 84], "highest": [17, 18, 63], "do": [17, 18, 49, 50, 51, 52, 71, 72, 82, 85], "resort": [17, 18], "vote": [17, 18], "predict_log_proba": [17, 18], "log": [17, 18, 42, 48, 82], "p": [17, 18, 21, 22, 23, 24, 33, 34, 71, 72], "repres": [17, 18, 66, 70, 71, 76], "100": [17, 18, 19, 22, 24, 25, 44, 48, 50, 52, 58, 67], "defin": [17, 18, 28, 29, 30, 31, 40, 44, 46, 47, 48, 49, 50, 51, 52, 69], "frac": [17, 18, 28, 29, 30, 31, 49, 51, 52], "u": [17, 18, 28, 29, 30, 31, 49, 51, 52], "v": [17, 18, 28, 29, 30, 31, 49, 51, 52, 69, 71], "residu": [17, 18, 28, 29, 30, 31, 49, 51, 52], "sum": [17, 18, 28, 29, 30, 31, 49, 51, 52], "squar": [17, 18, 19, 25, 28, 29, 30, 31, 49, 51, 52], "y_true": [17, 18, 28, 29, 30, 31, 49, 51, 52], "y_pred": [17, 18, 28, 29, 30, 31, 49, 51, 52], "total": [17, 18, 28, 29, 30, 31, 49, 51, 52], "neg": [17, 18, 28, 29, 30, 31, 49, 50, 51, 52], "becaus": [17, 18, 28, 29, 30, 31, 49, 51, 52], "arbitrarili": [17, 18, 28, 29, 30, 31, 49, 51, 52], "wors": [17, 18, 28, 29, 30, 31, 49, 51, 52], "constant": [17, 18, 28, 29, 30, 31, 49, 51, 52], "alwai": [17, 18, 21, 24, 28, 29, 30, 31, 35, 37, 49, 51, 52, 71], "disregard": [17, 18, 28, 29, 30, 31, 49, 51, 52], "some": [17, 18, 28, 29, 30, 31, 49, 51, 52, 56, 57, 59, 66, 67, 70, 85], "n_samples_fit": [17, 18, 28, 29, 30, 31, 49, 51, 52], "multioutput": [17, 18, 28, 29, 30, 31, 49, 51, 52], "uniform_averag": [17, 18, 28, 29, 30, 31, 49, 51, 52], "23": [17, 18, 28, 29, 30, 31, 49, 51, 52], "r2_score": [17, 18, 28, 29, 30, 31, 49, 51, 52], "except": [17, 18, 28, 29, 30, 31, 49, 51, 52, 69, 80], "multioutputregressor": [17, 18, 28, 29, 30, 31, 49, 51, 52], "baseforestclassifi": 17, "estimator_param": 17, "max_depth": [17, 18, 49, 50, 51, 52], "min_samples_split": [17, 18, 49, 50, 51, 52], "min_samples_leaf": [17, 18, 49, 50, 51, 52, 82], "min_impurity_decreas": [17, 18, 49, 50, 51, 52], "criterion": [17, 18, 50, 51, 52, 82], "entropi": [17, 18, 50, 51, 52], "tree": [17, 18, 26, 75, 82], "baseforestregressor": 17, "squared_error": [17, 18, 51, 52], "baseshapeletforestclassifi": 17, "n_shapelet": [17, 18, 19, 25, 29, 31, 47, 48, 51, 52, 82], "log2": [17, 18, 19, 25, 33, 34, 42, 46, 48, 51, 52, 82], "min_shapelet_s": [17, 18, 19, 22, 24, 25, 29, 31, 47, 48, 51, 52], "max_shapelet_s": [17, 18, 19, 22, 24, 25, 29, 31, 47, 48, 51, 52], "directli": [17, 63, 69], "baseshapeletforestregressor": 17, "depth": [17, 18, 50, 51, 52, 85], "expand": [17, 18, 51, 52], "until": [17, 18, 51, 52], "leav": [17, 18, 49, 50, 51, 52], "pure": [17, 18, 51, 52], "node": [17, 18, 45, 48, 49, 50, 51, 52], "leaf": [17, 18, 49, 50, 51, 52], "impur": [17, 18, 50, 51, 52], "decreas": [17, 18, 50, 51, 52], "larger": [17, 18, 33, 34, 51, 52, 58, 70, 71, 84], "mandatori": [17, 18, 44, 47, 48, 50, 51, 52], "specifii": [17, 18, 44, 47, 48, 50, 51, 52], "give": [17, 18, 19, 25, 44, 47, 48, 50, 51, 52, 76], "follow": [17, 18, 40, 42, 44, 45, 47, 48, 50, 51, 52, 67, 68, 69, 71, 72, 84, 85], "num_r": [17, 18, 44, 47, 48, 50, 51, 52], "gini": [17, 18, 50, 51, 52], "scaled_euclidean": [17, 18, 51, 52, 71, 72], "y_hat": [17, 18], "mse": [17, 18, 51, 52, 82], "wa": [17, 18, 20, 24, 51, 52, 82], "v1": [17, 18, 51, 52, 67, 69], "forestmixin": 17, "n_interv": [17, 18, 19, 25, 33, 34, 42, 46, 48, 51, 52, 82], "sqrt": [17, 18, 19, 25, 33, 34, 42, 46, 48, 51, 52], "fix": [17, 18, 42, 48, 51, 52, 82], "summar": [17, 18, 42, 48, 51, 52], "mean_var_std": [17, 18], "sample_s": [17, 18, 32, 34, 42, 48, 51, 52], "min_siz": [17, 18, 42, 45, 48, 51, 52, 82], "max_siz": [17, 18, 42, 45, 48, 51, 52, 82], "contamin": [17, 18, 36, 37], "strategi": [17, 18, 27, 29, 31, 35, 37, 41, 45, 46, 48], "offset": [17, 18], "offset_": [17, 18], "model_select": [17, 18, 26, 63, 84], "sklearn": [17, 18, 32, 34, 41, 48, 57, 59, 63, 80, 84], "balanced_accuracy_scor": [17, 18], "test_siz": [17, 18, 35, 36, 37, 84], "anomalies_train_s": [17, 18, 36, 37], "8674": [17, 18], "n_pivot": [17, 18, 44, 48, 50, 51, 52], "pivot_sampl": [17, 18, 50, 52], "metric_sampl": [17, 18, 44, 48, 50, 52], "metric_factori": [17, 18, 50, 52, 82], "uniform": [17, 18, 44, 45, 46, 48, 50, 52, 68, 72], "parameter": [17, 18, 50, 52], "suggest": [17, 18, 50, 52, 63], "luca": [17, 18, 50, 52], "2019": [17, 18, 42, 48, 50, 52, 85], "2020": [17, 18, 21, 22, 23, 24, 33, 34, 45, 48, 50, 52, 63], "combin": [17, 18, 22, 42, 48, 50, 52, 63], "sub": [17, 18, 50, 52], "benjamin": [17, 18, 50, 52], "ahm": [17, 18, 50, 52], "shifaz": [17, 18, 50, 52], "charlott": [17, 18, 50, 52], "pelleti": [17, 18, 50, 52], "lachlan": [17, 18, 50, 52], "neill": [17, 18, 50, 52], "nayyar": [17, 18, 50, 52], "zaidi": [17, 18, 50, 52], "bart": [17, 18, 50, 52], "goethal": [17, 18, 50, 52], "fran\u00e7oi": [17, 18, 45, 48, 50, 52], "petitjean": [17, 18, 45, 48, 50, 52], "geoffrei": [17, 18, 45, 48, 50, 52, 71], "webb": [17, 18, 27, 31, 41, 45, 48, 50, 52, 71], "scalabl": [17, 18, 50, 52], "n_kernel": [17, 18, 27, 28, 31, 41, 45, 48, 51, 52, 63], "normal": [17, 18, 19, 25, 27, 28, 29, 30, 31, 36, 37, 41, 45, 46, 48, 51, 52, 58, 63, 68, 71, 82], "sampling_param": [17, 18, 27, 28, 31, 41, 45, 48, 51, 52], "kernel_s": [17, 18, 27, 28, 31, 39, 41, 45, 48, 51, 52, 82], "bias_prob": [17, 18, 28, 31, 45, 48, 51, 52], "normalize_prob": [17, 18, 28, 29, 31, 45, 47, 48, 51, 52], "padding_prob": [17, 18, 28, 31, 45, 48, 51, 52], "13": [17, 18, 45, 48, 63], "bia": [17, 18, 39, 45, 48], "pad": [17, 18, 39, 45, 48, 63], "processor": [17, 18, 47, 48, 85], "alpha": [17, 18, 27, 28, 29, 30, 31, 51, 52, 58], "current": [17, 18, 22, 51, 52, 67, 68, 69, 82, 85], "ab": [17, 18, 51, 52], "toward": [17, 18, 22, 51, 52, 56], "increas": [17, 18, 51, 52], "independeth": [17, 18, 51, 52], "sparse_output": [17, 18], "high": [17, 18], "dimension": [17, 18], "fall": [17, 18, 71, 84], "lead": [17, 18, 82], "code": [17, 18, 68, 72, 82], "ones": [17, 18], "csr": [17, 18], "bin": [19, 25, 46, 48, 58, 80, 85], "n_bin": [19, 25, 33, 34, 46, 48], "n_repeat": [19, 25], "discret": [19, 25, 27, 29, 31, 47, 48, 58, 80], "permut": [19, 25], "show_bin": [19, 25], "show_grid": [19, 25], "scorer": [19, 25, 27, 29, 31], "were": [19, 25, 70], "annot": [19, 25, 26], "axi": [19, 25, 49, 50, 51, 52, 55, 57, 59, 68, 72], "mappabl": [19, 25], "scalarmapp": [19, 25], "colorbar": [19, 25], "specici": [19, 25], "least": [19, 25, 57, 59], "importances_": [19, 25], "components_": [19, 25], "permuteimport": 19, "kernel_scal": [19, 25], "25": [19, 25, 50, 52, 71, 80], "train_x": [20, 24], "train_i": [20, 24], "valid_scor": [20, 24], "method_arg": [20, 24], "basecounterfactu": [20, 24], "infer": [20, 24], "most": [20, 24, 66, 70, 80, 85], "appropri": [20, 24, 70], "_counterfactu": [20, 24], "renam": [20, 24, 42, 48, 82], "success": [20, 24], "stabl": [20, 24, 36, 37, 66], "x_counterfactu": [20, 24, 33, 34], "wdtw": [21, 24, 71, 72, 82], "karlsson": [21, 23, 24, 33, 34], "reban": [21, 23, 24, 33, 34], "j": [21, 23, 24, 33, 34, 72], "papapetr": [21, 23, 24, 33, 34], "gioni": [21, 23, 24, 33, 34], "local": [21, 23, 24, 33, 34], "tweak": [21, 23, 24, 33, 34], "system": [21, 23, 24, 33, 34, 67, 69, 85], "62": [21, 23, 24, 33, 34], "1671": [21, 23, 24, 33, 34], "1700": [21, 23, 24, 33, 34], "explainer_": [21, 24], "dynamictimewarptransform": 22, "gamma": 22, "move": [22, 50, 52, 71], "euclideantransform": 22, "knearestprototypesampl": 22, "prototype_indici": 22, "metric_transform": 22, "prototyp": 22, "nearest_index": 22, "state": [22, 36, 37, 44, 48, 68, 76], "sample_mov": 22, "sampla": 22, "knearestshapeletprototypesampl": 22, "shapeletprototypesampl": 22, "metrictransform": 22, "predictevalu": 22, "probabilityevalu": 22, "step_siz": [22, 24], "n_prototyp": [22, 24], "samsten": [22, 24], "isak": [22, 24], "estimator_": [22, 24], "partitions_": [22, 24], "prototypesampl": [22, 24], "target_": [22, 24], "targetevalu": [22, 24], "prototype_indic": 22, "refin": 22, "new_counterfactu": 22, "_o": 22, "sample_shapelet": 22, "uniformprototypesampl": 22, "uniformli": [22, 46, 48, 51, 52], "weighteddynamictimewarptransform": 22, "epsilon": [23, 24, 71, 82], "batch_siz": [23, 24], "max_path": [23, 24], "cosin": [23, 24, 71, 72], "manhattan": [23, 24, 71, 72], "degre": [23, 24], "batch": [23, 24, 53], "candid": [23, 24, 33, 34], "subsampl": [23, 24], "stdout": [23, 24], "execut": [23, 24, 53], "differ": [23, 24, 27, 31, 33, 34, 35, 37, 41, 48, 69, 70, 71, 72, 82, 84], "revers": [23, 24], "2018": [23, 24], "via": [23, 24], "irrevers": [23, 24], "paths_": [23, 24], "x_true": 24, "normalized_euclidean": [24, 33, 34, 71, 72], "ensembl": [26, 63, 80, 82, 84], "linear_model": [26, 63, 76, 82, 84], "variable_len": [26, 57, 59, 70], "n_group": [27, 31, 41, 48, 63], "64": [27, 31, 41, 48, 63, 67, 85], "fit_intercept": [27, 28, 29, 30, 31], "cv": [27, 28, 29, 30, 31], "group": [27, 31, 35, 37, 41, 48, 63, 76], "sampler": [27, 31, 41, 48], "half": [27, 31, 63, 72], "n_alpha": [27, 29, 31], "try": [27, 29, 31, 55, 63, 85], "whether": [27, 29, 31, 57, 58, 59], "calcul": [27, 29, 31, 32, 34, 46], "intercept": [27, 29, 31], "signatur": [27, 29, 31], "class_label": [27, 29, 31], "dempster": [27, 31, 41, 45, 48, 82], "schmidt": [27, 31, 41, 47, 48], "d": [27, 31, 33, 34, 41, 42, 48, 67, 69, 71, 72], "2023": [27, 31, 41, 48, 63, 71, 82], "hydra": [27, 31, 41, 48], "compet": [27, 31, 41, 48], "accur": [27, 31, 41, 45, 48, 74], "10000": [28, 31, 63], "gcv_mode": [28, 29, 30, 31], "1000": [29, 31, 45, 47, 48, 51], "shapelet_s": [29, 31, 47, 48, 51], "abov": [29, 31, 47, 48, 68, 71, 84], "antoin": [29, 31, 47, 48], "guillaum": [29, 31, 47, 48, 82], "christel": [29, 31, 47, 48], "vrain": [29, 31, 47, 48], "elloumi": [29, 31, 47, 48], "wael": [29, 31, 47, 48], "artifici": [29, 31, 47, 48], "intellig": [29, 31, 47, 48, 71], "2022": [29, 31, 47, 48, 82], "basetransformclassifi": 30, "basetransformestim": 30, "basetransformregressor": 30, "transformridgecv": 30, "transformridgeclassifiercv": 30, "conveni": [32, 34, 84], "wrapper": [32, 34, 55], "nativ": [32, 33, 34, 41, 48, 82], "x_factual": [33, 34], "atol": [33, 34], "08": [33, 34], "n_timetep": [33, 34], "overlap": [33, 34, 42, 48], "counterfacut": [33, 34], "factual": [33, 34], "x_plausibl": [33, 34], "y_plausibl": [33, 34], "y_counterfactu": [33, 34], "typic": [33, 34, 72, 84], "m_sampl": [33, 34], "localoutlierfactor": [33, 34], "individu": [33, 34, 68], "plausabl": [33, 34], "incic": [33, 34], "better": [33, 34], "delanei": [33, 34], "green": [33, 34], "kean": [33, 34], "arxiv": [33, 34, 47, 48], "2009": [33, 34], "13211v2": [33, 34], "redund": [33, 34], "impact": [33, 34], "x_nativ": [33, 34], "y_nativ": [33, 34], "captur": [33, 34, 84], "n_nativ": [33, 34], "n_counterfactu": [33, 34], "avareg": [33, 34], "smyth": [33, 34], "b": [33, 34, 72], "interpret": [33, 34, 42, 48], "divers": [33, 34], "2101": [33, 34], "09056v1": [33, 34], "y_predict": [33, 34], "correct": [33, 34, 54, 74], "n_split": [35, 37], "shuffl": [35, 37, 84], "total_n_outli": [35, 37], "psudo": [35, 36, 37], "contrari": [35, 37], "fold": [35, 37], "insert": [35, 37], "repeatedli": [35, 37, 67, 84], "get_n_split": [35, 37], "compat": [35, 37, 38, 41, 42, 44, 45, 47, 48], "train_idx": [35, 37], "test_idx": [35, 37], "normal_class": [36, 37], "anomal": [36, 37], "train_test_split": [36, 37, 63, 84], "baseattributetransform": [38, 41, 42, 44, 45, 47, 48], "engin": [38, 71], "embedding_": [38, 41, 45, 47, 48], "embed": [38, 41, 42, 44, 45, 47, 48, 76], "underli": [38, 41, 45, 47, 48], "n_dimens": [38, 41, 42, 44, 45, 47, 48, 57, 59], "stride": [39, 48], "implicit": [39, 48], "side": [39, 48], "output_s": [39, 48], "floor": [39, 48], "get_feature_names_out": [40, 48], "automat": [40, 48, 85], "wrap": [40, 48, 55], "develop": [40, 48, 82, 85], "onetoonefeaturemixin": [40, 48], "classnameprefixfeaturesoutmixin": [40, 48], "help": [40, 48], "descret": [41, 48], "make_pipelin": [41, 48, 63, 84], "make_union": [41, 48, 63], "dempster_hydra": [41, 48], "32": [41, 48, 63, 67], "catch22": [42, 48], "_summar": [42, 48], "x_t": [42, 48], "19633603e": [42, 48], "51047206e": [42, 48], "90000000e": [42, 48], "80000000e": [42, 48], "48441896e": [42, 48], "73293560e": [42, 48], "21476510e": [42, 48], "70000000e": [42, 48], "00000000e": [42, 48], "70502518e": [42, 48], "60000000e": [42, 48], "42857143e": [42, 48], "26666667e": [42, 48], "89974643e": [42, 48], "31570726e": [42, 48], "50000000e": [42, 48], "90873852e": [42, 48], "47311800e": [42, 48], "intervalmixin": 42, "It": [42, 84], "_get_gener": [42, 45], "mean_var_slop": [42, 48, 51, 52], "possibli": [42, 48], "slope": [42, 48], "releas": [42, 48], "lock": [42, 48], "gil": [42, 48], "As": [42, 48, 67, 69, 71, 72, 84], "varianc": [42, 48, 68, 71, 84], "suit": [42, 48, 56, 72, 82], "futur": [42, 48, 67, 82], "downstream": [42, 48], "project": [42, 48, 85], "own": [42, 48], "cython": [42, 48, 72], "lubba": [42, 48], "carl": [42, 48], "h": [42, 48], "sarab": [42, 48], "sethi": [42, 48], "philip": [42, 48], "knaut": [42, 48], "simon": [42, 48], "schultz": [42, 48], "ben": [42, 48], "fulcher": [42, 48], "nick": [42, 48], "jone": [42, 48], "canon": [42, 48], "characterist": [42, 48], "33": [42, 48], "1821": [42, 48], "1852": [42, 48], "15": [42, 48], "timepoint": [42, 48], "std": [42, 48, 71], "12": [42, 48, 63, 72, 85], "matrixprofil": [43, 48], "pivotmixin": 44, "rocketmixin": 45, "angu": [45, 48], "exception": [45, 48], "34": [45, 48, 72, 84], "1454": [45, 48], "1495": [45, 48], "51333333": [45, 48], "11526939": [45, 48], "47333333": [45, 48], "04712544": [45, 48], "24": [45, 48], "82912261": [45, 48], "52666667": [45, 48], "26611524": [45, 48], "54": [45, 48, 72], "98047216": [45, 48], "81260641": [45, 48], "54666667": [45, 48], "71210092": [45, 48], "35333333": [45, 48], "28841158": [45, 48], "25333333": [45, 48], "82203705": [45, 48], "72938203": [45, 48], "45333333": [45, 48], "53756324": [45, 48], "24666667": [45, 48], "8380654": [45, 48], "68666667": [45, 48], "80533684": [45, 48], "26": [45, 48, 68], "41709413": [45, 48], "65634235": [45, 48], "66": [45, 48], "94724793": [45, 48], "32666667": [45, 48], "85575661": [45, 48], "67630249": [45, 48], "piecewic": 46, "get_threshold": 46, "suitabl": 46, "normalbin": 46, "assum": [46, 48, 58, 66, 68, 69, 70], "uniformbin": 46, "three": [47, 48, 71, 72], "wistuba": [47, 48], "martin": [47, 48], "josif": [47, 48], "grabocka": [47, 48], "lar": [47, 48], "thiem": [47, 48], "ultra": [47, 48], "preprint": [47, 48], "1503": [47, 48], "05018": [47, 48], "load_gunpoint": [47, 48], "erp": [47, 48, 71, 72, 82], "min_g": [47, 48], "max_g": [47, 48], "shapeletmixin": [47, 82], "estiom": 47, "basetre": 49, "check_input": [49, 50, 51, 52], "bypass": [49, 50, 51, 52], "sure": [49, 50, 51, 52, 57, 59], "your": [49, 50, 51, 52, 82, 85], "up": [49, 50, 51, 52, 85], "node_count": [49, 50, 51, 52], "tree_": [49, 50, 51, 52], "equvival": [49, 50, 51, 52], "decision_path": [49, 50, 51, 52], "n_node": [49, 50, 51, 52], "nonzero": [49, 50, 51, 52, 66], "travers": [49, 50, 51, 52], "basetreeclassifi": 49, "child": [49, 50, 51, 52], "net": [49, 50, 51, 52], "carri": [49, 50, 51, 52], "don": [49, 50, 51, 52, 85], "know": [49, 50, 51, 52], "what": [49, 50, 51, 52, 80], "basetreeregressor": 49, "msm": [50, 52, 71, 72, 82], "min_c": [50, 52], "max_c": [50, 52], "num_c": [50, 52], "20": [50, 52, 72], "basefeaturetreeclassifi": 51, "basefeaturetreeregressor": 51, "dilatedshapelettreeclassifi": 51, "scaled_dtw": [51, 52, 71, 72], "structur": [51, 52], "n_classes_": [51, 52], "run_in_parallel": 53, "parallel_arg": 53, "assert_exhaustive_parameter_check": 54, "assert": 54, "ok": 54, "assert_parameter_check": 54, "skip": [54, 56], "extend": 54, "array_or_scalar": 55, "optional_f": 55, "squeez": 55, "item": 55, "singleton": 55, "recursivlei": 55, "unwrap": 55, "Such": 55, "unstabl": 55, "stabil": 55, "beta": 55, "unsat": 55, "check_estim": 56, "generate_onli": 56, "skip_scikit": 56, "adher": 56, "deleg": [56, 57, 59], "monkei": 56, "patch": 56, "relat": [56, 71], "silent": 56, "tailor": 56, "copi": [57, 59, 72], "ensure_2d": [57, 59], "ensure_ts_arrai": [57, 59], "allow_3d": [57, 59], "allow_nd": [57, 59], "force_all_finit": [57, 59], "multi_output": [57, 59], "ensure_min_sampl": [57, 59], "ensure_min_timestep": [57, 59], "ensure_min_dim": [57, 59], "allow_eo": [57, 59], "y_numer": [57, 59], "y_contigu": [57, 59], "2d": [57, 59, 70, 72, 84], "3d": [57, 59, 70, 72, 84], "finit": [57, 59], "varial": [57, 59], "report": [57, 59, 72], "ravel_1d": [57, 59], "input_nam": [57, 59], "convert": [57, 58, 59, 67, 80], "never": [57, 59, 63, 71], "empti": [57, 59], "attempt": [57, 59], "failur": [57, 59], "convers": [57, 59], "fortran": [57, 59], "style": [57, 59], "noth": [57, 59], "layout": [57, 59], "kept": [57, 59], "trigger": [57, 59], "might": [57, 59], "ravel": [57, 59], "neither": [57, 59], "eo": [57, 59, 60, 66, 68, 70], "nan": [57, 59, 66, 70, 82], "pd": [57, 59], "na": [57, 59], "cannot": [57, 59], "infinit": [57, 59], "row": [57, 59, 70], "disabl": [57, 59, 84], "reject": [57, 59], "enforc": [57, 59], "pass": [57, 59, 72, 80, 82], "midpointnorm": 58, "vmin": 58, "vmax": 58, "midpoint": 58, "normalis": 58, "autoscal": 58, "autoscale_non": 58, "static": 58, "process_valu": 58, "homogen": 58, "effici": [58, 82], "mask": 58, "is_scalar": 58, "byte": 58, "float32": 58, "float64": 58, "place": 58, "oper": [58, 67, 68, 69, 84, 85], "greatli": 58, "improv": [58, 67], "speed": 58, "plot_frequency_domain": 58, "jitter": 58, "sample_spac": 58, "cmap": 58, "dark2": 58, "freqenc": 58, "matplotlib": [58, 68], "colormap": 58, "plot_time_domain": 58, "linewidth": 58, "zorder": 58, "show_legend": 58, "opac": 58, "width": 58, "color": 58, "legend": 58, "check_classification_target": 59, "valueerror": 59, "check_opt": 59, "option_valu": 59, "check_typ": 59, "target_typ": 59, "variabl": [60, 70, 85], "get_variable_length": 60, "lenght": 60, "is_end_of_seri": [60, 70], "wise": [60, 68, 84], "is_variable_length": 60, "wildboar": [63, 64, 66, 67, 68, 69, 70, 71, 72, 77, 80, 82, 84], "dempsar": 63, "emploi": 63, "sligtli": 63, "manner": 63, "activ": [63, 85], "record": 63, "exponenti": 63, "Then": [63, 84], "had": 63, "stackingclassifi": 63, "ridgeclassifiercv": 63, "standardscal": 63, "sparsescal": 63, "purpos": [63, 72, 84], "motestrain": 63, "heavi": 63, "here": [63, 69, 85], "impos": 63, "account": 63, "sparsiti": 63, "rememb": 63, "count": 63, "cases": 63, "ridg": [63, 76], "x27": 63, "jupyt": 63, "environ": [63, 85], "rerun": 63, "cell": 63, "html": 63, "trust": [63, 84], "notebook": 63, "On": [63, 71], "github": [63, 85], "unabl": 63, "render": 63, "page": 63, "nbviewer": 63, "org": [63, 69, 85], "pipelinepipelin": 63, "hydratransformhydratransform": 63, "sparsescalersparsescal": 63, "ridgeclassifiercvridgeclassifiercv": 63, "9937106918238994": 63, "similarli": [63, 72], "scaler": 63, "rockettransformrockettransform": 63, "standardscalerstandardscal": 63, "paper": 63, "To": [63, 67, 68, 69, 70, 80, 85], "inflat": 63, "author": 63, "alloc": 63, "concaten": 63, "nth": 63, "hydra_diff": 63, "featureunion": 63, "transformer_list": 63, "featureunionfeatureunion": 63, "hydratransformhydratransformhydratransform": 63, "pipelinedifftransformdifftransform": 63, "9905660377358491": 63, "again": 63, "substitut": 63, "rocket_diff": 63, "5000": 63, "rockettransformrockettransformrockettransform": 63, "limit": 63, "signific": 63, "intend": 64, "offer": [64, 67], "wherea": [66, 75], "context": 66, "multivaret": 66, "howev": [66, 67, 69, 72], "unequ": [66, 68, 71], "ieee754": 66, "treat": 66, "isnan": [66, 70], "wb": 66, "t1": 66, "t2": 66, "t3": 66, "vstack": 66, "pip": [67, 80, 85], "conda": 67, "advanc": 67, "previous": [67, 74, 82, 84], "entri": 67, "hope": 67, "One": [67, 68, 84], "drawback": 67, "asset": 67, "demand": [67, 69], "small": [67, 80], "experi": 67, "brows": 67, "688": 67, "43": 67, "kb": 67, "668": 67, "python": [67, 69, 72, 82, 84, 85], "bit": [67, 85], "conform": 67, "common": [67, 68, 70, 71, 85], "workflow": [67, 72], "comparis": 67, "explanatori": 67, "n_label": 67, "greater": 67, "exactli": [67, 70], "respect": [67, 69, 75], "chain": 67, "large_multivari": 67, "large_multiclass": 67, "0x7f262ce95d00": 67, "predefin": 68, "contrast": 68, "our": 68, "simplifi": [68, 84], "applic": 68, "enumer": [68, 85], "snippet": [68, 84], "could": 68, "rewritten": 68, "crude": 68, "wai": [68, 82], "deal": 68, "longer": 68, "accomplish": [68, 72], "argmax": 68, "pyplot": 68, "plt": 68, "fig": 68, "subplot": 68, "nrow": 68, "scatter": 68, "arang": 68, "marker": 68, "set_ylabel": 68, "spokenarabicdigit": 68, "ucrmt": 68, "figur": 68, "loss": 68, "togeth": 69, "compos": 69, "written": 69, "letter": 69, "regular": 69, "alphanumer": 69, "charact": 69, "za": 69, "z0": 69, "revis": 69, "z": [69, 71], "exemplifi": 69, "hard": 69, "interfac": [69, 84], "endpoint": 69, "http": [69, 85], "www": 69, "repo": 69, "addition": 69, "offlin": 69, "disk": [69, 84], "localappdata": 69, "gnu": [69, 85], "linux": [69, 85], "xdg_cache_hom": 69, "unset": 69, "maco": [69, 85], "librarycach": 69, "fallback": 69, "long": 69, "session": 69, "func": [69, 72], "bundle_url": 69, "example1": 69, "altern": [69, 85], "remot": 69, "sha": 69, "sha1": 69, "hash": 69, "npy": 69, "npz": 69, "save": 69, "savez": 69, "dataset_nam": 69, "_train": 69, "_test": 69, "That": 69, "separ": [69, 80], "embrac": 70, "asarrai": 70, "produc": [70, 74], "rank": 70, "arr": 70, "shorter": [70, 71], "These": 71, "loos": 71, "obei": 71, "inequ": 71, "itself": 71, "distinct": 71, "gt": 71, "ne": 71, "symmetr": 71, "sai": 71, "triangl": [71, 72], "hold": [71, 84], "lt": 71, "shortcut": 71, "through": [71, 85], "categori": [71, 84], "lp": 71, "norm": 71, "shift": 71, "distinguish": 71, "min_": 71, "notat": 71, "_elastic_": 71, "slide": 71, "need": [71, 72, 82, 85], "moreov": 71, "comment": 71, "undefin": 71, "minkowski": [71, 72], "chebyshev": [71, 72], "angular": [71, 72, 82], "phase": 71, "wddtw": [71, 72], "longest": 71, "lcss": [71, 72, 82], "edit": [71, 85], "gap": 71, "edr": [71, 72, 82], "twe": [71, 72, 82], "edit_penalti": 71, "stiff": [71, 72], "lambda": 71, "nu": 71, "amerc": [71, 82], "matthieu": 71, "herrmann": 71, "intuit": 71, "volum": 71, "137": 71, "hirschberg": 71, "1977": 71, "problem": [71, 80, 84], "journal": 71, "jacm": 71, "chen": 71, "l": 71, "ng": 71, "2004": 71, "marriag": 71, "thirtieth": 71, "\u00f6zsu": 71, "oria": 71, "2005": 71, "robust": [71, 82, 84], "trajectori": 71, "manag": 71, "stefan": 71, "athitso": 71, "transact": 71, "1425": 71, "1438": 71, "marteau": 71, "2008": 71, "adjust": 71, "analysi": 71, "31": [71, 84], "306": 71, "318": 71, "involv": [72, 84], "_euclidean": 72, "51158857": 72, "11514381": 72, "35905618": 72, "mirror": 72, "imag": 72, "halv": 72, "advis": 72, "tri": 72, "smart": 72, "85497117": 72, "96086309": 72, "18777928": 72, "00606825": 72, "23060212": 72, "27419835": 72, "64445581": 72, "38965963": 72, "79102936": 72, "59756098": 72, "47560976": 72, "64634146": 72, "08536585": 72, "03658537": 72, "13414634": 72, "09756098": 72, "25609756": 72, "12195122": 72, "76": 72, "20881199": 72, "73": 72, "62554784": 72, "88": 72, "5536877": 72, "27": 72, "49142159": 72, "56024904": 72, "24551102": 72, "45513015": 72, "81": 72, "60658533": 72, "06099416": 72, "multitud": 72, "48683192": 72, "60301954": 72, "34083722": 72, "35954558": 72, "sometim": 72, "_pairs_": 72, "50816474": 72, "3299048": 72, "55193242": 72, "interdimension": 72, "50507001": 72, "90920635": 72, "27646127": 72, "60041068": 72, "60786006": 72, "75645164": 72, "26677146": 72, "24823344": 72, "interest": 72, "slice": 72, "want": [72, 85], "avoid": [72, 85], "unwant": 72, "limits_": 72, "queri": 72, "le": 72, "counterpart": 72, "_threshold_": 72, "jag": 72, "66371456": 72, "11914265": 72, "13076667": 72, "99043671": 72, "73408875": 72, "84227457": 72, "2028058": 72, "85972633": 72, "85367621": 72, "86957415": 72, "64041732": 72, "33156061": 72, "56698045": 72, "99489626": 72, "6790517": 72, "16754772": 72, "10973127": 72, "50583639": 72, "def": 72, "pairwise_sd_ful": 72, "stack": 72, "21688671": 72, "83210644": 72, "50884094": 72, "18507116": 72, "11177626": 72, "15611733": 72, "21780536": 72, "13350353": 72, "09710811": 72, "75114125": 72, "13489775": 72, "09806374": 72, "idx": 72, "28": 72, "third": 72, "continu": [72, 84], "investig": 72, "particular": [72, 84], "task": [72, 75, 76, 80, 84], "cpu": 72, "inspect": 72, "theoret": 72, "complex": 72, "magnitud": 72, "97686": 72, "87686": 72, "98368": 72, "98282": 72, "11131": 72, "98268": 72, "95506": 72, "14157": 72, "96041": 72, "94631": 72, "83231": 72, "92207": 72, "55527": 72, "73285": 72, "55538": 72, "41892": 72, "40887": 72, "42778": 72, "00061": 72, "00104": 72, "00064": 72, "wlcss": 72, "00054": 72, "00091": 72, "00056": 72, "00030": 72, "00052": 72, "00032": 72, "00028": 72, "00048": 72, "00029": 72, "00021": 72, "00035": 72, "00022": 72, "00019": 72, "82372": 72, "49048": 72, "79202": 72, "66394": 72, "75967": 72, "67113": 72, "56287": 72, "61275": 72, "56196": 72, "text": 72, "49453": 72, "59627": 72, "49988": 72, "42765": 72, "58025": 72, "43553": 72, "42761": 72, "58982": 72, "43474": 72, "21051": 72, "33659": 72, "21757": 72, "06851": 72, "10321": 72, "07092": 72, "00216": 72, "00413": 72, "00226": 72, "00146": 72, "00278": 72, "00153": 72, "00102": 72, "00195": 72, "00107": 72, "00194": 72, "00106": 72, "00099": 72, "00190": 72, "00189": 72, "00103": 72, "00097": 72, "00185": 72, "00101": 72, "00096": 72, "00182": 72, "00100": 72, "00095": 72, "00181": 72, "00071": 72, "00136": 72, "00074": 72, "rakthanmanon": 72, "campana": 72, "mueen": 72, "batista": 72, "westov": 72, "zhu": 72, "q": 72, "zakaria": 72, "2012": 72, "august": 72, "trillion": 72, "under": [72, 85], "18th": 72, "262": 72, "270": 72, "goal": [74, 84], "unseen": [74, 84], "varieti": 75, "excel": 75, "baselin": 75, "highli": 75, "often": [76, 84], "art": 76, "emmott_label": 80, "primari": 80, "focu": [80, 84], "oppos": 80, "perhap": 80, "minority_label": 80, "majority_label": 80, "sophist": 80, "publish": 80, "randomforestclassifi": 80, "four": 80, "75": 80, "quantil": 80, "manual": [81, 85], "enhanc": 82, "someth": 82, "couldn": 82, "now": 82, "miscellan": 82, "didn": 82, "document": [82, 84, 85], "17": 82, "scipi": 82, "compar": 82, "3darrai": 82, "issu": [82, 85], "enabl": 82, "bug": 82, "incorrect": 82, "_distanc": 82, "distancemeasur": 82, "subsequencedistancemeasur": 82, "subsequencemetr": 82, "affect": 82, "cimport": 82, "old": 82, "constructor": 82, "incorrectli": 82, "drop": 82, "undeprec": 82, "migrat": 82, "framework": [82, 84], "forecast": 84, "unfamiliar": 84, "chronolog": 84, "logic": 84, "solv": 84, "concern": 84, "supervis": 84, "nomin": 84, "unlabel": 84, "essenti": [84, 85], "acquir": 84, "commun": 84, "access": [84, 85], "achiev": 84, "opt": 84, "prefer": 84, "irrespect": 84, "floodmodeling1": 84, "uea": 84, "extrins": 84, "tsereg": 84, "experiment": 84, "clone": [84, 85], "screen": 84, "despit": 84, "even": 84, "tabluar_x": 84, "design": 84, "interoper": 84, "logisticregress": 84, "bad": 84, "practic": 84, "proper": 84, "reason": 84, "respons": 84, "break": 84, "reevalu": 84, "relianc": 84, "visual": [84, 85], "importance_": 84, "pickl": 84, "repr": 84, "dump": 84, "earlier": 84, "clf_": 84, "older": 84, "newer": 84, "vice": 84, "versa": 84, "secur": 84, "unpickl": 84, "There": 85, "offici": 85, "pypi": 85, "recommend": 85, "fastest": 85, "platform": 85, "built": 85, "write": 85, "due": 85, "mistak": 85, "incompat": 85, "19": 85, "conflict": 85, "strongli": 85, "virtual": 85, "venv": 85, "python3": 85, "folder": 85, "ceavet": 85, "outsid": 85, "scope": 85, "debian": 85, "apt": 85, "homebrew": 85, "brew": 85, "anaconda": 85, "miniconda": 85, "pull": 85, "process": 85, "git": 85, "com": 85, "isaksamsten": 85, "tool": 85, "studio": 85, "command": 85, "cmd": 85, "consol": 85, "distutils_use_sdk": 85, "program": 85, "x86": 85, "microsoft": 85, "buildtool": 85, "vc": 85, "auxiliari": 85, "vcvarsal": 85, "bat": 85, "x64": 85, "xcode": 85, "ubuntu": 85, "dev": 85, "txt": 85, "mode": 85, "eas": 85, "wildboar_build": 85, "architectur": 85}, "objects": {"": [[26, 0, 0, "-", "wildboar"]], "wildboar": [[3, 0, 0, "-", "annotate"], [4, 0, 0, "-", "base"], [7, 0, 0, "-", "datasets"], [15, 0, 0, "-", "distance"], [18, 0, 0, "-", "ensemble"], [25, 0, 0, "-", "explain"], [26, 1, 1, "", "iseos"], [31, 0, 0, "-", "linear_model"], [34, 0, 0, "-", "metrics"], [37, 0, 0, "-", "model_selection"], [48, 0, 0, "-", "transform"], [52, 0, 0, "-", "tree"], [57, 0, 0, "-", "utils"], [61, 0, 0, "-", "version"]], "wildboar.annotate": [[1, 0, 0, "-", "_motifs"], [2, 0, 0, "-", "_segment"], [3, 1, 1, "", "motifs"], [3, 1, 1, "", "segment"]], "wildboar.annotate._motifs": [[1, 1, 1, "", "motifs"]], "wildboar.annotate._segment": [[2, 1, 1, "", "segment"]], "wildboar.base": [[4, 2, 1, "", "BaseEstimator"], [4, 2, 1, "", "CounterfactualMixin"], [4, 2, 1, "", "ExplainerMixin"], [4, 1, 1, "", "is_counterfactual"], [4, 1, 1, "", "is_explainer"]], "wildboar.base.BaseEstimator": [[4, 3, 1, "", "get_metadata_routing"], [4, 3, 1, "", "get_params"], [4, 3, 1, "", "set_params"]], "wildboar.base.CounterfactualMixin": [[4, 3, 1, "", "score"]], "wildboar.base.ExplainerMixin": [[4, 3, 1, "", "fit_explain"], [4, 3, 1, "", "plot"]], "wildboar.datasets": [[7, 2, 1, "", "Bundle"], [7, 2, 1, "", "JSONRepository"], [7, 2, 1, "", "NpBundle"], [7, 2, 1, "", "Repository"], [5, 0, 0, "-", "_filter"], [6, 0, 0, "-", "_repository"], [7, 1, 1, "", "clear_cache"], [7, 1, 1, "", "get_bundles"], [7, 1, 1, "", "get_repository"], [7, 1, 1, "", "install_repository"], [7, 1, 1, "", "list_bundles"], [7, 1, 1, "", "list_collections"], [7, 1, 1, "", "list_datasets"], [7, 1, 1, "", "list_repositories"], [7, 1, 1, "", "load_dataset"], [7, 1, 1, "", "load_datasets"], [7, 1, 1, "", "load_gun_point"], [7, 1, 1, "", "load_synthetic_control"], [7, 1, 1, "", "load_two_lead_ecg"], [8, 0, 0, "-", "outlier"], [9, 0, 0, "-", "preprocess"], [7, 1, 1, "", "refresh_repositories"], [7, 1, 1, "", "set_cache_dir"]], "wildboar.datasets.Bundle": [[7, 3, 1, "", "get_collection"], [7, 3, 1, "", "get_filename"], [7, 3, 1, "", "list"], [7, 3, 1, "", "load"]], "wildboar.datasets.JSONRepository": [[7, 4, 1, "", "download_url"], [7, 3, 1, "", "get_bundle"], [7, 3, 1, "", "get_bundles"], [7, 4, 1, "", "name"], [7, 3, 1, "", "refresh"], [7, 4, 1, "", "version"], [7, 4, 1, "", "wildboar_requires"]], "wildboar.datasets.NpBundle": [[7, 3, 1, "", "get_collection"], [7, 3, 1, "", "get_filename"], [7, 3, 1, "", "list"], [7, 3, 1, "", "load"]], "wildboar.datasets.Repository": [[7, 4, 1, "", "download_url"], [7, 3, 1, "", "get_bundle"], [7, 3, 1, "", "get_bundles"], [7, 4, 1, "", "name"], [7, 3, 1, "", "refresh"], [7, 4, 1, "", "version"], [7, 4, 1, "", "wildboar_requires"]], "wildboar.datasets._filter": [[5, 1, 1, "", "make_dict_filter"], [5, 1, 1, "", "make_filter"], [5, 1, 1, "", "make_list_filter"], [5, 1, 1, "", "make_str_filter"]], "wildboar.datasets._repository": [[6, 2, 1, "", "Bundle"], [6, 2, 1, "", "JSONRepository"], [6, 2, 1, "", "NpBundle"], [6, 2, 1, "", "Repository"]], "wildboar.datasets._repository.Bundle": [[6, 3, 1, "", "get_collection"], [6, 3, 1, "", "get_filename"], [6, 3, 1, "", "list"], [6, 3, 1, "", "load"]], "wildboar.datasets._repository.JSONRepository": [[6, 4, 1, "", "download_url"], [6, 3, 1, "", "get_bundle"], [6, 3, 1, "", "get_bundles"], [6, 4, 1, "", "name"], [6, 3, 1, "", "refresh"], [6, 4, 1, "", "version"], [6, 4, 1, "", "wildboar_requires"]], "wildboar.datasets._repository.NpBundle": [[6, 3, 1, "", "get_collection"], [6, 3, 1, "", "get_filename"], [6, 3, 1, "", "list"], [6, 3, 1, "", "load"]], "wildboar.datasets._repository.Repository": [[6, 4, 1, "", "download_url"], [6, 3, 1, "", "get_bundle"], [6, 3, 1, "", "get_bundles"], [6, 4, 1, "", "name"], [6, 3, 1, "", "refresh"], [6, 4, 1, "", "version"], [6, 4, 1, "", "wildboar_requires"]], "wildboar.datasets.outlier": [[8, 1, 1, "", "density_outliers"], [8, 1, 1, "", "emmott_outliers"], [8, 1, 1, "", "kmeans_outliers"], [8, 1, 1, "", "majority_outliers"], [8, 1, 1, "", "minority_outliers"]], "wildboar.datasets.preprocess": [[9, 1, 1, "", "maxabs_scale"], [9, 1, 1, "", "minmax_scale"], [9, 1, 1, "", "named_preprocess"], [9, 1, 1, "", "standardize"], [9, 1, 1, "", "truncate"]], "wildboar.distance": [[15, 2, 1, "", "KMeans"], [15, 2, 1, "", "KMedoids"], [15, 2, 1, "", "KNeighborsClassifier"], [10, 0, 0, "-", "_distance"], [11, 0, 0, "-", "_matrix_profile"], [12, 0, 0, "-", "_multi_metric"], [13, 0, 0, "-", "_neighbors"], [15, 1, 1, "", "argmin_distance"], [15, 1, 1, "", "distance_profile"], [14, 0, 0, "-", "dtw"], [15, 1, 1, "", "matrix_profile"], [15, 1, 1, "", "paired_distance"], [15, 1, 1, "", "paired_subsequence_distance"], [15, 1, 1, "", "paired_subsequence_match"], [15, 1, 1, "", "pairwise_distance"], [15, 1, 1, "", "pairwise_subsequence_distance"], [15, 1, 1, "", "subsequence_match"]], "wildboar.distance.KMeans": [[15, 3, 1, "", "fit"], [15, 3, 1, "", "fit_predict"], [15, 3, 1, "", "fit_transform"], [15, 3, 1, "", "get_metadata_routing"], [15, 3, 1, "", "get_params"], [15, 3, 1, "", "predict"], [15, 3, 1, "", "set_output"], [15, 3, 1, "", "set_params"], [15, 3, 1, "", "transform"]], "wildboar.distance.KMedoids": [[15, 3, 1, "", "fit"], [15, 3, 1, "", "fit_predict"], [15, 3, 1, "", "fit_transform"], [15, 3, 1, "", "get_metadata_routing"], [15, 3, 1, "", "get_params"], [15, 3, 1, "", "predict"], [15, 3, 1, "", "set_output"], [15, 3, 1, "", "set_params"], [15, 3, 1, "", "transform"]], "wildboar.distance.KNeighborsClassifier": [[15, 3, 1, "", "fit"], [15, 3, 1, "", "get_metadata_routing"], [15, 3, 1, "", "get_params"], [15, 3, 1, "", "predict"], [15, 3, 1, "", "predict_proba"], [15, 3, 1, "", "score"], [15, 3, 1, "", "set_params"]], "wildboar.distance._distance": [[10, 1, 1, "", "argmin_distance"], [10, 1, 1, "", "distance_profile"], [10, 1, 1, "", "paired_distance"], [10, 1, 1, "", "paired_subsequence_distance"], [10, 1, 1, "", "paired_subsequence_match"], [10, 1, 1, "", "pairwise_distance"], [10, 1, 1, "", "pairwise_subsequence_distance"], [10, 1, 1, "", "subsequence_match"]], "wildboar.distance._matrix_profile": [[11, 1, 1, "", "matrix_profile"]], "wildboar.distance._neighbors": [[13, 2, 1, "", "KMeans"], [13, 2, 1, "", "KMedoids"], [13, 2, 1, "", "KNeighborsClassifier"]], "wildboar.distance._neighbors.KMeans": [[13, 3, 1, "", "fit"], [13, 3, 1, "", "fit_predict"], [13, 3, 1, "", "fit_transform"], [13, 3, 1, "", "get_metadata_routing"], [13, 3, 1, "", "get_params"], [13, 3, 1, "", "predict"], [13, 3, 1, "", "set_output"], [13, 3, 1, "", "set_params"], [13, 3, 1, "", "transform"]], "wildboar.distance._neighbors.KMedoids": [[13, 3, 1, "", "fit"], [13, 3, 1, "", "fit_predict"], [13, 3, 1, "", "fit_transform"], [13, 3, 1, "", "get_metadata_routing"], [13, 3, 1, "", "get_params"], [13, 3, 1, "", "predict"], [13, 3, 1, "", "set_output"], [13, 3, 1, "", "set_params"], [13, 3, 1, "", "transform"]], "wildboar.distance._neighbors.KNeighborsClassifier": [[13, 3, 1, "", "fit"], [13, 3, 1, "", "get_metadata_routing"], [13, 3, 1, "", "get_params"], [13, 3, 1, "", "predict"], [13, 3, 1, "", "predict_proba"], [13, 3, 1, "", "score"], [13, 3, 1, "", "set_params"]], "wildboar.distance.dtw": [[14, 1, 1, "", "ddtw_distance"], [14, 1, 1, "", "dtw_alignment"], [14, 1, 1, "", "dtw_average"], [14, 1, 1, "", "dtw_distance"], [14, 1, 1, "", "dtw_envelop"], [14, 1, 1, "", "dtw_lb_keogh"], [14, 1, 1, "", "dtw_mapping"], [14, 1, 1, "", "jeong_weight"], [14, 1, 1, "", "wddtw_distance"], [14, 1, 1, "", "wdtw_alignment"], [14, 1, 1, "", "wdtw_distance"]], "wildboar.ensemble": [[18, 2, 1, "", "BaggingClassifier"], [18, 2, 1, "", "BaggingRegressor"], [18, 2, 1, "", "BaseBagging"], [18, 2, 1, "", "ElasticEnsembleClassifier"], [18, 2, 1, "", "ExtraShapeletTreesClassifier"], [18, 2, 1, "", "ExtraShapeletTreesRegressor"], [18, 2, 1, "", "IntervalForestClassifier"], [18, 2, 1, "", "IntervalForestRegressor"], [18, 2, 1, "", "IsolationShapeletForest"], [18, 2, 1, "", "PivotForestClassifier"], [18, 2, 1, "", "ProximityForestClassifier"], [18, 2, 1, "", "RocketForestClassifier"], [18, 2, 1, "", "RocketForestRegressor"], [18, 2, 1, "", "ShapeletForestClassifier"], [18, 2, 1, "", "ShapeletForestEmbedding"], [18, 2, 1, "", "ShapeletForestRegressor"], [16, 0, 0, "-", "_elastic"], [17, 0, 0, "-", "_ensemble"]], "wildboar.ensemble.BaggingClassifier": [[18, 4, 1, "", "base_estimator_"], [18, 3, 1, "", "decision_function"], [18, 4, 1, "", "estimators_samples_"], [18, 3, 1, "", "fit"], [18, 3, 1, "", "get_metadata_routing"], [18, 3, 1, "", "get_params"], [18, 3, 1, "", "predict"], [18, 3, 1, "", "predict_log_proba"], [18, 3, 1, "", "predict_proba"], [18, 3, 1, "", "score"], [18, 3, 1, "", "set_params"]], "wildboar.ensemble.BaggingRegressor": [[18, 4, 1, "", "base_estimator_"], [18, 4, 1, "", "estimators_samples_"], [18, 3, 1, "", "fit"], [18, 3, 1, "", "get_metadata_routing"], [18, 3, 1, "", "get_params"], [18, 3, 1, "", "predict"], [18, 3, 1, "", "score"], [18, 3, 1, "", "set_params"]], "wildboar.ensemble.BaseBagging": [[18, 4, 1, "", "base_estimator_"], [18, 4, 1, "", "estimators_samples_"], [18, 3, 1, "", "fit"], [18, 3, 1, "", "get_metadata_routing"], [18, 3, 1, "", "get_params"], [18, 3, 1, "", "set_params"]], "wildboar.ensemble.ElasticEnsembleClassifier": [[18, 3, 1, "", "fit"], [18, 3, 1, "", "get_metadata_routing"], [18, 3, 1, "", "get_params"], [18, 3, 1, "", "predict"], [18, 3, 1, "", "predict_proba"], [18, 3, 1, "", "score"], [18, 3, 1, "", "set_params"]], "wildboar.ensemble.ExtraShapeletTreesClassifier": [[18, 4, 1, "", "base_estimator_"], [18, 3, 1, "", "decision_function"], [18, 4, 1, "", "estimators_samples_"], [18, 3, 1, "", "fit"], [18, 3, 1, "", "get_metadata_routing"], [18, 3, 1, "", "get_params"], [18, 3, 1, "", "predict"], [18, 3, 1, "", "predict_log_proba"], [18, 3, 1, "", "predict_proba"], [18, 3, 1, "", "score"], [18, 3, 1, "", "set_params"]], "wildboar.ensemble.ExtraShapeletTreesRegressor": [[18, 4, 1, "", "base_estimator_"], [18, 4, 1, "", "estimators_samples_"], [18, 3, 1, "", "fit"], [18, 3, 1, "", "get_metadata_routing"], [18, 3, 1, "", "get_params"], [18, 3, 1, "", "predict"], [18, 3, 1, "", "score"], [18, 3, 1, "", "set_params"]], "wildboar.ensemble.IntervalForestClassifier": [[18, 4, 1, "", "base_estimator_"], [18, 3, 1, "", "decision_function"], [18, 4, 1, "", "estimators_samples_"], [18, 3, 1, "", "fit"], [18, 3, 1, "", "get_metadata_routing"], [18, 3, 1, "", "get_params"], [18, 3, 1, "", "predict"], [18, 3, 1, "", "predict_log_proba"], [18, 3, 1, "", "predict_proba"], [18, 3, 1, "", "score"], [18, 3, 1, "", "set_params"]], "wildboar.ensemble.IntervalForestRegressor": [[18, 4, 1, "", "base_estimator_"], [18, 4, 1, "", "estimators_samples_"], [18, 3, 1, "", "fit"], [18, 3, 1, "", "get_metadata_routing"], [18, 3, 1, "", "get_params"], [18, 3, 1, "", "predict"], [18, 3, 1, "", "score"], [18, 3, 1, "", "set_params"]], "wildboar.ensemble.IsolationShapeletForest": [[18, 4, 1, "", "base_estimator_"], [18, 4, 1, "", "estimators_samples_"], [18, 3, 1, "", "fit"], [18, 3, 1, "", "fit_predict"], [18, 3, 1, "", "get_metadata_routing"], [18, 3, 1, "", "get_params"], [18, 3, 1, "", "set_params"]], "wildboar.ensemble.PivotForestClassifier": [[18, 4, 1, "", "base_estimator_"], [18, 3, 1, "", "decision_function"], [18, 4, 1, "", "estimators_samples_"], [18, 3, 1, "", "fit"], [18, 3, 1, "", "get_metadata_routing"], [18, 3, 1, "", "get_params"], [18, 3, 1, "", "predict"], [18, 3, 1, "", "predict_log_proba"], [18, 3, 1, "", "predict_proba"], [18, 3, 1, "", "score"], [18, 3, 1, "", "set_params"]], "wildboar.ensemble.ProximityForestClassifier": [[18, 4, 1, "", "base_estimator_"], [18, 3, 1, "", "decision_function"], [18, 4, 1, "", "estimators_samples_"], [18, 3, 1, "", "fit"], [18, 3, 1, "", "get_metadata_routing"], [18, 3, 1, "", "get_params"], [18, 3, 1, "", "predict"], [18, 3, 1, "", "predict_log_proba"], [18, 3, 1, "", "predict_proba"], [18, 3, 1, "", "score"], [18, 3, 1, "", "set_params"]], "wildboar.ensemble.RocketForestClassifier": [[18, 4, 1, "", "base_estimator_"], [18, 3, 1, "", "decision_function"], [18, 4, 1, "", "estimators_samples_"], [18, 3, 1, "", "fit"], [18, 3, 1, "", "get_metadata_routing"], [18, 3, 1, "", "get_params"], [18, 3, 1, "", "predict"], [18, 3, 1, "", "predict_log_proba"], [18, 3, 1, "", "predict_proba"], [18, 3, 1, "", "score"], [18, 3, 1, "", "set_params"]], "wildboar.ensemble.RocketForestRegressor": [[18, 4, 1, "", "base_estimator_"], [18, 4, 1, "", "estimators_samples_"], [18, 3, 1, "", "fit"], [18, 3, 1, "", "get_metadata_routing"], [18, 3, 1, "", "get_params"], [18, 3, 1, "", "predict"], [18, 3, 1, "", "score"], [18, 3, 1, "", "set_params"]], "wildboar.ensemble.ShapeletForestClassifier": [[18, 4, 1, "", "base_estimator_"], [18, 3, 1, "", "decision_function"], [18, 4, 1, "", "estimators_samples_"], [18, 3, 1, "", "fit"], [18, 3, 1, "", "get_metadata_routing"], [18, 3, 1, "", "get_params"], [18, 3, 1, "", "predict"], [18, 3, 1, "", "predict_log_proba"], [18, 3, 1, "", "predict_proba"], [18, 3, 1, "", "score"], [18, 3, 1, "", "set_params"]], "wildboar.ensemble.ShapeletForestEmbedding": [[18, 4, 1, "", "base_estimator_"], [18, 4, 1, "", "estimators_samples_"], [18, 3, 1, "", "fit"], [18, 3, 1, "", "get_metadata_routing"], [18, 3, 1, "", "get_params"], [18, 3, 1, "", "predict"], [18, 3, 1, "", "score"], [18, 3, 1, "", "set_params"]], "wildboar.ensemble.ShapeletForestRegressor": [[18, 4, 1, "", "base_estimator_"], [18, 4, 1, "", "estimators_samples_"], [18, 3, 1, "", "fit"], [18, 3, 1, "", "get_metadata_routing"], [18, 3, 1, "", "get_params"], [18, 3, 1, "", "predict"], [18, 3, 1, "", "score"], [18, 3, 1, "", "set_params"]], "wildboar.ensemble._elastic": [[16, 2, 1, "", "ElasticEnsembleClassifier"]], "wildboar.ensemble._elastic.ElasticEnsembleClassifier": [[16, 3, 1, "", "fit"], [16, 3, 1, "", "get_metadata_routing"], [16, 3, 1, "", "get_params"], [16, 3, 1, "", "predict"], [16, 3, 1, "", "predict_proba"], [16, 3, 1, "", "score"], [16, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble": [[17, 2, 1, "", "BaggingClassifier"], [17, 2, 1, "", "BaggingRegressor"], [17, 2, 1, "", "BaseBagging"], [17, 2, 1, "", "BaseForestClassifier"], [17, 2, 1, "", "BaseForestRegressor"], [17, 2, 1, "", "BaseShapeletForestClassifier"], [17, 2, 1, "", "BaseShapeletForestRegressor"], [17, 2, 1, "", "ExtraShapeletTreesClassifier"], [17, 2, 1, "", "ExtraShapeletTreesRegressor"], [17, 2, 1, "", "ForestMixin"], [17, 2, 1, "", "IntervalForestClassifier"], [17, 2, 1, "", "IntervalForestRegressor"], [17, 2, 1, "", "IsolationShapeletForest"], [17, 2, 1, "", "PivotForestClassifier"], [17, 2, 1, "", "ProximityForestClassifier"], [17, 2, 1, "", "RocketForestClassifier"], [17, 2, 1, "", "RocketForestRegressor"], [17, 2, 1, "", "ShapeletForestClassifier"], [17, 2, 1, "", "ShapeletForestEmbedding"], [17, 2, 1, "", "ShapeletForestRegressor"]], "wildboar.ensemble._ensemble.BaggingClassifier": [[17, 4, 1, "", "base_estimator_"], [17, 3, 1, "", "decision_function"], [17, 4, 1, "", "estimators_samples_"], [17, 3, 1, "", "fit"], [17, 3, 1, "", "get_metadata_routing"], [17, 3, 1, "", "get_params"], [17, 3, 1, "", "predict"], [17, 3, 1, "", "predict_log_proba"], [17, 3, 1, "", "predict_proba"], [17, 3, 1, "", "score"], [17, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.BaggingRegressor": [[17, 4, 1, "", "base_estimator_"], [17, 4, 1, "", "estimators_samples_"], [17, 3, 1, "", "fit"], [17, 3, 1, "", "get_metadata_routing"], [17, 3, 1, "", "get_params"], [17, 3, 1, "", "predict"], [17, 3, 1, "", "score"], [17, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.BaseBagging": [[17, 4, 1, "", "base_estimator_"], [17, 4, 1, "", "estimators_samples_"], [17, 3, 1, "", "fit"], [17, 3, 1, "", "get_metadata_routing"], [17, 3, 1, "", "get_params"], [17, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.BaseForestClassifier": [[17, 4, 1, "", "base_estimator_"], [17, 3, 1, "", "decision_function"], [17, 4, 1, "", "estimators_samples_"], [17, 3, 1, "", "fit"], [17, 3, 1, "", "get_metadata_routing"], [17, 3, 1, "", "get_params"], [17, 3, 1, "", "predict"], [17, 3, 1, "", "predict_log_proba"], [17, 3, 1, "", "predict_proba"], [17, 3, 1, "", "score"], [17, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.BaseForestRegressor": [[17, 4, 1, "", "base_estimator_"], [17, 4, 1, "", "estimators_samples_"], [17, 3, 1, "", "fit"], [17, 3, 1, "", "get_metadata_routing"], [17, 3, 1, "", "get_params"], [17, 3, 1, "", "predict"], [17, 3, 1, "", "score"], [17, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.BaseShapeletForestClassifier": [[17, 4, 1, "", "base_estimator_"], [17, 3, 1, "", "decision_function"], [17, 4, 1, "", "estimators_samples_"], [17, 3, 1, "", "fit"], [17, 3, 1, "", "get_metadata_routing"], [17, 3, 1, "", "get_params"], [17, 3, 1, "", "predict"], [17, 3, 1, "", "predict_log_proba"], [17, 3, 1, "", "predict_proba"], [17, 3, 1, "", "score"], [17, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.BaseShapeletForestRegressor": [[17, 4, 1, "", "base_estimator_"], [17, 4, 1, "", "estimators_samples_"], [17, 3, 1, "", "fit"], [17, 3, 1, "", "get_metadata_routing"], [17, 3, 1, "", "get_params"], [17, 3, 1, "", "predict"], [17, 3, 1, "", "score"], [17, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier": [[17, 4, 1, "", "base_estimator_"], [17, 3, 1, "", "decision_function"], [17, 4, 1, "", "estimators_samples_"], [17, 3, 1, "", "fit"], [17, 3, 1, "", "get_metadata_routing"], [17, 3, 1, "", "get_params"], [17, 3, 1, "", "predict"], [17, 3, 1, "", "predict_log_proba"], [17, 3, 1, "", "predict_proba"], [17, 3, 1, "", "score"], [17, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.ExtraShapeletTreesRegressor": [[17, 4, 1, "", "base_estimator_"], [17, 4, 1, "", "estimators_samples_"], [17, 3, 1, "", "fit"], [17, 3, 1, "", "get_metadata_routing"], [17, 3, 1, "", "get_params"], [17, 3, 1, "", "predict"], [17, 3, 1, "", "score"], [17, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.IntervalForestClassifier": [[17, 4, 1, "", "base_estimator_"], [17, 3, 1, "", "decision_function"], [17, 4, 1, "", "estimators_samples_"], [17, 3, 1, "", "fit"], [17, 3, 1, "", "get_metadata_routing"], [17, 3, 1, "", "get_params"], [17, 3, 1, "", "predict"], [17, 3, 1, "", "predict_log_proba"], [17, 3, 1, "", "predict_proba"], [17, 3, 1, "", "score"], [17, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.IntervalForestRegressor": [[17, 4, 1, "", "base_estimator_"], [17, 4, 1, "", "estimators_samples_"], [17, 3, 1, "", "fit"], [17, 3, 1, "", "get_metadata_routing"], [17, 3, 1, "", "get_params"], [17, 3, 1, "", "predict"], [17, 3, 1, "", "score"], [17, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.IsolationShapeletForest": [[17, 4, 1, "", "base_estimator_"], [17, 4, 1, "", "estimators_samples_"], [17, 3, 1, "", "fit"], [17, 3, 1, "", "fit_predict"], [17, 3, 1, "", "get_metadata_routing"], [17, 3, 1, "", "get_params"], [17, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.PivotForestClassifier": [[17, 4, 1, "", "base_estimator_"], [17, 3, 1, "", "decision_function"], [17, 4, 1, "", "estimators_samples_"], [17, 3, 1, "", "fit"], [17, 3, 1, "", "get_metadata_routing"], [17, 3, 1, "", "get_params"], [17, 3, 1, "", "predict"], [17, 3, 1, "", "predict_log_proba"], [17, 3, 1, "", "predict_proba"], [17, 3, 1, "", "score"], [17, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.ProximityForestClassifier": [[17, 4, 1, "", "base_estimator_"], [17, 3, 1, "", "decision_function"], [17, 4, 1, "", "estimators_samples_"], [17, 3, 1, "", "fit"], [17, 3, 1, "", "get_metadata_routing"], [17, 3, 1, "", "get_params"], [17, 3, 1, "", "predict"], [17, 3, 1, "", "predict_log_proba"], [17, 3, 1, "", "predict_proba"], [17, 3, 1, "", "score"], [17, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.RocketForestClassifier": [[17, 4, 1, "", "base_estimator_"], [17, 3, 1, "", "decision_function"], [17, 4, 1, "", "estimators_samples_"], [17, 3, 1, "", "fit"], [17, 3, 1, "", "get_metadata_routing"], [17, 3, 1, "", "get_params"], [17, 3, 1, "", "predict"], [17, 3, 1, "", "predict_log_proba"], [17, 3, 1, "", "predict_proba"], [17, 3, 1, "", "score"], [17, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.RocketForestRegressor": [[17, 4, 1, "", "base_estimator_"], [17, 4, 1, "", "estimators_samples_"], [17, 3, 1, "", "fit"], [17, 3, 1, "", "get_metadata_routing"], [17, 3, 1, "", "get_params"], [17, 3, 1, "", "predict"], [17, 3, 1, "", "score"], [17, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.ShapeletForestClassifier": [[17, 4, 1, "", "base_estimator_"], [17, 3, 1, "", "decision_function"], [17, 4, 1, "", "estimators_samples_"], [17, 3, 1, "", "fit"], [17, 3, 1, "", "get_metadata_routing"], [17, 3, 1, "", "get_params"], [17, 3, 1, "", "predict"], [17, 3, 1, "", "predict_log_proba"], [17, 3, 1, "", "predict_proba"], [17, 3, 1, "", "score"], [17, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.ShapeletForestEmbedding": [[17, 4, 1, "", "base_estimator_"], [17, 4, 1, "", "estimators_samples_"], [17, 3, 1, "", "fit"], [17, 3, 1, "", "get_metadata_routing"], [17, 3, 1, "", "get_params"], [17, 3, 1, "", "predict"], [17, 3, 1, "", "score"], [17, 3, 1, "", "set_params"]], "wildboar.ensemble._ensemble.ShapeletForestRegressor": [[17, 4, 1, "", "base_estimator_"], [17, 4, 1, "", "estimators_samples_"], [17, 3, 1, "", "fit"], [17, 3, 1, "", "get_metadata_routing"], [17, 3, 1, "", "get_params"], [17, 3, 1, "", "predict"], [17, 3, 1, "", "score"], [17, 3, 1, "", "set_params"]], "wildboar.explain": [[25, 2, 1, "", "AmplitudeImportance"], [25, 2, 1, "", "IntervalImportance"], [25, 2, 1, "", "ShapeletImportance"], [19, 0, 0, "-", "_importance"], [24, 0, 0, "-", "counterfactual"], [25, 1, 1, "", "plot_importances"]], "wildboar.explain.AmplitudeImportance": [[25, 3, 1, "", "fit_explain"], [25, 3, 1, "", "get_metadata_routing"], [25, 3, 1, "", "get_params"], [25, 3, 1, "", "plot"], [25, 3, 1, "", "set_params"]], "wildboar.explain.IntervalImportance": [[25, 3, 1, "", "fit_explain"], [25, 3, 1, "", "get_metadata_routing"], [25, 3, 1, "", "get_params"], [25, 3, 1, "", "plot"], [25, 3, 1, "", "set_params"]], "wildboar.explain.ShapeletImportance": [[25, 3, 1, "", "fit_explain"], [25, 3, 1, "", "get_metadata_routing"], [25, 3, 1, "", "get_params"], [25, 3, 1, "", "plot"], [25, 3, 1, "", "set_params"]], "wildboar.explain._importance": [[19, 2, 1, "", "AmplitudeImportance"], [19, 2, 1, "", "IntervalImportance"], [19, 2, 1, "", "PermuteImportance"], [19, 2, 1, "", "ShapeletImportance"], [19, 1, 1, "", "plot_importances"]], "wildboar.explain._importance.AmplitudeImportance": [[19, 3, 1, "", "fit_explain"], [19, 3, 1, "", "get_metadata_routing"], [19, 3, 1, "", "get_params"], [19, 3, 1, "", "plot"], [19, 3, 1, "", "set_params"]], "wildboar.explain._importance.IntervalImportance": [[19, 3, 1, "", "fit_explain"], [19, 3, 1, "", "get_metadata_routing"], [19, 3, 1, "", "get_params"], [19, 3, 1, "", "plot"], [19, 3, 1, "", "set_params"]], "wildboar.explain._importance.PermuteImportance": [[19, 3, 1, "", "get_metadata_routing"], [19, 3, 1, "", "get_params"], [19, 3, 1, "", "set_params"]], "wildboar.explain._importance.ShapeletImportance": [[19, 3, 1, "", "fit_explain"], [19, 3, 1, "", "get_metadata_routing"], [19, 3, 1, "", "get_params"], [19, 3, 1, "", "plot"], [19, 3, 1, "", "set_params"]], "wildboar.explain.counterfactual": [[24, 2, 1, "", "KNeighborsCounterfactual"], [24, 2, 1, "", "PrototypeCounterfactual"], [24, 2, 1, "", "ShapeletForestCounterfactual"], [20, 0, 0, "-", "_helper"], [21, 0, 0, "-", "_nn"], [22, 0, 0, "-", "_proto"], [23, 0, 0, "-", "_sf"], [24, 1, 1, "", "counterfactuals"], [24, 1, 1, "", "proximity"]], "wildboar.explain.counterfactual.KNeighborsCounterfactual": [[24, 3, 1, "", "fit_explain"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "plot"], [24, 3, 1, "", "score"], [24, 3, 1, "", "set_params"]], "wildboar.explain.counterfactual.PrototypeCounterfactual": [[24, 3, 1, "", "fit_explain"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "plot"], [24, 3, 1, "", "score"], [24, 3, 1, "", "set_params"]], "wildboar.explain.counterfactual.ShapeletForestCounterfactual": [[24, 3, 1, "", "fit_explain"], [24, 3, 1, "", "get_metadata_routing"], [24, 3, 1, "", "get_params"], [24, 3, 1, "", "plot"], [24, 3, 1, "", "score"], [24, 3, 1, "", "set_params"]], "wildboar.explain.counterfactual._helper": [[20, 1, 1, "", "counterfactuals"]], "wildboar.explain.counterfactual._nn": [[21, 2, 1, "", "KNeighborsCounterfactual"]], "wildboar.explain.counterfactual._nn.KNeighborsCounterfactual": [[21, 3, 1, "", "fit_explain"], [21, 3, 1, "", "get_metadata_routing"], [21, 3, 1, "", "get_params"], [21, 3, 1, "", "plot"], [21, 3, 1, "", "score"], [21, 3, 1, "", "set_params"]], "wildboar.explain.counterfactual._proto": [[22, 2, 1, "", "DynamicTimeWarpTransform"], [22, 2, 1, "", "EuclideanTransform"], [22, 2, 1, "", "KNearestPrototypeSampler"], [22, 2, 1, "", "KNearestShapeletPrototypeSampler"], [22, 2, 1, "", "MetricTransform"], [22, 2, 1, "", "PredictEvaluator"], [22, 2, 1, "", "ProbabilityEvaluator"], [22, 2, 1, "", "PrototypeCounterfactual"], [22, 2, 1, "", "PrototypeSampler"], [22, 2, 1, "", "ShapeletPrototypeSampler"], [22, 2, 1, "", "TargetEvaluator"], [22, 2, 1, "", "UniformPrototypeSampler"], [22, 2, 1, "", "WeightedDynamicTimeWarpTransform"]], "wildboar.explain.counterfactual._proto.DynamicTimeWarpTransform": [[22, 3, 1, "", "move"]], "wildboar.explain.counterfactual._proto.EuclideanTransform": [[22, 3, 1, "", "move"]], "wildboar.explain.counterfactual._proto.KNearestPrototypeSampler": [[22, 3, 1, "", "move"], [22, 3, 1, "", "nearest_index"], [22, 3, 1, "", "sample"], [22, 3, 1, "", "sample_move"]], "wildboar.explain.counterfactual._proto.KNearestShapeletPrototypeSampler": [[22, 3, 1, "", "move"], [22, 3, 1, "", "sample"], [22, 3, 1, "", "sample_move"]], "wildboar.explain.counterfactual._proto.MetricTransform": [[22, 3, 1, "", "move"]], "wildboar.explain.counterfactual._proto.PredictEvaluator": [[22, 3, 1, "", "is_counterfactual"]], "wildboar.explain.counterfactual._proto.ProbabilityEvaluator": [[22, 3, 1, "", "is_counterfactual"]], "wildboar.explain.counterfactual._proto.PrototypeCounterfactual": [[22, 3, 1, "", "fit_explain"], [22, 3, 1, "", "get_metadata_routing"], [22, 3, 1, "", "get_params"], [22, 3, 1, "", "plot"], [22, 3, 1, "", "score"], [22, 3, 1, "", "set_params"]], "wildboar.explain.counterfactual._proto.PrototypeSampler": [[22, 3, 1, "", "move"], [22, 3, 1, "", "sample"], [22, 3, 1, "", "sample_move"]], "wildboar.explain.counterfactual._proto.ShapeletPrototypeSampler": [[22, 3, 1, "", "move"], [22, 3, 1, "", "sample"], [22, 3, 1, "", "sample_move"], [22, 3, 1, "", "sample_shapelet"]], "wildboar.explain.counterfactual._proto.TargetEvaluator": [[22, 3, 1, "", "is_counterfactual"]], "wildboar.explain.counterfactual._proto.UniformPrototypeSampler": [[22, 3, 1, "", "move"], [22, 3, 1, "", "sample"], [22, 3, 1, "", "sample_move"]], "wildboar.explain.counterfactual._proto.WeightedDynamicTimeWarpTransform": [[22, 3, 1, "", "move"]], "wildboar.explain.counterfactual._sf": [[23, 2, 1, "", "ShapeletForestCounterfactual"]], "wildboar.explain.counterfactual._sf.ShapeletForestCounterfactual": [[23, 3, 1, "", "fit_explain"], [23, 3, 1, "", "get_metadata_routing"], [23, 3, 1, "", "get_params"], [23, 3, 1, "", "plot"], [23, 3, 1, "", "score"], [23, 3, 1, "", "set_params"]], "wildboar.linear_model": [[31, 2, 1, "", "DilatedShapeletClassifier"], [31, 2, 1, "", "HydraClassifier"], [31, 2, 1, "", "RandomShapeletClassifier"], [31, 2, 1, "", "RandomShapeletRegressor"], [31, 2, 1, "", "RocketClassifier"], [31, 2, 1, "", "RocketRegressor"], [27, 0, 0, "-", "_hydra"], [28, 0, 0, "-", "_rocket"], [29, 0, 0, "-", "_shapelet"], [30, 0, 0, "-", "_transform"]], "wildboar.linear_model.DilatedShapeletClassifier": [[31, 3, 1, "", "get_metadata_routing"], [31, 3, 1, "", "get_params"], [31, 3, 1, "", "score"], [31, 3, 1, "", "set_params"]], "wildboar.linear_model.HydraClassifier": [[31, 3, 1, "", "get_metadata_routing"], [31, 3, 1, "", "get_params"], [31, 3, 1, "", "score"], [31, 3, 1, "", "set_params"]], "wildboar.linear_model.RandomShapeletClassifier": [[31, 3, 1, "", "get_metadata_routing"], [31, 3, 1, "", "get_params"], [31, 3, 1, "", "score"], [31, 3, 1, "", "set_params"]], "wildboar.linear_model.RandomShapeletRegressor": [[31, 3, 1, "", "get_metadata_routing"], [31, 3, 1, "", "get_params"], [31, 3, 1, "", "score"], [31, 3, 1, "", "set_params"]], "wildboar.linear_model.RocketClassifier": [[31, 3, 1, "", "get_metadata_routing"], [31, 3, 1, "", "get_params"], [31, 3, 1, "", "score"], [31, 3, 1, "", "set_params"]], "wildboar.linear_model.RocketRegressor": [[31, 3, 1, "", "get_metadata_routing"], [31, 3, 1, "", "get_params"], [31, 3, 1, "", "score"], [31, 3, 1, "", "set_params"]], "wildboar.linear_model._hydra": [[27, 2, 1, "", "HydraClassifier"]], "wildboar.linear_model._hydra.HydraClassifier": [[27, 3, 1, "", "get_metadata_routing"], [27, 3, 1, "", "get_params"], [27, 3, 1, "", "score"], [27, 3, 1, "", "set_params"]], "wildboar.linear_model._rocket": [[28, 2, 1, "", "RocketClassifier"], [28, 2, 1, "", "RocketRegressor"]], "wildboar.linear_model._rocket.RocketClassifier": [[28, 3, 1, "", "get_metadata_routing"], [28, 3, 1, "", "get_params"], [28, 3, 1, "", "score"], [28, 3, 1, "", "set_params"]], "wildboar.linear_model._rocket.RocketRegressor": [[28, 3, 1, "", "get_metadata_routing"], [28, 3, 1, "", "get_params"], [28, 3, 1, "", "score"], [28, 3, 1, "", "set_params"]], "wildboar.linear_model._shapelet": [[29, 2, 1, "", "DilatedShapeletClassifier"], [29, 2, 1, "", "RandomShapeletClassifier"], [29, 2, 1, "", "RandomShapeletRegressor"]], "wildboar.linear_model._shapelet.DilatedShapeletClassifier": [[29, 3, 1, "", "get_metadata_routing"], [29, 3, 1, "", "get_params"], [29, 3, 1, "", "score"], [29, 3, 1, "", "set_params"]], "wildboar.linear_model._shapelet.RandomShapeletClassifier": [[29, 3, 1, "", "get_metadata_routing"], [29, 3, 1, "", "get_params"], [29, 3, 1, "", "score"], [29, 3, 1, "", "set_params"]], "wildboar.linear_model._shapelet.RandomShapeletRegressor": [[29, 3, 1, "", "get_metadata_routing"], [29, 3, 1, "", "get_params"], [29, 3, 1, "", "score"], [29, 3, 1, "", "set_params"]], "wildboar.linear_model._transform": [[30, 2, 1, "", "BaseTransformClassifier"], [30, 2, 1, "", "BaseTransformEstimator"], [30, 2, 1, "", "BaseTransformRegressor"], [30, 2, 1, "", "TransformRidgeCV"], [30, 2, 1, "", "TransformRidgeClassifierCV"]], "wildboar.linear_model._transform.BaseTransformClassifier": [[30, 3, 1, "", "get_metadata_routing"], [30, 3, 1, "", "get_params"], [30, 3, 1, "", "score"], [30, 3, 1, "", "set_params"]], "wildboar.linear_model._transform.BaseTransformEstimator": [[30, 3, 1, "", "get_metadata_routing"], [30, 3, 1, "", "get_params"], [30, 3, 1, "", "set_params"]], "wildboar.linear_model._transform.BaseTransformRegressor": [[30, 3, 1, "", "get_metadata_routing"], [30, 3, 1, "", "get_params"], [30, 3, 1, "", "score"], [30, 3, 1, "", "set_params"]], "wildboar.linear_model._transform.TransformRidgeCV": [[30, 3, 1, "", "get_metadata_routing"], [30, 3, 1, "", "get_params"], [30, 3, 1, "", "score"], [30, 3, 1, "", "set_params"]], "wildboar.linear_model._transform.TransformRidgeClassifierCV": [[30, 3, 1, "", "get_metadata_routing"], [30, 3, 1, "", "get_params"], [30, 3, 1, "", "score"], [30, 3, 1, "", "set_params"]], "wildboar.metrics": [[32, 0, 0, "-", "_cluster"], [33, 0, 0, "-", "_counterfactual"], [34, 1, 1, "", "compactness_score"], [34, 1, 1, "", "plausability_score"], [34, 1, 1, "", "proximity_score"], [34, 1, 1, "", "redudancy_score"], [34, 1, 1, "", "relative_proximity_score"], [34, 1, 1, "", "silhouette_samples"], [34, 1, 1, "", "silhouette_score"], [34, 1, 1, "", "validity_score"]], "wildboar.metrics._cluster": [[32, 1, 1, "", "silhouette_samples"], [32, 1, 1, "", "silhouette_score"]], "wildboar.metrics._counterfactual": [[33, 1, 1, "", "compactness_score"], [33, 1, 1, "", "plausability_score"], [33, 1, 1, "", "proximity_score"], [33, 1, 1, "", "redudancy_score"], [33, 1, 1, "", "relative_proximity_score"], [33, 1, 1, "", "validity_score"]], "wildboar.model_selection": [[37, 2, 1, "", "RepeatedOutlierSplit"], [35, 0, 0, "-", "_cv"], [36, 0, 0, "-", "_outlier"], [37, 1, 1, "", "outlier_train_test_split"]], "wildboar.model_selection.RepeatedOutlierSplit": [[37, 3, 1, "", "get_n_splits"], [37, 3, 1, "", "split"]], "wildboar.model_selection._cv": [[35, 2, 1, "", "RepeatedOutlierSplit"]], "wildboar.model_selection._cv.RepeatedOutlierSplit": [[35, 3, 1, "", "get_n_splits"], [35, 3, 1, "", "split"]], "wildboar.model_selection._outlier": [[36, 1, 1, "", "outlier_train_test_split"]], "wildboar.transform": [[48, 2, 1, "", "DiffTransform"], [48, 2, 1, "", "DilatedShapeletTransform"], [48, 2, 1, "", "FeatureTransform"], [48, 2, 1, "", "HydraTransform"], [48, 2, 1, "", "IntervalTransform"], [48, 2, 1, "", "MatrixProfileTransform"], [48, 2, 1, "", "PAA"], [48, 2, 1, "", "PivotTransform"], [48, 2, 1, "", "ProximityTransform"], [48, 2, 1, "", "RandomShapeletTransform"], [48, 2, 1, "", "RocketTransform"], [48, 2, 1, "", "SAX"], [38, 0, 0, "-", "_base"], [39, 0, 0, "-", "_conv"], [40, 0, 0, "-", "_diff"], [41, 0, 0, "-", "_hydra"], [42, 0, 0, "-", "_interval"], [43, 0, 0, "-", "_matrix_profile"], [44, 0, 0, "-", "_pivot"], [45, 0, 0, "-", "_rocket"], [46, 0, 0, "-", "_sax"], [47, 0, 0, "-", "_shapelet"], [48, 1, 1, "", "convolve"], [48, 1, 1, "", "piecewice_aggregate_approximation"], [48, 1, 1, "", "symbolic_aggregate_approximation"]], "wildboar.transform.DiffTransform": [[48, 3, 1, "", "fit_transform"], [48, 3, 1, "", "get_metadata_routing"], [48, 3, 1, "", "get_params"], [48, 3, 1, "", "set_output"], [48, 3, 1, "", "set_params"]], "wildboar.transform.DilatedShapeletTransform": [[48, 3, 1, "", "fit"], [48, 3, 1, "", "fit_transform"], [48, 3, 1, "", "get_metadata_routing"], [48, 3, 1, "", "get_params"], [48, 3, 1, "", "set_output"], [48, 3, 1, "", "set_params"], [48, 3, 1, "", "transform"]], "wildboar.transform.FeatureTransform": [[48, 3, 1, "", "fit"], [48, 3, 1, "", "fit_transform"], [48, 3, 1, "", "get_metadata_routing"], [48, 3, 1, "", "get_params"], [48, 3, 1, "", "set_output"], [48, 3, 1, "", "set_params"], [48, 3, 1, "", "transform"]], "wildboar.transform.HydraTransform": [[48, 3, 1, "", "fit"], [48, 3, 1, "", "fit_transform"], [48, 3, 1, "", "get_metadata_routing"], [48, 3, 1, "", "get_params"], [48, 3, 1, "", "set_output"], [48, 3, 1, "", "set_params"], [48, 3, 1, "", "transform"]], "wildboar.transform.IntervalTransform": [[48, 3, 1, "", "fit"], [48, 3, 1, "", "fit_transform"], [48, 3, 1, "", "get_metadata_routing"], [48, 3, 1, "", "get_params"], [48, 3, 1, "", "set_output"], [48, 3, 1, "", "set_params"], [48, 3, 1, "", "transform"]], "wildboar.transform.MatrixProfileTransform": [[48, 3, 1, "", "fit"], [48, 3, 1, "", "fit_transform"], [48, 3, 1, "", "get_metadata_routing"], [48, 3, 1, "", "get_params"], [48, 3, 1, "", "set_output"], [48, 3, 1, "", "set_params"], [48, 3, 1, "", "transform"]], "wildboar.transform.PAA": [[48, 3, 1, "", "fit_transform"], [48, 3, 1, "", "get_metadata_routing"], [48, 3, 1, "", "get_params"], [48, 3, 1, "", "set_output"], [48, 3, 1, "", "set_params"]], "wildboar.transform.PivotTransform": [[48, 3, 1, "", "fit"], [48, 3, 1, "", "fit_transform"], [48, 3, 1, "", "get_metadata_routing"], [48, 3, 1, "", "get_params"], [48, 3, 1, "", "set_output"], [48, 3, 1, "", "set_params"], [48, 3, 1, "", "transform"]], "wildboar.transform.ProximityTransform": [[48, 3, 1, "", "fit_transform"], [48, 3, 1, "", "get_metadata_routing"], [48, 3, 1, "", "get_params"], [48, 3, 1, "", "set_output"], [48, 3, 1, "", "set_params"]], "wildboar.transform.RandomShapeletTransform": [[48, 3, 1, "", "fit"], [48, 3, 1, "", "fit_transform"], [48, 3, 1, "", "get_metadata_routing"], [48, 3, 1, "", "get_params"], [48, 3, 1, "", "set_output"], [48, 3, 1, "", "set_params"], [48, 3, 1, "", "transform"]], "wildboar.transform.RocketTransform": [[48, 3, 1, "", "fit"], [48, 3, 1, "", "fit_transform"], [48, 3, 1, "", "get_metadata_routing"], [48, 3, 1, "", "get_params"], [48, 3, 1, "", "set_output"], [48, 3, 1, "", "set_params"], [48, 3, 1, "", "transform"]], "wildboar.transform.SAX": [[48, 3, 1, "", "fit_transform"], [48, 3, 1, "", "get_metadata_routing"], [48, 3, 1, "", "get_params"], [48, 3, 1, "", "set_output"], [48, 3, 1, "", "set_params"]], "wildboar.transform._base": [[38, 2, 1, "", "BaseAttributeTransform"]], "wildboar.transform._base.BaseAttributeTransform": [[38, 3, 1, "", "fit"], [38, 3, 1, "", "fit_transform"], [38, 3, 1, "", "get_metadata_routing"], [38, 3, 1, "", "get_params"], [38, 3, 1, "", "set_output"], [38, 3, 1, "", "set_params"], [38, 3, 1, "", "transform"]], "wildboar.transform._conv": [[39, 1, 1, "", "convolve"]], "wildboar.transform._diff": [[40, 2, 1, "", "DiffTransform"]], "wildboar.transform._diff.DiffTransform": [[40, 3, 1, "", "fit_transform"], [40, 3, 1, "", "get_metadata_routing"], [40, 3, 1, "", "get_params"], [40, 3, 1, "", "set_output"], [40, 3, 1, "", "set_params"]], "wildboar.transform._hydra": [[41, 2, 1, "", "HydraTransform"]], "wildboar.transform._hydra.HydraTransform": [[41, 3, 1, "", "fit"], [41, 3, 1, "", "fit_transform"], [41, 3, 1, "", "get_metadata_routing"], [41, 3, 1, "", "get_params"], [41, 3, 1, "", "set_output"], [41, 3, 1, "", "set_params"], [41, 3, 1, "", "transform"]], "wildboar.transform._interval": [[42, 2, 1, "", "FeatureTransform"], [42, 2, 1, "", "IntervalMixin"], [42, 2, 1, "", "IntervalTransform"]], "wildboar.transform._interval.FeatureTransform": [[42, 3, 1, "", "fit"], [42, 3, 1, "", "fit_transform"], [42, 3, 1, "", "get_metadata_routing"], [42, 3, 1, "", "get_params"], [42, 3, 1, "", "set_output"], [42, 3, 1, "", "set_params"], [42, 3, 1, "", "transform"]], "wildboar.transform._interval.IntervalTransform": [[42, 3, 1, "", "fit"], [42, 3, 1, "", "fit_transform"], [42, 3, 1, "", "get_metadata_routing"], [42, 3, 1, "", "get_params"], [42, 3, 1, "", "set_output"], [42, 3, 1, "", "set_params"], [42, 3, 1, "", "transform"]], "wildboar.transform._matrix_profile": [[43, 2, 1, "", "MatrixProfileTransform"]], "wildboar.transform._matrix_profile.MatrixProfileTransform": [[43, 3, 1, "", "fit"], [43, 3, 1, "", "fit_transform"], [43, 3, 1, "", "get_metadata_routing"], [43, 3, 1, "", "get_params"], [43, 3, 1, "", "set_output"], [43, 3, 1, "", "set_params"], [43, 3, 1, "", "transform"]], "wildboar.transform._pivot": [[44, 2, 1, "", "PivotMixin"], [44, 2, 1, "", "PivotTransform"], [44, 2, 1, "", "ProximityTransform"]], "wildboar.transform._pivot.PivotTransform": [[44, 3, 1, "", "fit"], [44, 3, 1, "", "fit_transform"], [44, 3, 1, "", "get_metadata_routing"], [44, 3, 1, "", "get_params"], [44, 3, 1, "", "set_output"], [44, 3, 1, "", "set_params"], [44, 3, 1, "", "transform"]], "wildboar.transform._pivot.ProximityTransform": [[44, 3, 1, "", "fit_transform"], [44, 3, 1, "", "get_metadata_routing"], [44, 3, 1, "", "get_params"], [44, 3, 1, "", "set_output"], [44, 3, 1, "", "set_params"]], "wildboar.transform._rocket": [[45, 2, 1, "", "RocketMixin"], [45, 2, 1, "", "RocketTransform"]], "wildboar.transform._rocket.RocketTransform": [[45, 3, 1, "", "fit"], [45, 3, 1, "", "fit_transform"], [45, 3, 1, "", "get_metadata_routing"], [45, 3, 1, "", "get_params"], [45, 3, 1, "", "set_output"], [45, 3, 1, "", "set_params"], [45, 3, 1, "", "transform"]], "wildboar.transform._sax": [[46, 2, 1, "", "Binning"], [46, 2, 1, "", "NormalBinning"], [46, 2, 1, "", "PAA"], [46, 2, 1, "", "SAX"], [46, 2, 1, "", "UniformBinning"], [46, 1, 1, "", "piecewice_aggregate_approximation"], [46, 1, 1, "", "symbolic_aggregate_approximation"]], "wildboar.transform._sax.Binning": [[46, 3, 1, "", "get_thresholds"], [46, 3, 1, "", "scale"]], "wildboar.transform._sax.NormalBinning": [[46, 3, 1, "", "get_thresholds"], [46, 3, 1, "", "scale"]], "wildboar.transform._sax.PAA": [[46, 3, 1, "", "fit_transform"], [46, 3, 1, "", "get_metadata_routing"], [46, 3, 1, "", "get_params"], [46, 3, 1, "", "set_output"], [46, 3, 1, "", "set_params"]], "wildboar.transform._sax.SAX": [[46, 3, 1, "", "fit_transform"], [46, 3, 1, "", "get_metadata_routing"], [46, 3, 1, "", "get_params"], [46, 3, 1, "", "set_output"], [46, 3, 1, "", "set_params"]], "wildboar.transform._sax.UniformBinning": [[46, 3, 1, "", "get_thresholds"], [46, 3, 1, "", "scale"]], "wildboar.transform._shapelet": [[47, 2, 1, "", "DilatedShapeletTransform"], [47, 2, 1, "", "RandomShapeletTransform"], [47, 2, 1, "", "ShapeletMixin"]], "wildboar.transform._shapelet.DilatedShapeletTransform": [[47, 3, 1, "", "fit"], [47, 3, 1, "", "fit_transform"], [47, 3, 1, "", "get_metadata_routing"], [47, 3, 1, "", "get_params"], [47, 3, 1, "", "set_output"], [47, 3, 1, "", "set_params"], [47, 3, 1, "", "transform"]], "wildboar.transform._shapelet.RandomShapeletTransform": [[47, 3, 1, "", "fit"], [47, 3, 1, "", "fit_transform"], [47, 3, 1, "", "get_metadata_routing"], [47, 3, 1, "", "get_params"], [47, 3, 1, "", "set_output"], [47, 3, 1, "", "set_params"], [47, 3, 1, "", "transform"]], "wildboar.tree": [[52, 2, 1, "", "ExtraShapeletTreeClassifier"], [52, 2, 1, "", "ExtraShapeletTreeRegressor"], [52, 2, 1, "", "IntervalTreeClassifier"], [52, 2, 1, "", "IntervalTreeRegressor"], [52, 2, 1, "", "PivotTreeClassifier"], [52, 2, 1, "", "ProximityTreeClassifier"], [52, 2, 1, "", "RocketTreeClassifier"], [52, 2, 1, "", "RocketTreeRegressor"], [52, 2, 1, "", "ShapeletTreeClassifier"], [52, 2, 1, "", "ShapeletTreeRegressor"], [49, 0, 0, "-", "_base"], [50, 0, 0, "-", "_ptree"], [51, 0, 0, "-", "_tree"]], "wildboar.tree.ExtraShapeletTreeClassifier": [[52, 3, 1, "", "apply"], [52, 3, 1, "", "decision_path"], [52, 3, 1, "", "fit"], [52, 3, 1, "", "get_metadata_routing"], [52, 3, 1, "", "get_params"], [52, 3, 1, "", "predict"], [52, 3, 1, "", "predict_proba"], [52, 3, 1, "", "score"], [52, 3, 1, "", "set_params"]], "wildboar.tree.ExtraShapeletTreeRegressor": [[52, 3, 1, "", "apply"], [52, 3, 1, "", "decision_path"], [52, 3, 1, "", "fit"], [52, 3, 1, "", "get_metadata_routing"], [52, 3, 1, "", "get_params"], [52, 3, 1, "", "predict"], [52, 3, 1, "", "score"], [52, 3, 1, "", "set_params"]], "wildboar.tree.IntervalTreeClassifier": [[52, 3, 1, "", "apply"], [52, 3, 1, "", "decision_path"], [52, 3, 1, "", "fit"], [52, 3, 1, "", "get_metadata_routing"], [52, 3, 1, "", "get_params"], [52, 3, 1, "", "predict"], [52, 3, 1, "", "predict_proba"], [52, 3, 1, "", "score"], [52, 3, 1, "", "set_params"]], "wildboar.tree.IntervalTreeRegressor": [[52, 3, 1, "", "apply"], [52, 3, 1, "", "decision_path"], [52, 3, 1, "", "fit"], [52, 3, 1, "", "get_metadata_routing"], [52, 3, 1, "", "get_params"], [52, 3, 1, "", "predict"], [52, 3, 1, "", "score"], [52, 3, 1, "", "set_params"]], "wildboar.tree.PivotTreeClassifier": [[52, 3, 1, "", "apply"], [52, 3, 1, "", "decision_path"], [52, 3, 1, "", "fit"], [52, 3, 1, "", "get_metadata_routing"], [52, 3, 1, "", "get_params"], [52, 3, 1, "", "predict"], [52, 3, 1, "", "predict_proba"], [52, 3, 1, "", "score"], [52, 3, 1, "", "set_params"]], "wildboar.tree.ProximityTreeClassifier": [[52, 3, 1, "", "apply"], [52, 3, 1, "", "decision_path"], [52, 3, 1, "", "fit"], [52, 3, 1, "", "get_metadata_routing"], [52, 3, 1, "", "get_params"], [52, 3, 1, "", "predict"], [52, 3, 1, "", "predict_proba"], [52, 3, 1, "", "score"], [52, 3, 1, "", "set_params"]], "wildboar.tree.RocketTreeClassifier": [[52, 3, 1, "", "apply"], [52, 3, 1, "", "decision_path"], [52, 3, 1, "", "fit"], [52, 3, 1, "", "get_metadata_routing"], [52, 3, 1, "", "get_params"], [52, 3, 1, "", "predict"], [52, 3, 1, "", "predict_proba"], [52, 3, 1, "", "score"], [52, 3, 1, "", "set_params"]], "wildboar.tree.RocketTreeRegressor": [[52, 3, 1, "", "apply"], [52, 3, 1, "", "decision_path"], [52, 3, 1, "", "fit"], [52, 3, 1, "", "get_metadata_routing"], [52, 3, 1, "", "get_params"], [52, 3, 1, "", "predict"], [52, 3, 1, "", "score"], [52, 3, 1, "", "set_params"]], "wildboar.tree.ShapeletTreeClassifier": [[52, 3, 1, "", "apply"], [52, 3, 1, "", "decision_path"], [52, 3, 1, "", "fit"], [52, 3, 1, "", "get_metadata_routing"], [52, 3, 1, "", "get_params"], [52, 3, 1, "", "predict"], [52, 3, 1, "", "predict_proba"], [52, 3, 1, "", "score"], [52, 3, 1, "", "set_params"]], "wildboar.tree.ShapeletTreeRegressor": [[52, 3, 1, "", "apply"], [52, 3, 1, "", "decision_path"], [52, 3, 1, "", "fit"], [52, 3, 1, "", "get_metadata_routing"], [52, 3, 1, "", "get_params"], [52, 3, 1, "", "predict"], [52, 3, 1, "", "score"], [52, 3, 1, "", "set_params"]], "wildboar.tree._base": [[49, 2, 1, "", "BaseTree"], [49, 2, 1, "", "BaseTreeClassifier"], [49, 2, 1, "", "BaseTreeRegressor"]], "wildboar.tree._base.BaseTree": [[49, 3, 1, "", "apply"], [49, 3, 1, "", "decision_path"], [49, 3, 1, "", "get_metadata_routing"], [49, 3, 1, "", "get_params"], [49, 3, 1, "", "set_params"]], "wildboar.tree._base.BaseTreeClassifier": [[49, 3, 1, "", "apply"], [49, 3, 1, "", "decision_path"], [49, 3, 1, "", "fit"], [49, 3, 1, "", "get_metadata_routing"], [49, 3, 1, "", "get_params"], [49, 3, 1, "", "predict"], [49, 3, 1, "", "predict_proba"], [49, 3, 1, "", "score"], [49, 3, 1, "", "set_params"]], "wildboar.tree._base.BaseTreeRegressor": [[49, 3, 1, "", "apply"], [49, 3, 1, "", "decision_path"], [49, 3, 1, "", "fit"], [49, 3, 1, "", "get_metadata_routing"], [49, 3, 1, "", "get_params"], [49, 3, 1, "", "predict"], [49, 3, 1, "", "score"], [49, 3, 1, "", "set_params"]], "wildboar.tree._ptree": [[50, 2, 1, "", "ProximityTreeClassifier"]], "wildboar.tree._ptree.ProximityTreeClassifier": [[50, 3, 1, "", "apply"], [50, 3, 1, "", "decision_path"], [50, 3, 1, "", "fit"], [50, 3, 1, "", "get_metadata_routing"], [50, 3, 1, "", "get_params"], [50, 3, 1, "", "predict"], [50, 3, 1, "", "predict_proba"], [50, 3, 1, "", "score"], [50, 3, 1, "", "set_params"]], "wildboar.tree._tree": [[51, 2, 1, "", "BaseFeatureTreeClassifier"], [51, 2, 1, "", "BaseFeatureTreeRegressor"], [51, 2, 1, "", "DilatedShapeletTreeClassifier"], [51, 2, 1, "", "ExtraShapeletTreeClassifier"], [51, 2, 1, "", "ExtraShapeletTreeRegressor"], [51, 2, 1, "", "IntervalTreeClassifier"], [51, 2, 1, "", "IntervalTreeRegressor"], [51, 2, 1, "", "PivotTreeClassifier"], [51, 2, 1, "", "RocketTreeClassifier"], [51, 2, 1, "", "RocketTreeRegressor"], [51, 2, 1, "", "ShapeletTreeClassifier"], [51, 2, 1, "", "ShapeletTreeRegressor"]], "wildboar.tree._tree.BaseFeatureTreeClassifier": [[51, 3, 1, "", "apply"], [51, 3, 1, "", "decision_path"], [51, 3, 1, "", "fit"], [51, 3, 1, "", "get_metadata_routing"], [51, 3, 1, "", "get_params"], [51, 3, 1, "", "predict"], [51, 3, 1, "", "predict_proba"], [51, 3, 1, "", "score"], [51, 3, 1, "", "set_params"]], "wildboar.tree._tree.BaseFeatureTreeRegressor": [[51, 3, 1, "", "apply"], [51, 3, 1, "", "decision_path"], [51, 3, 1, "", "fit"], [51, 3, 1, "", "get_metadata_routing"], [51, 3, 1, "", "get_params"], [51, 3, 1, "", "predict"], [51, 3, 1, "", "score"], [51, 3, 1, "", "set_params"]], "wildboar.tree._tree.DilatedShapeletTreeClassifier": [[51, 3, 1, "", "apply"], [51, 3, 1, "", "decision_path"], [51, 3, 1, "", "fit"], [51, 3, 1, "", "get_metadata_routing"], [51, 3, 1, "", "get_params"], [51, 3, 1, "", "predict"], [51, 3, 1, "", "predict_proba"], [51, 3, 1, "", "score"], [51, 3, 1, "", "set_params"]], "wildboar.tree._tree.ExtraShapeletTreeClassifier": [[51, 3, 1, "", "apply"], [51, 3, 1, "", "decision_path"], [51, 3, 1, "", "fit"], [51, 3, 1, "", "get_metadata_routing"], [51, 3, 1, "", "get_params"], [51, 3, 1, "", "predict"], [51, 3, 1, "", "predict_proba"], [51, 3, 1, "", "score"], [51, 3, 1, "", "set_params"]], "wildboar.tree._tree.ExtraShapeletTreeRegressor": [[51, 3, 1, "", "apply"], [51, 3, 1, "", "decision_path"], [51, 3, 1, "", "fit"], [51, 3, 1, "", "get_metadata_routing"], [51, 3, 1, "", "get_params"], [51, 3, 1, "", "predict"], [51, 3, 1, "", "score"], [51, 3, 1, "", "set_params"]], "wildboar.tree._tree.IntervalTreeClassifier": [[51, 3, 1, "", "apply"], [51, 3, 1, "", "decision_path"], [51, 3, 1, "", "fit"], [51, 3, 1, "", "get_metadata_routing"], [51, 3, 1, "", "get_params"], [51, 3, 1, "", "predict"], [51, 3, 1, "", "predict_proba"], [51, 3, 1, "", "score"], [51, 3, 1, "", "set_params"]], "wildboar.tree._tree.IntervalTreeRegressor": [[51, 3, 1, "", "apply"], [51, 3, 1, "", "decision_path"], [51, 3, 1, "", "fit"], [51, 3, 1, "", "get_metadata_routing"], [51, 3, 1, "", "get_params"], [51, 3, 1, "", "predict"], [51, 3, 1, "", "score"], [51, 3, 1, "", "set_params"]], "wildboar.tree._tree.PivotTreeClassifier": [[51, 3, 1, "", "apply"], [51, 3, 1, "", "decision_path"], [51, 3, 1, "", "fit"], [51, 3, 1, "", "get_metadata_routing"], [51, 3, 1, "", "get_params"], [51, 3, 1, "", "predict"], [51, 3, 1, "", "predict_proba"], [51, 3, 1, "", "score"], [51, 3, 1, "", "set_params"]], "wildboar.tree._tree.RocketTreeClassifier": [[51, 3, 1, "", "apply"], [51, 3, 1, "", "decision_path"], [51, 3, 1, "", "fit"], [51, 3, 1, "", "get_metadata_routing"], [51, 3, 1, "", "get_params"], [51, 3, 1, "", "predict"], [51, 3, 1, "", "predict_proba"], [51, 3, 1, "", "score"], [51, 3, 1, "", "set_params"]], "wildboar.tree._tree.RocketTreeRegressor": [[51, 3, 1, "", "apply"], [51, 3, 1, "", "decision_path"], [51, 3, 1, "", "fit"], [51, 3, 1, "", "get_metadata_routing"], [51, 3, 1, "", "get_params"], [51, 3, 1, "", "predict"], [51, 3, 1, "", "score"], [51, 3, 1, "", "set_params"]], "wildboar.tree._tree.ShapeletTreeClassifier": [[51, 3, 1, "", "apply"], [51, 3, 1, "", "decision_path"], [51, 3, 1, "", "fit"], [51, 3, 1, "", "get_metadata_routing"], [51, 3, 1, "", "get_params"], [51, 3, 1, "", "predict"], [51, 3, 1, "", "predict_proba"], [51, 3, 1, "", "score"], [51, 3, 1, "", "set_params"]], "wildboar.tree._tree.ShapeletTreeRegressor": [[51, 3, 1, "", "apply"], [51, 3, 1, "", "decision_path"], [51, 3, 1, "", "fit"], [51, 3, 1, "", "get_metadata_routing"], [51, 3, 1, "", "get_params"], [51, 3, 1, "", "predict"], [51, 3, 1, "", "score"], [51, 3, 1, "", "set_params"]], "wildboar.utils": [[53, 0, 0, "-", "_parallel"], [54, 0, 0, "-", "_testing"], [57, 1, 1, "", "check_X_y"], [57, 1, 1, "", "check_array"], [55, 0, 0, "-", "decorators"], [56, 0, 0, "-", "estimator_checks"], [58, 0, 0, "-", "plot"], [59, 0, 0, "-", "validation"], [60, 0, 0, "-", "variable_len"]], "wildboar.utils._parallel": [[53, 1, 1, "", "run_in_parallel"]], "wildboar.utils._testing": [[54, 1, 1, "", "assert_exhaustive_parameter_checks"], [54, 1, 1, "", "assert_parameter_checks"]], "wildboar.utils.decorators": [[55, 1, 1, "", "array_or_scalar"], [55, 1, 1, "", "singleton"], [55, 1, 1, "", "unstable"]], "wildboar.utils.estimator_checks": [[56, 1, 1, "", "check_estimator"]], "wildboar.utils.plot": [[58, 2, 1, "", "MidpointNormalize"], [58, 1, 1, "", "plot_frequency_domain"], [58, 1, 1, "", "plot_time_domain"]], "wildboar.utils.plot.MidpointNormalize": [[58, 3, 1, "", "autoscale"], [58, 3, 1, "", "autoscale_None"], [58, 3, 1, "", "process_value"], [58, 3, 1, "", "scaled"]], "wildboar.utils.validation": [[59, 1, 1, "", "check_X_y"], [59, 1, 1, "", "check_array"], [59, 1, 1, "", "check_classification_targets"], [59, 1, 1, "", "check_option"], [59, 1, 1, "", "check_type"]], "wildboar.utils.variable_len": [[60, 1, 1, "", "get_variable_length"], [60, 1, 1, "", "is_end_of_series"], [60, 1, 1, "", "is_variable_length"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"]}, "titleterms": {"wildboar": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 81, 85], "function": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 14, 15, 19, 20, 24, 25, 26, 32, 33, 34, 36, 37, 39, 46, 48, 53, 54, 55, 56, 57, 58, 59, 60, 81], "annot": [0, 1, 2, 3, 65, 81], "base": [0, 4, 76, 77, 81], "class": [0, 4, 6, 7, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 35, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 58, 81], "dataset": [0, 5, 6, 7, 8, 9, 67, 81, 84], "outlier": [0, 8, 79, 80, 81], "preprocess": [0, 9, 81], "distanc": [0, 10, 11, 12, 13, 14, 15, 72, 73, 81], "dtw": [0, 14, 81], "ensembl": [0, 16, 17, 18, 75, 81], "explain": [0, 19, 20, 21, 22, 23, 24, 25, 81], "counterfactu": [0, 20, 21, 22, 23, 24, 81], "linear_model": [0, 27, 28, 29, 30, 31, 81], "metric": [0, 32, 33, 34, 71, 72, 73, 81], "model_select": [0, 35, 36, 37, 81], "transform": [0, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 63, 76, 81, 84], "tree": [0, 49, 50, 51, 52, 77, 81], "util": [0, 53, 54, 55, 56, 57, 58, 59, 60, 81], "_motif": 1, "modul": [1, 2, 4, 5, 6, 8, 9, 10, 11, 13, 14, 16, 17, 19, 20, 21, 22, 23, 27, 28, 29, 30, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60], "content": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60], "_segment": 2, "packag": [3, 7, 15, 18, 24, 25, 26, 31, 34, 37, 48, 52, 57], "_filter": 5, "_repositori": 6, "submodul": [7, 15, 26, 57], "_distanc": 10, "_matrix_profil": [11, 43], "_multi_metr": 12, "_neighbor": 13, "_elast": 16, "_ensembl": 17, "_import": 19, "_helper": 20, "_nn": 21, "_proto": 22, "_sf": 23, "subpackag": [25, 26], "attribut": 26, "_hydra": [27, 41], "_rocket": [28, 45], "_shapelet": [29, 47], "_transform": 30, "_cluster": 32, "_counterfactu": 33, "_cv": 35, "_outlier": 36, "_base": [38, 49], "_conv": 39, "_diff": 40, "_interv": 42, "_pivot": 44, "_sax": 46, "_ptree": 50, "_tree": 51, "_parallel": 53, "_test": 54, "decor": 55, "estimator_check": 56, "plot": 58, "valid": 59, "variable_len": 60, "version": [61, 82], "exampl": [62, 84], "convolut": 63, "hydra": 63, "rocket": 63, "first": 63, "order": 63, "differ": 63, "user": 64, "guid": 64, "time": [66, 73, 84], "seri": [66, 84], "variabl": 66, "length": 66, "load": [67, 84], "singl": 67, "multipl": 67, "filter": 67, "pre": 68, "process": 68, "repositori": 69, "definit": 69, "instal": [69, 85], "local": 69, "cach": 69, "json": 69, "glossari": 70, "subsequ": [71, 72, 73], "elast": [71, 73], "non": 71, "pairwis": 72, "pair": 72, "multivari": 72, "support": 72, "search": 72, "benchmark": [72, 80], "dynam": 73, "warp": 73, "longest": 73, "common": 73, "edit": 73, "real": 73, "penalti": 73, "sequenc": 73, "move": 73, "split": 73, "merg": 73, "supervis": 74, "learn": [74, 78, 84], "estim": [75, 76, 77], "shapelet": 75, "forest": 75, "proxim": 75, "unsupervis": 78, "detect": [79, 80], "minor": 80, "label": 80, "major": 80, "emmott": 80, "what": 82, "": 82, "new": 82, "depend": 82, "1": 82, "2": 82, "0": 82, "chang": 82, "model": [82, 84], "changelog": 82, "other": 82, "improv": 82, "quickstart": 83, "get": 84, "start": 84, "machin": 84, "an": 84, "predict": 84, "tabular": 84, "data": 84, "explor": 84, "perform": 84, "persist": 84, "latest": 85, "releas": 85, "build": 85, "compil": 85, "from": 85, "sourc": 85}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"wildboar": [[0, "wildboar"], [26, "module-wildboar"], [81, "id1"]], "Functions": [[0, "id1"], [0, "id2"], [0, "id4"], [0, "id6"], [0, "id7"], [0, "id8"], [0, "id10"], [0, "id11"], [0, "id14"], [0, "id16"], [0, "id18"], [0, "id20"], [0, "id22"], [0, "id24"], [1, "functions"], [2, "functions"], [3, "functions"], [4, "functions"], [5, "functions"], [7, "functions"], [8, "functions"], [9, "functions"], [10, "functions"], [11, "functions"], [14, "functions"], [15, "functions"], [19, "functions"], [20, "functions"], [24, "functions"], [25, "functions"], [26, "functions"], [32, "functions"], [33, "functions"], [34, "functions"], [36, "functions"], [37, "functions"], [39, "functions"], [46, "functions"], [48, "functions"], [53, "functions"], [54, "functions"], [55, "functions"], [56, "functions"], [57, "functions"], [58, "functions"], [59, "functions"], [60, "functions"], [81, "id2"], [81, "id3"], [81, "id5"], [81, "id7"], [81, "id8"], [81, "id9"], [81, "id11"], [81, "id12"], [81, "id15"], [81, "id17"], [81, "id19"], [81, "id21"], [81, "id23"], [81, "id25"]], "wildboar.annotate": [[0, "wildboar-annotate"], [3, "module-wildboar.annotate"], [81, "wildboar-annotate"]], "wildboar.base": [[0, "wildboar-base"], [4, "module-wildboar.base"], [81, "wildboar-base"]], "Classes": [[0, "id3"], [0, "id5"], [0, "id9"], [0, "id12"], [0, "id13"], [0, "id15"], [0, "id17"], [0, "id19"], [0, "id21"], [0, "id23"], [4, "classes"], [6, "classes"], [7, "classes"], [13, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [35, "classes"], [37, "classes"], [38, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [58, "classes"], [81, "id4"], [81, "id6"], [81, "id10"], [81, "id13"], [81, "id14"], [81, "id16"], [81, "id18"], [81, "id20"], [81, "id22"], [81, "id24"]], "wildboar.datasets": [[0, "wildboar-datasets"], [7, "module-wildboar.datasets"], [81, "wildboar-datasets"]], "wildboar.datasets.outlier": [[0, "wildboar-datasets-outlier"], [8, "module-wildboar.datasets.outlier"], [81, "wildboar-datasets-outlier"]], "wildboar.datasets.preprocess": [[0, "wildboar-datasets-preprocess"], [9, "module-wildboar.datasets.preprocess"], [81, "wildboar-datasets-preprocess"]], "wildboar.distance": [[0, "wildboar-distance"], [15, "module-wildboar.distance"], [81, "wildboar-distance"]], "wildboar.distance.dtw": [[0, "wildboar-distance-dtw"], [14, "module-wildboar.distance.dtw"], [81, "wildboar-distance-dtw"]], "wildboar.ensemble": [[0, "wildboar-ensemble"], [18, "module-wildboar.ensemble"], [81, "wildboar-ensemble"]], "wildboar.explain": [[0, "wildboar-explain"], [25, "module-wildboar.explain"], [81, "wildboar-explain"]], "wildboar.explain.counterfactual": [[0, "wildboar-explain-counterfactual"], [24, "module-wildboar.explain.counterfactual"], [81, "wildboar-explain-counterfactual"]], "wildboar.linear_model": [[0, "wildboar-linear-model"], [31, "module-wildboar.linear_model"], [81, "wildboar-linear-model"]], "wildboar.metrics": [[0, "wildboar-metrics"], [34, "module-wildboar.metrics"], [81, "wildboar-metrics"]], "wildboar.model_selection": [[0, "wildboar-model-selection"], [37, "module-wildboar.model_selection"], [81, "wildboar-model-selection"]], "wildboar.transform": [[0, "wildboar-transform"], [48, "module-wildboar.transform"], [81, "wildboar-transform"]], "wildboar.tree": [[0, "wildboar-tree"], [52, "module-wildboar.tree"], [81, "wildboar-tree"]], "wildboar.utils": [[0, "wildboar-utils"], [57, "module-wildboar.utils"], [81, "wildboar-utils"]], "wildboar.annotate._motifs": [[1, "module-wildboar.annotate._motifs"]], "Module Contents": [[1, "module-contents"], [2, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [16, "module-contents"], [17, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [32, "module-contents"], [33, "module-contents"], [35, "module-contents"], [36, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"]], "wildboar.annotate._segment": [[2, "module-wildboar.annotate._segment"]], "Package Contents": [[3, "package-contents"], [7, "package-contents"], [15, "package-contents"], [18, "package-contents"], [24, "package-contents"], [25, "package-contents"], [26, "package-contents"], [31, "package-contents"], [34, "package-contents"], [37, "package-contents"], [48, "package-contents"], [52, "package-contents"], [57, "package-contents"]], "wildboar.datasets._filter": [[5, "module-wildboar.datasets._filter"]], "wildboar.datasets._repository": [[6, "module-wildboar.datasets._repository"]], "Submodules": [[7, "submodules"], [15, "submodules"], [26, "submodules"], [57, "submodules"]], "wildboar.distance._distance": [[10, "module-wildboar.distance._distance"]], "wildboar.distance._matrix_profile": [[11, "module-wildboar.distance._matrix_profile"]], "wildboar.distance._multi_metric": [[12, "module-wildboar.distance._multi_metric"]], "wildboar.distance._neighbors": [[13, "module-wildboar.distance._neighbors"]], "wildboar.ensemble._elastic": [[16, "module-wildboar.ensemble._elastic"]], "wildboar.ensemble._ensemble": [[17, "module-wildboar.ensemble._ensemble"]], "wildboar.explain._importance": [[19, "module-wildboar.explain._importance"]], "wildboar.explain.counterfactual._helper": [[20, "module-wildboar.explain.counterfactual._helper"]], "wildboar.explain.counterfactual._nn": [[21, "module-wildboar.explain.counterfactual._nn"]], "wildboar.explain.counterfactual._proto": [[22, "module-wildboar.explain.counterfactual._proto"]], "wildboar.explain.counterfactual._sf": [[23, "module-wildboar.explain.counterfactual._sf"]], "Subpackages": [[25, "subpackages"], [26, "subpackages"]], "Attributes": [[26, "attributes"]], "wildboar.linear_model._hydra": [[27, "module-wildboar.linear_model._hydra"]], "wildboar.linear_model._rocket": [[28, "module-wildboar.linear_model._rocket"]], "wildboar.linear_model._shapelet": [[29, "module-wildboar.linear_model._shapelet"]], "wildboar.linear_model._transform": [[30, "module-wildboar.linear_model._transform"]], "wildboar.metrics._cluster": [[32, "module-wildboar.metrics._cluster"]], "wildboar.metrics._counterfactual": [[33, "module-wildboar.metrics._counterfactual"]], "wildboar.model_selection._cv": [[35, "module-wildboar.model_selection._cv"]], "wildboar.model_selection._outlier": [[36, "module-wildboar.model_selection._outlier"]], "wildboar.transform._base": [[38, "module-wildboar.transform._base"]], "wildboar.transform._conv": [[39, "module-wildboar.transform._conv"]], "wildboar.transform._diff": [[40, "module-wildboar.transform._diff"]], "wildboar.transform._hydra": [[41, "module-wildboar.transform._hydra"]], "wildboar.transform._interval": [[42, "module-wildboar.transform._interval"]], "wildboar.transform._matrix_profile": [[43, "module-wildboar.transform._matrix_profile"]], "wildboar.transform._pivot": [[44, "module-wildboar.transform._pivot"]], "wildboar.transform._rocket": [[45, "module-wildboar.transform._rocket"]], "wildboar.transform._sax": [[46, "module-wildboar.transform._sax"]], "wildboar.transform._shapelet": [[47, "module-wildboar.transform._shapelet"]], "wildboar.tree._base": [[49, "module-wildboar.tree._base"]], "wildboar.tree._ptree": [[50, "module-wildboar.tree._ptree"]], "wildboar.tree._tree": [[51, "module-wildboar.tree._tree"]], "wildboar.utils._parallel": [[53, "module-wildboar.utils._parallel"]], "wildboar.utils._testing": [[54, "module-wildboar.utils._testing"]], "wildboar.utils.decorators": [[55, "module-wildboar.utils.decorators"]], "wildboar.utils.estimator_checks": [[56, "module-wildboar.utils.estimator_checks"]], "wildboar.utils.plot": [[58, "module-wildboar.utils.plot"]], "wildboar.utils.validation": [[59, "module-wildboar.utils.validation"]], "wildboar.utils.variable_len": [[60, "module-wildboar.utils.variable_len"]], "wildboar.version": [[61, "module-wildboar.version"]], "Examples": [[62, "examples"]], "Convolution transforms": [[63, "Convolution-transforms"]], "Hydra transform": [[63, "Hydra-transform"]], "Rocket transform": [[63, "Rocket-transform"]], "Hydra transform with first order differences": [[63, "Hydra-transform-with-first-order-differences"]], "Rocket transform with first order differences": [[63, "Rocket-transform-with-first-order-differences"]], "User guide": [[64, "user-guide"]], "Annotate": [[65, "annotate"]], "Time series": [[66, "time-series"]], "Variable length time series": [[66, "variable-length-time-series"]], "Datasets": [[67, "datasets"]], "Loading datasets": [[67, "loading-datasets"]], "Loading a single dataset": [[67, "loading-a-single-dataset"]], "Loading multiple datasets": [[67, "loading-multiple-datasets"]], "Filters": [[67, "filters"]], "Pre-processing": [[68, "pre-processing"]], "Repositories": [[69, "repositories"]], "Repository definitions": [[69, "repository-definitions"]], "Installing repositories": [[69, "installing-repositories"]], "Local cache": [[69, "local-cache"]], "JSON repositories": [[69, "json-repositories"]], "Glossary": [[70, "glossary"]], "Metrics": [[71, "metrics"], [72, "metrics"]], "Subsequence metrics": [[71, "subsequence-metrics"], [72, "subsequence-metrics"]], "Elastic and non-elastic metrics": [[71, "elastic-and-non-elastic-metrics"]], "Distance": [[72, "distance"]], "Pairwise distance": [[72, "pairwise-distance"]], "Paired distance": [[72, "paired-distance"]], "Multivariate support": [[72, "multivariate-support"]], "Subsequence search": [[72, "subsequence-search"]], "Pairwise subsequence distance": [[72, "pairwise-subsequence-distance"]], "Benchmark": [[72, "benchmark"]], "Elastic metrics": [[73, "elastic-metrics"]], "Dynamic time warping": [[73, "dynamic-time-warping"]], "Longest common subsequence": [[73, "longest-common-subsequence"]], "Edit-distance with real penalty": [[73, "edit-distance-with-real-penalty"]], "Edit-distance for real sequence": [[73, "edit-distance-for-real-sequence"]], "Time-warp edit distance": [[73, "time-warp-edit-distance"]], "Move-split-merge": [[73, "move-split-merge"]], "Supervised learning": [[74, "supervised-learning"]], "Ensemble estimators": [[75, "ensemble-estimators"]], "Shapelet forests": [[75, "shapelet-forests"]], "Proximity forests": [[75, "proximity-forests"]], "Transform-based estimators": [[76, "transform-based-estimators"]], "Tree-based estimators": [[77, "tree-based-estimators"]], "Unsupervised learning": [[78, "unsupervised-learning"]], "Outlier detection": [[79, "outlier-detection"]], "Outlier detection benchmarks": [[80, "outlier-detection-benchmarks"]], "Minority labeler": [[80, "minority-labeler"]], "Majority labeler": [[80, "majority-labeler"]], "Emmott labeler": [[80, "emmott-labeler"]], "Wildboar": [[81, "wildboar"]], "What\u2019s new": [[82, "what-s-new"]], "Dependencies": [[82, "dependencies"]], "Version 1.2.0": [[82, "version-1-2-0"]], "New and changed models": [[82, "new-and-changed-models"]], "Changelog": [[82, "changelog"]], "Other improvements": [[82, "other-improvements"]], "Quickstart": [[83, "quickstart"]], "Getting started": [[84, "getting-started"]], "Machine learning": [[84, "machine-learning"]], "Loading an example dataset": [[84, "loading-an-example-dataset"]], "Learning and predicting": [[84, "learning-and-predicting"]], "Transforming time series to tabular data": [[84, "transforming-time-series-to-tabular-data"]], "Exploring model performance": [[84, "exploring-model-performance"]], "Model persistence": [[84, "model-persistence"]], "Install wildboar": [[85, "install-wildboar"]], "Install the latest release": [[85, "install-the-latest-release"]], "Build and compile from source": [[85, "build-and-compile-from-source"]]}, "indexentries": {"module": [[1, "module-wildboar.annotate._motifs"], [2, "module-wildboar.annotate._segment"], [3, "module-wildboar.annotate"], [4, "module-wildboar.base"], [5, "module-wildboar.datasets._filter"], [6, "module-wildboar.datasets._repository"], [7, "module-wildboar.datasets"], [8, "module-wildboar.datasets.outlier"], [9, "module-wildboar.datasets.preprocess"], [10, "module-wildboar.distance._distance"], [11, "module-wildboar.distance._matrix_profile"], [12, "module-wildboar.distance._multi_metric"], [13, "module-wildboar.distance._neighbors"], [14, "module-wildboar.distance.dtw"], [15, "module-wildboar.distance"], [16, "module-wildboar.ensemble._elastic"], [17, "module-wildboar.ensemble._ensemble"], [18, "module-wildboar.ensemble"], [19, "module-wildboar.explain._importance"], [20, "module-wildboar.explain.counterfactual._helper"], [21, "module-wildboar.explain.counterfactual._nn"], [22, "module-wildboar.explain.counterfactual._proto"], [23, "module-wildboar.explain.counterfactual._sf"], [24, "module-wildboar.explain.counterfactual"], [25, "module-wildboar.explain"], [26, "module-wildboar"], [27, "module-wildboar.linear_model._hydra"], [28, "module-wildboar.linear_model._rocket"], [29, "module-wildboar.linear_model._shapelet"], [30, "module-wildboar.linear_model._transform"], [31, "module-wildboar.linear_model"], [32, "module-wildboar.metrics._cluster"], [33, "module-wildboar.metrics._counterfactual"], [34, "module-wildboar.metrics"], [35, "module-wildboar.model_selection._cv"], [36, "module-wildboar.model_selection._outlier"], [37, "module-wildboar.model_selection"], [38, "module-wildboar.transform._base"], [39, "module-wildboar.transform._conv"], [40, "module-wildboar.transform._diff"], [41, "module-wildboar.transform._hydra"], [42, "module-wildboar.transform._interval"], [43, "module-wildboar.transform._matrix_profile"], [44, "module-wildboar.transform._pivot"], [45, "module-wildboar.transform._rocket"], [46, "module-wildboar.transform._sax"], [47, "module-wildboar.transform._shapelet"], [48, "module-wildboar.transform"], [49, "module-wildboar.tree._base"], [50, "module-wildboar.tree._ptree"], [51, "module-wildboar.tree._tree"], [52, "module-wildboar.tree"], [53, "module-wildboar.utils._parallel"], [54, "module-wildboar.utils._testing"], [55, "module-wildboar.utils.decorators"], [56, "module-wildboar.utils.estimator_checks"], [57, "module-wildboar.utils"], [58, "module-wildboar.utils.plot"], [59, "module-wildboar.utils.validation"], [60, "module-wildboar.utils.variable_len"], [61, "module-wildboar.version"]], "motifs() (in module wildboar.annotate._motifs)": [[1, "wildboar.annotate._motifs.motifs"]], "wildboar.annotate._motifs": [[1, "module-wildboar.annotate._motifs"]], "segment() (in module wildboar.annotate._segment)": [[2, "wildboar.annotate._segment.segment"]], "wildboar.annotate._segment": [[2, "module-wildboar.annotate._segment"]], "motifs() (in module wildboar.annotate)": [[3, "wildboar.annotate.motifs"]], "segment() (in module wildboar.annotate)": [[3, "wildboar.annotate.segment"]], "wildboar.annotate": [[3, "module-wildboar.annotate"]], "baseestimator (class in wildboar.base)": [[4, "wildboar.base.BaseEstimator"]], "counterfactualmixin (class in wildboar.base)": [[4, "wildboar.base.CounterfactualMixin"]], "explainermixin (class in wildboar.base)": [[4, "wildboar.base.ExplainerMixin"]], "fit_explain() (wildboar.base.explainermixin method)": [[4, "wildboar.base.ExplainerMixin.fit_explain"]], "get_metadata_routing() (wildboar.base.baseestimator method)": [[4, "wildboar.base.BaseEstimator.get_metadata_routing"]], "get_params() (wildboar.base.baseestimator method)": [[4, "wildboar.base.BaseEstimator.get_params"]], "is_counterfactual() (in module wildboar.base)": [[4, "wildboar.base.is_counterfactual"]], "is_explainer() (in module wildboar.base)": [[4, "wildboar.base.is_explainer"]], "plot() (wildboar.base.explainermixin method)": [[4, "wildboar.base.ExplainerMixin.plot"]], "score() (wildboar.base.counterfactualmixin method)": [[4, "wildboar.base.CounterfactualMixin.score"]], "set_params() (wildboar.base.baseestimator method)": [[4, "wildboar.base.BaseEstimator.set_params"]], "wildboar.base": [[4, "module-wildboar.base"]], "make_dict_filter() (in module wildboar.datasets._filter)": [[5, "wildboar.datasets._filter.make_dict_filter"]], "make_filter() (in module wildboar.datasets._filter)": [[5, "wildboar.datasets._filter.make_filter"]], "make_list_filter() (in module wildboar.datasets._filter)": [[5, "wildboar.datasets._filter.make_list_filter"]], "make_str_filter() (in module wildboar.datasets._filter)": [[5, "wildboar.datasets._filter.make_str_filter"]], "wildboar.datasets._filter": [[5, "module-wildboar.datasets._filter"]], "bundle (class in wildboar.datasets._repository)": [[6, "wildboar.datasets._repository.Bundle"]], "jsonrepository (class in wildboar.datasets._repository)": [[6, "wildboar.datasets._repository.JSONRepository"]], "npbundle (class in wildboar.datasets._repository)": [[6, "wildboar.datasets._repository.NpBundle"]], "repository (class in wildboar.datasets._repository)": [[6, "wildboar.datasets._repository.Repository"]], "download_url (wildboar.datasets._repository.jsonrepository property)": [[6, "wildboar.datasets._repository.JSONRepository.download_url"]], "download_url (wildboar.datasets._repository.repository property)": [[6, "wildboar.datasets._repository.Repository.download_url"]], "get_bundle() (wildboar.datasets._repository.jsonrepository method)": [[6, "wildboar.datasets._repository.JSONRepository.get_bundle"]], "get_bundle() (wildboar.datasets._repository.repository method)": [[6, "wildboar.datasets._repository.Repository.get_bundle"]], "get_bundles() (wildboar.datasets._repository.jsonrepository method)": [[6, "wildboar.datasets._repository.JSONRepository.get_bundles"]], "get_bundles() (wildboar.datasets._repository.repository method)": [[6, "wildboar.datasets._repository.Repository.get_bundles"]], "get_collection() (wildboar.datasets._repository.bundle method)": [[6, "wildboar.datasets._repository.Bundle.get_collection"]], "get_collection() (wildboar.datasets._repository.npbundle method)": [[6, "wildboar.datasets._repository.NpBundle.get_collection"]], "get_filename() (wildboar.datasets._repository.bundle method)": [[6, "wildboar.datasets._repository.Bundle.get_filename"]], "get_filename() (wildboar.datasets._repository.npbundle method)": [[6, "wildboar.datasets._repository.NpBundle.get_filename"]], "list() (wildboar.datasets._repository.bundle method)": [[6, "wildboar.datasets._repository.Bundle.list"]], "list() (wildboar.datasets._repository.npbundle method)": [[6, "wildboar.datasets._repository.NpBundle.list"]], "load() (wildboar.datasets._repository.bundle method)": [[6, "wildboar.datasets._repository.Bundle.load"]], "load() (wildboar.datasets._repository.npbundle method)": [[6, "wildboar.datasets._repository.NpBundle.load"]], "name (wildboar.datasets._repository.jsonrepository property)": [[6, "wildboar.datasets._repository.JSONRepository.name"]], "name (wildboar.datasets._repository.repository property)": [[6, "wildboar.datasets._repository.Repository.name"]], "refresh() (wildboar.datasets._repository.jsonrepository method)": [[6, "wildboar.datasets._repository.JSONRepository.refresh"]], "refresh() (wildboar.datasets._repository.repository method)": [[6, "wildboar.datasets._repository.Repository.refresh"]], "version (wildboar.datasets._repository.jsonrepository property)": [[6, "wildboar.datasets._repository.JSONRepository.version"]], "version (wildboar.datasets._repository.repository property)": [[6, "wildboar.datasets._repository.Repository.version"]], "wildboar.datasets._repository": [[6, "module-wildboar.datasets._repository"]], "wildboar_requires (wildboar.datasets._repository.jsonrepository property)": [[6, "wildboar.datasets._repository.JSONRepository.wildboar_requires"]], "wildboar_requires (wildboar.datasets._repository.repository property)": [[6, "wildboar.datasets._repository.Repository.wildboar_requires"]], "bundle (class in wildboar.datasets)": [[7, "wildboar.datasets.Bundle"]], "jsonrepository (class in wildboar.datasets)": [[7, "wildboar.datasets.JSONRepository"]], "npbundle (class in wildboar.datasets)": [[7, "wildboar.datasets.NpBundle"]], "repository (class in wildboar.datasets)": [[7, "wildboar.datasets.Repository"]], "clear_cache() (in module wildboar.datasets)": [[7, "wildboar.datasets.clear_cache"]], "download_url (wildboar.datasets.jsonrepository property)": [[7, "wildboar.datasets.JSONRepository.download_url"]], "download_url (wildboar.datasets.repository property)": [[7, "wildboar.datasets.Repository.download_url"]], "get_bundle() (wildboar.datasets.jsonrepository method)": [[7, "wildboar.datasets.JSONRepository.get_bundle"]], "get_bundle() (wildboar.datasets.repository method)": [[7, "wildboar.datasets.Repository.get_bundle"]], "get_bundles() (in module wildboar.datasets)": [[7, "wildboar.datasets.get_bundles"]], "get_bundles() (wildboar.datasets.jsonrepository method)": [[7, "wildboar.datasets.JSONRepository.get_bundles"]], "get_bundles() (wildboar.datasets.repository method)": [[7, "wildboar.datasets.Repository.get_bundles"]], "get_collection() (wildboar.datasets.bundle method)": [[7, "wildboar.datasets.Bundle.get_collection"]], "get_collection() (wildboar.datasets.npbundle method)": [[7, "wildboar.datasets.NpBundle.get_collection"]], "get_filename() (wildboar.datasets.bundle method)": [[7, "wildboar.datasets.Bundle.get_filename"]], "get_filename() (wildboar.datasets.npbundle method)": [[7, "wildboar.datasets.NpBundle.get_filename"]], "get_repository() (in module wildboar.datasets)": [[7, "wildboar.datasets.get_repository"]], "install_repository() (in module wildboar.datasets)": [[7, "wildboar.datasets.install_repository"]], "list() (wildboar.datasets.bundle method)": [[7, "wildboar.datasets.Bundle.list"]], "list() (wildboar.datasets.npbundle method)": [[7, "wildboar.datasets.NpBundle.list"]], "list_bundles() (in module wildboar.datasets)": [[7, "wildboar.datasets.list_bundles"]], "list_collections() (in module wildboar.datasets)": [[7, "wildboar.datasets.list_collections"]], "list_datasets() (in module wildboar.datasets)": [[7, "wildboar.datasets.list_datasets"]], "list_repositories() (in module wildboar.datasets)": [[7, "wildboar.datasets.list_repositories"]], "load() (wildboar.datasets.bundle method)": [[7, "wildboar.datasets.Bundle.load"]], "load() (wildboar.datasets.npbundle method)": [[7, "wildboar.datasets.NpBundle.load"]], "load_dataset() (in module wildboar.datasets)": [[7, "wildboar.datasets.load_dataset"]], "load_datasets() (in module wildboar.datasets)": [[7, "wildboar.datasets.load_datasets"]], "load_gun_point() (in module wildboar.datasets)": [[7, "wildboar.datasets.load_gun_point"]], "load_synthetic_control() (in module wildboar.datasets)": [[7, "wildboar.datasets.load_synthetic_control"]], "load_two_lead_ecg() (in module wildboar.datasets)": [[7, "wildboar.datasets.load_two_lead_ecg"]], "name (wildboar.datasets.jsonrepository property)": [[7, "wildboar.datasets.JSONRepository.name"]], "name (wildboar.datasets.repository property)": [[7, "wildboar.datasets.Repository.name"]], "refresh() (wildboar.datasets.jsonrepository method)": [[7, "wildboar.datasets.JSONRepository.refresh"]], "refresh() (wildboar.datasets.repository method)": [[7, "wildboar.datasets.Repository.refresh"]], "refresh_repositories() (in module wildboar.datasets)": [[7, "wildboar.datasets.refresh_repositories"]], "set_cache_dir() (in module wildboar.datasets)": [[7, "wildboar.datasets.set_cache_dir"]], "version (wildboar.datasets.jsonrepository property)": [[7, "wildboar.datasets.JSONRepository.version"]], "version (wildboar.datasets.repository property)": [[7, "wildboar.datasets.Repository.version"]], "wildboar.datasets": [[7, "module-wildboar.datasets"]], "wildboar_requires (wildboar.datasets.jsonrepository property)": [[7, "wildboar.datasets.JSONRepository.wildboar_requires"]], "wildboar_requires (wildboar.datasets.repository property)": [[7, "wildboar.datasets.Repository.wildboar_requires"]], "density_outliers() (in module wildboar.datasets.outlier)": [[8, "wildboar.datasets.outlier.density_outliers"]], "emmott_outliers() (in module wildboar.datasets.outlier)": [[8, "wildboar.datasets.outlier.emmott_outliers"]], "kmeans_outliers() (in module wildboar.datasets.outlier)": [[8, "wildboar.datasets.outlier.kmeans_outliers"]], "majority_outliers() (in module wildboar.datasets.outlier)": [[8, "wildboar.datasets.outlier.majority_outliers"]], "minority_outliers() (in module wildboar.datasets.outlier)": [[8, "wildboar.datasets.outlier.minority_outliers"]], "wildboar.datasets.outlier": [[8, "module-wildboar.datasets.outlier"]], "maxabs_scale() (in module wildboar.datasets.preprocess)": [[9, "wildboar.datasets.preprocess.maxabs_scale"]], "minmax_scale() (in module wildboar.datasets.preprocess)": [[9, "wildboar.datasets.preprocess.minmax_scale"]], "named_preprocess() (in module wildboar.datasets.preprocess)": [[9, "wildboar.datasets.preprocess.named_preprocess"]], "standardize() (in module wildboar.datasets.preprocess)": [[9, "wildboar.datasets.preprocess.standardize"]], "truncate() (in module wildboar.datasets.preprocess)": [[9, "wildboar.datasets.preprocess.truncate"]], "wildboar.datasets.preprocess": [[9, "module-wildboar.datasets.preprocess"]], "argmin_distance() (in module wildboar.distance._distance)": [[10, "wildboar.distance._distance.argmin_distance"]], "distance_profile() (in module wildboar.distance._distance)": [[10, "wildboar.distance._distance.distance_profile"]], "paired_distance() (in module wildboar.distance._distance)": [[10, "wildboar.distance._distance.paired_distance"]], "paired_subsequence_distance() (in module wildboar.distance._distance)": [[10, "wildboar.distance._distance.paired_subsequence_distance"]], "paired_subsequence_match() (in module wildboar.distance._distance)": [[10, "wildboar.distance._distance.paired_subsequence_match"]], "pairwise_distance() (in module wildboar.distance._distance)": [[10, "wildboar.distance._distance.pairwise_distance"]], "pairwise_subsequence_distance() (in module wildboar.distance._distance)": [[10, "wildboar.distance._distance.pairwise_subsequence_distance"]], "subsequence_match() (in module wildboar.distance._distance)": [[10, "wildboar.distance._distance.subsequence_match"]], "wildboar.distance._distance": [[10, "module-wildboar.distance._distance"]], "matrix_profile() (in module wildboar.distance._matrix_profile)": [[11, "wildboar.distance._matrix_profile.matrix_profile"]], "wildboar.distance._matrix_profile": [[11, "module-wildboar.distance._matrix_profile"]], "wildboar.distance._multi_metric": [[12, "module-wildboar.distance._multi_metric"]], "kmeans (class in wildboar.distance._neighbors)": [[13, "wildboar.distance._neighbors.KMeans"]], "kmedoids (class in wildboar.distance._neighbors)": [[13, "wildboar.distance._neighbors.KMedoids"]], "kneighborsclassifier (class in wildboar.distance._neighbors)": [[13, "wildboar.distance._neighbors.KNeighborsClassifier"]], "fit() (wildboar.distance._neighbors.kmeans method)": [[13, "wildboar.distance._neighbors.KMeans.fit"]], "fit() (wildboar.distance._neighbors.kmedoids method)": [[13, "wildboar.distance._neighbors.KMedoids.fit"]], "fit() (wildboar.distance._neighbors.kneighborsclassifier method)": [[13, "wildboar.distance._neighbors.KNeighborsClassifier.fit"]], "fit_predict() (wildboar.distance._neighbors.kmeans method)": [[13, "wildboar.distance._neighbors.KMeans.fit_predict"]], "fit_predict() (wildboar.distance._neighbors.kmedoids method)": [[13, "wildboar.distance._neighbors.KMedoids.fit_predict"]], "fit_transform() (wildboar.distance._neighbors.kmeans method)": [[13, "wildboar.distance._neighbors.KMeans.fit_transform"]], "fit_transform() (wildboar.distance._neighbors.kmedoids method)": [[13, "wildboar.distance._neighbors.KMedoids.fit_transform"]], "get_metadata_routing() (wildboar.distance._neighbors.kmeans method)": [[13, "wildboar.distance._neighbors.KMeans.get_metadata_routing"]], "get_metadata_routing() (wildboar.distance._neighbors.kmedoids method)": [[13, "wildboar.distance._neighbors.KMedoids.get_metadata_routing"]], "get_metadata_routing() (wildboar.distance._neighbors.kneighborsclassifier method)": [[13, "wildboar.distance._neighbors.KNeighborsClassifier.get_metadata_routing"]], "get_params() (wildboar.distance._neighbors.kmeans method)": [[13, "wildboar.distance._neighbors.KMeans.get_params"]], "get_params() (wildboar.distance._neighbors.kmedoids method)": [[13, "wildboar.distance._neighbors.KMedoids.get_params"]], "get_params() (wildboar.distance._neighbors.kneighborsclassifier method)": [[13, "wildboar.distance._neighbors.KNeighborsClassifier.get_params"]], "predict() (wildboar.distance._neighbors.kmeans method)": [[13, "wildboar.distance._neighbors.KMeans.predict"]], "predict() (wildboar.distance._neighbors.kmedoids method)": [[13, "wildboar.distance._neighbors.KMedoids.predict"]], "predict() (wildboar.distance._neighbors.kneighborsclassifier method)": [[13, "wildboar.distance._neighbors.KNeighborsClassifier.predict"]], "predict_proba() (wildboar.distance._neighbors.kneighborsclassifier method)": [[13, "wildboar.distance._neighbors.KNeighborsClassifier.predict_proba"]], "score() (wildboar.distance._neighbors.kneighborsclassifier method)": [[13, "wildboar.distance._neighbors.KNeighborsClassifier.score"]], "set_output() (wildboar.distance._neighbors.kmeans method)": [[13, "wildboar.distance._neighbors.KMeans.set_output"]], "set_output() (wildboar.distance._neighbors.kmedoids method)": [[13, "wildboar.distance._neighbors.KMedoids.set_output"]], "set_params() (wildboar.distance._neighbors.kmeans method)": [[13, "wildboar.distance._neighbors.KMeans.set_params"]], "set_params() (wildboar.distance._neighbors.kmedoids method)": [[13, "wildboar.distance._neighbors.KMedoids.set_params"]], "set_params() (wildboar.distance._neighbors.kneighborsclassifier method)": [[13, "wildboar.distance._neighbors.KNeighborsClassifier.set_params"]], "transform() (wildboar.distance._neighbors.kmeans method)": [[13, "wildboar.distance._neighbors.KMeans.transform"]], "transform() (wildboar.distance._neighbors.kmedoids method)": [[13, "wildboar.distance._neighbors.KMedoids.transform"]], "wildboar.distance._neighbors": [[13, "module-wildboar.distance._neighbors"]], "ddtw_distance() (in module wildboar.distance.dtw)": [[14, "wildboar.distance.dtw.ddtw_distance"]], "dtw_alignment() (in module wildboar.distance.dtw)": [[14, "wildboar.distance.dtw.dtw_alignment"]], "dtw_average() (in module wildboar.distance.dtw)": [[14, "wildboar.distance.dtw.dtw_average"]], "dtw_distance() (in module wildboar.distance.dtw)": [[14, "wildboar.distance.dtw.dtw_distance"]], "dtw_envelop() (in module wildboar.distance.dtw)": [[14, "wildboar.distance.dtw.dtw_envelop"]], "dtw_lb_keogh() (in module wildboar.distance.dtw)": [[14, "wildboar.distance.dtw.dtw_lb_keogh"]], "dtw_mapping() (in module wildboar.distance.dtw)": [[14, "wildboar.distance.dtw.dtw_mapping"]], "jeong_weight() (in module wildboar.distance.dtw)": [[14, "wildboar.distance.dtw.jeong_weight"]], "wddtw_distance() (in module wildboar.distance.dtw)": [[14, "wildboar.distance.dtw.wddtw_distance"]], "wdtw_alignment() (in module wildboar.distance.dtw)": [[14, "wildboar.distance.dtw.wdtw_alignment"]], "wdtw_distance() (in module wildboar.distance.dtw)": [[14, "wildboar.distance.dtw.wdtw_distance"]], "wildboar.distance.dtw": [[14, "module-wildboar.distance.dtw"]], "kmeans (class in wildboar.distance)": [[15, "wildboar.distance.KMeans"]], "kmedoids (class in wildboar.distance)": [[15, "wildboar.distance.KMedoids"]], "kneighborsclassifier (class in wildboar.distance)": [[15, "wildboar.distance.KNeighborsClassifier"]], "argmin_distance() (in module wildboar.distance)": [[15, "wildboar.distance.argmin_distance"]], "distance_profile() (in module wildboar.distance)": [[15, "wildboar.distance.distance_profile"]], "fit() (wildboar.distance.kmeans method)": [[15, "wildboar.distance.KMeans.fit"]], "fit() (wildboar.distance.kmedoids method)": [[15, "wildboar.distance.KMedoids.fit"]], "fit() (wildboar.distance.kneighborsclassifier method)": [[15, "wildboar.distance.KNeighborsClassifier.fit"]], "fit_predict() (wildboar.distance.kmeans method)": [[15, "wildboar.distance.KMeans.fit_predict"]], "fit_predict() (wildboar.distance.kmedoids method)": [[15, "wildboar.distance.KMedoids.fit_predict"]], "fit_transform() (wildboar.distance.kmeans method)": [[15, "wildboar.distance.KMeans.fit_transform"]], "fit_transform() (wildboar.distance.kmedoids method)": [[15, "wildboar.distance.KMedoids.fit_transform"]], "get_metadata_routing() (wildboar.distance.kmeans method)": [[15, "wildboar.distance.KMeans.get_metadata_routing"]], "get_metadata_routing() (wildboar.distance.kmedoids method)": [[15, "wildboar.distance.KMedoids.get_metadata_routing"]], "get_metadata_routing() (wildboar.distance.kneighborsclassifier method)": [[15, "wildboar.distance.KNeighborsClassifier.get_metadata_routing"]], "get_params() (wildboar.distance.kmeans method)": [[15, "wildboar.distance.KMeans.get_params"]], "get_params() (wildboar.distance.kmedoids method)": [[15, "wildboar.distance.KMedoids.get_params"]], "get_params() (wildboar.distance.kneighborsclassifier method)": [[15, "wildboar.distance.KNeighborsClassifier.get_params"]], "matrix_profile() (in module wildboar.distance)": [[15, "wildboar.distance.matrix_profile"]], "paired_distance() (in module wildboar.distance)": [[15, "wildboar.distance.paired_distance"]], "paired_subsequence_distance() (in module wildboar.distance)": [[15, "wildboar.distance.paired_subsequence_distance"]], "paired_subsequence_match() (in module wildboar.distance)": [[15, "wildboar.distance.paired_subsequence_match"]], "pairwise_distance() (in module wildboar.distance)": [[15, "wildboar.distance.pairwise_distance"]], "pairwise_subsequence_distance() (in module wildboar.distance)": [[15, "wildboar.distance.pairwise_subsequence_distance"]], "predict() (wildboar.distance.kmeans method)": [[15, "wildboar.distance.KMeans.predict"]], "predict() (wildboar.distance.kmedoids method)": [[15, "wildboar.distance.KMedoids.predict"]], "predict() (wildboar.distance.kneighborsclassifier method)": [[15, "wildboar.distance.KNeighborsClassifier.predict"]], "predict_proba() (wildboar.distance.kneighborsclassifier method)": [[15, "wildboar.distance.KNeighborsClassifier.predict_proba"]], "score() (wildboar.distance.kneighborsclassifier method)": [[15, "wildboar.distance.KNeighborsClassifier.score"]], "set_output() (wildboar.distance.kmeans method)": [[15, "wildboar.distance.KMeans.set_output"]], "set_output() (wildboar.distance.kmedoids method)": [[15, "wildboar.distance.KMedoids.set_output"]], "set_params() (wildboar.distance.kmeans method)": [[15, "wildboar.distance.KMeans.set_params"]], "set_params() (wildboar.distance.kmedoids method)": [[15, "wildboar.distance.KMedoids.set_params"]], "set_params() (wildboar.distance.kneighborsclassifier method)": [[15, "wildboar.distance.KNeighborsClassifier.set_params"]], "subsequence_match() (in module wildboar.distance)": [[15, "wildboar.distance.subsequence_match"]], "transform() (wildboar.distance.kmeans method)": [[15, "wildboar.distance.KMeans.transform"]], "transform() (wildboar.distance.kmedoids method)": [[15, "wildboar.distance.KMedoids.transform"]], "wildboar.distance": [[15, "module-wildboar.distance"]], "elasticensembleclassifier (class in wildboar.ensemble._elastic)": [[16, "wildboar.ensemble._elastic.ElasticEnsembleClassifier"]], "fit() (wildboar.ensemble._elastic.elasticensembleclassifier method)": [[16, "wildboar.ensemble._elastic.ElasticEnsembleClassifier.fit"]], "get_metadata_routing() (wildboar.ensemble._elastic.elasticensembleclassifier method)": [[16, "wildboar.ensemble._elastic.ElasticEnsembleClassifier.get_metadata_routing"]], "get_params() (wildboar.ensemble._elastic.elasticensembleclassifier method)": [[16, "wildboar.ensemble._elastic.ElasticEnsembleClassifier.get_params"]], "predict() (wildboar.ensemble._elastic.elasticensembleclassifier method)": [[16, "wildboar.ensemble._elastic.ElasticEnsembleClassifier.predict"]], "predict_proba() (wildboar.ensemble._elastic.elasticensembleclassifier method)": [[16, "wildboar.ensemble._elastic.ElasticEnsembleClassifier.predict_proba"]], "score() (wildboar.ensemble._elastic.elasticensembleclassifier method)": [[16, "wildboar.ensemble._elastic.ElasticEnsembleClassifier.score"]], "set_params() (wildboar.ensemble._elastic.elasticensembleclassifier method)": [[16, "wildboar.ensemble._elastic.ElasticEnsembleClassifier.set_params"]], "wildboar.ensemble._elastic": [[16, "module-wildboar.ensemble._elastic"]], "baggingclassifier (class in wildboar.ensemble._ensemble)": [[17, "wildboar.ensemble._ensemble.BaggingClassifier"]], "baggingregressor (class in wildboar.ensemble._ensemble)": [[17, "wildboar.ensemble._ensemble.BaggingRegressor"]], "basebagging (class in wildboar.ensemble._ensemble)": [[17, "wildboar.ensemble._ensemble.BaseBagging"]], "baseforestclassifier (class in wildboar.ensemble._ensemble)": [[17, "wildboar.ensemble._ensemble.BaseForestClassifier"]], "baseforestregressor (class in wildboar.ensemble._ensemble)": [[17, "wildboar.ensemble._ensemble.BaseForestRegressor"]], "baseshapeletforestclassifier (class in wildboar.ensemble._ensemble)": [[17, "wildboar.ensemble._ensemble.BaseShapeletForestClassifier"]], "baseshapeletforestregressor (class in wildboar.ensemble._ensemble)": [[17, "wildboar.ensemble._ensemble.BaseShapeletForestRegressor"]], "extrashapelettreesclassifier (class in wildboar.ensemble._ensemble)": [[17, "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier"]], "extrashapelettreesregressor (class in wildboar.ensemble._ensemble)": [[17, "wildboar.ensemble._ensemble.ExtraShapeletTreesRegressor"]], "forestmixin (class in wildboar.ensemble._ensemble)": [[17, "wildboar.ensemble._ensemble.ForestMixin"]], "intervalforestclassifier (class in wildboar.ensemble._ensemble)": [[17, "wildboar.ensemble._ensemble.IntervalForestClassifier"]], "intervalforestregressor (class in wildboar.ensemble._ensemble)": [[17, "wildboar.ensemble._ensemble.IntervalForestRegressor"]], "isolationshapeletforest (class in wildboar.ensemble._ensemble)": [[17, "wildboar.ensemble._ensemble.IsolationShapeletForest"]], "pivotforestclassifier (class in wildboar.ensemble._ensemble)": [[17, "wildboar.ensemble._ensemble.PivotForestClassifier"]], "proximityforestclassifier (class in wildboar.ensemble._ensemble)": [[17, "wildboar.ensemble._ensemble.ProximityForestClassifier"]], "rocketforestclassifier (class in wildboar.ensemble._ensemble)": [[17, "wildboar.ensemble._ensemble.RocketForestClassifier"]], "rocketforestregressor (class in wildboar.ensemble._ensemble)": [[17, "wildboar.ensemble._ensemble.RocketForestRegressor"]], "shapeletforestclassifier (class in wildboar.ensemble._ensemble)": [[17, "wildboar.ensemble._ensemble.ShapeletForestClassifier"]], "shapeletforestembedding (class in wildboar.ensemble._ensemble)": [[17, "wildboar.ensemble._ensemble.ShapeletForestEmbedding"]], "shapeletforestregressor (class in wildboar.ensemble._ensemble)": [[17, "wildboar.ensemble._ensemble.ShapeletForestRegressor"]], "base_estimator_ (wildboar.ensemble._ensemble.baggingclassifier property)": [[17, "wildboar.ensemble._ensemble.BaggingClassifier.base_estimator_"]], "base_estimator_ (wildboar.ensemble._ensemble.baggingregressor property)": [[17, "wildboar.ensemble._ensemble.BaggingRegressor.base_estimator_"]], "base_estimator_ (wildboar.ensemble._ensemble.basebagging property)": [[17, "wildboar.ensemble._ensemble.BaseBagging.base_estimator_"]], "base_estimator_ (wildboar.ensemble._ensemble.baseforestclassifier property)": [[17, "wildboar.ensemble._ensemble.BaseForestClassifier.base_estimator_"]], "base_estimator_ (wildboar.ensemble._ensemble.baseforestregressor property)": [[17, "wildboar.ensemble._ensemble.BaseForestRegressor.base_estimator_"]], "base_estimator_ (wildboar.ensemble._ensemble.baseshapeletforestclassifier property)": [[17, "wildboar.ensemble._ensemble.BaseShapeletForestClassifier.base_estimator_"]], "base_estimator_ (wildboar.ensemble._ensemble.baseshapeletforestregressor property)": [[17, "wildboar.ensemble._ensemble.BaseShapeletForestRegressor.base_estimator_"]], "base_estimator_ (wildboar.ensemble._ensemble.extrashapelettreesclassifier property)": [[17, "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier.base_estimator_"]], "base_estimator_ (wildboar.ensemble._ensemble.extrashapelettreesregressor property)": [[17, "wildboar.ensemble._ensemble.ExtraShapeletTreesRegressor.base_estimator_"]], "base_estimator_ (wildboar.ensemble._ensemble.intervalforestclassifier property)": [[17, "wildboar.ensemble._ensemble.IntervalForestClassifier.base_estimator_"]], "base_estimator_ (wildboar.ensemble._ensemble.intervalforestregressor property)": [[17, "wildboar.ensemble._ensemble.IntervalForestRegressor.base_estimator_"]], "base_estimator_ (wildboar.ensemble._ensemble.isolationshapeletforest property)": [[17, "wildboar.ensemble._ensemble.IsolationShapeletForest.base_estimator_"]], "base_estimator_ (wildboar.ensemble._ensemble.pivotforestclassifier property)": [[17, "wildboar.ensemble._ensemble.PivotForestClassifier.base_estimator_"]], "base_estimator_ (wildboar.ensemble._ensemble.proximityforestclassifier property)": [[17, "wildboar.ensemble._ensemble.ProximityForestClassifier.base_estimator_"]], "base_estimator_ (wildboar.ensemble._ensemble.rocketforestclassifier property)": [[17, "wildboar.ensemble._ensemble.RocketForestClassifier.base_estimator_"]], "base_estimator_ (wildboar.ensemble._ensemble.rocketforestregressor property)": [[17, "wildboar.ensemble._ensemble.RocketForestRegressor.base_estimator_"]], "base_estimator_ (wildboar.ensemble._ensemble.shapeletforestclassifier property)": [[17, "wildboar.ensemble._ensemble.ShapeletForestClassifier.base_estimator_"]], "base_estimator_ (wildboar.ensemble._ensemble.shapeletforestembedding property)": [[17, "wildboar.ensemble._ensemble.ShapeletForestEmbedding.base_estimator_"]], "base_estimator_ (wildboar.ensemble._ensemble.shapeletforestregressor property)": [[17, "wildboar.ensemble._ensemble.ShapeletForestRegressor.base_estimator_"]], "decision_function() (wildboar.ensemble._ensemble.baggingclassifier method)": [[17, "wildboar.ensemble._ensemble.BaggingClassifier.decision_function"]], "decision_function() (wildboar.ensemble._ensemble.baseforestclassifier method)": [[17, "wildboar.ensemble._ensemble.BaseForestClassifier.decision_function"]], "decision_function() (wildboar.ensemble._ensemble.baseshapeletforestclassifier method)": [[17, "wildboar.ensemble._ensemble.BaseShapeletForestClassifier.decision_function"]], "decision_function() (wildboar.ensemble._ensemble.extrashapelettreesclassifier method)": [[17, "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier.decision_function"]], "decision_function() (wildboar.ensemble._ensemble.intervalforestclassifier method)": [[17, "wildboar.ensemble._ensemble.IntervalForestClassifier.decision_function"]], "decision_function() (wildboar.ensemble._ensemble.pivotforestclassifier method)": [[17, "wildboar.ensemble._ensemble.PivotForestClassifier.decision_function"]], "decision_function() (wildboar.ensemble._ensemble.proximityforestclassifier method)": [[17, "wildboar.ensemble._ensemble.ProximityForestClassifier.decision_function"]], "decision_function() (wildboar.ensemble._ensemble.rocketforestclassifier method)": [[17, "wildboar.ensemble._ensemble.RocketForestClassifier.decision_function"]], "decision_function() (wildboar.ensemble._ensemble.shapeletforestclassifier method)": [[17, "wildboar.ensemble._ensemble.ShapeletForestClassifier.decision_function"]], "estimators_samples_ (wildboar.ensemble._ensemble.baggingclassifier property)": [[17, "wildboar.ensemble._ensemble.BaggingClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.baggingregressor property)": [[17, "wildboar.ensemble._ensemble.BaggingRegressor.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.basebagging property)": [[17, "wildboar.ensemble._ensemble.BaseBagging.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.baseforestclassifier property)": [[17, "wildboar.ensemble._ensemble.BaseForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.baseforestregressor property)": [[17, "wildboar.ensemble._ensemble.BaseForestRegressor.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.baseshapeletforestclassifier property)": [[17, "wildboar.ensemble._ensemble.BaseShapeletForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.baseshapeletforestregressor property)": [[17, "wildboar.ensemble._ensemble.BaseShapeletForestRegressor.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.extrashapelettreesclassifier property)": [[17, "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.extrashapelettreesregressor property)": [[17, "wildboar.ensemble._ensemble.ExtraShapeletTreesRegressor.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.intervalforestclassifier property)": [[17, "wildboar.ensemble._ensemble.IntervalForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.intervalforestregressor property)": [[17, "wildboar.ensemble._ensemble.IntervalForestRegressor.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.isolationshapeletforest property)": [[17, "wildboar.ensemble._ensemble.IsolationShapeletForest.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.pivotforestclassifier property)": [[17, "wildboar.ensemble._ensemble.PivotForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.proximityforestclassifier property)": [[17, "wildboar.ensemble._ensemble.ProximityForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.rocketforestclassifier property)": [[17, "wildboar.ensemble._ensemble.RocketForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.rocketforestregressor property)": [[17, "wildboar.ensemble._ensemble.RocketForestRegressor.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.shapeletforestclassifier property)": [[17, "wildboar.ensemble._ensemble.ShapeletForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.shapeletforestembedding property)": [[17, "wildboar.ensemble._ensemble.ShapeletForestEmbedding.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble._ensemble.shapeletforestregressor property)": [[17, "wildboar.ensemble._ensemble.ShapeletForestRegressor.estimators_samples_"]], "fit() (wildboar.ensemble._ensemble.baggingclassifier method)": [[17, "wildboar.ensemble._ensemble.BaggingClassifier.fit"]], "fit() (wildboar.ensemble._ensemble.baggingregressor method)": [[17, "wildboar.ensemble._ensemble.BaggingRegressor.fit"]], "fit() (wildboar.ensemble._ensemble.basebagging method)": [[17, "wildboar.ensemble._ensemble.BaseBagging.fit"]], "fit() (wildboar.ensemble._ensemble.baseforestclassifier method)": [[17, "wildboar.ensemble._ensemble.BaseForestClassifier.fit"]], "fit() (wildboar.ensemble._ensemble.baseforestregressor method)": [[17, "wildboar.ensemble._ensemble.BaseForestRegressor.fit"]], "fit() (wildboar.ensemble._ensemble.baseshapeletforestclassifier method)": [[17, "wildboar.ensemble._ensemble.BaseShapeletForestClassifier.fit"]], "fit() (wildboar.ensemble._ensemble.baseshapeletforestregressor method)": [[17, "wildboar.ensemble._ensemble.BaseShapeletForestRegressor.fit"]], "fit() (wildboar.ensemble._ensemble.extrashapelettreesclassifier method)": [[17, "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier.fit"]], "fit() (wildboar.ensemble._ensemble.extrashapelettreesregressor method)": [[17, "wildboar.ensemble._ensemble.ExtraShapeletTreesRegressor.fit"]], "fit() (wildboar.ensemble._ensemble.intervalforestclassifier method)": [[17, "wildboar.ensemble._ensemble.IntervalForestClassifier.fit"]], "fit() (wildboar.ensemble._ensemble.intervalforestregressor method)": [[17, "wildboar.ensemble._ensemble.IntervalForestRegressor.fit"]], "fit() (wildboar.ensemble._ensemble.isolationshapeletforest method)": [[17, "wildboar.ensemble._ensemble.IsolationShapeletForest.fit"]], "fit() (wildboar.ensemble._ensemble.pivotforestclassifier method)": [[17, "wildboar.ensemble._ensemble.PivotForestClassifier.fit"]], "fit() (wildboar.ensemble._ensemble.proximityforestclassifier method)": [[17, "wildboar.ensemble._ensemble.ProximityForestClassifier.fit"]], "fit() (wildboar.ensemble._ensemble.rocketforestclassifier method)": [[17, "wildboar.ensemble._ensemble.RocketForestClassifier.fit"]], "fit() (wildboar.ensemble._ensemble.rocketforestregressor method)": [[17, "wildboar.ensemble._ensemble.RocketForestRegressor.fit"]], "fit() (wildboar.ensemble._ensemble.shapeletforestclassifier method)": [[17, "wildboar.ensemble._ensemble.ShapeletForestClassifier.fit"]], "fit() (wildboar.ensemble._ensemble.shapeletforestembedding method)": [[17, "wildboar.ensemble._ensemble.ShapeletForestEmbedding.fit"]], "fit() (wildboar.ensemble._ensemble.shapeletforestregressor method)": [[17, "wildboar.ensemble._ensemble.ShapeletForestRegressor.fit"]], "fit_predict() (wildboar.ensemble._ensemble.isolationshapeletforest method)": [[17, "wildboar.ensemble._ensemble.IsolationShapeletForest.fit_predict"]], "get_metadata_routing() (wildboar.ensemble._ensemble.baggingclassifier method)": [[17, "wildboar.ensemble._ensemble.BaggingClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.baggingregressor method)": [[17, "wildboar.ensemble._ensemble.BaggingRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.basebagging method)": [[17, "wildboar.ensemble._ensemble.BaseBagging.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.baseforestclassifier method)": [[17, "wildboar.ensemble._ensemble.BaseForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.baseforestregressor method)": [[17, "wildboar.ensemble._ensemble.BaseForestRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.baseshapeletforestclassifier method)": [[17, "wildboar.ensemble._ensemble.BaseShapeletForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.baseshapeletforestregressor method)": [[17, "wildboar.ensemble._ensemble.BaseShapeletForestRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.extrashapelettreesclassifier method)": [[17, "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.extrashapelettreesregressor method)": [[17, "wildboar.ensemble._ensemble.ExtraShapeletTreesRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.intervalforestclassifier method)": [[17, "wildboar.ensemble._ensemble.IntervalForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.intervalforestregressor method)": [[17, "wildboar.ensemble._ensemble.IntervalForestRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.isolationshapeletforest method)": [[17, "wildboar.ensemble._ensemble.IsolationShapeletForest.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.pivotforestclassifier method)": [[17, "wildboar.ensemble._ensemble.PivotForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.proximityforestclassifier method)": [[17, "wildboar.ensemble._ensemble.ProximityForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.rocketforestclassifier method)": [[17, "wildboar.ensemble._ensemble.RocketForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.rocketforestregressor method)": [[17, "wildboar.ensemble._ensemble.RocketForestRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.shapeletforestclassifier method)": [[17, "wildboar.ensemble._ensemble.ShapeletForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.shapeletforestembedding method)": [[17, "wildboar.ensemble._ensemble.ShapeletForestEmbedding.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble._ensemble.shapeletforestregressor method)": [[17, "wildboar.ensemble._ensemble.ShapeletForestRegressor.get_metadata_routing"]], "get_params() (wildboar.ensemble._ensemble.baggingclassifier method)": [[17, "wildboar.ensemble._ensemble.BaggingClassifier.get_params"]], "get_params() (wildboar.ensemble._ensemble.baggingregressor method)": [[17, "wildboar.ensemble._ensemble.BaggingRegressor.get_params"]], "get_params() (wildboar.ensemble._ensemble.basebagging method)": [[17, "wildboar.ensemble._ensemble.BaseBagging.get_params"]], "get_params() (wildboar.ensemble._ensemble.baseforestclassifier method)": [[17, "wildboar.ensemble._ensemble.BaseForestClassifier.get_params"]], "get_params() (wildboar.ensemble._ensemble.baseforestregressor method)": [[17, "wildboar.ensemble._ensemble.BaseForestRegressor.get_params"]], "get_params() (wildboar.ensemble._ensemble.baseshapeletforestclassifier method)": [[17, "wildboar.ensemble._ensemble.BaseShapeletForestClassifier.get_params"]], "get_params() (wildboar.ensemble._ensemble.baseshapeletforestregressor method)": [[17, "wildboar.ensemble._ensemble.BaseShapeletForestRegressor.get_params"]], "get_params() (wildboar.ensemble._ensemble.extrashapelettreesclassifier method)": [[17, "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier.get_params"]], "get_params() (wildboar.ensemble._ensemble.extrashapelettreesregressor method)": [[17, "wildboar.ensemble._ensemble.ExtraShapeletTreesRegressor.get_params"]], "get_params() (wildboar.ensemble._ensemble.intervalforestclassifier method)": [[17, "wildboar.ensemble._ensemble.IntervalForestClassifier.get_params"]], "get_params() (wildboar.ensemble._ensemble.intervalforestregressor method)": [[17, "wildboar.ensemble._ensemble.IntervalForestRegressor.get_params"]], "get_params() (wildboar.ensemble._ensemble.isolationshapeletforest method)": [[17, "wildboar.ensemble._ensemble.IsolationShapeletForest.get_params"]], "get_params() (wildboar.ensemble._ensemble.pivotforestclassifier method)": [[17, "wildboar.ensemble._ensemble.PivotForestClassifier.get_params"]], "get_params() (wildboar.ensemble._ensemble.proximityforestclassifier method)": [[17, "wildboar.ensemble._ensemble.ProximityForestClassifier.get_params"]], "get_params() (wildboar.ensemble._ensemble.rocketforestclassifier method)": [[17, "wildboar.ensemble._ensemble.RocketForestClassifier.get_params"]], "get_params() (wildboar.ensemble._ensemble.rocketforestregressor method)": [[17, "wildboar.ensemble._ensemble.RocketForestRegressor.get_params"]], "get_params() (wildboar.ensemble._ensemble.shapeletforestclassifier method)": [[17, "wildboar.ensemble._ensemble.ShapeletForestClassifier.get_params"]], "get_params() (wildboar.ensemble._ensemble.shapeletforestembedding method)": [[17, "wildboar.ensemble._ensemble.ShapeletForestEmbedding.get_params"]], "get_params() (wildboar.ensemble._ensemble.shapeletforestregressor method)": [[17, "wildboar.ensemble._ensemble.ShapeletForestRegressor.get_params"]], "predict() (wildboar.ensemble._ensemble.baggingclassifier method)": [[17, "wildboar.ensemble._ensemble.BaggingClassifier.predict"]], "predict() (wildboar.ensemble._ensemble.baggingregressor method)": [[17, "wildboar.ensemble._ensemble.BaggingRegressor.predict"]], "predict() (wildboar.ensemble._ensemble.baseforestclassifier method)": [[17, "wildboar.ensemble._ensemble.BaseForestClassifier.predict"]], "predict() (wildboar.ensemble._ensemble.baseforestregressor method)": [[17, "wildboar.ensemble._ensemble.BaseForestRegressor.predict"]], "predict() (wildboar.ensemble._ensemble.baseshapeletforestclassifier method)": [[17, "wildboar.ensemble._ensemble.BaseShapeletForestClassifier.predict"]], "predict() (wildboar.ensemble._ensemble.baseshapeletforestregressor method)": [[17, "wildboar.ensemble._ensemble.BaseShapeletForestRegressor.predict"]], "predict() (wildboar.ensemble._ensemble.extrashapelettreesclassifier method)": [[17, "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier.predict"]], "predict() (wildboar.ensemble._ensemble.extrashapelettreesregressor method)": [[17, "wildboar.ensemble._ensemble.ExtraShapeletTreesRegressor.predict"]], "predict() (wildboar.ensemble._ensemble.intervalforestclassifier method)": [[17, "wildboar.ensemble._ensemble.IntervalForestClassifier.predict"]], "predict() (wildboar.ensemble._ensemble.intervalforestregressor method)": [[17, "wildboar.ensemble._ensemble.IntervalForestRegressor.predict"]], "predict() (wildboar.ensemble._ensemble.pivotforestclassifier method)": [[17, "wildboar.ensemble._ensemble.PivotForestClassifier.predict"]], "predict() (wildboar.ensemble._ensemble.proximityforestclassifier method)": [[17, "wildboar.ensemble._ensemble.ProximityForestClassifier.predict"]], "predict() (wildboar.ensemble._ensemble.rocketforestclassifier method)": [[17, "wildboar.ensemble._ensemble.RocketForestClassifier.predict"]], "predict() (wildboar.ensemble._ensemble.rocketforestregressor method)": [[17, "wildboar.ensemble._ensemble.RocketForestRegressor.predict"]], "predict() (wildboar.ensemble._ensemble.shapeletforestclassifier method)": [[17, "wildboar.ensemble._ensemble.ShapeletForestClassifier.predict"]], "predict() (wildboar.ensemble._ensemble.shapeletforestembedding method)": [[17, "wildboar.ensemble._ensemble.ShapeletForestEmbedding.predict"]], "predict() (wildboar.ensemble._ensemble.shapeletforestregressor method)": [[17, "wildboar.ensemble._ensemble.ShapeletForestRegressor.predict"]], "predict_log_proba() (wildboar.ensemble._ensemble.baggingclassifier method)": [[17, "wildboar.ensemble._ensemble.BaggingClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble._ensemble.baseforestclassifier method)": [[17, "wildboar.ensemble._ensemble.BaseForestClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble._ensemble.baseshapeletforestclassifier method)": [[17, "wildboar.ensemble._ensemble.BaseShapeletForestClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble._ensemble.extrashapelettreesclassifier method)": [[17, "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble._ensemble.intervalforestclassifier method)": [[17, "wildboar.ensemble._ensemble.IntervalForestClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble._ensemble.pivotforestclassifier method)": [[17, "wildboar.ensemble._ensemble.PivotForestClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble._ensemble.proximityforestclassifier method)": [[17, "wildboar.ensemble._ensemble.ProximityForestClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble._ensemble.rocketforestclassifier method)": [[17, "wildboar.ensemble._ensemble.RocketForestClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble._ensemble.shapeletforestclassifier method)": [[17, "wildboar.ensemble._ensemble.ShapeletForestClassifier.predict_log_proba"]], "predict_proba() (wildboar.ensemble._ensemble.baggingclassifier method)": [[17, "wildboar.ensemble._ensemble.BaggingClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble._ensemble.baseforestclassifier method)": [[17, "wildboar.ensemble._ensemble.BaseForestClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble._ensemble.baseshapeletforestclassifier method)": [[17, "wildboar.ensemble._ensemble.BaseShapeletForestClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble._ensemble.extrashapelettreesclassifier method)": [[17, "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble._ensemble.intervalforestclassifier method)": [[17, "wildboar.ensemble._ensemble.IntervalForestClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble._ensemble.pivotforestclassifier method)": [[17, "wildboar.ensemble._ensemble.PivotForestClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble._ensemble.proximityforestclassifier method)": [[17, "wildboar.ensemble._ensemble.ProximityForestClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble._ensemble.rocketforestclassifier method)": [[17, "wildboar.ensemble._ensemble.RocketForestClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble._ensemble.shapeletforestclassifier method)": [[17, "wildboar.ensemble._ensemble.ShapeletForestClassifier.predict_proba"]], "score() (wildboar.ensemble._ensemble.baggingclassifier method)": [[17, "wildboar.ensemble._ensemble.BaggingClassifier.score"]], "score() (wildboar.ensemble._ensemble.baggingregressor method)": [[17, "wildboar.ensemble._ensemble.BaggingRegressor.score"]], "score() (wildboar.ensemble._ensemble.baseforestclassifier method)": [[17, "wildboar.ensemble._ensemble.BaseForestClassifier.score"]], "score() (wildboar.ensemble._ensemble.baseforestregressor method)": [[17, "wildboar.ensemble._ensemble.BaseForestRegressor.score"]], "score() (wildboar.ensemble._ensemble.baseshapeletforestclassifier method)": [[17, "wildboar.ensemble._ensemble.BaseShapeletForestClassifier.score"]], "score() (wildboar.ensemble._ensemble.baseshapeletforestregressor method)": [[17, "wildboar.ensemble._ensemble.BaseShapeletForestRegressor.score"]], "score() (wildboar.ensemble._ensemble.extrashapelettreesclassifier method)": [[17, "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier.score"]], "score() (wildboar.ensemble._ensemble.extrashapelettreesregressor method)": [[17, "wildboar.ensemble._ensemble.ExtraShapeletTreesRegressor.score"]], "score() (wildboar.ensemble._ensemble.intervalforestclassifier method)": [[17, "wildboar.ensemble._ensemble.IntervalForestClassifier.score"]], "score() (wildboar.ensemble._ensemble.intervalforestregressor method)": [[17, "wildboar.ensemble._ensemble.IntervalForestRegressor.score"]], "score() (wildboar.ensemble._ensemble.pivotforestclassifier method)": [[17, "wildboar.ensemble._ensemble.PivotForestClassifier.score"]], "score() (wildboar.ensemble._ensemble.proximityforestclassifier method)": [[17, "wildboar.ensemble._ensemble.ProximityForestClassifier.score"]], "score() (wildboar.ensemble._ensemble.rocketforestclassifier method)": [[17, "wildboar.ensemble._ensemble.RocketForestClassifier.score"]], "score() (wildboar.ensemble._ensemble.rocketforestregressor method)": [[17, "wildboar.ensemble._ensemble.RocketForestRegressor.score"]], "score() (wildboar.ensemble._ensemble.shapeletforestclassifier method)": [[17, "wildboar.ensemble._ensemble.ShapeletForestClassifier.score"]], "score() (wildboar.ensemble._ensemble.shapeletforestembedding method)": [[17, "wildboar.ensemble._ensemble.ShapeletForestEmbedding.score"]], "score() (wildboar.ensemble._ensemble.shapeletforestregressor method)": [[17, "wildboar.ensemble._ensemble.ShapeletForestRegressor.score"]], "set_params() (wildboar.ensemble._ensemble.baggingclassifier method)": [[17, "wildboar.ensemble._ensemble.BaggingClassifier.set_params"]], "set_params() (wildboar.ensemble._ensemble.baggingregressor method)": [[17, "wildboar.ensemble._ensemble.BaggingRegressor.set_params"]], "set_params() (wildboar.ensemble._ensemble.basebagging method)": [[17, "wildboar.ensemble._ensemble.BaseBagging.set_params"]], "set_params() (wildboar.ensemble._ensemble.baseforestclassifier method)": [[17, "wildboar.ensemble._ensemble.BaseForestClassifier.set_params"]], "set_params() (wildboar.ensemble._ensemble.baseforestregressor method)": [[17, "wildboar.ensemble._ensemble.BaseForestRegressor.set_params"]], "set_params() (wildboar.ensemble._ensemble.baseshapeletforestclassifier method)": [[17, "wildboar.ensemble._ensemble.BaseShapeletForestClassifier.set_params"]], "set_params() (wildboar.ensemble._ensemble.baseshapeletforestregressor method)": [[17, "wildboar.ensemble._ensemble.BaseShapeletForestRegressor.set_params"]], "set_params() (wildboar.ensemble._ensemble.extrashapelettreesclassifier method)": [[17, "wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier.set_params"]], "set_params() (wildboar.ensemble._ensemble.extrashapelettreesregressor method)": [[17, "wildboar.ensemble._ensemble.ExtraShapeletTreesRegressor.set_params"]], "set_params() (wildboar.ensemble._ensemble.intervalforestclassifier method)": [[17, "wildboar.ensemble._ensemble.IntervalForestClassifier.set_params"]], "set_params() (wildboar.ensemble._ensemble.intervalforestregressor method)": [[17, "wildboar.ensemble._ensemble.IntervalForestRegressor.set_params"]], "set_params() (wildboar.ensemble._ensemble.isolationshapeletforest method)": [[17, "wildboar.ensemble._ensemble.IsolationShapeletForest.set_params"]], "set_params() (wildboar.ensemble._ensemble.pivotforestclassifier method)": [[17, "wildboar.ensemble._ensemble.PivotForestClassifier.set_params"]], "set_params() (wildboar.ensemble._ensemble.proximityforestclassifier method)": [[17, "wildboar.ensemble._ensemble.ProximityForestClassifier.set_params"]], "set_params() (wildboar.ensemble._ensemble.rocketforestclassifier method)": [[17, "wildboar.ensemble._ensemble.RocketForestClassifier.set_params"]], "set_params() (wildboar.ensemble._ensemble.rocketforestregressor method)": [[17, "wildboar.ensemble._ensemble.RocketForestRegressor.set_params"]], "set_params() (wildboar.ensemble._ensemble.shapeletforestclassifier method)": [[17, "wildboar.ensemble._ensemble.ShapeletForestClassifier.set_params"]], "set_params() (wildboar.ensemble._ensemble.shapeletforestembedding method)": [[17, "wildboar.ensemble._ensemble.ShapeletForestEmbedding.set_params"]], "set_params() (wildboar.ensemble._ensemble.shapeletforestregressor method)": [[17, "wildboar.ensemble._ensemble.ShapeletForestRegressor.set_params"]], "wildboar.ensemble._ensemble": [[17, "module-wildboar.ensemble._ensemble"]], "baggingclassifier (class in wildboar.ensemble)": [[18, "wildboar.ensemble.BaggingClassifier"]], "baggingregressor (class in wildboar.ensemble)": [[18, "wildboar.ensemble.BaggingRegressor"]], "basebagging (class in wildboar.ensemble)": [[18, "wildboar.ensemble.BaseBagging"]], "elasticensembleclassifier (class in wildboar.ensemble)": [[18, "wildboar.ensemble.ElasticEnsembleClassifier"]], "extrashapelettreesclassifier (class in wildboar.ensemble)": [[18, "wildboar.ensemble.ExtraShapeletTreesClassifier"]], "extrashapelettreesregressor (class in wildboar.ensemble)": [[18, "wildboar.ensemble.ExtraShapeletTreesRegressor"]], "intervalforestclassifier (class in wildboar.ensemble)": [[18, "wildboar.ensemble.IntervalForestClassifier"]], "intervalforestregressor (class in wildboar.ensemble)": [[18, "wildboar.ensemble.IntervalForestRegressor"]], "isolationshapeletforest (class in wildboar.ensemble)": [[18, "wildboar.ensemble.IsolationShapeletForest"]], "pivotforestclassifier (class in wildboar.ensemble)": [[18, "wildboar.ensemble.PivotForestClassifier"]], "proximityforestclassifier (class in wildboar.ensemble)": [[18, "wildboar.ensemble.ProximityForestClassifier"]], "rocketforestclassifier (class in wildboar.ensemble)": [[18, "wildboar.ensemble.RocketForestClassifier"]], "rocketforestregressor (class in wildboar.ensemble)": [[18, "wildboar.ensemble.RocketForestRegressor"]], "shapeletforestclassifier (class in wildboar.ensemble)": [[18, "wildboar.ensemble.ShapeletForestClassifier"]], "shapeletforestembedding (class in wildboar.ensemble)": [[18, "wildboar.ensemble.ShapeletForestEmbedding"]], "shapeletforestregressor (class in wildboar.ensemble)": [[18, "wildboar.ensemble.ShapeletForestRegressor"]], "base_estimator_ (wildboar.ensemble.baggingclassifier property)": [[18, "wildboar.ensemble.BaggingClassifier.base_estimator_"]], "base_estimator_ (wildboar.ensemble.baggingregressor property)": [[18, "wildboar.ensemble.BaggingRegressor.base_estimator_"]], "base_estimator_ (wildboar.ensemble.basebagging property)": [[18, "wildboar.ensemble.BaseBagging.base_estimator_"]], "base_estimator_ (wildboar.ensemble.extrashapelettreesclassifier property)": [[18, "wildboar.ensemble.ExtraShapeletTreesClassifier.base_estimator_"]], "base_estimator_ (wildboar.ensemble.extrashapelettreesregressor property)": [[18, "wildboar.ensemble.ExtraShapeletTreesRegressor.base_estimator_"]], "base_estimator_ (wildboar.ensemble.intervalforestclassifier property)": [[18, "wildboar.ensemble.IntervalForestClassifier.base_estimator_"]], "base_estimator_ (wildboar.ensemble.intervalforestregressor property)": [[18, "wildboar.ensemble.IntervalForestRegressor.base_estimator_"]], "base_estimator_ (wildboar.ensemble.isolationshapeletforest property)": [[18, "wildboar.ensemble.IsolationShapeletForest.base_estimator_"]], "base_estimator_ (wildboar.ensemble.pivotforestclassifier property)": [[18, "wildboar.ensemble.PivotForestClassifier.base_estimator_"]], "base_estimator_ (wildboar.ensemble.proximityforestclassifier property)": [[18, "wildboar.ensemble.ProximityForestClassifier.base_estimator_"]], "base_estimator_ (wildboar.ensemble.rocketforestclassifier property)": [[18, "wildboar.ensemble.RocketForestClassifier.base_estimator_"]], "base_estimator_ (wildboar.ensemble.rocketforestregressor property)": [[18, "wildboar.ensemble.RocketForestRegressor.base_estimator_"]], "base_estimator_ (wildboar.ensemble.shapeletforestclassifier property)": [[18, "wildboar.ensemble.ShapeletForestClassifier.base_estimator_"]], "base_estimator_ (wildboar.ensemble.shapeletforestembedding property)": [[18, "wildboar.ensemble.ShapeletForestEmbedding.base_estimator_"]], "base_estimator_ (wildboar.ensemble.shapeletforestregressor property)": [[18, "wildboar.ensemble.ShapeletForestRegressor.base_estimator_"]], "decision_function() (wildboar.ensemble.baggingclassifier method)": [[18, "wildboar.ensemble.BaggingClassifier.decision_function"]], "decision_function() (wildboar.ensemble.extrashapelettreesclassifier method)": [[18, "wildboar.ensemble.ExtraShapeletTreesClassifier.decision_function"]], "decision_function() (wildboar.ensemble.intervalforestclassifier method)": [[18, "wildboar.ensemble.IntervalForestClassifier.decision_function"]], "decision_function() (wildboar.ensemble.pivotforestclassifier method)": [[18, "wildboar.ensemble.PivotForestClassifier.decision_function"]], "decision_function() (wildboar.ensemble.proximityforestclassifier method)": [[18, "wildboar.ensemble.ProximityForestClassifier.decision_function"]], "decision_function() (wildboar.ensemble.rocketforestclassifier method)": [[18, "wildboar.ensemble.RocketForestClassifier.decision_function"]], "decision_function() (wildboar.ensemble.shapeletforestclassifier method)": [[18, "wildboar.ensemble.ShapeletForestClassifier.decision_function"]], "estimators_samples_ (wildboar.ensemble.baggingclassifier property)": [[18, "wildboar.ensemble.BaggingClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.baggingregressor property)": [[18, "wildboar.ensemble.BaggingRegressor.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.basebagging property)": [[18, "wildboar.ensemble.BaseBagging.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.extrashapelettreesclassifier property)": [[18, "wildboar.ensemble.ExtraShapeletTreesClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.extrashapelettreesregressor property)": [[18, "wildboar.ensemble.ExtraShapeletTreesRegressor.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.intervalforestclassifier property)": [[18, "wildboar.ensemble.IntervalForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.intervalforestregressor property)": [[18, "wildboar.ensemble.IntervalForestRegressor.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.isolationshapeletforest property)": [[18, "wildboar.ensemble.IsolationShapeletForest.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.pivotforestclassifier property)": [[18, "wildboar.ensemble.PivotForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.proximityforestclassifier property)": [[18, "wildboar.ensemble.ProximityForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.rocketforestclassifier property)": [[18, "wildboar.ensemble.RocketForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.rocketforestregressor property)": [[18, "wildboar.ensemble.RocketForestRegressor.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.shapeletforestclassifier property)": [[18, "wildboar.ensemble.ShapeletForestClassifier.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.shapeletforestembedding property)": [[18, "wildboar.ensemble.ShapeletForestEmbedding.estimators_samples_"]], "estimators_samples_ (wildboar.ensemble.shapeletforestregressor property)": [[18, "wildboar.ensemble.ShapeletForestRegressor.estimators_samples_"]], "fit() (wildboar.ensemble.baggingclassifier method)": [[18, "wildboar.ensemble.BaggingClassifier.fit"]], "fit() (wildboar.ensemble.baggingregressor method)": [[18, "wildboar.ensemble.BaggingRegressor.fit"]], "fit() (wildboar.ensemble.basebagging method)": [[18, "wildboar.ensemble.BaseBagging.fit"]], "fit() (wildboar.ensemble.elasticensembleclassifier method)": [[18, "wildboar.ensemble.ElasticEnsembleClassifier.fit"]], "fit() (wildboar.ensemble.extrashapelettreesclassifier method)": [[18, "wildboar.ensemble.ExtraShapeletTreesClassifier.fit"]], "fit() (wildboar.ensemble.extrashapelettreesregressor method)": [[18, "wildboar.ensemble.ExtraShapeletTreesRegressor.fit"]], "fit() (wildboar.ensemble.intervalforestclassifier method)": [[18, "wildboar.ensemble.IntervalForestClassifier.fit"]], "fit() (wildboar.ensemble.intervalforestregressor method)": [[18, "wildboar.ensemble.IntervalForestRegressor.fit"]], "fit() (wildboar.ensemble.isolationshapeletforest method)": [[18, "wildboar.ensemble.IsolationShapeletForest.fit"]], "fit() (wildboar.ensemble.pivotforestclassifier method)": [[18, "wildboar.ensemble.PivotForestClassifier.fit"]], "fit() (wildboar.ensemble.proximityforestclassifier method)": [[18, "wildboar.ensemble.ProximityForestClassifier.fit"]], "fit() (wildboar.ensemble.rocketforestclassifier method)": [[18, "wildboar.ensemble.RocketForestClassifier.fit"]], "fit() (wildboar.ensemble.rocketforestregressor method)": [[18, "wildboar.ensemble.RocketForestRegressor.fit"]], "fit() (wildboar.ensemble.shapeletforestclassifier method)": [[18, "wildboar.ensemble.ShapeletForestClassifier.fit"]], "fit() (wildboar.ensemble.shapeletforestembedding method)": [[18, "wildboar.ensemble.ShapeletForestEmbedding.fit"]], "fit() (wildboar.ensemble.shapeletforestregressor method)": [[18, "wildboar.ensemble.ShapeletForestRegressor.fit"]], "fit_predict() (wildboar.ensemble.isolationshapeletforest method)": [[18, "wildboar.ensemble.IsolationShapeletForest.fit_predict"]], "get_metadata_routing() (wildboar.ensemble.baggingclassifier method)": [[18, "wildboar.ensemble.BaggingClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.baggingregressor method)": [[18, "wildboar.ensemble.BaggingRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.basebagging method)": [[18, "wildboar.ensemble.BaseBagging.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.elasticensembleclassifier method)": [[18, "wildboar.ensemble.ElasticEnsembleClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.extrashapelettreesclassifier method)": [[18, "wildboar.ensemble.ExtraShapeletTreesClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.extrashapelettreesregressor method)": [[18, "wildboar.ensemble.ExtraShapeletTreesRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.intervalforestclassifier method)": [[18, "wildboar.ensemble.IntervalForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.intervalforestregressor method)": [[18, "wildboar.ensemble.IntervalForestRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.isolationshapeletforest method)": [[18, "wildboar.ensemble.IsolationShapeletForest.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.pivotforestclassifier method)": [[18, "wildboar.ensemble.PivotForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.proximityforestclassifier method)": [[18, "wildboar.ensemble.ProximityForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.rocketforestclassifier method)": [[18, "wildboar.ensemble.RocketForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.rocketforestregressor method)": [[18, "wildboar.ensemble.RocketForestRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.shapeletforestclassifier method)": [[18, "wildboar.ensemble.ShapeletForestClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.shapeletforestembedding method)": [[18, "wildboar.ensemble.ShapeletForestEmbedding.get_metadata_routing"]], "get_metadata_routing() (wildboar.ensemble.shapeletforestregressor method)": [[18, "wildboar.ensemble.ShapeletForestRegressor.get_metadata_routing"]], "get_params() (wildboar.ensemble.baggingclassifier method)": [[18, "wildboar.ensemble.BaggingClassifier.get_params"]], "get_params() (wildboar.ensemble.baggingregressor method)": [[18, "wildboar.ensemble.BaggingRegressor.get_params"]], "get_params() (wildboar.ensemble.basebagging method)": [[18, "wildboar.ensemble.BaseBagging.get_params"]], "get_params() (wildboar.ensemble.elasticensembleclassifier method)": [[18, "wildboar.ensemble.ElasticEnsembleClassifier.get_params"]], "get_params() (wildboar.ensemble.extrashapelettreesclassifier method)": [[18, "wildboar.ensemble.ExtraShapeletTreesClassifier.get_params"]], "get_params() (wildboar.ensemble.extrashapelettreesregressor method)": [[18, "wildboar.ensemble.ExtraShapeletTreesRegressor.get_params"]], "get_params() (wildboar.ensemble.intervalforestclassifier method)": [[18, "wildboar.ensemble.IntervalForestClassifier.get_params"]], "get_params() (wildboar.ensemble.intervalforestregressor method)": [[18, "wildboar.ensemble.IntervalForestRegressor.get_params"]], "get_params() (wildboar.ensemble.isolationshapeletforest method)": [[18, "wildboar.ensemble.IsolationShapeletForest.get_params"]], "get_params() (wildboar.ensemble.pivotforestclassifier method)": [[18, "wildboar.ensemble.PivotForestClassifier.get_params"]], "get_params() (wildboar.ensemble.proximityforestclassifier method)": [[18, "wildboar.ensemble.ProximityForestClassifier.get_params"]], "get_params() (wildboar.ensemble.rocketforestclassifier method)": [[18, "wildboar.ensemble.RocketForestClassifier.get_params"]], "get_params() (wildboar.ensemble.rocketforestregressor method)": [[18, "wildboar.ensemble.RocketForestRegressor.get_params"]], "get_params() (wildboar.ensemble.shapeletforestclassifier method)": [[18, "wildboar.ensemble.ShapeletForestClassifier.get_params"]], "get_params() (wildboar.ensemble.shapeletforestembedding method)": [[18, "wildboar.ensemble.ShapeletForestEmbedding.get_params"]], "get_params() (wildboar.ensemble.shapeletforestregressor method)": [[18, "wildboar.ensemble.ShapeletForestRegressor.get_params"]], "predict() (wildboar.ensemble.baggingclassifier method)": [[18, "wildboar.ensemble.BaggingClassifier.predict"]], "predict() (wildboar.ensemble.baggingregressor method)": [[18, "wildboar.ensemble.BaggingRegressor.predict"]], "predict() (wildboar.ensemble.elasticensembleclassifier method)": [[18, "wildboar.ensemble.ElasticEnsembleClassifier.predict"]], "predict() (wildboar.ensemble.extrashapelettreesclassifier method)": [[18, "wildboar.ensemble.ExtraShapeletTreesClassifier.predict"]], "predict() (wildboar.ensemble.extrashapelettreesregressor method)": [[18, "wildboar.ensemble.ExtraShapeletTreesRegressor.predict"]], "predict() (wildboar.ensemble.intervalforestclassifier method)": [[18, "wildboar.ensemble.IntervalForestClassifier.predict"]], "predict() (wildboar.ensemble.intervalforestregressor method)": [[18, "wildboar.ensemble.IntervalForestRegressor.predict"]], "predict() (wildboar.ensemble.pivotforestclassifier method)": [[18, "wildboar.ensemble.PivotForestClassifier.predict"]], "predict() (wildboar.ensemble.proximityforestclassifier method)": [[18, "wildboar.ensemble.ProximityForestClassifier.predict"]], "predict() (wildboar.ensemble.rocketforestclassifier method)": [[18, "wildboar.ensemble.RocketForestClassifier.predict"]], "predict() (wildboar.ensemble.rocketforestregressor method)": [[18, "wildboar.ensemble.RocketForestRegressor.predict"]], "predict() (wildboar.ensemble.shapeletforestclassifier method)": [[18, "wildboar.ensemble.ShapeletForestClassifier.predict"]], "predict() (wildboar.ensemble.shapeletforestembedding method)": [[18, "wildboar.ensemble.ShapeletForestEmbedding.predict"]], "predict() (wildboar.ensemble.shapeletforestregressor method)": [[18, "wildboar.ensemble.ShapeletForestRegressor.predict"]], "predict_log_proba() (wildboar.ensemble.baggingclassifier method)": [[18, "wildboar.ensemble.BaggingClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble.extrashapelettreesclassifier method)": [[18, "wildboar.ensemble.ExtraShapeletTreesClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble.intervalforestclassifier method)": [[18, "wildboar.ensemble.IntervalForestClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble.pivotforestclassifier method)": [[18, "wildboar.ensemble.PivotForestClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble.proximityforestclassifier method)": [[18, "wildboar.ensemble.ProximityForestClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble.rocketforestclassifier method)": [[18, "wildboar.ensemble.RocketForestClassifier.predict_log_proba"]], "predict_log_proba() (wildboar.ensemble.shapeletforestclassifier method)": [[18, "wildboar.ensemble.ShapeletForestClassifier.predict_log_proba"]], "predict_proba() (wildboar.ensemble.baggingclassifier method)": [[18, "wildboar.ensemble.BaggingClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble.elasticensembleclassifier method)": [[18, "wildboar.ensemble.ElasticEnsembleClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble.extrashapelettreesclassifier method)": [[18, "wildboar.ensemble.ExtraShapeletTreesClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble.intervalforestclassifier method)": [[18, "wildboar.ensemble.IntervalForestClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble.pivotforestclassifier method)": [[18, "wildboar.ensemble.PivotForestClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble.proximityforestclassifier method)": [[18, "wildboar.ensemble.ProximityForestClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble.rocketforestclassifier method)": [[18, "wildboar.ensemble.RocketForestClassifier.predict_proba"]], "predict_proba() (wildboar.ensemble.shapeletforestclassifier method)": [[18, "wildboar.ensemble.ShapeletForestClassifier.predict_proba"]], "score() (wildboar.ensemble.baggingclassifier method)": [[18, "wildboar.ensemble.BaggingClassifier.score"]], "score() (wildboar.ensemble.baggingregressor method)": [[18, "wildboar.ensemble.BaggingRegressor.score"]], "score() (wildboar.ensemble.elasticensembleclassifier method)": [[18, "wildboar.ensemble.ElasticEnsembleClassifier.score"]], "score() (wildboar.ensemble.extrashapelettreesclassifier method)": [[18, "wildboar.ensemble.ExtraShapeletTreesClassifier.score"]], "score() (wildboar.ensemble.extrashapelettreesregressor method)": [[18, "wildboar.ensemble.ExtraShapeletTreesRegressor.score"]], "score() (wildboar.ensemble.intervalforestclassifier method)": [[18, "wildboar.ensemble.IntervalForestClassifier.score"]], "score() (wildboar.ensemble.intervalforestregressor method)": [[18, "wildboar.ensemble.IntervalForestRegressor.score"]], "score() (wildboar.ensemble.pivotforestclassifier method)": [[18, "wildboar.ensemble.PivotForestClassifier.score"]], "score() (wildboar.ensemble.proximityforestclassifier method)": [[18, "wildboar.ensemble.ProximityForestClassifier.score"]], "score() (wildboar.ensemble.rocketforestclassifier method)": [[18, "wildboar.ensemble.RocketForestClassifier.score"]], "score() (wildboar.ensemble.rocketforestregressor method)": [[18, "wildboar.ensemble.RocketForestRegressor.score"]], "score() (wildboar.ensemble.shapeletforestclassifier method)": [[18, "wildboar.ensemble.ShapeletForestClassifier.score"]], "score() (wildboar.ensemble.shapeletforestembedding method)": [[18, "wildboar.ensemble.ShapeletForestEmbedding.score"]], "score() (wildboar.ensemble.shapeletforestregressor method)": [[18, "wildboar.ensemble.ShapeletForestRegressor.score"]], "set_params() (wildboar.ensemble.baggingclassifier method)": [[18, "wildboar.ensemble.BaggingClassifier.set_params"]], "set_params() (wildboar.ensemble.baggingregressor method)": [[18, "wildboar.ensemble.BaggingRegressor.set_params"]], "set_params() (wildboar.ensemble.basebagging method)": [[18, "wildboar.ensemble.BaseBagging.set_params"]], "set_params() (wildboar.ensemble.elasticensembleclassifier method)": [[18, "wildboar.ensemble.ElasticEnsembleClassifier.set_params"]], "set_params() (wildboar.ensemble.extrashapelettreesclassifier method)": [[18, "wildboar.ensemble.ExtraShapeletTreesClassifier.set_params"]], "set_params() (wildboar.ensemble.extrashapelettreesregressor method)": [[18, "wildboar.ensemble.ExtraShapeletTreesRegressor.set_params"]], "set_params() (wildboar.ensemble.intervalforestclassifier method)": [[18, "wildboar.ensemble.IntervalForestClassifier.set_params"]], "set_params() (wildboar.ensemble.intervalforestregressor method)": [[18, "wildboar.ensemble.IntervalForestRegressor.set_params"]], "set_params() (wildboar.ensemble.isolationshapeletforest method)": [[18, "wildboar.ensemble.IsolationShapeletForest.set_params"]], "set_params() (wildboar.ensemble.pivotforestclassifier method)": [[18, "wildboar.ensemble.PivotForestClassifier.set_params"]], "set_params() (wildboar.ensemble.proximityforestclassifier method)": [[18, "wildboar.ensemble.ProximityForestClassifier.set_params"]], "set_params() (wildboar.ensemble.rocketforestclassifier method)": [[18, "wildboar.ensemble.RocketForestClassifier.set_params"]], "set_params() (wildboar.ensemble.rocketforestregressor method)": [[18, "wildboar.ensemble.RocketForestRegressor.set_params"]], "set_params() (wildboar.ensemble.shapeletforestclassifier method)": [[18, "wildboar.ensemble.ShapeletForestClassifier.set_params"]], "set_params() (wildboar.ensemble.shapeletforestembedding method)": [[18, "wildboar.ensemble.ShapeletForestEmbedding.set_params"]], "set_params() (wildboar.ensemble.shapeletforestregressor method)": [[18, "wildboar.ensemble.ShapeletForestRegressor.set_params"]], "wildboar.ensemble": [[18, "module-wildboar.ensemble"]], "amplitudeimportance (class in wildboar.explain._importance)": [[19, "wildboar.explain._importance.AmplitudeImportance"]], "intervalimportance (class in wildboar.explain._importance)": [[19, "wildboar.explain._importance.IntervalImportance"]], "permuteimportance (class in wildboar.explain._importance)": [[19, "wildboar.explain._importance.PermuteImportance"]], "shapeletimportance (class in wildboar.explain._importance)": [[19, "wildboar.explain._importance.ShapeletImportance"]], "fit_explain() (wildboar.explain._importance.amplitudeimportance method)": [[19, "wildboar.explain._importance.AmplitudeImportance.fit_explain"]], "fit_explain() (wildboar.explain._importance.intervalimportance method)": [[19, "wildboar.explain._importance.IntervalImportance.fit_explain"]], "fit_explain() (wildboar.explain._importance.shapeletimportance method)": [[19, "wildboar.explain._importance.ShapeletImportance.fit_explain"]], "get_metadata_routing() (wildboar.explain._importance.amplitudeimportance method)": [[19, "wildboar.explain._importance.AmplitudeImportance.get_metadata_routing"]], "get_metadata_routing() (wildboar.explain._importance.intervalimportance method)": [[19, "wildboar.explain._importance.IntervalImportance.get_metadata_routing"]], "get_metadata_routing() (wildboar.explain._importance.permuteimportance method)": [[19, "wildboar.explain._importance.PermuteImportance.get_metadata_routing"]], "get_metadata_routing() (wildboar.explain._importance.shapeletimportance method)": [[19, "wildboar.explain._importance.ShapeletImportance.get_metadata_routing"]], "get_params() (wildboar.explain._importance.amplitudeimportance method)": [[19, "wildboar.explain._importance.AmplitudeImportance.get_params"]], "get_params() (wildboar.explain._importance.intervalimportance method)": [[19, "wildboar.explain._importance.IntervalImportance.get_params"]], "get_params() (wildboar.explain._importance.permuteimportance method)": [[19, "wildboar.explain._importance.PermuteImportance.get_params"]], "get_params() (wildboar.explain._importance.shapeletimportance method)": [[19, "wildboar.explain._importance.ShapeletImportance.get_params"]], "plot() (wildboar.explain._importance.amplitudeimportance method)": [[19, "wildboar.explain._importance.AmplitudeImportance.plot"]], "plot() (wildboar.explain._importance.intervalimportance method)": [[19, "wildboar.explain._importance.IntervalImportance.plot"]], "plot() (wildboar.explain._importance.shapeletimportance method)": [[19, "wildboar.explain._importance.ShapeletImportance.plot"]], "plot_importances() (in module wildboar.explain._importance)": [[19, "wildboar.explain._importance.plot_importances"]], "set_params() (wildboar.explain._importance.amplitudeimportance method)": [[19, "wildboar.explain._importance.AmplitudeImportance.set_params"]], "set_params() (wildboar.explain._importance.intervalimportance method)": [[19, "wildboar.explain._importance.IntervalImportance.set_params"]], "set_params() (wildboar.explain._importance.permuteimportance method)": [[19, "wildboar.explain._importance.PermuteImportance.set_params"]], "set_params() (wildboar.explain._importance.shapeletimportance method)": [[19, "wildboar.explain._importance.ShapeletImportance.set_params"]], "wildboar.explain._importance": [[19, "module-wildboar.explain._importance"]], "counterfactuals() (in module wildboar.explain.counterfactual._helper)": [[20, "wildboar.explain.counterfactual._helper.counterfactuals"]], "wildboar.explain.counterfactual._helper": [[20, "module-wildboar.explain.counterfactual._helper"]], "kneighborscounterfactual (class in wildboar.explain.counterfactual._nn)": [[21, "wildboar.explain.counterfactual._nn.KNeighborsCounterfactual"]], "fit_explain() (wildboar.explain.counterfactual._nn.kneighborscounterfactual method)": [[21, "wildboar.explain.counterfactual._nn.KNeighborsCounterfactual.fit_explain"]], "get_metadata_routing() (wildboar.explain.counterfactual._nn.kneighborscounterfactual method)": [[21, "wildboar.explain.counterfactual._nn.KNeighborsCounterfactual.get_metadata_routing"]], "get_params() (wildboar.explain.counterfactual._nn.kneighborscounterfactual method)": [[21, "wildboar.explain.counterfactual._nn.KNeighborsCounterfactual.get_params"]], "plot() (wildboar.explain.counterfactual._nn.kneighborscounterfactual method)": [[21, "wildboar.explain.counterfactual._nn.KNeighborsCounterfactual.plot"]], "score() (wildboar.explain.counterfactual._nn.kneighborscounterfactual method)": [[21, "wildboar.explain.counterfactual._nn.KNeighborsCounterfactual.score"]], "set_params() (wildboar.explain.counterfactual._nn.kneighborscounterfactual method)": [[21, "wildboar.explain.counterfactual._nn.KNeighborsCounterfactual.set_params"]], "wildboar.explain.counterfactual._nn": [[21, "module-wildboar.explain.counterfactual._nn"]], "dynamictimewarptransform (class in wildboar.explain.counterfactual._proto)": [[22, "wildboar.explain.counterfactual._proto.DynamicTimeWarpTransform"]], "euclideantransform (class in wildboar.explain.counterfactual._proto)": [[22, "wildboar.explain.counterfactual._proto.EuclideanTransform"]], "knearestprototypesampler (class in wildboar.explain.counterfactual._proto)": [[22, "wildboar.explain.counterfactual._proto.KNearestPrototypeSampler"]], "knearestshapeletprototypesampler (class in wildboar.explain.counterfactual._proto)": [[22, "wildboar.explain.counterfactual._proto.KNearestShapeletPrototypeSampler"]], "metrictransform (class in wildboar.explain.counterfactual._proto)": [[22, "wildboar.explain.counterfactual._proto.MetricTransform"]], "predictevaluator (class in wildboar.explain.counterfactual._proto)": [[22, "wildboar.explain.counterfactual._proto.PredictEvaluator"]], "probabilityevaluator (class in wildboar.explain.counterfactual._proto)": [[22, "wildboar.explain.counterfactual._proto.ProbabilityEvaluator"]], "prototypecounterfactual (class in wildboar.explain.counterfactual._proto)": [[22, "wildboar.explain.counterfactual._proto.PrototypeCounterfactual"]], "prototypesampler (class in wildboar.explain.counterfactual._proto)": [[22, "wildboar.explain.counterfactual._proto.PrototypeSampler"]], "shapeletprototypesampler (class in wildboar.explain.counterfactual._proto)": [[22, "wildboar.explain.counterfactual._proto.ShapeletPrototypeSampler"]], "targetevaluator (class in wildboar.explain.counterfactual._proto)": [[22, "wildboar.explain.counterfactual._proto.TargetEvaluator"]], "uniformprototypesampler (class in wildboar.explain.counterfactual._proto)": [[22, "wildboar.explain.counterfactual._proto.UniformPrototypeSampler"]], "weighteddynamictimewarptransform (class in wildboar.explain.counterfactual._proto)": [[22, "wildboar.explain.counterfactual._proto.WeightedDynamicTimeWarpTransform"]], "fit_explain() (wildboar.explain.counterfactual._proto.prototypecounterfactual method)": [[22, "wildboar.explain.counterfactual._proto.PrototypeCounterfactual.fit_explain"]], "get_metadata_routing() (wildboar.explain.counterfactual._proto.prototypecounterfactual method)": [[22, "wildboar.explain.counterfactual._proto.PrototypeCounterfactual.get_metadata_routing"]], "get_params() (wildboar.explain.counterfactual._proto.prototypecounterfactual method)": [[22, "wildboar.explain.counterfactual._proto.PrototypeCounterfactual.get_params"]], "is_counterfactual() (wildboar.explain.counterfactual._proto.predictevaluator method)": [[22, "wildboar.explain.counterfactual._proto.PredictEvaluator.is_counterfactual"]], "is_counterfactual() (wildboar.explain.counterfactual._proto.probabilityevaluator method)": [[22, "wildboar.explain.counterfactual._proto.ProbabilityEvaluator.is_counterfactual"]], "is_counterfactual() (wildboar.explain.counterfactual._proto.targetevaluator method)": [[22, "wildboar.explain.counterfactual._proto.TargetEvaluator.is_counterfactual"]], "move() (wildboar.explain.counterfactual._proto.dynamictimewarptransform method)": [[22, "wildboar.explain.counterfactual._proto.DynamicTimeWarpTransform.move"]], "move() (wildboar.explain.counterfactual._proto.euclideantransform method)": [[22, "wildboar.explain.counterfactual._proto.EuclideanTransform.move"]], "move() (wildboar.explain.counterfactual._proto.knearestprototypesampler method)": [[22, "wildboar.explain.counterfactual._proto.KNearestPrototypeSampler.move"]], "move() (wildboar.explain.counterfactual._proto.knearestshapeletprototypesampler method)": [[22, "wildboar.explain.counterfactual._proto.KNearestShapeletPrototypeSampler.move"]], "move() (wildboar.explain.counterfactual._proto.metrictransform method)": [[22, "wildboar.explain.counterfactual._proto.MetricTransform.move"]], "move() (wildboar.explain.counterfactual._proto.prototypesampler method)": [[22, "wildboar.explain.counterfactual._proto.PrototypeSampler.move"]], "move() (wildboar.explain.counterfactual._proto.shapeletprototypesampler method)": [[22, "wildboar.explain.counterfactual._proto.ShapeletPrototypeSampler.move"]], "move() (wildboar.explain.counterfactual._proto.uniformprototypesampler method)": [[22, "wildboar.explain.counterfactual._proto.UniformPrototypeSampler.move"]], "move() (wildboar.explain.counterfactual._proto.weighteddynamictimewarptransform method)": [[22, "wildboar.explain.counterfactual._proto.WeightedDynamicTimeWarpTransform.move"]], "nearest_index() (wildboar.explain.counterfactual._proto.knearestprototypesampler method)": [[22, "wildboar.explain.counterfactual._proto.KNearestPrototypeSampler.nearest_index"]], "plot() (wildboar.explain.counterfactual._proto.prototypecounterfactual method)": [[22, "wildboar.explain.counterfactual._proto.PrototypeCounterfactual.plot"]], "sample() (wildboar.explain.counterfactual._proto.knearestprototypesampler method)": [[22, "wildboar.explain.counterfactual._proto.KNearestPrototypeSampler.sample"]], "sample() (wildboar.explain.counterfactual._proto.knearestshapeletprototypesampler method)": [[22, "wildboar.explain.counterfactual._proto.KNearestShapeletPrototypeSampler.sample"]], "sample() (wildboar.explain.counterfactual._proto.prototypesampler method)": [[22, "wildboar.explain.counterfactual._proto.PrototypeSampler.sample"]], "sample() (wildboar.explain.counterfactual._proto.shapeletprototypesampler method)": [[22, "wildboar.explain.counterfactual._proto.ShapeletPrototypeSampler.sample"]], "sample() (wildboar.explain.counterfactual._proto.uniformprototypesampler method)": [[22, "wildboar.explain.counterfactual._proto.UniformPrototypeSampler.sample"]], "sample_move() (wildboar.explain.counterfactual._proto.knearestprototypesampler method)": [[22, "wildboar.explain.counterfactual._proto.KNearestPrototypeSampler.sample_move"]], "sample_move() (wildboar.explain.counterfactual._proto.knearestshapeletprototypesampler method)": [[22, "wildboar.explain.counterfactual._proto.KNearestShapeletPrototypeSampler.sample_move"]], "sample_move() (wildboar.explain.counterfactual._proto.prototypesampler method)": [[22, "wildboar.explain.counterfactual._proto.PrototypeSampler.sample_move"]], "sample_move() (wildboar.explain.counterfactual._proto.shapeletprototypesampler method)": [[22, "wildboar.explain.counterfactual._proto.ShapeletPrototypeSampler.sample_move"]], "sample_move() (wildboar.explain.counterfactual._proto.uniformprototypesampler method)": [[22, "wildboar.explain.counterfactual._proto.UniformPrototypeSampler.sample_move"]], "sample_shapelet() (wildboar.explain.counterfactual._proto.shapeletprototypesampler method)": [[22, "wildboar.explain.counterfactual._proto.ShapeletPrototypeSampler.sample_shapelet"]], "score() (wildboar.explain.counterfactual._proto.prototypecounterfactual method)": [[22, "wildboar.explain.counterfactual._proto.PrototypeCounterfactual.score"]], "set_params() (wildboar.explain.counterfactual._proto.prototypecounterfactual method)": [[22, "wildboar.explain.counterfactual._proto.PrototypeCounterfactual.set_params"]], "wildboar.explain.counterfactual._proto": [[22, "module-wildboar.explain.counterfactual._proto"]], "shapeletforestcounterfactual (class in wildboar.explain.counterfactual._sf)": [[23, "wildboar.explain.counterfactual._sf.ShapeletForestCounterfactual"]], "fit_explain() (wildboar.explain.counterfactual._sf.shapeletforestcounterfactual method)": [[23, "wildboar.explain.counterfactual._sf.ShapeletForestCounterfactual.fit_explain"]], "get_metadata_routing() (wildboar.explain.counterfactual._sf.shapeletforestcounterfactual method)": [[23, "wildboar.explain.counterfactual._sf.ShapeletForestCounterfactual.get_metadata_routing"]], "get_params() (wildboar.explain.counterfactual._sf.shapeletforestcounterfactual method)": [[23, "wildboar.explain.counterfactual._sf.ShapeletForestCounterfactual.get_params"]], "plot() (wildboar.explain.counterfactual._sf.shapeletforestcounterfactual method)": [[23, "wildboar.explain.counterfactual._sf.ShapeletForestCounterfactual.plot"]], "score() (wildboar.explain.counterfactual._sf.shapeletforestcounterfactual method)": [[23, "wildboar.explain.counterfactual._sf.ShapeletForestCounterfactual.score"]], "set_params() (wildboar.explain.counterfactual._sf.shapeletforestcounterfactual method)": [[23, "wildboar.explain.counterfactual._sf.ShapeletForestCounterfactual.set_params"]], "wildboar.explain.counterfactual._sf": [[23, "module-wildboar.explain.counterfactual._sf"]], "kneighborscounterfactual (class in wildboar.explain.counterfactual)": [[24, "wildboar.explain.counterfactual.KNeighborsCounterfactual"]], "prototypecounterfactual (class in wildboar.explain.counterfactual)": [[24, "wildboar.explain.counterfactual.PrototypeCounterfactual"]], "shapeletforestcounterfactual (class in wildboar.explain.counterfactual)": [[24, "wildboar.explain.counterfactual.ShapeletForestCounterfactual"]], "counterfactuals() (in module wildboar.explain.counterfactual)": [[24, "wildboar.explain.counterfactual.counterfactuals"]], "fit_explain() (wildboar.explain.counterfactual.kneighborscounterfactual method)": [[24, "wildboar.explain.counterfactual.KNeighborsCounterfactual.fit_explain"]], "fit_explain() (wildboar.explain.counterfactual.prototypecounterfactual method)": [[24, "wildboar.explain.counterfactual.PrototypeCounterfactual.fit_explain"]], "fit_explain() (wildboar.explain.counterfactual.shapeletforestcounterfactual method)": [[24, "wildboar.explain.counterfactual.ShapeletForestCounterfactual.fit_explain"]], "get_metadata_routing() (wildboar.explain.counterfactual.kneighborscounterfactual method)": [[24, "wildboar.explain.counterfactual.KNeighborsCounterfactual.get_metadata_routing"]], "get_metadata_routing() (wildboar.explain.counterfactual.prototypecounterfactual method)": [[24, "wildboar.explain.counterfactual.PrototypeCounterfactual.get_metadata_routing"]], "get_metadata_routing() (wildboar.explain.counterfactual.shapeletforestcounterfactual method)": [[24, "wildboar.explain.counterfactual.ShapeletForestCounterfactual.get_metadata_routing"]], "get_params() (wildboar.explain.counterfactual.kneighborscounterfactual method)": [[24, "wildboar.explain.counterfactual.KNeighborsCounterfactual.get_params"]], "get_params() (wildboar.explain.counterfactual.prototypecounterfactual method)": [[24, "wildboar.explain.counterfactual.PrototypeCounterfactual.get_params"]], "get_params() (wildboar.explain.counterfactual.shapeletforestcounterfactual method)": [[24, "wildboar.explain.counterfactual.ShapeletForestCounterfactual.get_params"]], "plot() (wildboar.explain.counterfactual.kneighborscounterfactual method)": [[24, "wildboar.explain.counterfactual.KNeighborsCounterfactual.plot"]], "plot() (wildboar.explain.counterfactual.prototypecounterfactual method)": [[24, "wildboar.explain.counterfactual.PrototypeCounterfactual.plot"]], "plot() (wildboar.explain.counterfactual.shapeletforestcounterfactual method)": [[24, "wildboar.explain.counterfactual.ShapeletForestCounterfactual.plot"]], "proximity() (in module wildboar.explain.counterfactual)": [[24, "wildboar.explain.counterfactual.proximity"]], "score() (wildboar.explain.counterfactual.kneighborscounterfactual method)": [[24, "wildboar.explain.counterfactual.KNeighborsCounterfactual.score"]], "score() (wildboar.explain.counterfactual.prototypecounterfactual method)": [[24, "wildboar.explain.counterfactual.PrototypeCounterfactual.score"]], "score() (wildboar.explain.counterfactual.shapeletforestcounterfactual method)": [[24, "wildboar.explain.counterfactual.ShapeletForestCounterfactual.score"]], "set_params() (wildboar.explain.counterfactual.kneighborscounterfactual method)": [[24, "wildboar.explain.counterfactual.KNeighborsCounterfactual.set_params"]], "set_params() (wildboar.explain.counterfactual.prototypecounterfactual method)": [[24, "wildboar.explain.counterfactual.PrototypeCounterfactual.set_params"]], "set_params() (wildboar.explain.counterfactual.shapeletforestcounterfactual method)": [[24, "wildboar.explain.counterfactual.ShapeletForestCounterfactual.set_params"]], "wildboar.explain.counterfactual": [[24, "module-wildboar.explain.counterfactual"]], "amplitudeimportance (class in wildboar.explain)": [[25, "wildboar.explain.AmplitudeImportance"]], "intervalimportance (class in wildboar.explain)": [[25, "wildboar.explain.IntervalImportance"]], "shapeletimportance (class in wildboar.explain)": [[25, "wildboar.explain.ShapeletImportance"]], "fit_explain() (wildboar.explain.amplitudeimportance method)": [[25, "wildboar.explain.AmplitudeImportance.fit_explain"]], "fit_explain() (wildboar.explain.intervalimportance method)": [[25, "wildboar.explain.IntervalImportance.fit_explain"]], "fit_explain() (wildboar.explain.shapeletimportance method)": [[25, "wildboar.explain.ShapeletImportance.fit_explain"]], "get_metadata_routing() (wildboar.explain.amplitudeimportance method)": [[25, "wildboar.explain.AmplitudeImportance.get_metadata_routing"]], "get_metadata_routing() (wildboar.explain.intervalimportance method)": [[25, "wildboar.explain.IntervalImportance.get_metadata_routing"]], "get_metadata_routing() (wildboar.explain.shapeletimportance method)": [[25, "wildboar.explain.ShapeletImportance.get_metadata_routing"]], "get_params() (wildboar.explain.amplitudeimportance method)": [[25, "wildboar.explain.AmplitudeImportance.get_params"]], "get_params() (wildboar.explain.intervalimportance method)": [[25, "wildboar.explain.IntervalImportance.get_params"]], "get_params() (wildboar.explain.shapeletimportance method)": [[25, "wildboar.explain.ShapeletImportance.get_params"]], "plot() (wildboar.explain.amplitudeimportance method)": [[25, "wildboar.explain.AmplitudeImportance.plot"]], "plot() (wildboar.explain.intervalimportance method)": [[25, "wildboar.explain.IntervalImportance.plot"]], "plot() (wildboar.explain.shapeletimportance method)": [[25, "wildboar.explain.ShapeletImportance.plot"]], "plot_importances() (in module wildboar.explain)": [[25, "wildboar.explain.plot_importances"]], "set_params() (wildboar.explain.amplitudeimportance method)": [[25, "wildboar.explain.AmplitudeImportance.set_params"]], "set_params() (wildboar.explain.intervalimportance method)": [[25, "wildboar.explain.IntervalImportance.set_params"]], "set_params() (wildboar.explain.shapeletimportance method)": [[25, "wildboar.explain.ShapeletImportance.set_params"]], "wildboar.explain": [[25, "module-wildboar.explain"]], "iseos() (in module wildboar)": [[26, "wildboar.iseos"]], "wildboar": [[26, "module-wildboar"]], "hydraclassifier (class in wildboar.linear_model._hydra)": [[27, "wildboar.linear_model._hydra.HydraClassifier"]], "get_metadata_routing() (wildboar.linear_model._hydra.hydraclassifier method)": [[27, "wildboar.linear_model._hydra.HydraClassifier.get_metadata_routing"]], "get_params() (wildboar.linear_model._hydra.hydraclassifier method)": [[27, "wildboar.linear_model._hydra.HydraClassifier.get_params"]], "score() (wildboar.linear_model._hydra.hydraclassifier method)": [[27, "wildboar.linear_model._hydra.HydraClassifier.score"]], "set_params() (wildboar.linear_model._hydra.hydraclassifier method)": [[27, "wildboar.linear_model._hydra.HydraClassifier.set_params"]], "wildboar.linear_model._hydra": [[27, "module-wildboar.linear_model._hydra"]], "rocketclassifier (class in wildboar.linear_model._rocket)": [[28, "wildboar.linear_model._rocket.RocketClassifier"]], "rocketregressor (class in wildboar.linear_model._rocket)": [[28, "wildboar.linear_model._rocket.RocketRegressor"]], "get_metadata_routing() (wildboar.linear_model._rocket.rocketclassifier method)": [[28, "wildboar.linear_model._rocket.RocketClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model._rocket.rocketregressor method)": [[28, "wildboar.linear_model._rocket.RocketRegressor.get_metadata_routing"]], "get_params() (wildboar.linear_model._rocket.rocketclassifier method)": [[28, "wildboar.linear_model._rocket.RocketClassifier.get_params"]], "get_params() (wildboar.linear_model._rocket.rocketregressor method)": [[28, "wildboar.linear_model._rocket.RocketRegressor.get_params"]], "score() (wildboar.linear_model._rocket.rocketclassifier method)": [[28, "wildboar.linear_model._rocket.RocketClassifier.score"]], "score() (wildboar.linear_model._rocket.rocketregressor method)": [[28, "wildboar.linear_model._rocket.RocketRegressor.score"]], "set_params() (wildboar.linear_model._rocket.rocketclassifier method)": [[28, "wildboar.linear_model._rocket.RocketClassifier.set_params"]], "set_params() (wildboar.linear_model._rocket.rocketregressor method)": [[28, "wildboar.linear_model._rocket.RocketRegressor.set_params"]], "wildboar.linear_model._rocket": [[28, "module-wildboar.linear_model._rocket"]], "dilatedshapeletclassifier (class in wildboar.linear_model._shapelet)": [[29, "wildboar.linear_model._shapelet.DilatedShapeletClassifier"]], "randomshapeletclassifier (class in wildboar.linear_model._shapelet)": [[29, "wildboar.linear_model._shapelet.RandomShapeletClassifier"]], "randomshapeletregressor (class in wildboar.linear_model._shapelet)": [[29, "wildboar.linear_model._shapelet.RandomShapeletRegressor"]], "get_metadata_routing() (wildboar.linear_model._shapelet.dilatedshapeletclassifier method)": [[29, "wildboar.linear_model._shapelet.DilatedShapeletClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model._shapelet.randomshapeletclassifier method)": [[29, "wildboar.linear_model._shapelet.RandomShapeletClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model._shapelet.randomshapeletregressor method)": [[29, "wildboar.linear_model._shapelet.RandomShapeletRegressor.get_metadata_routing"]], "get_params() (wildboar.linear_model._shapelet.dilatedshapeletclassifier method)": [[29, "wildboar.linear_model._shapelet.DilatedShapeletClassifier.get_params"]], "get_params() (wildboar.linear_model._shapelet.randomshapeletclassifier method)": [[29, "wildboar.linear_model._shapelet.RandomShapeletClassifier.get_params"]], "get_params() (wildboar.linear_model._shapelet.randomshapeletregressor method)": [[29, "wildboar.linear_model._shapelet.RandomShapeletRegressor.get_params"]], "score() (wildboar.linear_model._shapelet.dilatedshapeletclassifier method)": [[29, "wildboar.linear_model._shapelet.DilatedShapeletClassifier.score"]], "score() (wildboar.linear_model._shapelet.randomshapeletclassifier method)": [[29, "wildboar.linear_model._shapelet.RandomShapeletClassifier.score"]], "score() (wildboar.linear_model._shapelet.randomshapeletregressor method)": [[29, "wildboar.linear_model._shapelet.RandomShapeletRegressor.score"]], "set_params() (wildboar.linear_model._shapelet.dilatedshapeletclassifier method)": [[29, "wildboar.linear_model._shapelet.DilatedShapeletClassifier.set_params"]], "set_params() (wildboar.linear_model._shapelet.randomshapeletclassifier method)": [[29, "wildboar.linear_model._shapelet.RandomShapeletClassifier.set_params"]], "set_params() (wildboar.linear_model._shapelet.randomshapeletregressor method)": [[29, "wildboar.linear_model._shapelet.RandomShapeletRegressor.set_params"]], "wildboar.linear_model._shapelet": [[29, "module-wildboar.linear_model._shapelet"]], "basetransformclassifier (class in wildboar.linear_model._transform)": [[30, "wildboar.linear_model._transform.BaseTransformClassifier"]], "basetransformestimator (class in wildboar.linear_model._transform)": [[30, "wildboar.linear_model._transform.BaseTransformEstimator"]], "basetransformregressor (class in wildboar.linear_model._transform)": [[30, "wildboar.linear_model._transform.BaseTransformRegressor"]], "transformridgecv (class in wildboar.linear_model._transform)": [[30, "wildboar.linear_model._transform.TransformRidgeCV"]], "transformridgeclassifiercv (class in wildboar.linear_model._transform)": [[30, "wildboar.linear_model._transform.TransformRidgeClassifierCV"]], "get_metadata_routing() (wildboar.linear_model._transform.basetransformclassifier method)": [[30, "wildboar.linear_model._transform.BaseTransformClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model._transform.basetransformestimator method)": [[30, "wildboar.linear_model._transform.BaseTransformEstimator.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model._transform.basetransformregressor method)": [[30, "wildboar.linear_model._transform.BaseTransformRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model._transform.transformridgecv method)": [[30, "wildboar.linear_model._transform.TransformRidgeCV.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model._transform.transformridgeclassifiercv method)": [[30, "wildboar.linear_model._transform.TransformRidgeClassifierCV.get_metadata_routing"]], "get_params() (wildboar.linear_model._transform.basetransformclassifier method)": [[30, "wildboar.linear_model._transform.BaseTransformClassifier.get_params"]], "get_params() (wildboar.linear_model._transform.basetransformestimator method)": [[30, "wildboar.linear_model._transform.BaseTransformEstimator.get_params"]], "get_params() (wildboar.linear_model._transform.basetransformregressor method)": [[30, "wildboar.linear_model._transform.BaseTransformRegressor.get_params"]], "get_params() (wildboar.linear_model._transform.transformridgecv method)": [[30, "wildboar.linear_model._transform.TransformRidgeCV.get_params"]], "get_params() (wildboar.linear_model._transform.transformridgeclassifiercv method)": [[30, "wildboar.linear_model._transform.TransformRidgeClassifierCV.get_params"]], "score() (wildboar.linear_model._transform.basetransformclassifier method)": [[30, "wildboar.linear_model._transform.BaseTransformClassifier.score"]], "score() (wildboar.linear_model._transform.basetransformregressor method)": [[30, "wildboar.linear_model._transform.BaseTransformRegressor.score"]], "score() (wildboar.linear_model._transform.transformridgecv method)": [[30, "wildboar.linear_model._transform.TransformRidgeCV.score"]], "score() (wildboar.linear_model._transform.transformridgeclassifiercv method)": [[30, "wildboar.linear_model._transform.TransformRidgeClassifierCV.score"]], "set_params() (wildboar.linear_model._transform.basetransformclassifier method)": [[30, "wildboar.linear_model._transform.BaseTransformClassifier.set_params"]], "set_params() (wildboar.linear_model._transform.basetransformestimator method)": [[30, "wildboar.linear_model._transform.BaseTransformEstimator.set_params"]], "set_params() (wildboar.linear_model._transform.basetransformregressor method)": [[30, "wildboar.linear_model._transform.BaseTransformRegressor.set_params"]], "set_params() (wildboar.linear_model._transform.transformridgecv method)": [[30, "wildboar.linear_model._transform.TransformRidgeCV.set_params"]], "set_params() (wildboar.linear_model._transform.transformridgeclassifiercv method)": [[30, "wildboar.linear_model._transform.TransformRidgeClassifierCV.set_params"]], "wildboar.linear_model._transform": [[30, "module-wildboar.linear_model._transform"]], "dilatedshapeletclassifier (class in wildboar.linear_model)": [[31, "wildboar.linear_model.DilatedShapeletClassifier"]], "hydraclassifier (class in wildboar.linear_model)": [[31, "wildboar.linear_model.HydraClassifier"]], "randomshapeletclassifier (class in wildboar.linear_model)": [[31, "wildboar.linear_model.RandomShapeletClassifier"]], "randomshapeletregressor (class in wildboar.linear_model)": [[31, "wildboar.linear_model.RandomShapeletRegressor"]], "rocketclassifier (class in wildboar.linear_model)": [[31, "wildboar.linear_model.RocketClassifier"]], "rocketregressor (class in wildboar.linear_model)": [[31, "wildboar.linear_model.RocketRegressor"]], "get_metadata_routing() (wildboar.linear_model.dilatedshapeletclassifier method)": [[31, "wildboar.linear_model.DilatedShapeletClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model.hydraclassifier method)": [[31, "wildboar.linear_model.HydraClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model.randomshapeletclassifier method)": [[31, "wildboar.linear_model.RandomShapeletClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model.randomshapeletregressor method)": [[31, "wildboar.linear_model.RandomShapeletRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model.rocketclassifier method)": [[31, "wildboar.linear_model.RocketClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.linear_model.rocketregressor method)": [[31, "wildboar.linear_model.RocketRegressor.get_metadata_routing"]], "get_params() (wildboar.linear_model.dilatedshapeletclassifier method)": [[31, "wildboar.linear_model.DilatedShapeletClassifier.get_params"]], "get_params() (wildboar.linear_model.hydraclassifier method)": [[31, "wildboar.linear_model.HydraClassifier.get_params"]], "get_params() (wildboar.linear_model.randomshapeletclassifier method)": [[31, "wildboar.linear_model.RandomShapeletClassifier.get_params"]], "get_params() (wildboar.linear_model.randomshapeletregressor method)": [[31, "wildboar.linear_model.RandomShapeletRegressor.get_params"]], "get_params() (wildboar.linear_model.rocketclassifier method)": [[31, "wildboar.linear_model.RocketClassifier.get_params"]], "get_params() (wildboar.linear_model.rocketregressor method)": [[31, "wildboar.linear_model.RocketRegressor.get_params"]], "score() (wildboar.linear_model.dilatedshapeletclassifier method)": [[31, "wildboar.linear_model.DilatedShapeletClassifier.score"]], "score() (wildboar.linear_model.hydraclassifier method)": [[31, "wildboar.linear_model.HydraClassifier.score"]], "score() (wildboar.linear_model.randomshapeletclassifier method)": [[31, "wildboar.linear_model.RandomShapeletClassifier.score"]], "score() (wildboar.linear_model.randomshapeletregressor method)": [[31, "wildboar.linear_model.RandomShapeletRegressor.score"]], "score() (wildboar.linear_model.rocketclassifier method)": [[31, "wildboar.linear_model.RocketClassifier.score"]], "score() (wildboar.linear_model.rocketregressor method)": [[31, "wildboar.linear_model.RocketRegressor.score"]], "set_params() (wildboar.linear_model.dilatedshapeletclassifier method)": [[31, "wildboar.linear_model.DilatedShapeletClassifier.set_params"]], "set_params() (wildboar.linear_model.hydraclassifier method)": [[31, "wildboar.linear_model.HydraClassifier.set_params"]], "set_params() (wildboar.linear_model.randomshapeletclassifier method)": [[31, "wildboar.linear_model.RandomShapeletClassifier.set_params"]], "set_params() (wildboar.linear_model.randomshapeletregressor method)": [[31, "wildboar.linear_model.RandomShapeletRegressor.set_params"]], "set_params() (wildboar.linear_model.rocketclassifier method)": [[31, "wildboar.linear_model.RocketClassifier.set_params"]], "set_params() (wildboar.linear_model.rocketregressor method)": [[31, "wildboar.linear_model.RocketRegressor.set_params"]], "wildboar.linear_model": [[31, "module-wildboar.linear_model"]], "silhouette_samples() (in module wildboar.metrics._cluster)": [[32, "wildboar.metrics._cluster.silhouette_samples"]], "silhouette_score() (in module wildboar.metrics._cluster)": [[32, "wildboar.metrics._cluster.silhouette_score"]], "wildboar.metrics._cluster": [[32, "module-wildboar.metrics._cluster"]], "compactness_score() (in module wildboar.metrics._counterfactual)": [[33, "wildboar.metrics._counterfactual.compactness_score"]], "plausability_score() (in module wildboar.metrics._counterfactual)": [[33, "wildboar.metrics._counterfactual.plausability_score"]], "proximity_score() (in module wildboar.metrics._counterfactual)": [[33, "wildboar.metrics._counterfactual.proximity_score"]], "redudancy_score() (in module wildboar.metrics._counterfactual)": [[33, "wildboar.metrics._counterfactual.redudancy_score"]], "relative_proximity_score() (in module wildboar.metrics._counterfactual)": [[33, "wildboar.metrics._counterfactual.relative_proximity_score"]], "validity_score() (in module wildboar.metrics._counterfactual)": [[33, "wildboar.metrics._counterfactual.validity_score"]], "wildboar.metrics._counterfactual": [[33, "module-wildboar.metrics._counterfactual"]], "compactness_score() (in module wildboar.metrics)": [[34, "wildboar.metrics.compactness_score"]], "plausability_score() (in module wildboar.metrics)": [[34, "wildboar.metrics.plausability_score"]], "proximity_score() (in module wildboar.metrics)": [[34, "wildboar.metrics.proximity_score"]], "redudancy_score() (in module wildboar.metrics)": [[34, "wildboar.metrics.redudancy_score"]], "relative_proximity_score() (in module wildboar.metrics)": [[34, "wildboar.metrics.relative_proximity_score"]], "silhouette_samples() (in module wildboar.metrics)": [[34, "wildboar.metrics.silhouette_samples"]], "silhouette_score() (in module wildboar.metrics)": [[34, "wildboar.metrics.silhouette_score"]], "validity_score() (in module wildboar.metrics)": [[34, "wildboar.metrics.validity_score"]], "wildboar.metrics": [[34, "module-wildboar.metrics"]], "repeatedoutliersplit (class in wildboar.model_selection._cv)": [[35, "wildboar.model_selection._cv.RepeatedOutlierSplit"]], "get_n_splits() (wildboar.model_selection._cv.repeatedoutliersplit method)": [[35, "wildboar.model_selection._cv.RepeatedOutlierSplit.get_n_splits"]], "split() (wildboar.model_selection._cv.repeatedoutliersplit method)": [[35, "wildboar.model_selection._cv.RepeatedOutlierSplit.split"]], "wildboar.model_selection._cv": [[35, "module-wildboar.model_selection._cv"]], "outlier_train_test_split() (in module wildboar.model_selection._outlier)": [[36, "wildboar.model_selection._outlier.outlier_train_test_split"]], "wildboar.model_selection._outlier": [[36, "module-wildboar.model_selection._outlier"]], "repeatedoutliersplit (class in wildboar.model_selection)": [[37, "wildboar.model_selection.RepeatedOutlierSplit"]], "get_n_splits() (wildboar.model_selection.repeatedoutliersplit method)": [[37, "wildboar.model_selection.RepeatedOutlierSplit.get_n_splits"]], "outlier_train_test_split() (in module wildboar.model_selection)": [[37, "wildboar.model_selection.outlier_train_test_split"]], "split() (wildboar.model_selection.repeatedoutliersplit method)": [[37, "wildboar.model_selection.RepeatedOutlierSplit.split"]], "wildboar.model_selection": [[37, "module-wildboar.model_selection"]], "baseattributetransform (class in wildboar.transform._base)": [[38, "wildboar.transform._base.BaseAttributeTransform"]], "fit() (wildboar.transform._base.baseattributetransform method)": [[38, "wildboar.transform._base.BaseAttributeTransform.fit"]], "fit_transform() (wildboar.transform._base.baseattributetransform method)": [[38, "wildboar.transform._base.BaseAttributeTransform.fit_transform"]], "get_metadata_routing() (wildboar.transform._base.baseattributetransform method)": [[38, "wildboar.transform._base.BaseAttributeTransform.get_metadata_routing"]], "get_params() (wildboar.transform._base.baseattributetransform method)": [[38, "wildboar.transform._base.BaseAttributeTransform.get_params"]], "set_output() (wildboar.transform._base.baseattributetransform method)": [[38, "wildboar.transform._base.BaseAttributeTransform.set_output"]], "set_params() (wildboar.transform._base.baseattributetransform method)": [[38, "wildboar.transform._base.BaseAttributeTransform.set_params"]], "transform() (wildboar.transform._base.baseattributetransform method)": [[38, "wildboar.transform._base.BaseAttributeTransform.transform"]], "wildboar.transform._base": [[38, "module-wildboar.transform._base"]], "convolve() (in module wildboar.transform._conv)": [[39, "wildboar.transform._conv.convolve"]], "wildboar.transform._conv": [[39, "module-wildboar.transform._conv"]], "difftransform (class in wildboar.transform._diff)": [[40, "wildboar.transform._diff.DiffTransform"]], "fit_transform() (wildboar.transform._diff.difftransform method)": [[40, "wildboar.transform._diff.DiffTransform.fit_transform"]], "get_metadata_routing() (wildboar.transform._diff.difftransform method)": [[40, "wildboar.transform._diff.DiffTransform.get_metadata_routing"]], "get_params() (wildboar.transform._diff.difftransform method)": [[40, "wildboar.transform._diff.DiffTransform.get_params"]], "set_output() (wildboar.transform._diff.difftransform method)": [[40, "wildboar.transform._diff.DiffTransform.set_output"]], "set_params() (wildboar.transform._diff.difftransform method)": [[40, "wildboar.transform._diff.DiffTransform.set_params"]], "wildboar.transform._diff": [[40, "module-wildboar.transform._diff"]], "hydratransform (class in wildboar.transform._hydra)": [[41, "wildboar.transform._hydra.HydraTransform"]], "fit() (wildboar.transform._hydra.hydratransform method)": [[41, "wildboar.transform._hydra.HydraTransform.fit"]], "fit_transform() (wildboar.transform._hydra.hydratransform method)": [[41, "wildboar.transform._hydra.HydraTransform.fit_transform"]], "get_metadata_routing() (wildboar.transform._hydra.hydratransform method)": [[41, "wildboar.transform._hydra.HydraTransform.get_metadata_routing"]], "get_params() (wildboar.transform._hydra.hydratransform method)": [[41, "wildboar.transform._hydra.HydraTransform.get_params"]], "set_output() (wildboar.transform._hydra.hydratransform method)": [[41, "wildboar.transform._hydra.HydraTransform.set_output"]], "set_params() (wildboar.transform._hydra.hydratransform method)": [[41, "wildboar.transform._hydra.HydraTransform.set_params"]], "transform() (wildboar.transform._hydra.hydratransform method)": [[41, "wildboar.transform._hydra.HydraTransform.transform"]], "wildboar.transform._hydra": [[41, "module-wildboar.transform._hydra"]], "featuretransform (class in wildboar.transform._interval)": [[42, "wildboar.transform._interval.FeatureTransform"]], "intervalmixin (class in wildboar.transform._interval)": [[42, "wildboar.transform._interval.IntervalMixin"]], "intervaltransform (class in wildboar.transform._interval)": [[42, "wildboar.transform._interval.IntervalTransform"]], "fit() (wildboar.transform._interval.featuretransform method)": [[42, "wildboar.transform._interval.FeatureTransform.fit"]], "fit() (wildboar.transform._interval.intervaltransform method)": [[42, "wildboar.transform._interval.IntervalTransform.fit"]], "fit_transform() (wildboar.transform._interval.featuretransform method)": [[42, "wildboar.transform._interval.FeatureTransform.fit_transform"]], "fit_transform() (wildboar.transform._interval.intervaltransform method)": [[42, "wildboar.transform._interval.IntervalTransform.fit_transform"]], "get_metadata_routing() (wildboar.transform._interval.featuretransform method)": [[42, "wildboar.transform._interval.FeatureTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform._interval.intervaltransform method)": [[42, "wildboar.transform._interval.IntervalTransform.get_metadata_routing"]], "get_params() (wildboar.transform._interval.featuretransform method)": [[42, "wildboar.transform._interval.FeatureTransform.get_params"]], "get_params() (wildboar.transform._interval.intervaltransform method)": [[42, "wildboar.transform._interval.IntervalTransform.get_params"]], "set_output() (wildboar.transform._interval.featuretransform method)": [[42, "wildboar.transform._interval.FeatureTransform.set_output"]], "set_output() (wildboar.transform._interval.intervaltransform method)": [[42, "wildboar.transform._interval.IntervalTransform.set_output"]], "set_params() (wildboar.transform._interval.featuretransform method)": [[42, "wildboar.transform._interval.FeatureTransform.set_params"]], "set_params() (wildboar.transform._interval.intervaltransform method)": [[42, "wildboar.transform._interval.IntervalTransform.set_params"]], "transform() (wildboar.transform._interval.featuretransform method)": [[42, "wildboar.transform._interval.FeatureTransform.transform"]], "transform() (wildboar.transform._interval.intervaltransform method)": [[42, "wildboar.transform._interval.IntervalTransform.transform"]], "wildboar.transform._interval": [[42, "module-wildboar.transform._interval"]], "matrixprofiletransform (class in wildboar.transform._matrix_profile)": [[43, "wildboar.transform._matrix_profile.MatrixProfileTransform"]], "fit() (wildboar.transform._matrix_profile.matrixprofiletransform method)": [[43, "wildboar.transform._matrix_profile.MatrixProfileTransform.fit"]], "fit_transform() (wildboar.transform._matrix_profile.matrixprofiletransform method)": [[43, "wildboar.transform._matrix_profile.MatrixProfileTransform.fit_transform"]], "get_metadata_routing() (wildboar.transform._matrix_profile.matrixprofiletransform method)": [[43, "wildboar.transform._matrix_profile.MatrixProfileTransform.get_metadata_routing"]], "get_params() (wildboar.transform._matrix_profile.matrixprofiletransform method)": [[43, "wildboar.transform._matrix_profile.MatrixProfileTransform.get_params"]], "set_output() (wildboar.transform._matrix_profile.matrixprofiletransform method)": [[43, "wildboar.transform._matrix_profile.MatrixProfileTransform.set_output"]], "set_params() (wildboar.transform._matrix_profile.matrixprofiletransform method)": [[43, "wildboar.transform._matrix_profile.MatrixProfileTransform.set_params"]], "transform() (wildboar.transform._matrix_profile.matrixprofiletransform method)": [[43, "wildboar.transform._matrix_profile.MatrixProfileTransform.transform"]], "wildboar.transform._matrix_profile": [[43, "module-wildboar.transform._matrix_profile"]], "pivotmixin (class in wildboar.transform._pivot)": [[44, "wildboar.transform._pivot.PivotMixin"]], "pivottransform (class in wildboar.transform._pivot)": [[44, "wildboar.transform._pivot.PivotTransform"]], "proximitytransform (class in wildboar.transform._pivot)": [[44, "wildboar.transform._pivot.ProximityTransform"]], "fit() (wildboar.transform._pivot.pivottransform method)": [[44, "wildboar.transform._pivot.PivotTransform.fit"]], "fit_transform() (wildboar.transform._pivot.pivottransform method)": [[44, "wildboar.transform._pivot.PivotTransform.fit_transform"]], "fit_transform() (wildboar.transform._pivot.proximitytransform method)": [[44, "wildboar.transform._pivot.ProximityTransform.fit_transform"]], "get_metadata_routing() (wildboar.transform._pivot.pivottransform method)": [[44, "wildboar.transform._pivot.PivotTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform._pivot.proximitytransform method)": [[44, "wildboar.transform._pivot.ProximityTransform.get_metadata_routing"]], "get_params() (wildboar.transform._pivot.pivottransform method)": [[44, "wildboar.transform._pivot.PivotTransform.get_params"]], "get_params() (wildboar.transform._pivot.proximitytransform method)": [[44, "wildboar.transform._pivot.ProximityTransform.get_params"]], "set_output() (wildboar.transform._pivot.pivottransform method)": [[44, "wildboar.transform._pivot.PivotTransform.set_output"]], "set_output() (wildboar.transform._pivot.proximitytransform method)": [[44, "wildboar.transform._pivot.ProximityTransform.set_output"]], "set_params() (wildboar.transform._pivot.pivottransform method)": [[44, "wildboar.transform._pivot.PivotTransform.set_params"]], "set_params() (wildboar.transform._pivot.proximitytransform method)": [[44, "wildboar.transform._pivot.ProximityTransform.set_params"]], "transform() (wildboar.transform._pivot.pivottransform method)": [[44, "wildboar.transform._pivot.PivotTransform.transform"]], "wildboar.transform._pivot": [[44, "module-wildboar.transform._pivot"]], "rocketmixin (class in wildboar.transform._rocket)": [[45, "wildboar.transform._rocket.RocketMixin"]], "rockettransform (class in wildboar.transform._rocket)": [[45, "wildboar.transform._rocket.RocketTransform"]], "fit() (wildboar.transform._rocket.rockettransform method)": [[45, "wildboar.transform._rocket.RocketTransform.fit"]], "fit_transform() (wildboar.transform._rocket.rockettransform method)": [[45, "wildboar.transform._rocket.RocketTransform.fit_transform"]], "get_metadata_routing() (wildboar.transform._rocket.rockettransform method)": [[45, "wildboar.transform._rocket.RocketTransform.get_metadata_routing"]], "get_params() (wildboar.transform._rocket.rockettransform method)": [[45, "wildboar.transform._rocket.RocketTransform.get_params"]], "set_output() (wildboar.transform._rocket.rockettransform method)": [[45, "wildboar.transform._rocket.RocketTransform.set_output"]], "set_params() (wildboar.transform._rocket.rockettransform method)": [[45, "wildboar.transform._rocket.RocketTransform.set_params"]], "transform() (wildboar.transform._rocket.rockettransform method)": [[45, "wildboar.transform._rocket.RocketTransform.transform"]], "wildboar.transform._rocket": [[45, "module-wildboar.transform._rocket"]], "binning (class in wildboar.transform._sax)": [[46, "wildboar.transform._sax.Binning"]], "normalbinning (class in wildboar.transform._sax)": [[46, "wildboar.transform._sax.NormalBinning"]], "paa (class in wildboar.transform._sax)": [[46, "wildboar.transform._sax.PAA"]], "sax (class in wildboar.transform._sax)": [[46, "wildboar.transform._sax.SAX"]], "uniformbinning (class in wildboar.transform._sax)": [[46, "wildboar.transform._sax.UniformBinning"]], "fit_transform() (wildboar.transform._sax.paa method)": [[46, "wildboar.transform._sax.PAA.fit_transform"]], "fit_transform() (wildboar.transform._sax.sax method)": [[46, "wildboar.transform._sax.SAX.fit_transform"]], "get_metadata_routing() (wildboar.transform._sax.paa method)": [[46, "wildboar.transform._sax.PAA.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform._sax.sax method)": [[46, "wildboar.transform._sax.SAX.get_metadata_routing"]], "get_params() (wildboar.transform._sax.paa method)": [[46, "wildboar.transform._sax.PAA.get_params"]], "get_params() (wildboar.transform._sax.sax method)": [[46, "wildboar.transform._sax.SAX.get_params"]], "get_thresholds() (wildboar.transform._sax.binning method)": [[46, "wildboar.transform._sax.Binning.get_thresholds"]], "get_thresholds() (wildboar.transform._sax.normalbinning method)": [[46, "wildboar.transform._sax.NormalBinning.get_thresholds"]], "get_thresholds() (wildboar.transform._sax.uniformbinning method)": [[46, "wildboar.transform._sax.UniformBinning.get_thresholds"]], "piecewice_aggregate_approximation() (in module wildboar.transform._sax)": [[46, "wildboar.transform._sax.piecewice_aggregate_approximation"]], "scale() (wildboar.transform._sax.binning method)": [[46, "wildboar.transform._sax.Binning.scale"]], "scale() (wildboar.transform._sax.normalbinning method)": [[46, "wildboar.transform._sax.NormalBinning.scale"]], "scale() (wildboar.transform._sax.uniformbinning method)": [[46, "wildboar.transform._sax.UniformBinning.scale"]], "set_output() (wildboar.transform._sax.paa method)": [[46, "wildboar.transform._sax.PAA.set_output"]], "set_output() (wildboar.transform._sax.sax method)": [[46, "wildboar.transform._sax.SAX.set_output"]], "set_params() (wildboar.transform._sax.paa method)": [[46, "wildboar.transform._sax.PAA.set_params"]], "set_params() (wildboar.transform._sax.sax method)": [[46, "wildboar.transform._sax.SAX.set_params"]], "symbolic_aggregate_approximation() (in module wildboar.transform._sax)": [[46, "wildboar.transform._sax.symbolic_aggregate_approximation"]], "wildboar.transform._sax": [[46, "module-wildboar.transform._sax"]], "dilatedshapelettransform (class in wildboar.transform._shapelet)": [[47, "wildboar.transform._shapelet.DilatedShapeletTransform"]], "randomshapelettransform (class in wildboar.transform._shapelet)": [[47, "wildboar.transform._shapelet.RandomShapeletTransform"]], "shapeletmixin (class in wildboar.transform._shapelet)": [[47, "wildboar.transform._shapelet.ShapeletMixin"]], "fit() (wildboar.transform._shapelet.dilatedshapelettransform method)": [[47, "wildboar.transform._shapelet.DilatedShapeletTransform.fit"]], "fit() (wildboar.transform._shapelet.randomshapelettransform method)": [[47, "wildboar.transform._shapelet.RandomShapeletTransform.fit"]], "fit_transform() (wildboar.transform._shapelet.dilatedshapelettransform method)": [[47, "wildboar.transform._shapelet.DilatedShapeletTransform.fit_transform"]], "fit_transform() (wildboar.transform._shapelet.randomshapelettransform method)": [[47, "wildboar.transform._shapelet.RandomShapeletTransform.fit_transform"]], "get_metadata_routing() (wildboar.transform._shapelet.dilatedshapelettransform method)": [[47, "wildboar.transform._shapelet.DilatedShapeletTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform._shapelet.randomshapelettransform method)": [[47, "wildboar.transform._shapelet.RandomShapeletTransform.get_metadata_routing"]], "get_params() (wildboar.transform._shapelet.dilatedshapelettransform method)": [[47, "wildboar.transform._shapelet.DilatedShapeletTransform.get_params"]], "get_params() (wildboar.transform._shapelet.randomshapelettransform method)": [[47, "wildboar.transform._shapelet.RandomShapeletTransform.get_params"]], "set_output() (wildboar.transform._shapelet.dilatedshapelettransform method)": [[47, "wildboar.transform._shapelet.DilatedShapeletTransform.set_output"]], "set_output() (wildboar.transform._shapelet.randomshapelettransform method)": [[47, "wildboar.transform._shapelet.RandomShapeletTransform.set_output"]], "set_params() (wildboar.transform._shapelet.dilatedshapelettransform method)": [[47, "wildboar.transform._shapelet.DilatedShapeletTransform.set_params"]], "set_params() (wildboar.transform._shapelet.randomshapelettransform method)": [[47, "wildboar.transform._shapelet.RandomShapeletTransform.set_params"]], "transform() (wildboar.transform._shapelet.dilatedshapelettransform method)": [[47, "wildboar.transform._shapelet.DilatedShapeletTransform.transform"]], "transform() (wildboar.transform._shapelet.randomshapelettransform method)": [[47, "wildboar.transform._shapelet.RandomShapeletTransform.transform"]], "wildboar.transform._shapelet": [[47, "module-wildboar.transform._shapelet"]], "difftransform (class in wildboar.transform)": [[48, "wildboar.transform.DiffTransform"]], "dilatedshapelettransform (class in wildboar.transform)": [[48, "wildboar.transform.DilatedShapeletTransform"]], "featuretransform (class in wildboar.transform)": [[48, "wildboar.transform.FeatureTransform"]], "hydratransform (class in wildboar.transform)": [[48, "wildboar.transform.HydraTransform"]], "intervaltransform (class in wildboar.transform)": [[48, "wildboar.transform.IntervalTransform"]], "matrixprofiletransform (class in wildboar.transform)": [[48, "wildboar.transform.MatrixProfileTransform"]], "paa (class in wildboar.transform)": [[48, "wildboar.transform.PAA"]], "pivottransform (class in wildboar.transform)": [[48, "wildboar.transform.PivotTransform"]], "proximitytransform (class in wildboar.transform)": [[48, "wildboar.transform.ProximityTransform"]], "randomshapelettransform (class in wildboar.transform)": [[48, "wildboar.transform.RandomShapeletTransform"]], "rockettransform (class in wildboar.transform)": [[48, "wildboar.transform.RocketTransform"]], "sax (class in wildboar.transform)": [[48, "wildboar.transform.SAX"]], "convolve() (in module wildboar.transform)": [[48, "wildboar.transform.convolve"]], "fit() (wildboar.transform.dilatedshapelettransform method)": [[48, "wildboar.transform.DilatedShapeletTransform.fit"]], "fit() (wildboar.transform.featuretransform method)": [[48, "wildboar.transform.FeatureTransform.fit"]], "fit() (wildboar.transform.hydratransform method)": [[48, "wildboar.transform.HydraTransform.fit"]], "fit() (wildboar.transform.intervaltransform method)": [[48, "wildboar.transform.IntervalTransform.fit"]], "fit() (wildboar.transform.matrixprofiletransform method)": [[48, "wildboar.transform.MatrixProfileTransform.fit"]], "fit() (wildboar.transform.pivottransform method)": [[48, "wildboar.transform.PivotTransform.fit"]], "fit() (wildboar.transform.randomshapelettransform method)": [[48, "wildboar.transform.RandomShapeletTransform.fit"]], "fit() (wildboar.transform.rockettransform method)": [[48, "wildboar.transform.RocketTransform.fit"]], "fit_transform() (wildboar.transform.difftransform method)": [[48, "wildboar.transform.DiffTransform.fit_transform"]], "fit_transform() (wildboar.transform.dilatedshapelettransform method)": [[48, "wildboar.transform.DilatedShapeletTransform.fit_transform"]], "fit_transform() (wildboar.transform.featuretransform method)": [[48, "wildboar.transform.FeatureTransform.fit_transform"]], "fit_transform() (wildboar.transform.hydratransform method)": [[48, "wildboar.transform.HydraTransform.fit_transform"]], "fit_transform() (wildboar.transform.intervaltransform method)": [[48, "wildboar.transform.IntervalTransform.fit_transform"]], "fit_transform() (wildboar.transform.matrixprofiletransform method)": [[48, "wildboar.transform.MatrixProfileTransform.fit_transform"]], "fit_transform() (wildboar.transform.paa method)": [[48, "wildboar.transform.PAA.fit_transform"]], "fit_transform() (wildboar.transform.pivottransform method)": [[48, "wildboar.transform.PivotTransform.fit_transform"]], "fit_transform() (wildboar.transform.proximitytransform method)": [[48, "wildboar.transform.ProximityTransform.fit_transform"]], "fit_transform() (wildboar.transform.randomshapelettransform method)": [[48, "wildboar.transform.RandomShapeletTransform.fit_transform"]], "fit_transform() (wildboar.transform.rockettransform method)": [[48, "wildboar.transform.RocketTransform.fit_transform"]], "fit_transform() (wildboar.transform.sax method)": [[48, "wildboar.transform.SAX.fit_transform"]], "get_metadata_routing() (wildboar.transform.difftransform method)": [[48, "wildboar.transform.DiffTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.dilatedshapelettransform method)": [[48, "wildboar.transform.DilatedShapeletTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.featuretransform method)": [[48, "wildboar.transform.FeatureTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.hydratransform method)": [[48, "wildboar.transform.HydraTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.intervaltransform method)": [[48, "wildboar.transform.IntervalTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.matrixprofiletransform method)": [[48, "wildboar.transform.MatrixProfileTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.paa method)": [[48, "wildboar.transform.PAA.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.pivottransform method)": [[48, "wildboar.transform.PivotTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.proximitytransform method)": [[48, "wildboar.transform.ProximityTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.randomshapelettransform method)": [[48, "wildboar.transform.RandomShapeletTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.rockettransform method)": [[48, "wildboar.transform.RocketTransform.get_metadata_routing"]], "get_metadata_routing() (wildboar.transform.sax method)": [[48, "wildboar.transform.SAX.get_metadata_routing"]], "get_params() (wildboar.transform.difftransform method)": [[48, "wildboar.transform.DiffTransform.get_params"]], "get_params() (wildboar.transform.dilatedshapelettransform method)": [[48, "wildboar.transform.DilatedShapeletTransform.get_params"]], "get_params() (wildboar.transform.featuretransform method)": [[48, "wildboar.transform.FeatureTransform.get_params"]], "get_params() (wildboar.transform.hydratransform method)": [[48, "wildboar.transform.HydraTransform.get_params"]], "get_params() (wildboar.transform.intervaltransform method)": [[48, "wildboar.transform.IntervalTransform.get_params"]], "get_params() (wildboar.transform.matrixprofiletransform method)": [[48, "wildboar.transform.MatrixProfileTransform.get_params"]], "get_params() (wildboar.transform.paa method)": [[48, "wildboar.transform.PAA.get_params"]], "get_params() (wildboar.transform.pivottransform method)": [[48, "wildboar.transform.PivotTransform.get_params"]], "get_params() (wildboar.transform.proximitytransform method)": [[48, "wildboar.transform.ProximityTransform.get_params"]], "get_params() (wildboar.transform.randomshapelettransform method)": [[48, "wildboar.transform.RandomShapeletTransform.get_params"]], "get_params() (wildboar.transform.rockettransform method)": [[48, "wildboar.transform.RocketTransform.get_params"]], "get_params() (wildboar.transform.sax method)": [[48, "wildboar.transform.SAX.get_params"]], "piecewice_aggregate_approximation() (in module wildboar.transform)": [[48, "wildboar.transform.piecewice_aggregate_approximation"]], "set_output() (wildboar.transform.difftransform method)": [[48, "wildboar.transform.DiffTransform.set_output"]], "set_output() (wildboar.transform.dilatedshapelettransform method)": [[48, "wildboar.transform.DilatedShapeletTransform.set_output"]], "set_output() (wildboar.transform.featuretransform method)": [[48, "wildboar.transform.FeatureTransform.set_output"]], "set_output() (wildboar.transform.hydratransform method)": [[48, "wildboar.transform.HydraTransform.set_output"]], "set_output() (wildboar.transform.intervaltransform method)": [[48, "wildboar.transform.IntervalTransform.set_output"]], "set_output() (wildboar.transform.matrixprofiletransform method)": [[48, "wildboar.transform.MatrixProfileTransform.set_output"]], "set_output() (wildboar.transform.paa method)": [[48, "wildboar.transform.PAA.set_output"]], "set_output() (wildboar.transform.pivottransform method)": [[48, "wildboar.transform.PivotTransform.set_output"]], "set_output() (wildboar.transform.proximitytransform method)": [[48, "wildboar.transform.ProximityTransform.set_output"]], "set_output() (wildboar.transform.randomshapelettransform method)": [[48, "wildboar.transform.RandomShapeletTransform.set_output"]], "set_output() (wildboar.transform.rockettransform method)": [[48, "wildboar.transform.RocketTransform.set_output"]], "set_output() (wildboar.transform.sax method)": [[48, "wildboar.transform.SAX.set_output"]], "set_params() (wildboar.transform.difftransform method)": [[48, "wildboar.transform.DiffTransform.set_params"]], "set_params() (wildboar.transform.dilatedshapelettransform method)": [[48, "wildboar.transform.DilatedShapeletTransform.set_params"]], "set_params() (wildboar.transform.featuretransform method)": [[48, "wildboar.transform.FeatureTransform.set_params"]], "set_params() (wildboar.transform.hydratransform method)": [[48, "wildboar.transform.HydraTransform.set_params"]], "set_params() (wildboar.transform.intervaltransform method)": [[48, "wildboar.transform.IntervalTransform.set_params"]], "set_params() (wildboar.transform.matrixprofiletransform method)": [[48, "wildboar.transform.MatrixProfileTransform.set_params"]], "set_params() (wildboar.transform.paa method)": [[48, "wildboar.transform.PAA.set_params"]], "set_params() (wildboar.transform.pivottransform method)": [[48, "wildboar.transform.PivotTransform.set_params"]], "set_params() (wildboar.transform.proximitytransform method)": [[48, "wildboar.transform.ProximityTransform.set_params"]], "set_params() (wildboar.transform.randomshapelettransform method)": [[48, "wildboar.transform.RandomShapeletTransform.set_params"]], "set_params() (wildboar.transform.rockettransform method)": [[48, "wildboar.transform.RocketTransform.set_params"]], "set_params() (wildboar.transform.sax method)": [[48, "wildboar.transform.SAX.set_params"]], "symbolic_aggregate_approximation() (in module wildboar.transform)": [[48, "wildboar.transform.symbolic_aggregate_approximation"]], "transform() (wildboar.transform.dilatedshapelettransform method)": [[48, "wildboar.transform.DilatedShapeletTransform.transform"]], "transform() (wildboar.transform.featuretransform method)": [[48, "wildboar.transform.FeatureTransform.transform"]], "transform() (wildboar.transform.hydratransform method)": [[48, "wildboar.transform.HydraTransform.transform"]], "transform() (wildboar.transform.intervaltransform method)": [[48, "wildboar.transform.IntervalTransform.transform"]], "transform() (wildboar.transform.matrixprofiletransform method)": [[48, "wildboar.transform.MatrixProfileTransform.transform"]], "transform() (wildboar.transform.pivottransform method)": [[48, "wildboar.transform.PivotTransform.transform"]], "transform() (wildboar.transform.randomshapelettransform method)": [[48, "wildboar.transform.RandomShapeletTransform.transform"]], "transform() (wildboar.transform.rockettransform method)": [[48, "wildboar.transform.RocketTransform.transform"]], "wildboar.transform": [[48, "module-wildboar.transform"]], "basetree (class in wildboar.tree._base)": [[49, "wildboar.tree._base.BaseTree"]], "basetreeclassifier (class in wildboar.tree._base)": [[49, "wildboar.tree._base.BaseTreeClassifier"]], "basetreeregressor (class in wildboar.tree._base)": [[49, "wildboar.tree._base.BaseTreeRegressor"]], "apply() (wildboar.tree._base.basetree method)": [[49, "wildboar.tree._base.BaseTree.apply"]], "apply() (wildboar.tree._base.basetreeclassifier method)": [[49, "wildboar.tree._base.BaseTreeClassifier.apply"]], "apply() (wildboar.tree._base.basetreeregressor method)": [[49, "wildboar.tree._base.BaseTreeRegressor.apply"]], "decision_path() (wildboar.tree._base.basetree method)": [[49, "wildboar.tree._base.BaseTree.decision_path"]], "decision_path() (wildboar.tree._base.basetreeclassifier method)": [[49, "wildboar.tree._base.BaseTreeClassifier.decision_path"]], "decision_path() (wildboar.tree._base.basetreeregressor method)": [[49, "wildboar.tree._base.BaseTreeRegressor.decision_path"]], "fit() (wildboar.tree._base.basetreeclassifier method)": [[49, "wildboar.tree._base.BaseTreeClassifier.fit"]], "fit() (wildboar.tree._base.basetreeregressor method)": [[49, "wildboar.tree._base.BaseTreeRegressor.fit"]], "get_metadata_routing() (wildboar.tree._base.basetree method)": [[49, "wildboar.tree._base.BaseTree.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._base.basetreeclassifier method)": [[49, "wildboar.tree._base.BaseTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._base.basetreeregressor method)": [[49, "wildboar.tree._base.BaseTreeRegressor.get_metadata_routing"]], "get_params() (wildboar.tree._base.basetree method)": [[49, "wildboar.tree._base.BaseTree.get_params"]], "get_params() (wildboar.tree._base.basetreeclassifier method)": [[49, "wildboar.tree._base.BaseTreeClassifier.get_params"]], "get_params() (wildboar.tree._base.basetreeregressor method)": [[49, "wildboar.tree._base.BaseTreeRegressor.get_params"]], "predict() (wildboar.tree._base.basetreeclassifier method)": [[49, "wildboar.tree._base.BaseTreeClassifier.predict"]], "predict() (wildboar.tree._base.basetreeregressor method)": [[49, "wildboar.tree._base.BaseTreeRegressor.predict"]], "predict_proba() (wildboar.tree._base.basetreeclassifier method)": [[49, "wildboar.tree._base.BaseTreeClassifier.predict_proba"]], "score() (wildboar.tree._base.basetreeclassifier method)": [[49, "wildboar.tree._base.BaseTreeClassifier.score"]], "score() (wildboar.tree._base.basetreeregressor method)": [[49, "wildboar.tree._base.BaseTreeRegressor.score"]], "set_params() (wildboar.tree._base.basetree method)": [[49, "wildboar.tree._base.BaseTree.set_params"]], "set_params() (wildboar.tree._base.basetreeclassifier method)": [[49, "wildboar.tree._base.BaseTreeClassifier.set_params"]], "set_params() (wildboar.tree._base.basetreeregressor method)": [[49, "wildboar.tree._base.BaseTreeRegressor.set_params"]], "wildboar.tree._base": [[49, "module-wildboar.tree._base"]], "proximitytreeclassifier (class in wildboar.tree._ptree)": [[50, "wildboar.tree._ptree.ProximityTreeClassifier"]], "apply() (wildboar.tree._ptree.proximitytreeclassifier method)": [[50, "wildboar.tree._ptree.ProximityTreeClassifier.apply"]], "decision_path() (wildboar.tree._ptree.proximitytreeclassifier method)": [[50, "wildboar.tree._ptree.ProximityTreeClassifier.decision_path"]], "fit() (wildboar.tree._ptree.proximitytreeclassifier method)": [[50, "wildboar.tree._ptree.ProximityTreeClassifier.fit"]], "get_metadata_routing() (wildboar.tree._ptree.proximitytreeclassifier method)": [[50, "wildboar.tree._ptree.ProximityTreeClassifier.get_metadata_routing"]], "get_params() (wildboar.tree._ptree.proximitytreeclassifier method)": [[50, "wildboar.tree._ptree.ProximityTreeClassifier.get_params"]], "predict() (wildboar.tree._ptree.proximitytreeclassifier method)": [[50, "wildboar.tree._ptree.ProximityTreeClassifier.predict"]], "predict_proba() (wildboar.tree._ptree.proximitytreeclassifier method)": [[50, "wildboar.tree._ptree.ProximityTreeClassifier.predict_proba"]], "score() (wildboar.tree._ptree.proximitytreeclassifier method)": [[50, "wildboar.tree._ptree.ProximityTreeClassifier.score"]], "set_params() (wildboar.tree._ptree.proximitytreeclassifier method)": [[50, "wildboar.tree._ptree.ProximityTreeClassifier.set_params"]], "wildboar.tree._ptree": [[50, "module-wildboar.tree._ptree"]], "basefeaturetreeclassifier (class in wildboar.tree._tree)": [[51, "wildboar.tree._tree.BaseFeatureTreeClassifier"]], "basefeaturetreeregressor (class in wildboar.tree._tree)": [[51, "wildboar.tree._tree.BaseFeatureTreeRegressor"]], "dilatedshapelettreeclassifier (class in wildboar.tree._tree)": [[51, "wildboar.tree._tree.DilatedShapeletTreeClassifier"]], "extrashapelettreeclassifier (class in wildboar.tree._tree)": [[51, "wildboar.tree._tree.ExtraShapeletTreeClassifier"]], "extrashapelettreeregressor (class in wildboar.tree._tree)": [[51, "wildboar.tree._tree.ExtraShapeletTreeRegressor"]], "intervaltreeclassifier (class in wildboar.tree._tree)": [[51, "wildboar.tree._tree.IntervalTreeClassifier"]], "intervaltreeregressor (class in wildboar.tree._tree)": [[51, "wildboar.tree._tree.IntervalTreeRegressor"]], "pivottreeclassifier (class in wildboar.tree._tree)": [[51, "wildboar.tree._tree.PivotTreeClassifier"]], "rockettreeclassifier (class in wildboar.tree._tree)": [[51, "wildboar.tree._tree.RocketTreeClassifier"]], "rockettreeregressor (class in wildboar.tree._tree)": [[51, "wildboar.tree._tree.RocketTreeRegressor"]], "shapelettreeclassifier (class in wildboar.tree._tree)": [[51, "wildboar.tree._tree.ShapeletTreeClassifier"]], "shapelettreeregressor (class in wildboar.tree._tree)": [[51, "wildboar.tree._tree.ShapeletTreeRegressor"]], "apply() (wildboar.tree._tree.basefeaturetreeclassifier method)": [[51, "wildboar.tree._tree.BaseFeatureTreeClassifier.apply"]], "apply() (wildboar.tree._tree.basefeaturetreeregressor method)": [[51, "wildboar.tree._tree.BaseFeatureTreeRegressor.apply"]], "apply() (wildboar.tree._tree.dilatedshapelettreeclassifier method)": [[51, "wildboar.tree._tree.DilatedShapeletTreeClassifier.apply"]], "apply() (wildboar.tree._tree.extrashapelettreeclassifier method)": [[51, "wildboar.tree._tree.ExtraShapeletTreeClassifier.apply"]], "apply() (wildboar.tree._tree.extrashapelettreeregressor method)": [[51, "wildboar.tree._tree.ExtraShapeletTreeRegressor.apply"]], "apply() (wildboar.tree._tree.intervaltreeclassifier method)": [[51, "wildboar.tree._tree.IntervalTreeClassifier.apply"]], "apply() (wildboar.tree._tree.intervaltreeregressor method)": [[51, "wildboar.tree._tree.IntervalTreeRegressor.apply"]], "apply() (wildboar.tree._tree.pivottreeclassifier method)": [[51, "wildboar.tree._tree.PivotTreeClassifier.apply"]], "apply() (wildboar.tree._tree.rockettreeclassifier method)": [[51, "wildboar.tree._tree.RocketTreeClassifier.apply"]], "apply() (wildboar.tree._tree.rockettreeregressor method)": [[51, "wildboar.tree._tree.RocketTreeRegressor.apply"]], "apply() (wildboar.tree._tree.shapelettreeclassifier method)": [[51, "wildboar.tree._tree.ShapeletTreeClassifier.apply"]], "apply() (wildboar.tree._tree.shapelettreeregressor method)": [[51, "wildboar.tree._tree.ShapeletTreeRegressor.apply"]], "decision_path() (wildboar.tree._tree.basefeaturetreeclassifier method)": [[51, "wildboar.tree._tree.BaseFeatureTreeClassifier.decision_path"]], "decision_path() (wildboar.tree._tree.basefeaturetreeregressor method)": [[51, "wildboar.tree._tree.BaseFeatureTreeRegressor.decision_path"]], "decision_path() (wildboar.tree._tree.dilatedshapelettreeclassifier method)": [[51, "wildboar.tree._tree.DilatedShapeletTreeClassifier.decision_path"]], "decision_path() (wildboar.tree._tree.extrashapelettreeclassifier method)": [[51, "wildboar.tree._tree.ExtraShapeletTreeClassifier.decision_path"]], "decision_path() (wildboar.tree._tree.extrashapelettreeregressor method)": [[51, "wildboar.tree._tree.ExtraShapeletTreeRegressor.decision_path"]], "decision_path() (wildboar.tree._tree.intervaltreeclassifier method)": [[51, "wildboar.tree._tree.IntervalTreeClassifier.decision_path"]], "decision_path() (wildboar.tree._tree.intervaltreeregressor method)": [[51, "wildboar.tree._tree.IntervalTreeRegressor.decision_path"]], "decision_path() (wildboar.tree._tree.pivottreeclassifier method)": [[51, "wildboar.tree._tree.PivotTreeClassifier.decision_path"]], "decision_path() (wildboar.tree._tree.rockettreeclassifier method)": [[51, "wildboar.tree._tree.RocketTreeClassifier.decision_path"]], "decision_path() (wildboar.tree._tree.rockettreeregressor method)": [[51, "wildboar.tree._tree.RocketTreeRegressor.decision_path"]], "decision_path() (wildboar.tree._tree.shapelettreeclassifier method)": [[51, "wildboar.tree._tree.ShapeletTreeClassifier.decision_path"]], "decision_path() (wildboar.tree._tree.shapelettreeregressor method)": [[51, "wildboar.tree._tree.ShapeletTreeRegressor.decision_path"]], "fit() (wildboar.tree._tree.basefeaturetreeclassifier method)": [[51, "wildboar.tree._tree.BaseFeatureTreeClassifier.fit"]], "fit() (wildboar.tree._tree.basefeaturetreeregressor method)": [[51, "wildboar.tree._tree.BaseFeatureTreeRegressor.fit"]], "fit() (wildboar.tree._tree.dilatedshapelettreeclassifier method)": [[51, "wildboar.tree._tree.DilatedShapeletTreeClassifier.fit"]], "fit() (wildboar.tree._tree.extrashapelettreeclassifier method)": [[51, "wildboar.tree._tree.ExtraShapeletTreeClassifier.fit"]], "fit() (wildboar.tree._tree.extrashapelettreeregressor method)": [[51, "wildboar.tree._tree.ExtraShapeletTreeRegressor.fit"]], "fit() (wildboar.tree._tree.intervaltreeclassifier method)": [[51, "wildboar.tree._tree.IntervalTreeClassifier.fit"]], "fit() (wildboar.tree._tree.intervaltreeregressor method)": [[51, "wildboar.tree._tree.IntervalTreeRegressor.fit"]], "fit() (wildboar.tree._tree.pivottreeclassifier method)": [[51, "wildboar.tree._tree.PivotTreeClassifier.fit"]], "fit() (wildboar.tree._tree.rockettreeclassifier method)": [[51, "wildboar.tree._tree.RocketTreeClassifier.fit"]], "fit() (wildboar.tree._tree.rockettreeregressor method)": [[51, "wildboar.tree._tree.RocketTreeRegressor.fit"]], "fit() (wildboar.tree._tree.shapelettreeclassifier method)": [[51, "wildboar.tree._tree.ShapeletTreeClassifier.fit"]], "fit() (wildboar.tree._tree.shapelettreeregressor method)": [[51, "wildboar.tree._tree.ShapeletTreeRegressor.fit"]], "get_metadata_routing() (wildboar.tree._tree.basefeaturetreeclassifier method)": [[51, "wildboar.tree._tree.BaseFeatureTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._tree.basefeaturetreeregressor method)": [[51, "wildboar.tree._tree.BaseFeatureTreeRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._tree.dilatedshapelettreeclassifier method)": [[51, "wildboar.tree._tree.DilatedShapeletTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._tree.extrashapelettreeclassifier method)": [[51, "wildboar.tree._tree.ExtraShapeletTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._tree.extrashapelettreeregressor method)": [[51, "wildboar.tree._tree.ExtraShapeletTreeRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._tree.intervaltreeclassifier method)": [[51, "wildboar.tree._tree.IntervalTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._tree.intervaltreeregressor method)": [[51, "wildboar.tree._tree.IntervalTreeRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._tree.pivottreeclassifier method)": [[51, "wildboar.tree._tree.PivotTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._tree.rockettreeclassifier method)": [[51, "wildboar.tree._tree.RocketTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._tree.rockettreeregressor method)": [[51, "wildboar.tree._tree.RocketTreeRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._tree.shapelettreeclassifier method)": [[51, "wildboar.tree._tree.ShapeletTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree._tree.shapelettreeregressor method)": [[51, "wildboar.tree._tree.ShapeletTreeRegressor.get_metadata_routing"]], "get_params() (wildboar.tree._tree.basefeaturetreeclassifier method)": [[51, "wildboar.tree._tree.BaseFeatureTreeClassifier.get_params"]], "get_params() (wildboar.tree._tree.basefeaturetreeregressor method)": [[51, "wildboar.tree._tree.BaseFeatureTreeRegressor.get_params"]], "get_params() (wildboar.tree._tree.dilatedshapelettreeclassifier method)": [[51, "wildboar.tree._tree.DilatedShapeletTreeClassifier.get_params"]], "get_params() (wildboar.tree._tree.extrashapelettreeclassifier method)": [[51, "wildboar.tree._tree.ExtraShapeletTreeClassifier.get_params"]], "get_params() (wildboar.tree._tree.extrashapelettreeregressor method)": [[51, "wildboar.tree._tree.ExtraShapeletTreeRegressor.get_params"]], "get_params() (wildboar.tree._tree.intervaltreeclassifier method)": [[51, "wildboar.tree._tree.IntervalTreeClassifier.get_params"]], "get_params() (wildboar.tree._tree.intervaltreeregressor method)": [[51, "wildboar.tree._tree.IntervalTreeRegressor.get_params"]], "get_params() (wildboar.tree._tree.pivottreeclassifier method)": [[51, "wildboar.tree._tree.PivotTreeClassifier.get_params"]], "get_params() (wildboar.tree._tree.rockettreeclassifier method)": [[51, "wildboar.tree._tree.RocketTreeClassifier.get_params"]], "get_params() (wildboar.tree._tree.rockettreeregressor method)": [[51, "wildboar.tree._tree.RocketTreeRegressor.get_params"]], "get_params() (wildboar.tree._tree.shapelettreeclassifier method)": [[51, "wildboar.tree._tree.ShapeletTreeClassifier.get_params"]], "get_params() (wildboar.tree._tree.shapelettreeregressor method)": [[51, "wildboar.tree._tree.ShapeletTreeRegressor.get_params"]], "predict() (wildboar.tree._tree.basefeaturetreeclassifier method)": [[51, "wildboar.tree._tree.BaseFeatureTreeClassifier.predict"]], "predict() (wildboar.tree._tree.basefeaturetreeregressor method)": [[51, "wildboar.tree._tree.BaseFeatureTreeRegressor.predict"]], "predict() (wildboar.tree._tree.dilatedshapelettreeclassifier method)": [[51, "wildboar.tree._tree.DilatedShapeletTreeClassifier.predict"]], "predict() (wildboar.tree._tree.extrashapelettreeclassifier method)": [[51, "wildboar.tree._tree.ExtraShapeletTreeClassifier.predict"]], "predict() (wildboar.tree._tree.extrashapelettreeregressor method)": [[51, "wildboar.tree._tree.ExtraShapeletTreeRegressor.predict"]], "predict() (wildboar.tree._tree.intervaltreeclassifier method)": [[51, "wildboar.tree._tree.IntervalTreeClassifier.predict"]], "predict() (wildboar.tree._tree.intervaltreeregressor method)": [[51, "wildboar.tree._tree.IntervalTreeRegressor.predict"]], "predict() (wildboar.tree._tree.pivottreeclassifier method)": [[51, "wildboar.tree._tree.PivotTreeClassifier.predict"]], "predict() (wildboar.tree._tree.rockettreeclassifier method)": [[51, "wildboar.tree._tree.RocketTreeClassifier.predict"]], "predict() (wildboar.tree._tree.rockettreeregressor method)": [[51, "wildboar.tree._tree.RocketTreeRegressor.predict"]], "predict() (wildboar.tree._tree.shapelettreeclassifier method)": [[51, "wildboar.tree._tree.ShapeletTreeClassifier.predict"]], "predict() (wildboar.tree._tree.shapelettreeregressor method)": [[51, "wildboar.tree._tree.ShapeletTreeRegressor.predict"]], "predict_proba() (wildboar.tree._tree.basefeaturetreeclassifier method)": [[51, "wildboar.tree._tree.BaseFeatureTreeClassifier.predict_proba"]], "predict_proba() (wildboar.tree._tree.dilatedshapelettreeclassifier method)": [[51, "wildboar.tree._tree.DilatedShapeletTreeClassifier.predict_proba"]], "predict_proba() (wildboar.tree._tree.extrashapelettreeclassifier method)": [[51, "wildboar.tree._tree.ExtraShapeletTreeClassifier.predict_proba"]], "predict_proba() (wildboar.tree._tree.intervaltreeclassifier method)": [[51, "wildboar.tree._tree.IntervalTreeClassifier.predict_proba"]], "predict_proba() (wildboar.tree._tree.pivottreeclassifier method)": [[51, "wildboar.tree._tree.PivotTreeClassifier.predict_proba"]], "predict_proba() (wildboar.tree._tree.rockettreeclassifier method)": [[51, "wildboar.tree._tree.RocketTreeClassifier.predict_proba"]], "predict_proba() (wildboar.tree._tree.shapelettreeclassifier method)": [[51, "wildboar.tree._tree.ShapeletTreeClassifier.predict_proba"]], "score() (wildboar.tree._tree.basefeaturetreeclassifier method)": [[51, "wildboar.tree._tree.BaseFeatureTreeClassifier.score"]], "score() (wildboar.tree._tree.basefeaturetreeregressor method)": [[51, "wildboar.tree._tree.BaseFeatureTreeRegressor.score"]], "score() (wildboar.tree._tree.dilatedshapelettreeclassifier method)": [[51, "wildboar.tree._tree.DilatedShapeletTreeClassifier.score"]], "score() (wildboar.tree._tree.extrashapelettreeclassifier method)": [[51, "wildboar.tree._tree.ExtraShapeletTreeClassifier.score"]], "score() (wildboar.tree._tree.extrashapelettreeregressor method)": [[51, "wildboar.tree._tree.ExtraShapeletTreeRegressor.score"]], "score() (wildboar.tree._tree.intervaltreeclassifier method)": [[51, "wildboar.tree._tree.IntervalTreeClassifier.score"]], "score() (wildboar.tree._tree.intervaltreeregressor method)": [[51, "wildboar.tree._tree.IntervalTreeRegressor.score"]], "score() (wildboar.tree._tree.pivottreeclassifier method)": [[51, "wildboar.tree._tree.PivotTreeClassifier.score"]], "score() (wildboar.tree._tree.rockettreeclassifier method)": [[51, "wildboar.tree._tree.RocketTreeClassifier.score"]], "score() (wildboar.tree._tree.rockettreeregressor method)": [[51, "wildboar.tree._tree.RocketTreeRegressor.score"]], "score() (wildboar.tree._tree.shapelettreeclassifier method)": [[51, "wildboar.tree._tree.ShapeletTreeClassifier.score"]], "score() (wildboar.tree._tree.shapelettreeregressor method)": [[51, "wildboar.tree._tree.ShapeletTreeRegressor.score"]], "set_params() (wildboar.tree._tree.basefeaturetreeclassifier method)": [[51, "wildboar.tree._tree.BaseFeatureTreeClassifier.set_params"]], "set_params() (wildboar.tree._tree.basefeaturetreeregressor method)": [[51, "wildboar.tree._tree.BaseFeatureTreeRegressor.set_params"]], "set_params() (wildboar.tree._tree.dilatedshapelettreeclassifier method)": [[51, "wildboar.tree._tree.DilatedShapeletTreeClassifier.set_params"]], "set_params() (wildboar.tree._tree.extrashapelettreeclassifier method)": [[51, "wildboar.tree._tree.ExtraShapeletTreeClassifier.set_params"]], "set_params() (wildboar.tree._tree.extrashapelettreeregressor method)": [[51, "wildboar.tree._tree.ExtraShapeletTreeRegressor.set_params"]], "set_params() (wildboar.tree._tree.intervaltreeclassifier method)": [[51, "wildboar.tree._tree.IntervalTreeClassifier.set_params"]], "set_params() (wildboar.tree._tree.intervaltreeregressor method)": [[51, "wildboar.tree._tree.IntervalTreeRegressor.set_params"]], "set_params() (wildboar.tree._tree.pivottreeclassifier method)": [[51, "wildboar.tree._tree.PivotTreeClassifier.set_params"]], "set_params() (wildboar.tree._tree.rockettreeclassifier method)": [[51, "wildboar.tree._tree.RocketTreeClassifier.set_params"]], "set_params() (wildboar.tree._tree.rockettreeregressor method)": [[51, "wildboar.tree._tree.RocketTreeRegressor.set_params"]], "set_params() (wildboar.tree._tree.shapelettreeclassifier method)": [[51, "wildboar.tree._tree.ShapeletTreeClassifier.set_params"]], "set_params() (wildboar.tree._tree.shapelettreeregressor method)": [[51, "wildboar.tree._tree.ShapeletTreeRegressor.set_params"]], "wildboar.tree._tree": [[51, "module-wildboar.tree._tree"]], "extrashapelettreeclassifier (class in wildboar.tree)": [[52, "wildboar.tree.ExtraShapeletTreeClassifier"]], "extrashapelettreeregressor (class in wildboar.tree)": [[52, "wildboar.tree.ExtraShapeletTreeRegressor"]], "intervaltreeclassifier (class in wildboar.tree)": [[52, "wildboar.tree.IntervalTreeClassifier"]], "intervaltreeregressor (class in wildboar.tree)": [[52, "wildboar.tree.IntervalTreeRegressor"]], "pivottreeclassifier (class in wildboar.tree)": [[52, "wildboar.tree.PivotTreeClassifier"]], "proximitytreeclassifier (class in wildboar.tree)": [[52, "wildboar.tree.ProximityTreeClassifier"]], "rockettreeclassifier (class in wildboar.tree)": [[52, "wildboar.tree.RocketTreeClassifier"]], "rockettreeregressor (class in wildboar.tree)": [[52, "wildboar.tree.RocketTreeRegressor"]], "shapelettreeclassifier (class in wildboar.tree)": [[52, "wildboar.tree.ShapeletTreeClassifier"]], "shapelettreeregressor (class in wildboar.tree)": [[52, "wildboar.tree.ShapeletTreeRegressor"]], "apply() (wildboar.tree.extrashapelettreeclassifier method)": [[52, "wildboar.tree.ExtraShapeletTreeClassifier.apply"]], "apply() (wildboar.tree.extrashapelettreeregressor method)": [[52, "wildboar.tree.ExtraShapeletTreeRegressor.apply"]], "apply() (wildboar.tree.intervaltreeclassifier method)": [[52, "wildboar.tree.IntervalTreeClassifier.apply"]], "apply() (wildboar.tree.intervaltreeregressor method)": [[52, "wildboar.tree.IntervalTreeRegressor.apply"]], "apply() (wildboar.tree.pivottreeclassifier method)": [[52, "wildboar.tree.PivotTreeClassifier.apply"]], "apply() (wildboar.tree.proximitytreeclassifier method)": [[52, "wildboar.tree.ProximityTreeClassifier.apply"]], "apply() (wildboar.tree.rockettreeclassifier method)": [[52, "wildboar.tree.RocketTreeClassifier.apply"]], "apply() (wildboar.tree.rockettreeregressor method)": [[52, "wildboar.tree.RocketTreeRegressor.apply"]], "apply() (wildboar.tree.shapelettreeclassifier method)": [[52, "wildboar.tree.ShapeletTreeClassifier.apply"]], "apply() (wildboar.tree.shapelettreeregressor method)": [[52, "wildboar.tree.ShapeletTreeRegressor.apply"]], "decision_path() (wildboar.tree.extrashapelettreeclassifier method)": [[52, "wildboar.tree.ExtraShapeletTreeClassifier.decision_path"]], "decision_path() (wildboar.tree.extrashapelettreeregressor method)": [[52, "wildboar.tree.ExtraShapeletTreeRegressor.decision_path"]], "decision_path() (wildboar.tree.intervaltreeclassifier method)": [[52, "wildboar.tree.IntervalTreeClassifier.decision_path"]], "decision_path() (wildboar.tree.intervaltreeregressor method)": [[52, "wildboar.tree.IntervalTreeRegressor.decision_path"]], "decision_path() (wildboar.tree.pivottreeclassifier method)": [[52, "wildboar.tree.PivotTreeClassifier.decision_path"]], "decision_path() (wildboar.tree.proximitytreeclassifier method)": [[52, "wildboar.tree.ProximityTreeClassifier.decision_path"]], "decision_path() (wildboar.tree.rockettreeclassifier method)": [[52, "wildboar.tree.RocketTreeClassifier.decision_path"]], "decision_path() (wildboar.tree.rockettreeregressor method)": [[52, "wildboar.tree.RocketTreeRegressor.decision_path"]], "decision_path() (wildboar.tree.shapelettreeclassifier method)": [[52, "wildboar.tree.ShapeletTreeClassifier.decision_path"]], "decision_path() (wildboar.tree.shapelettreeregressor method)": [[52, "wildboar.tree.ShapeletTreeRegressor.decision_path"]], "fit() (wildboar.tree.extrashapelettreeclassifier method)": [[52, "wildboar.tree.ExtraShapeletTreeClassifier.fit"]], "fit() (wildboar.tree.extrashapelettreeregressor method)": [[52, "wildboar.tree.ExtraShapeletTreeRegressor.fit"]], "fit() (wildboar.tree.intervaltreeclassifier method)": [[52, "wildboar.tree.IntervalTreeClassifier.fit"]], "fit() (wildboar.tree.intervaltreeregressor method)": [[52, "wildboar.tree.IntervalTreeRegressor.fit"]], "fit() (wildboar.tree.pivottreeclassifier method)": [[52, "wildboar.tree.PivotTreeClassifier.fit"]], "fit() (wildboar.tree.proximitytreeclassifier method)": [[52, "wildboar.tree.ProximityTreeClassifier.fit"]], "fit() (wildboar.tree.rockettreeclassifier method)": [[52, "wildboar.tree.RocketTreeClassifier.fit"]], "fit() (wildboar.tree.rockettreeregressor method)": [[52, "wildboar.tree.RocketTreeRegressor.fit"]], "fit() (wildboar.tree.shapelettreeclassifier method)": [[52, "wildboar.tree.ShapeletTreeClassifier.fit"]], "fit() (wildboar.tree.shapelettreeregressor method)": [[52, "wildboar.tree.ShapeletTreeRegressor.fit"]], "get_metadata_routing() (wildboar.tree.extrashapelettreeclassifier method)": [[52, "wildboar.tree.ExtraShapeletTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree.extrashapelettreeregressor method)": [[52, "wildboar.tree.ExtraShapeletTreeRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree.intervaltreeclassifier method)": [[52, "wildboar.tree.IntervalTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree.intervaltreeregressor method)": [[52, "wildboar.tree.IntervalTreeRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree.pivottreeclassifier method)": [[52, "wildboar.tree.PivotTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree.proximitytreeclassifier method)": [[52, "wildboar.tree.ProximityTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree.rockettreeclassifier method)": [[52, "wildboar.tree.RocketTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree.rockettreeregressor method)": [[52, "wildboar.tree.RocketTreeRegressor.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree.shapelettreeclassifier method)": [[52, "wildboar.tree.ShapeletTreeClassifier.get_metadata_routing"]], "get_metadata_routing() (wildboar.tree.shapelettreeregressor method)": [[52, "wildboar.tree.ShapeletTreeRegressor.get_metadata_routing"]], "get_params() (wildboar.tree.extrashapelettreeclassifier method)": [[52, "wildboar.tree.ExtraShapeletTreeClassifier.get_params"]], "get_params() (wildboar.tree.extrashapelettreeregressor method)": [[52, "wildboar.tree.ExtraShapeletTreeRegressor.get_params"]], "get_params() (wildboar.tree.intervaltreeclassifier method)": [[52, "wildboar.tree.IntervalTreeClassifier.get_params"]], "get_params() (wildboar.tree.intervaltreeregressor method)": [[52, "wildboar.tree.IntervalTreeRegressor.get_params"]], "get_params() (wildboar.tree.pivottreeclassifier method)": [[52, "wildboar.tree.PivotTreeClassifier.get_params"]], "get_params() (wildboar.tree.proximitytreeclassifier method)": [[52, "wildboar.tree.ProximityTreeClassifier.get_params"]], "get_params() (wildboar.tree.rockettreeclassifier method)": [[52, "wildboar.tree.RocketTreeClassifier.get_params"]], "get_params() (wildboar.tree.rockettreeregressor method)": [[52, "wildboar.tree.RocketTreeRegressor.get_params"]], "get_params() (wildboar.tree.shapelettreeclassifier method)": [[52, "wildboar.tree.ShapeletTreeClassifier.get_params"]], "get_params() (wildboar.tree.shapelettreeregressor method)": [[52, "wildboar.tree.ShapeletTreeRegressor.get_params"]], "predict() (wildboar.tree.extrashapelettreeclassifier method)": [[52, "wildboar.tree.ExtraShapeletTreeClassifier.predict"]], "predict() (wildboar.tree.extrashapelettreeregressor method)": [[52, "wildboar.tree.ExtraShapeletTreeRegressor.predict"]], "predict() (wildboar.tree.intervaltreeclassifier method)": [[52, "wildboar.tree.IntervalTreeClassifier.predict"]], "predict() (wildboar.tree.intervaltreeregressor method)": [[52, "wildboar.tree.IntervalTreeRegressor.predict"]], "predict() (wildboar.tree.pivottreeclassifier method)": [[52, "wildboar.tree.PivotTreeClassifier.predict"]], "predict() (wildboar.tree.proximitytreeclassifier method)": [[52, "wildboar.tree.ProximityTreeClassifier.predict"]], "predict() (wildboar.tree.rockettreeclassifier method)": [[52, "wildboar.tree.RocketTreeClassifier.predict"]], "predict() (wildboar.tree.rockettreeregressor method)": [[52, "wildboar.tree.RocketTreeRegressor.predict"]], "predict() (wildboar.tree.shapelettreeclassifier method)": [[52, "wildboar.tree.ShapeletTreeClassifier.predict"]], "predict() (wildboar.tree.shapelettreeregressor method)": [[52, "wildboar.tree.ShapeletTreeRegressor.predict"]], "predict_proba() (wildboar.tree.extrashapelettreeclassifier method)": [[52, "wildboar.tree.ExtraShapeletTreeClassifier.predict_proba"]], "predict_proba() (wildboar.tree.intervaltreeclassifier method)": [[52, "wildboar.tree.IntervalTreeClassifier.predict_proba"]], "predict_proba() (wildboar.tree.pivottreeclassifier method)": [[52, "wildboar.tree.PivotTreeClassifier.predict_proba"]], "predict_proba() (wildboar.tree.proximitytreeclassifier method)": [[52, "wildboar.tree.ProximityTreeClassifier.predict_proba"]], "predict_proba() (wildboar.tree.rockettreeclassifier method)": [[52, "wildboar.tree.RocketTreeClassifier.predict_proba"]], "predict_proba() (wildboar.tree.shapelettreeclassifier method)": [[52, "wildboar.tree.ShapeletTreeClassifier.predict_proba"]], "score() (wildboar.tree.extrashapelettreeclassifier method)": [[52, "wildboar.tree.ExtraShapeletTreeClassifier.score"]], "score() (wildboar.tree.extrashapelettreeregressor method)": [[52, "wildboar.tree.ExtraShapeletTreeRegressor.score"]], "score() (wildboar.tree.intervaltreeclassifier method)": [[52, "wildboar.tree.IntervalTreeClassifier.score"]], "score() (wildboar.tree.intervaltreeregressor method)": [[52, "wildboar.tree.IntervalTreeRegressor.score"]], "score() (wildboar.tree.pivottreeclassifier method)": [[52, "wildboar.tree.PivotTreeClassifier.score"]], "score() (wildboar.tree.proximitytreeclassifier method)": [[52, "wildboar.tree.ProximityTreeClassifier.score"]], "score() (wildboar.tree.rockettreeclassifier method)": [[52, "wildboar.tree.RocketTreeClassifier.score"]], "score() (wildboar.tree.rockettreeregressor method)": [[52, "wildboar.tree.RocketTreeRegressor.score"]], "score() (wildboar.tree.shapelettreeclassifier method)": [[52, "wildboar.tree.ShapeletTreeClassifier.score"]], "score() (wildboar.tree.shapelettreeregressor method)": [[52, "wildboar.tree.ShapeletTreeRegressor.score"]], "set_params() (wildboar.tree.extrashapelettreeclassifier method)": [[52, "wildboar.tree.ExtraShapeletTreeClassifier.set_params"]], "set_params() (wildboar.tree.extrashapelettreeregressor method)": [[52, "wildboar.tree.ExtraShapeletTreeRegressor.set_params"]], "set_params() (wildboar.tree.intervaltreeclassifier method)": [[52, "wildboar.tree.IntervalTreeClassifier.set_params"]], "set_params() (wildboar.tree.intervaltreeregressor method)": [[52, "wildboar.tree.IntervalTreeRegressor.set_params"]], "set_params() (wildboar.tree.pivottreeclassifier method)": [[52, "wildboar.tree.PivotTreeClassifier.set_params"]], "set_params() (wildboar.tree.proximitytreeclassifier method)": [[52, "wildboar.tree.ProximityTreeClassifier.set_params"]], "set_params() (wildboar.tree.rockettreeclassifier method)": [[52, "wildboar.tree.RocketTreeClassifier.set_params"]], "set_params() (wildboar.tree.rockettreeregressor method)": [[52, "wildboar.tree.RocketTreeRegressor.set_params"]], "set_params() (wildboar.tree.shapelettreeclassifier method)": [[52, "wildboar.tree.ShapeletTreeClassifier.set_params"]], "set_params() (wildboar.tree.shapelettreeregressor method)": [[52, "wildboar.tree.ShapeletTreeRegressor.set_params"]], "wildboar.tree": [[52, "module-wildboar.tree"]], "run_in_parallel() (in module wildboar.utils._parallel)": [[53, "wildboar.utils._parallel.run_in_parallel"]], "wildboar.utils._parallel": [[53, "module-wildboar.utils._parallel"]], "assert_exhaustive_parameter_checks() (in module wildboar.utils._testing)": [[54, "wildboar.utils._testing.assert_exhaustive_parameter_checks"]], "assert_parameter_checks() (in module wildboar.utils._testing)": [[54, "wildboar.utils._testing.assert_parameter_checks"]], "wildboar.utils._testing": [[54, "module-wildboar.utils._testing"]], "array_or_scalar() (in module wildboar.utils.decorators)": [[55, "wildboar.utils.decorators.array_or_scalar"]], "singleton() (in module wildboar.utils.decorators)": [[55, "wildboar.utils.decorators.singleton"]], "unstable() (in module wildboar.utils.decorators)": [[55, "wildboar.utils.decorators.unstable"]], "wildboar.utils.decorators": [[55, "module-wildboar.utils.decorators"]], "check_estimator() (in module wildboar.utils.estimator_checks)": [[56, "wildboar.utils.estimator_checks.check_estimator"]], "wildboar.utils.estimator_checks": [[56, "module-wildboar.utils.estimator_checks"]], "check_x_y() (in module wildboar.utils)": [[57, "wildboar.utils.check_X_y"]], "check_array() (in module wildboar.utils)": [[57, "wildboar.utils.check_array"]], "wildboar.utils": [[57, "module-wildboar.utils"]], "midpointnormalize (class in wildboar.utils.plot)": [[58, "wildboar.utils.plot.MidpointNormalize"]], "autoscale() (wildboar.utils.plot.midpointnormalize method)": [[58, "wildboar.utils.plot.MidpointNormalize.autoscale"]], "autoscale_none() (wildboar.utils.plot.midpointnormalize method)": [[58, "wildboar.utils.plot.MidpointNormalize.autoscale_None"]], "plot_frequency_domain() (in module wildboar.utils.plot)": [[58, "wildboar.utils.plot.plot_frequency_domain"]], "plot_time_domain() (in module wildboar.utils.plot)": [[58, "wildboar.utils.plot.plot_time_domain"]], "process_value() (wildboar.utils.plot.midpointnormalize static method)": [[58, "wildboar.utils.plot.MidpointNormalize.process_value"]], "scaled() (wildboar.utils.plot.midpointnormalize method)": [[58, "wildboar.utils.plot.MidpointNormalize.scaled"]], "wildboar.utils.plot": [[58, "module-wildboar.utils.plot"]], "check_x_y() (in module wildboar.utils.validation)": [[59, "wildboar.utils.validation.check_X_y"]], "check_array() (in module wildboar.utils.validation)": [[59, "wildboar.utils.validation.check_array"]], "check_classification_targets() (in module wildboar.utils.validation)": [[59, "wildboar.utils.validation.check_classification_targets"]], "check_option() (in module wildboar.utils.validation)": [[59, "wildboar.utils.validation.check_option"]], "check_type() (in module wildboar.utils.validation)": [[59, "wildboar.utils.validation.check_type"]], "wildboar.utils.validation": [[59, "module-wildboar.utils.validation"]], "get_variable_length() (in module wildboar.utils.variable_len)": [[60, "wildboar.utils.variable_len.get_variable_length"]], "is_end_of_series() (in module wildboar.utils.variable_len)": [[60, "wildboar.utils.variable_len.is_end_of_series"]], "is_variable_length() (in module wildboar.utils.variable_len)": [[60, "wildboar.utils.variable_len.is_variable_length"]], "wildboar.utils.variable_len": [[60, "module-wildboar.utils.variable_len"]], "wildboar.version": [[61, "module-wildboar.version"]]}})