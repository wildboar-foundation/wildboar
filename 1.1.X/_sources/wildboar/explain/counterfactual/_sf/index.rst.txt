:orphan:

:py:mod:`wildboar.explain.counterfactual._sf`
=============================================

.. py:module:: wildboar.explain.counterfactual._sf


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   wildboar.explain.counterfactual._sf.PredictionPaths
   wildboar.explain.counterfactual._sf.ShapeletForestCounterfactual




Attributes
~~~~~~~~~~

.. autoapisummary::

   wildboar.explain.counterfactual._sf.MIN_MATCHING_DISTANCE


.. py:data:: MIN_MATCHING_DISTANCE
   :annotation: = 0.0001

   

.. py:class:: PredictionPaths(classes)

   .. py:method:: __contains__(item)


   .. py:method:: __getitem__(item)



.. py:class:: ShapeletForestCounterfactual(*, cost='euclidean', aggregation='mean', epsilon=1.0, batch_size=1, verbose=False, random_state=None)

   Bases: :py:obj:`wildboar.explain.counterfactual.base.BaseCounterfactual`

   Counterfactual explanations for shapelet forest classifiers

   .. attribute:: paths_

      A dictionary of prediction paths per label

      :type: dict

   .. rubric:: Notes

   This implementation only supports the reversible algorithm
   described by Karlsson (2020)

   .. warning::

      Only shapelet forests fit with the Euclidean distance is supported i.e.,
      ``metric="euclidean"``

   .. rubric:: References

   Karlsson, I., Rebane, J., Papapetrou, P., & Gionis, A. (2020).
       Locally and globally explainable time series tweaking.
       Knowledge and Information Systems, 62(5), 1671-1700.

   Karlsson, I., Rebane, J., Papapetrou, P., & Gionis, A. (2018).
       Explainable time series tweaking via irreversible and reversible temporal
       transformations. In 2018 IEEE International Conference on Data Mining (ICDM)

   :param cost: The cost function to determine the goodness of counterfactual
   :type cost: {"euclidean", "cosine", "manhattan"}, optional
   :param aggregation: The aggregation function for the cost of multivariate counterfactuals, by
   :type aggregation: callable, optional
   :param epsilon: Control the degree of change from the decision threshold
   :type epsilon: float, optional
   :param batch_size: Batch size when evaluating the cost and predictions of
                      counterfactual candidates. The default setting is to evaluate
                      all counterfactual samples.
   :type batch_size: float, optional
   :param random_state: Pseudo-random number for consistency between different runs
   :type random_state: RandomState or int, optional

   .. py:method:: candidates(x, y)


   .. py:method:: fit(estimator)

      Fit the counterfactual to a given estimator

      :param estimator: An estimator for which counterfactual explanations are produced
      :type estimator: object

      :rtype: self


   .. py:method:: transform(x, y)

      Transform the i:th sample in x to a sample that would be labeled as the i:th
       label in y

      :param x: The samples to generate counterfactual explanations for
      :type x: array-like of shape (n_samples, n_timestep) or (n_samples, n_dimension, n_timestep) # noqa: E501
      :param y: The desired label of the counterfactual sample
      :type y: array-like of shape (n_samples,)

      :returns: **counterfactuals** -- The counterfactual for each sample.
      :rtype: ndarray of same shape as x



