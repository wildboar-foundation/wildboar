:mod:`wildboar.tree`
====================

.. py:module:: wildboar.tree


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   wildboar.tree.ExtraShapeletTreeClassifier
   wildboar.tree.ExtraShapeletTreeRegressor
   wildboar.tree.RocketTreeClassifier
   wildboar.tree.RocketTreeRegressor
   wildboar.tree.ShapeletTreeClassifier
   wildboar.tree.ShapeletTreeRegressor




.. class:: ExtraShapeletTreeClassifier(*, max_depth=None, min_samples_leaf=1, min_impurity_decrease=0.0, min_samples_split=2, min_shapelet_size=0.0, max_shapelet_size=1.0, metric='euclidean', metric_params=None, criterion='entropy', force_dim=None, class_weight=None, random_state=None)


   Bases: :py:obj:`ShapeletTreeClassifier`

   An extra shapelet tree classifier.

   Extra shapelet trees are constructed by sampling a distance threshold
   uniformly in the range [min(dist), max(dist)].

   .. attribute:: tree_



      :type: Tree

   Construct a extra shapelet tree regressor

   :param max_depth: The maximum depth of the tree. If `None` the tree is expanded until all
                     leaves are pure or until all leaves contain less than `min_samples_split`
                     samples
   :type max_depth: int, optional
   :param min_samples_split: The minimum number of samples to split an internal node
   :type min_samples_split: int, optional
   :param min_samples_leaf: The minimum number of samples in a leaf
   :type min_samples_leaf: int, optional
   :param criterion: The criterion used to evaluate the utility of a split
   :type criterion: {"entropy", "gini"}, optional
   :param min_impurity_decrease: A split will be introduced only if the impurity decrease is larger than or
                                 equal to this value
   :type min_impurity_decrease: float, optional
   :param min_shapelet_size: The minimum length of a sampled shapelet expressed as a fraction, computed
                             as `min(ceil(X.shape[-1] * min_shapelet_size), 2)`.
   :type min_shapelet_size: float, optional
   :param max_shapelet_size: The maximum length of a sampled shapelet, expressed as a fraction, computed
                             as `ceil(X.shape[-1] * max_shapelet_size)`.
   :type max_shapelet_size: float, optional
   :param metric: Distance metric used to identify the best shapelet.
   :type metric: {'euclidean', 'scaled_euclidean', 'scaled_dtw'}, optional
   :param metric_params: Parameters for the distance measure
   :type metric_params: dict, optional
   :param force_dim: Force the number of dimensions.

                     - If int, force_dim reshapes the input to shape (n_samples, force_dim, -1)
                       for interoperability with `sklearn`.
   :type force_dim: int, optional
   :param class_weight: Weights associated with the labels

                        - if dict, weights on the form {label: weight}
                        - if "balanced" each class weight inversely proportional to the class
                          frequency
                        - if None, each class has equal weight
   :type class_weight: dict or "balanced", optional
   :param random_state:
                        - If `int`, `random_state` is the seed used by the random number generator;
                        - If `RandomState` instance, `random_state` is the random number generator;
                        - If `None`, the random number generator is the `RandomState` instance used
                          by `np.random`.
   :type random_state: int or RandomState


.. class:: ExtraShapeletTreeRegressor(*, n_shapelets=1, max_depth=None, min_samples_split=2, min_samples_leaf=1, min_impurity_decrease=0.0, min_shapelet_size=0.0, max_shapelet_size=1.0, metric='euclidean', metric_params=None, force_dim=None, criterion='mse', random_state=None)


   Bases: :py:obj:`ShapeletTreeRegressor`

   An extra shapelet tree regressor.

   Extra shapelet trees are constructed by sampling a distance threshold
   uniformly in the range [min(dist), max(dist)].

   .. attribute:: tree_



      :type: Tree

   Construct a extra shapelet tree regressor

   :param max_depth: The maximum depth of the tree. If `None` the tree is expanded until all
                     leaves are pure or until all leaves contain less than `min_samples_split`
                     samples
   :type max_depth: int, optional
   :param min_samples_split: The minimum number of samples to split an internal node
   :type min_samples_split: int, optional
   :param min_samples_leaf: The minimum number of samples in a leaf
   :type min_samples_leaf: int, optional
   :param criterion: The criterion used to evaluate the utility of a split
   :type criterion: {"mse"}, optional
   :param min_impurity_decrease: A split will be introduced only if the impurity decrease is larger than or
                                 equal to this value
   :type min_impurity_decrease: float, optional
   :param n_shapelets: The number of shapelets to sample at each node.
   :type n_shapelets: int, optional
   :param min_shapelet_size: The minimum length of a sampled shapelet expressed as a fraction, computed
                             as `min(ceil(X.shape[-1] * min_shapelet_size), 2)`.
   :type min_shapelet_size: float, optional
   :param max_shapelet_size: The maximum length of a sampled shapelet, expressed as a fraction, computed
                             as `ceil(X.shape[-1] * max_shapelet_size)`.
   :type max_shapelet_size: float, optional
   :param metric: Distance metric used to identify the best shapelet.
   :type metric: {'euclidean', 'scaled_euclidean', 'scaled_dtw'}, optional
   :param metric_params: Parameters for the distance measure
   :type metric_params: dict, optional
   :param force_dim: Force the number of dimensions.

                     - If int, force_dim reshapes the input to shape (n_samples, force_dim, -1)
                       for interoperability with `sklearn`.
   :type force_dim: int, optional
   :param random_state:
                        - If `int`, `random_state` is the seed used by the random number generator;
                        - If `RandomState` instance, `random_state` is the random number generator;
                        - If `None`, the random number generator is the `RandomState` instance used
                          by `np.random`.
   :type random_state: int or RandomState


.. class:: RocketTreeClassifier(n_kernels=10, *, max_depth=None, min_samples_split=2, min_sample_leaf=1, min_impurity_decrease=0.0, criterion='entropy', sampling='auto', sampling_params=None, kernel_size=None, bias_prob=1.0, normalize_prob=1.0, padding_prob=0.5, force_dim=None, class_weight=None, random_state=None)


   Bases: :py:obj:`sklearn.base.ClassifierMixin`, :py:obj:`ClassifierTreeMixin`, :py:obj:`BaseRocketTree`

   Mixin class for all classifiers in scikit-learn.

   :param n_kernels: The number of kernels to inspect at each node.
   :type n_kernels: int, optional
   :param max_depth: The maxium depth.
   :type max_depth: int, optional
   :param min_samples_split: The minimum number of samples required to split.
   :type min_samples_split: int, optional
   :param force_dim: Force reshaping of input data.
   :type force_dim: int, optional
   :param random_state: The psudo-random number generator.
   :type random_state: int or RandomState, optional


.. class:: RocketTreeRegressor(n_kernels=10, *, max_depth=None, min_samples_split=2, min_samples_leaf=1, min_impurity_decrease=0.0, criterion='mse', sampling='auto', sampling_params=None, kernel_size=None, bias_prob=1.0, normalize_prob=1.0, padding_prob=0.5, force_dim=None, random_state=None)


   Bases: :py:obj:`sklearn.base.RegressorMixin`, :py:obj:`RegressorTreeMixin`, :py:obj:`BaseRocketTree`

   Mixin class for all regression estimators in scikit-learn.

   :param n_kernels: The number of kernels to inspect at each node.
   :type n_kernels: int, optional
   :param max_depth: The maxium depth.
   :type max_depth: int, optional
   :param min_samples_split: The minimum number of samples required to split.
   :type min_samples_split: int, optional
   :param force_dim: Force reshaping of input data.
   :type force_dim: int, optional
   :param random_state: The psudo-random number generator.
   :type random_state: int or RandomState, optional


.. class:: ShapeletTreeClassifier(*, n_shapelets=10, max_depth=None, min_samples_split=2, min_samples_leaf=1, min_impurity_decrease=0.0, min_shapelet_size=0.0, max_shapelet_size=1.0, metric='euclidean', metric_params=None, criterion='entropy', force_dim=None, class_weight=None, random_state=None)


   Bases: :py:obj:`sklearn.base.ClassifierMixin`, :py:obj:`ClassifierTreeMixin`, :py:obj:`BaseShapeletTree`

   A shapelet tree classifier.

   .. attribute:: tree_

      The tree data structure used internally

      :type: Tree

   .. attribute:: classes_

      The class labels

      :type: ndarray of shape (n_classes,)

   .. attribute:: n_classes_

      The number of class labels

      :type: int

   .. seealso::

      :obj:`ShapeletTreeRegressor`
          A shapelet tree regressor.

      :obj:`ExtraShapeletTreeClassifier`
          An extra random shapelet tree classifier.

   Construct a shapelet tree classifier

   :param max_depth: The maximum depth of the tree. If `None` the tree is expanded until all
                     leaves are pure or until all leaves contain less than `min_samples_split`
                     samples
   :type max_depth: int, optional
   :param min_samples_split: The minimum number of samples to split an internal node
   :type min_samples_split: int, optional
   :param min_samples_leaf: The minimum number of samples in a leaf
   :type min_samples_leaf: int, optional
   :param criterion: The criterion used to evaluate the utility of a split
   :type criterion: {"entropy", "gini"}, optional
   :param min_impurity_decrease: A split will be introduced only if the impurity decrease is larger than or
                                 equal to this value
   :type min_impurity_decrease: float, optional
   :param n_shapelets: The number of shapelets to sample at each node.
   :type n_shapelets: int, optional
   :param min_shapelet_size: The minimum length of a sampled shapelet expressed as a fraction, computed
                             as `min(ceil(X.shape[-1] * min_shapelet_size), 2)`.
   :type min_shapelet_size: float, optional
   :param max_shapelet_size: The maximum length of a sampled shapelet, expressed as a fraction, computed
                             as `ceil(X.shape[-1] * max_shapelet_size)`.
   :type max_shapelet_size: float, optional
   :param metric: Distance metric used to identify the best shapelet.
   :type metric: {'euclidean', 'scaled_euclidean', 'scaled_dtw'}, optional
   :param metric_params: Parameters for the distance measure
   :type metric_params: dict, optional
   :param force_dim: Force the number of dimensions.

                     - If int, force_dim reshapes the input to shape (n_samples, force_dim, -1)
                       for interoperability with `sklearn`.
   :type force_dim: int, optional
   :param class_weight: Weights associated with the labels

                        - if dict, weights on the form {label: weight}
                        - if "balanced" each class weight inversely proportional to the class
                          frequency
                        - if None, each class has equal weight
   :type class_weight: dict or "balanced", optional
   :param random_state:
                        - If `int`, `random_state` is the seed used by the random number generator;
                        - If `RandomState` instance, `random_state` is the random number generator;
                        - If `None`, the random number generator is the `RandomState` instance used
                          by `np.random`.
   :type random_state: int or RandomState


.. class:: ShapeletTreeRegressor(*, max_depth=None, min_samples_split=2, min_samples_leaf=1, min_impurity_decrease=0.0, n_shapelets=10, min_shapelet_size=0, max_shapelet_size=1, metric='euclidean', metric_params=None, force_dim=None, criterion='mse', random_state=None)


   Bases: :py:obj:`sklearn.base.RegressorMixin`, :py:obj:`RegressorTreeMixin`, :py:obj:`BaseShapeletTree`

   A shapelet tree regressor.

   .. attribute:: tree_



      :type: Tree

   Construct a shapelet tree regressor

   :param max_depth: The maximum depth of the tree. If `None` the tree is expanded until all
                     leaves are pure or until all leaves contain less than `min_samples_split`
                     samples
   :type max_depth: int, optional
   :param min_samples_split: The minimum number of samples to split an internal node
   :type min_samples_split: int, optional
   :param min_samples_leaf: The minimum number of samples in a leaf
   :type min_samples_leaf: int, optional
   :param criterion: The criterion used to evaluate the utility of a split
   :type criterion: {"mse"}, optional
   :param min_impurity_decrease: A split will be introduced only if the impurity decrease is larger than or
                                 equal to this value
   :type min_impurity_decrease: float, optional
   :param n_shapelets: The number of shapelets to sample at each node.
   :type n_shapelets: int, optional
   :param min_shapelet_size: The minimum length of a sampled shapelet expressed as a fraction, computed
                             as `min(ceil(X.shape[-1] * min_shapelet_size), 2)`.
   :type min_shapelet_size: float, optional
   :param max_shapelet_size: The maximum length of a sampled shapelet, expressed as a fraction, computed
                             as `ceil(X.shape[-1] * max_shapelet_size)`.
   :type max_shapelet_size: float, optional
   :param metric: Distance metric used to identify the best shapelet.
   :type metric: {'euclidean', 'scaled_euclidean', 'scaled_dtw'}, optional
   :param metric_params: Parameters for the distance measure
   :type metric_params: dict, optional
   :param force_dim: Force the number of dimensions.

                     - If int, force_dim reshapes the input to shape (n_samples, force_dim, -1)
                       for interoperability with `sklearn`.
   :type force_dim: int, optional
   :param random_state:
                        - If `int`, `random_state` is the seed used by the random number generator;
                        - If `RandomState` instance, `random_state` is the random number generator;
                        - If `None`, the random number generator is the `RandomState` instance used
                          by `np.random`.
   :type random_state: int or RandomState


