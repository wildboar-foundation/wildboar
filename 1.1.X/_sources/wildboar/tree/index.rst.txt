:py:mod:`wildboar.tree`
=======================

.. py:module:: wildboar.tree


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   base/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   wildboar.tree.ExtraShapeletTreeClassifier
   wildboar.tree.ExtraShapeletTreeRegressor
   wildboar.tree.IntervalTreeClassifier
   wildboar.tree.IntervalTreeRegressor
   wildboar.tree.PivotTreeClassifier
   wildboar.tree.ProximityTreeClassifier
   wildboar.tree.RocketTreeClassifier
   wildboar.tree.RocketTreeRegressor
   wildboar.tree.ShapeletTreeClassifier
   wildboar.tree.ShapeletTreeRegressor




.. py:class:: ExtraShapeletTreeClassifier(*, max_depth=None, min_samples_leaf=1, min_impurity_decrease=0.0, min_samples_split=2, min_shapelet_size=0.0, max_shapelet_size=1.0, metric='euclidean', metric_params=None, criterion='entropy', force_dim=None, class_weight=None, random_state=None)

   Bases: :py:obj:`ShapeletTreeClassifier`

   An extra shapelet tree classifier.

   Extra shapelet trees are constructed by sampling a distance threshold
   uniformly in the range [min(dist), max(dist)].

   .. attribute:: tree_



      :type: Tree

   .. attribute:: Construct a extra shapelet tree regressor



   .. attribute::

      leaves are pure or until all leaves contain less than `min_samples_split`
      samples

      :type: param max_depth: The maximum depth of the tree. If `None` the tree is expanded until all

   .. attribute::



      :type: type max_depth: int, optional

   .. attribute::



      :type: param min_samples_split: The minimum number of samples to split an internal node

   .. attribute::



      :type: type min_samples_split: int, optional

   .. attribute::



      :type: param min_samples_leaf: The minimum number of samples in a leaf

   .. attribute::



      :type: type min_samples_leaf: int, optional

   .. attribute::



      :type: param criterion: The criterion used to evaluate the utility of a split

   .. attribute::



      :type: type criterion: {"entropy", "gini"}, optional

   .. attribute::

      equal to this value

      :type: param min_impurity_decrease: A split will be introduced only if the impurity decrease is larger than or

   .. attribute::



      :type: type min_impurity_decrease: float, optional

   .. attribute::

      as `min(ceil(X.shape[-1] * min_shapelet_size), 2)`.

      :type: param min_shapelet_size: The minimum length of a sampled shapelet expressed as a fraction, computed

   .. attribute::



      :type: type min_shapelet_size: float, optional

   .. attribute::

      as `ceil(X.shape[-1] * max_shapelet_size)`.

      :type: param max_shapelet_size: The maximum length of a sampled shapelet, expressed as a fraction, computed

   .. attribute::



      :type: type max_shapelet_size: float, optional

   .. attribute::



      :type: param metric: Distance metric used to identify the best shapelet.

   .. attribute::



      :type: type metric: {'euclidean', 'scaled_euclidean', 'scaled_dtw'}, optional

   .. attribute::



      :type: param metric_params: Parameters for the distance measure

   .. attribute::



      :type: type metric_params: dict, optional

   .. attribute::



      - If int, force_dim reshapes the input to shape (n_samples, force_dim, -1)
        for interoperability with `sklearn`.

      :type: param force_dim: Force the number of dimensions.

   .. attribute::



      :type: type force_dim: int, optional

   .. attribute::



      - if dict, weights on the form {label: weight}
      - if "balanced" each class weight inversely proportional to the class
        frequency
      - if None, each class has equal weight

      :type: param class_weight: Weights associated with the labels

   .. attribute::



      :type: type class_weight: dict or "balanced", optional

   .. attribute::



      - If `int`, `random_state` is the seed used by the random number generator;
      - If `RandomState` instance, `random_state` is the random number generator;
      - If `None`, the random number generator is the `RandomState` instance used
        by `np.random`.

      :type: param random_state:

   .. attribute::



      :type: type random_state: int or RandomState


.. py:class:: ExtraShapeletTreeRegressor(*, n_shapelets=1, max_depth=None, min_samples_split=2, min_samples_leaf=1, min_impurity_decrease=0.0, min_shapelet_size=0.0, max_shapelet_size=1.0, metric='euclidean', metric_params=None, force_dim=None, criterion='mse', random_state=None)

   Bases: :py:obj:`ShapeletTreeRegressor`

   An extra shapelet tree regressor.

   Extra shapelet trees are constructed by sampling a distance threshold
   uniformly in the range [min(dist), max(dist)].

   .. attribute:: tree_



      :type: Tree

   .. attribute:: Construct a extra shapelet tree regressor



   .. attribute::

      leaves are pure or until all leaves contain less than `min_samples_split`
      samples

      :type: param max_depth: The maximum depth of the tree. If `None` the tree is expanded until all

   .. attribute::



      :type: type max_depth: int, optional

   .. attribute::



      :type: param min_samples_split: The minimum number of samples to split an internal node

   .. attribute::



      :type: type min_samples_split: int, optional

   .. attribute::



      :type: param min_samples_leaf: The minimum number of samples in a leaf

   .. attribute::



      :type: type min_samples_leaf: int, optional

   .. attribute::



      :type: param criterion: The criterion used to evaluate the utility of a split

   .. attribute::



      :type: type criterion: {"mse"}, optional

   .. attribute::

      equal to this value

      :type: param min_impurity_decrease: A split will be introduced only if the impurity decrease is larger than or

   .. attribute::



      :type: type min_impurity_decrease: float, optional

   .. attribute::



      :type: param n_shapelets: The number of shapelets to sample at each node.

   .. attribute::



      :type: type n_shapelets: int, optional

   .. attribute::

      as `min(ceil(X.shape[-1] * min_shapelet_size), 2)`.

      :type: param min_shapelet_size: The minimum length of a sampled shapelet expressed as a fraction, computed

   .. attribute::



      :type: type min_shapelet_size: float, optional

   .. attribute::

      as `ceil(X.shape[-1] * max_shapelet_size)`.

      :type: param max_shapelet_size: The maximum length of a sampled shapelet, expressed as a fraction, computed

   .. attribute::



      :type: type max_shapelet_size: float, optional

   .. attribute::



      :type: param metric: Distance metric used to identify the best shapelet.

   .. attribute::



      :type: type metric: {'euclidean', 'scaled_euclidean', 'scaled_dtw'}, optional

   .. attribute::



      :type: param metric_params: Parameters for the distance measure

   .. attribute::



      :type: type metric_params: dict, optional

   .. attribute::



      - If int, force_dim reshapes the input to shape (n_samples, force_dim, -1)
        for interoperability with `sklearn`.

      :type: param force_dim: Force the number of dimensions.

   .. attribute::



      :type: type force_dim: int, optional

   .. attribute::



      - If `int`, `random_state` is the seed used by the random number generator;
      - If `RandomState` instance, `random_state` is the random number generator;
      - If `None`, the random number generator is the `RandomState` instance used
        by `np.random`.

      :type: param random_state:

   .. attribute::



      :type: type random_state: int or RandomState


.. py:class:: IntervalTreeClassifier(n_interval='sqrt', *, max_depth=None, min_samples_split=2, min_samples_leaf=1, min_impurity_decrease=0.0, criterion='entropy', intervals='fixed', sample_size=0.5, min_size=0.0, max_size=1.0, summarizer='auto', force_dim=None, class_weight=None, random_state=None)

   Bases: :py:obj:`FeatureTreeClassifierMixin`, :py:obj:`BaseIntervalTree`

   Mixin for classifation trees.

   :param n_kernels: The number of kernels to inspect at each node.
   :type n_kernels: int, optional
   :param max_depth: The maxium depth.
   :type max_depth: int, optional
   :param min_samples_split: The minimum number of samples required to split.
   :type min_samples_split: int, optional
   :param force_dim: Force reshaping of input data.
   :type force_dim: int, optional
   :param random_state: The psudo-random number generator.
   :type random_state: int or RandomState, optional


.. py:class:: IntervalTreeRegressor(n_interval='sqrt', *, max_depth=None, min_samples_split=2, min_samples_leaf=1, min_impurity_decrease=0.0, criterion='entropy', intervals='fixed', sample_size=0.5, min_size=0.0, max_size=1.0, summarizer='auto', force_dim=None, random_state=None)

   Bases: :py:obj:`FeatureTreeRegressorMixin`, :py:obj:`BaseIntervalTree`

   Mixin for regression trees.

   :param n_kernels: The number of kernels to inspect at each node.
   :type n_kernels: int, optional
   :param max_depth: The maxium depth.
   :type max_depth: int, optional
   :param min_samples_split: The minimum number of samples required to split.
   :type min_samples_split: int, optional
   :param force_dim: Force reshaping of input data.
   :type force_dim: int, optional
   :param random_state: The psudo-random number generator.
   :type random_state: int or RandomState, optional


.. py:class:: PivotTreeClassifier(n_pivot='sqrt', *, metrics='all', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_impurity_decrease=0.0, criterion='entropy', class_weight=None, force_dim=None, random_state=None)

   Bases: :py:obj:`FeatureTreeClassifierMixin`, :py:obj:`BasePivotTree`

   Mixin for classifation trees.

   :param n_kernels: The number of kernels to inspect at each node.
   :type n_kernels: int, optional
   :param max_depth: The maxium depth.
   :type max_depth: int, optional
   :param min_samples_split: The minimum number of samples required to split.
   :type min_samples_split: int, optional
   :param force_dim: Force reshaping of input data.
   :type force_dim: int, optional
   :param random_state: The psudo-random number generator.
   :type random_state: int or RandomState, optional


.. py:class:: ProximityTreeClassifier(n_pivot=1, *, criterion='entropy', pivot_sample='label', metric_sample='weighted', metric_factories=None, force_dim=None, max_depth=None, min_samples_split=2, min_samples_leaf=1, min_impurity_decrease=0.0, class_weight=None, random_state=None)

   Bases: :py:obj:`wildboar.tree.base.TreeClassifierMixin`, :py:obj:`wildboar.tree.base.BaseTree`

   A proximity tree defines a k-branching tree based on pivot-time series.

   .. rubric:: Examples

   >>> from wildboar.datasets import load_dataset
   >>> from wildboar.tree import ProximityTreeClassifier
   >>> x, y = load_dataset("GunPoint")
   >>> f = ProximityTreeClassifier(n_pivot=10, criterion="gini")
   >>> f.fit(x, y)

   .. rubric:: References

   Lucas, Benjamin, Ahmed Shifaz, Charlotte Pelletier, Lachlan O’Neill, Nayyar Zaidi,
   Bart Goethals, François Petitjean, and Geoffrey I. Webb. (2019)
       Proximity forest: an effective and scalable distance-based classifier for time
       series. Data Mining and Knowledge Discovery

   :param n_pivot: The number of pivots to sample at each node.
   :type n_pivot: int, optional
   :param criterion: The impurity criterion.
   :type criterion: {"entropy", "gini"}, optional
   :param pivot_sample: The pivot sampling method.
   :type pivot_sample: {"label", "uniform"}, optional
   :param metric_sample: The metric sampling method.
   :type metric_sample: {"uniform", "weighted"}, optional
   :param metric_factories: The distance metrics. A dictionary where key is:

                            - str: a named distance factory (``_DISTANCE_FACTORIES.keys()``)
                            - callable, a function returning a list of ``DistanceMeasure``-objects

                            and where value is a dict of parameters to the factory.
   :type metric_factories: dict, optional
   :param max_depth: The maximum tree depth.
   :type max_depth: int, optional
   :param min_samples_split: The minimum number of samples to consider a split.
   :type min_samples_split: int, optional
   :param min_samples_leaf: The minimum number of samples in a leaf.
   :type min_samples_leaf: int, optional
   :param min_impurity_decrease: The minimum impurity decrease to build a sub-tree.
   :type min_impurity_decrease: float, optional
   :param class_weight: The class weights.
   :type class_weight: array-like of shape (n_labels, ) or "balanced", optional
   :param random_state: The pseudo random number generator.
   :type random_state: int or RandomState, optional


.. py:class:: RocketTreeClassifier(n_kernels=10, *, max_depth=None, min_samples_split=2, min_sample_leaf=1, min_impurity_decrease=0.0, criterion='entropy', sampling='auto', sampling_params=None, kernel_size=None, bias_prob=1.0, normalize_prob=1.0, padding_prob=0.5, force_dim=None, class_weight=None, random_state=None)

   Bases: :py:obj:`FeatureTreeClassifierMixin`, :py:obj:`BaseRocketTree`

   Mixin for classifation trees.

   :param n_kernels: The number of kernels to inspect at each node.
   :type n_kernels: int, optional
   :param max_depth: The maxium depth.
   :type max_depth: int, optional
   :param min_samples_split: The minimum number of samples required to split.
   :type min_samples_split: int, optional
   :param force_dim: Force reshaping of input data.
   :type force_dim: int, optional
   :param random_state: The psudo-random number generator.
   :type random_state: int or RandomState, optional


.. py:class:: RocketTreeRegressor(n_kernels=10, *, max_depth=None, min_samples_split=2, min_samples_leaf=1, min_impurity_decrease=0.0, criterion='mse', sampling='auto', sampling_params=None, kernel_size=None, bias_prob=1.0, normalize_prob=1.0, padding_prob=0.5, force_dim=None, random_state=None)

   Bases: :py:obj:`FeatureTreeRegressorMixin`, :py:obj:`BaseRocketTree`

   Mixin for regression trees.

   :param n_kernels: The number of kernels to inspect at each node.
   :type n_kernels: int, optional
   :param max_depth: The maxium depth.
   :type max_depth: int, optional
   :param min_samples_split: The minimum number of samples required to split.
   :type min_samples_split: int, optional
   :param force_dim: Force reshaping of input data.
   :type force_dim: int, optional
   :param random_state: The psudo-random number generator.
   :type random_state: int or RandomState, optional


.. py:class:: ShapeletTreeClassifier(*, n_shapelets=10, max_depth=None, min_samples_split=2, min_samples_leaf=1, min_impurity_decrease=0.0, min_shapelet_size=0.0, max_shapelet_size=1.0, metric='euclidean', metric_params=None, criterion='entropy', force_dim=None, class_weight=None, random_state=None)

   Bases: :py:obj:`FeatureTreeClassifierMixin`, :py:obj:`BaseShapeletTree`

   A shapelet tree classifier.

   .. attribute:: tree_

      The tree data structure used internally

      :type: Tree

   .. attribute:: classes_

      The class labels

      :type: ndarray of shape (n_classes,)

   .. attribute:: n_classes_

      The number of class labels

      :type: int

   .. seealso::

      ShapeletTreeRegressor : A shapelet tree regressor.
      ExtraShapeletTreeClassifier : An extra random shapelet tree classifier.

      Construct a shapelet tree classifier

      :param max_depth: The maximum depth of the tree. If `None` the tree is expanded until all
                        leaves are pure or until all leaves contain less than `min_samples_split`
                        samples
      :type max_depth: int, optional
      :param min_samples_split: The minimum number of samples to split an internal node
      :type min_samples_split: int, optional
      :param min_samples_leaf: The minimum number of samples in a leaf
      :type min_samples_leaf: int, optional
      :param criterion: The criterion used to evaluate the utility of a split
      :type criterion: {"entropy", "gini"}, optional
      :param min_impurity_decrease: A split will be introduced only if the impurity decrease is larger than or
                                    equal to this value
      :type min_impurity_decrease: float, optional
      :param n_shapelets: The number of shapelets to sample at each node.
      :type n_shapelets: int, optional
      :param min_shapelet_size: The minimum length of a sampled shapelet expressed as a fraction, computed
                                as `min(ceil(X.shape[-1] * min_shapelet_size), 2)`.
      :type min_shapelet_size: float, optional
      :param max_shapelet_size: The maximum length of a sampled shapelet, expressed as a fraction, computed
                                as `ceil(X.shape[-1] * max_shapelet_size)`.
      :type max_shapelet_size: float, optional
      :param metric: Distance metric used to identify the best shapelet.
      :type metric: {'euclidean', 'scaled_euclidean', 'scaled_dtw'}, optional
      :param metric_params: Parameters for the distance measure
      :type metric_params: dict, optional
      :param force_dim: Force the number of dimensions.

                        - If int, force_dim reshapes the input to shape (n_samples, force_dim, -1)
                          for interoperability with `sklearn`.
      :type force_dim: int, optional
      :param class_weight: Weights associated with the labels

                           - if dict, weights on the form {label: weight}
                           - if "balanced" each class weight inversely proportional to the class
                             frequency
                           - if None, each class has equal weight
      :type class_weight: dict or "balanced", optional
      :param random_state:
                           - If `int`, `random_state` is the seed used by the random number generator;
                           - If `RandomState` instance, `random_state` is the random number generator;
                           - If `None`, the random number generator is the `RandomState` instance used
                             by `np.random`.
      :type random_state: int or RandomState


.. py:class:: ShapeletTreeRegressor(*, max_depth=None, min_samples_split=2, min_samples_leaf=1, min_impurity_decrease=0.0, n_shapelets=10, min_shapelet_size=0, max_shapelet_size=1, metric='euclidean', metric_params=None, force_dim=None, criterion='mse', random_state=None)

   Bases: :py:obj:`FeatureTreeRegressorMixin`, :py:obj:`BaseShapeletTree`

   A shapelet tree regressor.

   .. attribute:: tree_



      :type: Tree

   .. attribute:: Construct a shapelet tree regressor



   .. attribute::

      leaves are pure or until all leaves contain less than `min_samples_split`
      samples

      :type: param max_depth: The maximum depth of the tree. If `None` the tree is expanded until all

   .. attribute::



      :type: type max_depth: int, optional

   .. attribute::



      :type: param min_samples_split: The minimum number of samples to split an internal node

   .. attribute::



      :type: type min_samples_split: int, optional

   .. attribute::



      :type: param min_samples_leaf: The minimum number of samples in a leaf

   .. attribute::



      :type: type min_samples_leaf: int, optional

   .. attribute::



      :type: param criterion: The criterion used to evaluate the utility of a split

   .. attribute::



      :type: type criterion: {"mse"}, optional

   .. attribute::

      equal to this value

      :type: param min_impurity_decrease: A split will be introduced only if the impurity decrease is larger than or

   .. attribute::



      :type: type min_impurity_decrease: float, optional

   .. attribute::



      :type: param n_shapelets: The number of shapelets to sample at each node.

   .. attribute::



      :type: type n_shapelets: int, optional

   .. attribute::

      as `min(ceil(X.shape[-1] * min_shapelet_size), 2)`.

      :type: param min_shapelet_size: The minimum length of a sampled shapelet expressed as a fraction, computed

   .. attribute::



      :type: type min_shapelet_size: float, optional

   .. attribute::

      as `ceil(X.shape[-1] * max_shapelet_size)`.

      :type: param max_shapelet_size: The maximum length of a sampled shapelet, expressed as a fraction, computed

   .. attribute::



      :type: type max_shapelet_size: float, optional

   .. attribute::



      :type: param metric: Distance metric used to identify the best shapelet.

   .. attribute::



      :type: type metric: {'euclidean', 'scaled_euclidean', 'scaled_dtw'}, optional

   .. attribute::



      :type: param metric_params: Parameters for the distance measure

   .. attribute::



      :type: type metric_params: dict, optional

   .. attribute::



      - If int, force_dim reshapes the input to shape (n_samples, force_dim, -1)
        for interoperability with `sklearn`.

      :type: param force_dim: Force the number of dimensions.

   .. attribute::



      :type: type force_dim: int, optional

   .. attribute::



      - If `int`, `random_state` is the seed used by the random number generator;
      - If `RandomState` instance, `random_state` is the random number generator;
      - If `None`, the random number generator is the `RandomState` instance used
        by `np.random`.

      :type: param random_state:

   .. attribute::



      :type: type random_state: int or RandomState


