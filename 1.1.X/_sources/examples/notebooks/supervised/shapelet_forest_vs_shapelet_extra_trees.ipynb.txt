{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Shapelet forests and extremly randomized shapelet trees\n",
    "\n",
    "In this example, we explore the training time and predictive performance of the random shapelet forest and the extremly randomized shapelet trees algorithm."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from sklearn.model_selection import cross_validate\n",
    "\n",
    "from wildboar.datasets import load_dataset\n",
    "from wildboar.ensemble import ExtraShapeletTreesClassifier, ShapeletForestClassifier\n",
    "\n",
    "random_state = 1234"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, we load the datasets merging any existing training and testing partitions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "x, y = load_dataset(\"Beef\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we setup the two classifiers we want to compare."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "classifiers = {\n",
    "    \"Shapelet forest\": ShapeletForestClassifier(\n",
    "        n_shapelets=10,\n",
    "        metric=\"scaled_euclidean\",\n",
    "        n_jobs=-1,\n",
    "        random_state=random_state,\n",
    "    ),\n",
    "    \"Extra Shapelet Trees\": ExtraShapeletTreesClassifier(\n",
    "        metric=\"scaled_euclidean\",\n",
    "        n_jobs=-1,\n",
    "        random_state=random_state,\n",
    "    ),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we iterate over the classifiers and compute the cross-validation area under ROC. We also print the time it takes to train the algorithms and their respective performance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classifier: Shapelet forest\n",
      " - fit-time:   0.75\n",
      " - test-score: 0.88\n",
      "Classifier: Extra Shapelet Trees\n",
      " - fit-time:   0.17\n",
      " - test-score: 0.87\n"
     ]
    }
   ],
   "source": [
    "for name, clf in classifiers.items():\n",
    "    score = cross_validate(clf, x, y, scoring=\"roc_auc_ovo\", n_jobs=1)\n",
    "    print(f\"Classifier: {name}\")\n",
    "    print(\" - fit-time:   %.2f\" % np.mean(score[\"fit_time\"]))\n",
    "    print(\" - test-score: %.2f\" % np.mean(score[\"test_score\"]))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.9.7 ('wb2')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "52652bfa9fd4561eadaaee81a668145a0f20ccab101fde0ad61faafa07b87b33"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
