:orphan:

:py:mod:`wildboar.tree._tree`
=============================

.. py:module:: wildboar.tree._tree


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   wildboar.tree._tree.BaseShapeletTree
   wildboar.tree._tree.ShapeletTreeRegressor
   wildboar.tree._tree.ExtraShapeletTreeRegressor
   wildboar.tree._tree.ShapeletTreeClassifier
   wildboar.tree._tree.ExtraShapeletTreeClassifier




.. py:class:: BaseShapeletTree(*, max_depth=None, min_samples_split=2, n_shapelets=10, min_shapelet_size=0, max_shapelet_size=1, metric='euclidean', metric_params=None, force_dim=None, random_state=None)


   Bases: :py:obj:`sklearn.base.BaseEstimator`

   Base class for all estimators in scikit-learn.

   .. rubric:: Notes

   All estimators should specify all the parameters that can be set
   at the class level in their ``__init__`` as explicit keyword
   arguments (no ``*args`` or ``**kwargs``).

   .. py:method:: decision_path(x, check_input=True)


   .. py:method:: apply(x, check_input=True)



.. py:class:: ShapeletTreeRegressor(*, max_depth=None, min_samples_split=2, n_shapelets=10, min_shapelet_size=0, max_shapelet_size=1, metric='euclidean', metric_params=None, force_dim=None, random_state=None)


   Bases: :py:obj:`sklearn.base.RegressorMixin`, :py:obj:`BaseShapeletTree`

   A shapelet tree regressor.

   .. attribute:: tree_



      :type: Tree

   .. py:method:: fit(X, y, sample_weight=None, check_input=True)

      Fit a shapelet tree regressor from the training set

      :param X: The training time series.
      :type X: array-like of shape (n_samples, n_timesteps) or (n_samples, n_dimensions, n_timesteps)
      :param y: Target values as floating point values
      :type y: array-like of shape (n_samples,)
      :param sample_weight: If `None`, then samples are equally weighted. Splits that would create child
                            nodes with net zero or negative weight are ignored while searching for a split
                            in each node. Splits are also ignored if they would result in any single class
                            carrying a negative weight in either child node.
      :type sample_weight: array-like of shape (n_samples,)
      :param check_input: Allow to bypass several input checking. Don't use this parameter unless you know what you do.
      :type check_input: bool, optional

      :returns: **self**
      :rtype: object


   .. py:method:: predict(x, check_input=True)

      Predict the regression of the input samples x.

      :param x: The input time series
      :type x: array-like of shape (n_samples, n_timesteps) or (n_samples, n_dimensions, n_timesteps])
      :param check_input: Allow to bypass several input checking. Don't use this parameter unless you know what you do.
      :type check_input: bool, optional

      :returns: **y** -- The predicted classes.
      :rtype: ndarray of shape (n_samples,)



.. py:class:: ExtraShapeletTreeRegressor(*, max_depth=None, n_shapelets=1, min_samples_split=2, min_shapelet_size=0, max_shapelet_size=1, metric='euclidean', metric_params=None, force_dim=None, random_state=None)


   Bases: :py:obj:`ShapeletTreeRegressor`

   An extra shapelet tree regressor.

   Extra shapelet trees are constructed by sampling a distance threshold
   uniformly in the range [min(dist), max(dist)].

   .. attribute:: tree_



      :type: Tree


.. py:class:: ShapeletTreeClassifier(max_depth=None, min_samples_split=2, n_shapelets=10, min_shapelet_size=0, max_shapelet_size=1, metric='euclidean', metric_params=None, force_dim=None, random_state=None)


   Bases: :py:obj:`sklearn.base.ClassifierMixin`, :py:obj:`BaseShapeletTree`

   A shapelet tree classifier.

   .. attribute:: tree_

      The tree data structure used internally

      :type: Tree

   .. attribute:: classes_

      The class labels

      :type: ndarray of shape (n_classes,)

   .. attribute:: n_classes_

      The number of class labels

      :type: int

   .. seealso::

      :obj:`ShapeletTreeRegressor`
          A shapelet tree regressor.

      :obj:`ExtraShapeletTreeClassifier`
          An extra random shapelet tree classifier.

   .. py:method:: fit(x, y, sample_weight=None, check_input=True)

      Fit a shapelet tree regressor from the training set

      :param X: The training time series.
      :type X: array-like of shape (n_samples, n_timesteps) or (n_samples, n_dimensions, n_timesteps)
      :param y: The target values (class labels) as integers
      :type y: array-like of shape (n_samples,) or (n_samples, n_classes)
      :param sample_weight: If `None`, then samples are equally weighted. Splits that would create child
                            nodes with net zero or negative weight are ignored while searching for a split
                            in each node. Splits are also ignored if they would result in any single class
                            carrying a negative weight in either child node.
      :type sample_weight: array-like of shape (n_samples,)
      :param check_input: Allow to bypass several input checking. Don't use this parameter unless you know what you do.
      :type check_input: bool, optional

      :returns: **self**
      :rtype: object


   .. py:method:: predict(x, check_input=True)

      Predict the regression of the input samples x.

      :param x: The input time series
      :type x: array-like of shape (n_samples, n_timesteps) or (n_samples, n_dimensions, n_timesteps])
      :param check_input: Allow to bypass several input checking. Don't use this parameter unless you know what you do.
      :type check_input: bool, optional

      :returns: **y** -- The predicted classes.
      :rtype: ndarray of shape (n_samples,)


   .. py:method:: predict_proba(x, check_input=True)

      Predict class probabilities of the input samples X.  The predicted
      class probability is the fraction of samples of the same class
      in a leaf.

      :param x: The input time series
      :type x: array-like of shape (n_samples, n_timesteps) or (n_samples, n_dimensions, n_timesteps])
      :param check_input: Allow to bypass several input checking. Don't use this parameter unless you know what you do.
      :type check_input: bool, optional

      :returns: **proba** -- The class probabilities of the input samples. The order of the classes corresponds to
                that in the attribute `classes_`
      :rtype: ndarray of shape (n_samples, n_classes)



.. py:class:: ExtraShapeletTreeClassifier(max_depth=None, n_shapelets=1, min_samples_split=2, min_shapelet_size=0, max_shapelet_size=1, metric='euclidean', metric_params=None, force_dim=None, random_state=None)


   Bases: :py:obj:`ShapeletTreeClassifier`

   An extra shapelet tree classifier.

   Extra shapelet trees are constructed by sampling a distance threshold
   uniformly in the range [min(dist), max(dist)].

   .. attribute:: tree_



      :type: Tree


