:orphan:

:py:mod:`wildboar.explain.counterfactual._proto`
================================================

.. py:module:: wildboar.explain.counterfactual._proto


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   wildboar.explain.counterfactual._proto.PrototypeCounterfactual
   wildboar.explain.counterfactual._proto.TargetEvaluator
   wildboar.explain.counterfactual._proto.PredictEvaluator
   wildboar.explain.counterfactual._proto.ProbabilityEvaluator
   wildboar.explain.counterfactual._proto.PrototypeSampler
   wildboar.explain.counterfactual._proto.UniformPrototypeSampler
   wildboar.explain.counterfactual._proto.KNearestPrototypeSampler
   wildboar.explain.counterfactual._proto.ShapeletPrototypeSampler
   wildboar.explain.counterfactual._proto.KNearestShapeletPrototypeSampler
   wildboar.explain.counterfactual._proto.MetricTransform
   wildboar.explain.counterfactual._proto.EuclideanTransform
   wildboar.explain.counterfactual._proto.DynamicTimeWarpTransform




.. py:class:: PrototypeCounterfactual(background_x, background_y, *, metric='euclidean', metric_params=None, max_iter=100, step_size=0.1, n_prototypes='auto', target='auto', method='sample', method_params=None, random_state=None)

   Bases: :py:obj:`wildboar.explain.counterfactual.base.BaseCounterfactual`

   Model agnostic approach for constructing counterfactual explanations

   .. attribute:: estimator_

      The estimator for which counterfactuals are computed

      :type: object

   .. attribute:: classes_

      The classes

      :type: ndarray

   .. attribute:: partitions_

      Dictionary of classes and PrototypeSampler

      :type: dict

   .. attribute:: target_

      The target evaluator

      :type: TargetEvaluator

   .. rubric:: References

   Samsten, Isak (2020).
       Model agnostic time series counterfactuals

   .. py:method:: fit(estimator)

      Fit the counterfactual to a given estimator

      :param estimator: An estimator for which counterfactual explanations are produced
      :type estimator: object

      :rtype: self


   .. py:method:: transform(x, y)

      Transform the i:th sample in x to a sample that would be labeled as the i:th label in y

      :param x: The samples to generate counterfactual explanations for
      :type x: array-like of shape (n_samples, n_timestep) or (n_samples, n_dimension, n_timestep)
      :param y: The desired label of the counterfactual sample
      :type y: array-like of shape (n_samples,)

      :returns: * **counterfactuals** (*ndarray of same shape as x*) -- The counterfactual for each sample. If success[i] == False, then
                  the value of counterfactuals[i] is undefined.
                * **success** (*ndarray of shape (n_samples,)*) -- Boolean vector indicating successful transformations.



.. py:class:: TargetEvaluator(estimator)

   Bases: :py:obj:`abc.ABC`

   Evaluate if a sample is a counterfactual

   .. py:method:: is_counterfactual(x, y)

      Return true if x is a counterfactual of label y

      :param x: The counterfactual sample
      :type x: ndarray of shape (n_samples, n_timestep) or (n_timestep,)
      :param y: The counterfactual label
      :type y: object

      :returns: **bool**
      :rtype: true if counterfactual



.. py:class:: PredictEvaluator(estimator)

   Bases: :py:obj:`TargetEvaluator`

   Evaluate if a counterfactual is predicted as y


.. py:class:: ProbabilityEvaluator(estimator, probability=0.5)

   Bases: :py:obj:`TargetEvaluator`

   Evaluate if the probability of a counterfactual is at least a given constant


.. py:class:: PrototypeSampler(x, y, n_prototypes, metric_transform, random_state)

   Bases: :py:obj:`abc.ABC`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: sample(o)
      :abstractmethod:

      Sample an example

      :param o: The current counterfactual sample
      :type o: ndarray of shape (n_timestep,)

      :returns: **prototype** -- A prototype of the counterfactual label
      :rtype: ndarray of shape (n_timestep,)


   .. py:method:: move(o, p)

      Move the current counterfactual toward the prototype

      :param o: The current counterfactual sample
      :type o: ndarray of shape (n_timestep,)
      :param p: The prototype of the counterfactual label
      :type p: ndarray of shape (n_timestep,)

      :returns: **new_counterfactual** -- The new counterfactual moved towards the prototype
      :rtype: ndarray of shape (n_timestep,)


   .. py:method:: sample_move(o)

      Sampla a prototype and move the counterfactual towards the prototype

      :param o: The current counterfactual sample
      :type o: ndarray of shape (n_timestep,)

      :returns: **new_counterfactual** -- The new counterfactual moved towards the prototype
      :rtype: ndarray of shape (n_timestep,)



.. py:class:: UniformPrototypeSampler(x, y, n_prototypes, metric_transform, random_state)

   Bases: :py:obj:`PrototypeSampler`

   Sample a prototype uniformly at random from the initial prototype sample

   .. py:method:: sample(_o)

      Sample an example

      :param o: The current counterfactual sample
      :type o: ndarray of shape (n_timestep,)

      :returns: **prototype** -- A prototype of the counterfactual label
      :rtype: ndarray of shape (n_timestep,)



.. py:class:: KNearestPrototypeSampler(x, y, n_prototypes, metric_transform, random_state)

   Bases: :py:obj:`PrototypeSampler`

   Sample a prototype among the samples closest to the current counterfactual

   .. py:method:: nearest_index(o)

      Return the index of the closest sample

      :param o: The current counterfactual sample
      :type o: ndarray of shape (n_timestep,)

      :returns: **int**
      :rtype: an index


   .. py:method:: sample(o)

      Sample an example

      :param o: The current counterfactual sample
      :type o: ndarray of shape (n_timestep,)

      :returns: **prototype** -- A prototype of the counterfactual label
      :rtype: ndarray of shape (n_timestep,)



.. py:class:: ShapeletPrototypeSampler(x, y, n_prototypes, metric_transform, random_state, min_shapelet_size=0, max_shapelet_size=1)

   Bases: :py:obj:`PrototypeSampler`

   Sample shapelet prototypes

   .. py:method:: sample_shapelet(p)

      Sample a shapelet from x

      :param p: The prototype sample
      :type p: ndarray of shape (n_timestep,)

      :returns: **shapelet** -- A shapelet
      :rtype: ndarray


   .. py:method:: sample(_o)

      Sample an example

      :param o: The current counterfactual sample
      :type o: ndarray of shape (n_timestep,)

      :returns: **prototype** -- A prototype of the counterfactual label
      :rtype: ndarray of shape (n_timestep,)


   .. py:method:: move(o, p)

      Move the best matching shapelet of the  counterfactual sample towards
      the shapelet prototype

      :param o: The counterfactual sample
      :type o: ndarray of shape (n_timestep,)
      :param p: The prototype shapelet
      :type p: ndarray

      :returns: **new_counterfactual** -- The new counterfactual moved towards the prototype
      :rtype: ndarray of shape (n_timestep,)



.. py:class:: KNearestShapeletPrototypeSampler(x, y, n_prototypes, metric_transform, random_state, min_shapelet_size=0, max_shapelet_size=1)

   Bases: :py:obj:`PrototypeSampler`

   Combines the KNearestPrototypeSample and the ShapeletPrototypeSampler
   such that prototype samples are sampled among the nearest neighbors of the
   counterfactual

   .. py:method:: sample(o)

      Sample an example

      :param o: The current counterfactual sample
      :type o: ndarray of shape (n_timestep,)

      :returns: **prototype** -- A prototype of the counterfactual label
      :rtype: ndarray of shape (n_timestep,)


   .. py:method:: move(o, p)

      Move the current counterfactual toward the prototype

      :param o: The current counterfactual sample
      :type o: ndarray of shape (n_timestep,)
      :param p: The prototype of the counterfactual label
      :type p: ndarray of shape (n_timestep,)

      :returns: **new_counterfactual** -- The new counterfactual moved towards the prototype
      :rtype: ndarray of shape (n_timestep,)



.. py:class:: MetricTransform(gamma)

   Bases: :py:obj:`abc.ABC`

   Move a time series towards a prototype

   .. py:method:: move(o, p)
      :abstractmethod:

      Move the sample o towards p

      :param o: An array
      :type o: ndarray of shape (n_timestep,)
      :param p: An array
      :type p: ndarray of shape (n_timestep,)

      :returns: **ndarray**
      :rtype: an array



.. py:class:: EuclideanTransform(gamma)

   Bases: :py:obj:`MetricTransform`

   Transform a sample by moving it closer in euclidean space

   .. py:method:: move(o, p)

      Move the sample o towards p

      :param o: An array
      :type o: ndarray of shape (n_timestep,)
      :param p: An array
      :type p: ndarray of shape (n_timestep,)

      :returns: **ndarray**
      :rtype: an array



.. py:class:: DynamicTimeWarpTransform(gamma, r=1.0)

   Bases: :py:obj:`MetricTransform`

   Transform a sample by moving it closer using the dtw alignment matrix

   .. py:method:: move(o, p)

      Move the sample o towards p

      :param o: An array
      :type o: ndarray of shape (n_timestep,)
      :param p: An array
      :type p: ndarray of shape (n_timestep,)

      :returns: **ndarray**
      :rtype: an array



