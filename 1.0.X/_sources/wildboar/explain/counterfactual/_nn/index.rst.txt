:orphan:

:py:mod:`wildboar.explain.counterfactual._nn`
=============================================

.. py:module:: wildboar.explain.counterfactual._nn


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   wildboar.explain.counterfactual._nn.KNeighborsCounterfactual




.. py:class:: KNeighborsCounterfactual(random_state=None)


   Bases: :py:obj:`wildboar.explain.counterfactual.base.BaseCounterfactual`

   Fit a counterfactual explainer to a k-nearest neighbors classifier

   .. attribute:: explainer_

      The explainer for each label

      :type: dict

   .. rubric:: References

   Karlsson, I., Rebane, J., Papapetrou, P., & Gionis, A. (2020).
       Locally and globally explainable time series tweaking.
       Knowledge and Information Systems, 62(5), 1671-1700.

   .. py:method:: fit(estimator)

      Fit the counterfactual to a given estimator

      :param estimator: An estimator for which counterfactual explanations are produced
      :type estimator: object

      :rtype: self


   .. py:method:: transform(x, y)

      Transform the i:th sample in x to a sample that would be labeled as the i:th label in y

      :param x: The samples to generate counterfactual explanations for
      :type x: array-like of shape (n_samples, n_timestep) or (n_samples, n_dimension, n_timestep)
      :param y: The desired label of the counterfactual sample
      :type y: array-like of shape (n_samples,)

      :returns: * **counterfactuals** (*ndarray of same shape as x*) -- The counterfactual for each sample. If success[i] == False, then
                  the value of counterfactuals[i] is undefined.
                * **success** (*ndarray of shape (n_samples,)*) -- Boolean vector indicating successful transformations.



