:py:mod:`wildboar.datasets.outlier`
===================================

.. py:module:: wildboar.datasets.outlier


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   wildboar.datasets.outlier.OutlierLabeler
   wildboar.datasets.outlier.KMeansLabeler
   wildboar.datasets.outlier.DensityLabeler
   wildboar.datasets.outlier.MajorityLabeler
   wildboar.datasets.outlier.MinorityLabeler
   wildboar.datasets.outlier.EmmottLabeler




.. py:class:: OutlierLabeler

   Base-class for outlier labelers

   .. py:method:: fit(x, y=None)
      :abstractmethod:

      Fit the outlier labeler to the give samples

      :param x: The time series samples
      :type x: array-like of shape (n_samples, n_timestep)
      :param y: The optional original labels
      :type y: array-like of shape (n_samples, ) optional


   .. py:method:: transform(x, y=None)
      :abstractmethod:

      Transform the labels of (a subset) of samples in x to inlier and outliers

      :param x: The time series samples
      :type x: array-like of shape (n_samples, n_timestep)
      :param y: The optional original labels
      :type y: array-like of shape (n_samples, ), optional

      :returns: * **x_new** (*array-like of shape (n_samples_new, n_timestep)*) -- The outlier and inlier samples
                * **y_new** (*array-like of shape (n_samples_new, )*) -- The labels


   .. py:method:: fit_transform(x, y=None)



.. py:class:: KMeansLabeler(*, n_clusters=None, n_outliers=None, random_state=None)

   Bases: :py:obj:`OutlierLabeler`

   KMeans labeler that assign an outlier label to the most deviating cluster

   .. attribute:: k_means_

      The estimator for assigning points to the outlier class

      :type: object

   .. attribute:: outlier_cluster_

      The cluster index that is considered as outlier

      :type: int

   .. warning:: The implementation does not yet work as expected.

   .. py:method:: fit(x, y=None)

      Fit the outlier labeler to the give samples

      :param x: The time series samples
      :type x: array-like of shape (n_samples, n_timestep)
      :param y: The optional original labels
      :type y: array-like of shape (n_samples, ) optional


   .. py:method:: fit_transform(x, y=None)


   .. py:method:: transform(x, y=None)

      Transform the labels of (a subset) of samples in x to inlier and outliers

      :param x: The time series samples
      :type x: array-like of shape (n_samples, n_timestep)
      :param y: The optional original labels
      :type y: array-like of shape (n_samples, ), optional

      :returns: * **x_new** (*array-like of shape (n_samples_new, n_timestep)*) -- The outlier and inlier samples
                * **y_new** (*array-like of shape (n_samples_new, )*) -- The labels



.. py:class:: DensityLabeler(*, estimator=None, estimator_params=None)

   Bases: :py:obj:`OutlierLabeler`

   Density based clustering labeler

   Labels samples as outliers if a density cluster algorithm fail to assign them to a cluster

   .. py:method:: fit(x, y=None)

      Fit the outlier labeler to the give samples

      :param x: The time series samples
      :type x: array-like of shape (n_samples, n_timestep)
      :param y: The optional original labels
      :type y: array-like of shape (n_samples, ) optional


   .. py:method:: fit_transform(x, y=None)


   .. py:method:: transform(x, y=None)

      Transform the labels of (a subset) of samples in x to inlier and outliers

      :param x: The time series samples
      :type x: array-like of shape (n_samples, n_timestep)
      :param y: The optional original labels
      :type y: array-like of shape (n_samples, ), optional

      :returns: * **x_new** (*array-like of shape (n_samples_new, n_timestep)*) -- The outlier and inlier samples
                * **y_new** (*array-like of shape (n_samples_new, )*) -- The labels



.. py:class:: MajorityLabeler(n_outliers=None, random_state=None)

   Bases: :py:obj:`OutlierLabeler`

   Labels the majority class as inliers

   .. attribute:: outlier_labels_

      The outlier labels

      :type: ndarray

   .. py:method:: fit(x, y=None)

      Fit the outlier labeler to the give samples

      :param x: The time series samples
      :type x: array-like of shape (n_samples, n_timestep)
      :param y: The optional original labels
      :type y: array-like of shape (n_samples, ) optional


   .. py:method:: transform(x, y=None)

      Transform the labels of (a subset) of samples in x to inlier and outliers

      :param x: The time series samples
      :type x: array-like of shape (n_samples, n_timestep)
      :param y: The optional original labels
      :type y: array-like of shape (n_samples, ), optional

      :returns: * **x_new** (*array-like of shape (n_samples_new, n_timestep)*) -- The outlier and inlier samples
                * **y_new** (*array-like of shape (n_samples_new, )*) -- The labels



.. py:class:: MinorityLabeler(n_outliers=None, random_state=None)

   Bases: :py:obj:`OutlierLabeler`

   Labels the minority class as the outlier

   .. attribute:: outlier_label_

      The label of the outlier class

      :type: object

   .. py:method:: fit(x, y=None)

      Fit the outlier labeler to the give samples

      :param x: The time series samples
      :type x: array-like of shape (n_samples, n_timestep)
      :param y: The optional original labels
      :type y: array-like of shape (n_samples, ) optional


   .. py:method:: transform(x, y=None)

      Transform the labels of (a subset) of samples in x to inlier and outliers

      :param x: The time series samples
      :type x: array-like of shape (n_samples, n_timestep)
      :param y: The optional original labels
      :type y: array-like of shape (n_samples, ), optional

      :returns: * **x_new** (*array-like of shape (n_samples_new, n_timestep)*) -- The outlier and inlier samples
                * **y_new** (*array-like of shape (n_samples_new, )*) -- The labels



.. py:class:: EmmottLabeler(n_outliers=None, *, confusion_estimator=None, difficulty_estimator=None, difficulty='simplest', scale=None, variation='tight', random_state=None)

   Bases: :py:obj:`OutlierLabeler`

   Create a synthetic outlier detection dataset from a labeled classification dataset
   using a method described by Emmott et.al. (2013).

   The Emmott labeler can reliably label both binary and multiclass datasets. For binary datasets
   a random label is selected as the outlier class. For multiclass datasets a set of classes with
   maximal confusion (as measured by ``confusion_estimator`` is selected as outlier label. For each
   outlier sample the ``difficulty_estimator`` assigns a difficulty score which is digitized into
   ranges and selected according to the ``difficulty`` parameters. Finally a sample of approximately
   ``n_outlier`` is selected either maximally dispersed or tight.

   .. attribute:: outlier_label_

      The class or collection of classes used as outliers

      :type: object

   .. attribute:: difficulty_estimator_

      The estimator used to assess the difficulty of outlier samples

      :type: object

   .. attribute:: confusion_estimator_

      The estimator used to asses the class confusion (only if n_classes > 2)

      :type: object

   .. attribute:: n_classes_

      The number of classes

      :type: int

   .. rubric:: Notes

   - For multiclass datasets the Emmott labeler require the package `networkx`
   - For dispersed outlier selection the Emmott labeler require the package `scikit-learn-extra`

   The difficulty parameters 'simplest' and 'hardest' are not described by Emmott et.al. (2013)

   .. warning::

      n_outliers
          The number of outliers returned is dependent on the difficulty setting and the available
          number of samples of the minority class. If the minority class does not contain sufficient
          number of samples of the desired difficulty, fewer than n_outliers may be returned.

   .. rubric:: References

   Emmott, A. F., Das, S., Dietterich, T., Fern, A., & Wong, W. K. (2013).
       Systematic construction of anomaly detection benchmarks from real data.
       In Proceedings of the ACM SIGKDD workshop on outlier detection and description (pp. 16-21).

   .. py:method:: fit(x, y=None)

      Fit the outlier labeler to the give samples

      :param x: The time series samples
      :type x: array-like of shape (n_samples, n_timestep)
      :param y: The optional original labels
      :type y: array-like of shape (n_samples, ) optional


   .. py:method:: fit_transform(x, y=None)


   .. py:method:: transform(x, y=None)

      Transform the labels of (a subset) of samples in x to inlier and outliers

      :param x: The time series samples
      :type x: array-like of shape (n_samples, n_timestep)
      :param y: The optional original labels
      :type y: array-like of shape (n_samples, ), optional

      :returns: * **x_new** (*array-like of shape (n_samples_new, n_timestep)*) -- The outlier and inlier samples
                * **y_new** (*array-like of shape (n_samples_new, )*) -- The labels



