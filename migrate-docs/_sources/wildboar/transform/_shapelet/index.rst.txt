:orphan:

:py:mod:`wildboar.transform._shapelet`
======================================

.. py:module:: wildboar.transform._shapelet


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   wildboar.transform._shapelet.RandomShapeletTransform
   wildboar.transform._shapelet.ShapeletMixin




.. py:class:: RandomShapeletTransform(n_shapelets=1000, *, metric='euclidean', metric_params=None, min_shapelet_size=0, max_shapelet_size=1.0, n_jobs=None, random_state=None)

   Bases: :py:obj:`ShapeletMixin`, :py:obj:`wildboar.transform.base.BaseFeatureEngineerTransform`

   Transform a time series to the distances to a selection of random shapelets.

   .. attribute:: embedding_

      The underlying embedding object.

      :type: Embedding

   .. rubric:: Examples

   Transform each time series to the minimum DTW distance to each shapelet

   >>> from wildboar.dataset import load_gunpoint()
   >>> from wildboar.transform import RandomShapeletTransform
   >>> t = RandomShapeletTransform(metric="dtw")
   >>> t.fit_transform(X)

   Transform each time series to the either the minimum DTW distance, with r randomly
   set set between 0 and 1 or ERP distance with g between 0 and 1.

   >>> t = RandomShapeletTransform(
   ...     metric=[
   ...         ("dtw", dict(min_r=0.0, max_r=1.0)),
   ...         ("erp", dict(min_g=0.0, max_g=1.0)),
   ...     ]
   ... )
   >>> t.fit_transform(X)

   .. rubric:: References

   Wistuba, Martin, Josif Grabocka, and Lars Schmidt-Thieme.
       Ultra-fast shapelets for time series classification. arXiv preprint
       arXiv:1503.05018 (2015).

   :param n_shapelets: The number of shapelets in the resulting transform
   :type n_shapelets: int, optional
   :param metric:
                  - If str, the distance metric used to identify the best shapelet.

                  - If list, multiple metrics specified as a list of tuples, where the first
                    element of the tuple is a metric name and the second element a dictionary
                    with a parameter grid specification. A parameter grid specification is a
                    dict with two mandatory and one optional key-value pairs defining the
                    lower and upper bound on the values and number of values in the grid. For
                    example, to specifiy a grid over the argument 'r' with 10 values in the
                    range 0 to 1, we would give the following specification: ``dict(min_r=0,
                    max_r=1, num_r=10)``.

                  Read more about the metrics and their parameters in the
                  :ref:`User guide <list_of_subsequence_metrics>`.
   :type metric: str or list, optional
   :param metric_params: Parameters for the distance measure. Ignored unless metric is a string.

                         Read more about the parameters in the :ref:`User guide
                         <list_of_subsequence_metrics>`.
   :type metric_params: dict, optional
   :param min_shapelet_size: Minimum shapelet size.
   :type min_shapelet_size: float, optional
   :param max_shapelet_size: Maximum shapelet size.
   :type max_shapelet_size: float, optional
   :param n_jobs: The number of jobs to run in parallel. None means 1 and -1 means using all
                  processors.
   :type n_jobs: int, optional
   :param random_state:
                        - If `int`, `random_state` is the seed used by the random number generator
                        - If `RandomState` instance, `random_state` is the random number generator
                        - If `None`, the random number generator is the `RandomState` instance used
                          by `np.random`.
   :type random_state: int or RandomState


.. py:class:: ShapeletMixin


