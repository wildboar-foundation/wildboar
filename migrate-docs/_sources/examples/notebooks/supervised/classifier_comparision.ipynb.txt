{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Comparing classifiers\n",
    "\n",
    "In this example we compare the predictive performance of several time series classifiers over multiple datasets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import cross_validate\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "\n",
    "from wildboar.datasets import list_datasets, load_dataset\n",
    "from wildboar.ensemble import ExtraShapeletTreesClassifier, ShapeletForestClassifier\n",
    "from wildboar.linear_model import RocketClassifier\n",
    "\n",
    "random_state = 1234"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, we define a dictionary of classifiers that will be used while comparing the predictive performance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "classifiers = {\n",
    "    \"Nearest neighbors\": KNeighborsClassifier(\n",
    "        n_neighbors=1,\n",
    "        metric=\"euclidean\",\n",
    "    ),\n",
    "    \"Shapelet forest\": ShapeletForestClassifier(\n",
    "        n_shapelets=10,\n",
    "        metric=\"scaled_euclidean\",\n",
    "        random_state=random_state,\n",
    "        n_jobs=-1,\n",
    "    ),\n",
    "    \"Extra shapelet trees\": ExtraShapeletTreesClassifier(\n",
    "        metric=\"scaled_euclidean\",\n",
    "        n_jobs=-1,\n",
    "        random_state=random_state,\n",
    "    ),\n",
    "    \"ROCKET\": RocketClassifier(random_state=random_state, n_jobs=-1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we define a dataset repository (in this example we use a subset of the UCR time series datasets) and list all datasets in the repository."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "repository = \"wildboar/ucr-tiny\"\n",
    "datasets = list_datasets(repository)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we define a dataframe in which we collect the results. Each row of the dataframe is a dataset, each column a time series classifier and each cell contains the predictive performance of the classifier on the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame(columns=classifiers.keys(), index=datasets, dtype=float)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we compute the area under the ROC using cross-validation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "for dataset in datasets:\n",
    "    x, y = load_dataset(dataset, repository=repository)\n",
    "    for clf_name, clf in classifiers.items():\n",
    "        score = cross_validate(clf, x, y, scoring=\"roc_auc_ovo\", n_jobs=1)\n",
    "        df.loc[dataset, clf_name] = np.mean(score[\"test_score\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Nearest neighbors</th>\n",
       "      <th>Shapelet forest</th>\n",
       "      <th>Extra shapelet trees</th>\n",
       "      <th>ROCKET</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Beef</th>\n",
       "      <td>0.762500</td>\n",
       "      <td>0.882083</td>\n",
       "      <td>0.865278</td>\n",
       "      <td>0.934167</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Coffee</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GunPoint</th>\n",
       "      <td>0.945000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SyntheticControl</th>\n",
       "      <td>0.949000</td>\n",
       "      <td>0.999667</td>\n",
       "      <td>0.999800</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TwoLeadECG</th>\n",
       "      <td>0.996559</td>\n",
       "      <td>0.999970</td>\n",
       "      <td>0.999985</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Nearest neighbors  Shapelet forest  Extra shapelet trees  \\\n",
       "Beef                       0.762500         0.882083              0.865278   \n",
       "Coffee                     1.000000         1.000000              1.000000   \n",
       "GunPoint                   0.945000         1.000000              1.000000   \n",
       "SyntheticControl           0.949000         0.999667              0.999800   \n",
       "TwoLeadECG                 0.996559         0.999970              0.999985   \n",
       "\n",
       "                    ROCKET  \n",
       "Beef              0.934167  \n",
       "Coffee            1.000000  \n",
       "GunPoint          1.000000  \n",
       "SyntheticControl  1.000000  \n",
       "TwoLeadECG        1.000000  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.9.7 ('wb2')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "52652bfa9fd4561eadaaee81a668145a0f20ccab101fde0ad61faafa07b87b33"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
